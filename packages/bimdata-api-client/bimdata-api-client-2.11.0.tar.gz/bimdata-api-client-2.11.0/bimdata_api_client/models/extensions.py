# coding: utf-8

"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Extensions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'topic_type': 'list[TopicType]',
        'topic_status': 'list[TopicStatus]',
        'topic_label': 'list[Label]',
        'priority': 'list[Priority]',
        'user_id_type': 'list[str]',
        'stage': 'list[Stage]'
    }

    attribute_map = {
        'topic_type': 'topic_type',
        'topic_status': 'topic_status',
        'topic_label': 'topic_label',
        'priority': 'priority',
        'user_id_type': 'user_id_type',
        'stage': 'stage'
    }

    def __init__(self, topic_type=None, topic_status=None, topic_label=None, priority=None, user_id_type=None, stage=None):  # noqa: E501
        """Extensions - a model defined in OpenAPI"""  # noqa: E501

        self._topic_type = None
        self._topic_status = None
        self._topic_label = None
        self._priority = None
        self._user_id_type = None
        self._stage = None
        self.discriminator = None

        self.topic_type = topic_type
        self.topic_status = topic_status
        self.topic_label = topic_label
        self.priority = priority
        if user_id_type is not None:
            self.user_id_type = user_id_type
        self.stage = stage

    @property
    def topic_type(self):
        """Gets the topic_type of this Extensions.  # noqa: E501


        :return: The topic_type of this Extensions.  # noqa: E501
        :rtype: list[TopicType]
        """
        return self._topic_type

    @topic_type.setter
    def topic_type(self, topic_type):
        """Sets the topic_type of this Extensions.


        :param topic_type: The topic_type of this Extensions.  # noqa: E501
        :type: list[TopicType]
        """
        if topic_type is None:
            raise ValueError("Invalid value for `topic_type`, must not be `None`")  # noqa: E501

        self._topic_type = topic_type

    @property
    def topic_status(self):
        """Gets the topic_status of this Extensions.  # noqa: E501


        :return: The topic_status of this Extensions.  # noqa: E501
        :rtype: list[TopicStatus]
        """
        return self._topic_status

    @topic_status.setter
    def topic_status(self, topic_status):
        """Sets the topic_status of this Extensions.


        :param topic_status: The topic_status of this Extensions.  # noqa: E501
        :type: list[TopicStatus]
        """
        if topic_status is None:
            raise ValueError("Invalid value for `topic_status`, must not be `None`")  # noqa: E501

        self._topic_status = topic_status

    @property
    def topic_label(self):
        """Gets the topic_label of this Extensions.  # noqa: E501


        :return: The topic_label of this Extensions.  # noqa: E501
        :rtype: list[Label]
        """
        return self._topic_label

    @topic_label.setter
    def topic_label(self, topic_label):
        """Sets the topic_label of this Extensions.


        :param topic_label: The topic_label of this Extensions.  # noqa: E501
        :type: list[Label]
        """
        if topic_label is None:
            raise ValueError("Invalid value for `topic_label`, must not be `None`")  # noqa: E501

        self._topic_label = topic_label

    @property
    def priority(self):
        """Gets the priority of this Extensions.  # noqa: E501


        :return: The priority of this Extensions.  # noqa: E501
        :rtype: list[Priority]
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Extensions.


        :param priority: The priority of this Extensions.  # noqa: E501
        :type: list[Priority]
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def user_id_type(self):
        """Gets the user_id_type of this Extensions.  # noqa: E501


        :return: The user_id_type of this Extensions.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_id_type

    @user_id_type.setter
    def user_id_type(self, user_id_type):
        """Sets the user_id_type of this Extensions.


        :param user_id_type: The user_id_type of this Extensions.  # noqa: E501
        :type: list[str]
        """

        self._user_id_type = user_id_type

    @property
    def stage(self):
        """Gets the stage of this Extensions.  # noqa: E501


        :return: The stage of this Extensions.  # noqa: E501
        :rtype: list[Stage]
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Extensions.


        :param stage: The stage of this Extensions.  # noqa: E501
        :type: list[Stage]
        """
        if stage is None:
            raise ValueError("Invalid value for `stage`, must not be `None`")  # noqa: E501

        self._stage = stage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Extensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
