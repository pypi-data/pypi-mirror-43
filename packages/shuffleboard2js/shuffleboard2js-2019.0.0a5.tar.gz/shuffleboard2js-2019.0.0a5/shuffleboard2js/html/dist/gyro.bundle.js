!function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=417)}({158:function(t,e,r){t.exports=r.p+"assets/media/gyro.png"},417:function(t,e,r){t.exports=r(418)},418:function(t,e,r){"use strict";r.r(e);r(419);var n=r(158),a=r.n(n);dashboard.registerWidget("gyro",{label:"Gyro",category:"Sensors",acceptedTypes:["Gyro"],image:a.a,minX:6,minY:6})},419:function(t,e,r){r(6).tag2("gyro",'<svg ref="svg"></svg>',"","",function(t){this.line=null,this.text=null,this.angle=0;for(var e=300,r=300,n=e/2,a=e/3,i=[],o=0;o<360;o+=5)i.push(o);this.on("update",()=>{let t=this.root.getBoundingClientRect();e=t.width,r=t.height,this.angle=this.opts.table.Value||0,this.line.attr("x1",n).attr("x2",n+a*Math.cos((this.angle-90)*Math.PI/180)).attr("y1",n).attr("y2",n+a*Math.sin((this.angle-90)*Math.PI/180)).attr("stroke","red").attr("stroke-width",3),this.text.attr("x",n).attr("y",n+7).attr("fill","red").attr("font-size",20).attr("text-anchor","middle").text(this.angle.toFixed(0))}),this.on("resize",()=>{}),this.trigger("resize"),this.on("mount",()=>{svg=d3.select(this.refs.svg).attr("width",e).attr("height",r).attr("class","svg-container");svg.append("circle").attr("cx",n).attr("cy",n).attr("r",a).attr("fill","white").attr("stroke","blue").attr("stroke-width",2),svg.selectAll("line").data(i).enter().append("line").attr("x1",function(t){return t%90==0?n:n+(a-10)*Math.cos((t-90)*Math.PI/180)}).attr("x2",function(t){return n+a*Math.cos((t-90)*Math.PI/180)}).attr("y1",function(t){return t%90==0?n:n+(a-10)*Math.sin((t-90)*Math.PI/180)}).attr("y2",function(t){return n+a*Math.sin((t-90)*Math.PI/180)}).attr("stroke","black").attr("stroke-width",function(t){return t%15==0?2:1}),svg.selectAll("text").data(i).enter().append("text").attr("x",function(t){return n+(a+20)*Math.cos((t-90)*Math.PI/180)}).attr("y",function(t){return n+(a+17)*Math.sin((t-90)*Math.PI/180)}).attr("fill","black").attr("font-size",15).attr("text-anchor","middle").text(function(t){return t%45==0?t:""});this.line=svg.append("line").attr("x1",n).attr("x2",n+a*Math.cos((this.angle-90)*Math.PI/180)).attr("y1",n).attr("y2",n+a*Math.sin((this.angle-90)*Math.PI/180)).attr("stroke","red").attr("stroke-width",3);svg.append("circle").attr("cx",n).attr("cy",n).attr("r",25).attr("fill","White").attr("");this.text=svg.append("text").attr("x",n).attr("y",n+7).attr("fill","red").attr("font-size",20).attr("text-anchor","middle").text(this.angle.toFixed(0))})})},6:function(t,e){t.exports=riot}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,