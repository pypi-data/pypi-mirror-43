heat_template_version: rocky

description: >
  Openstack containerized TripleO UI service

parameters:
  DockerTripleoUIImage:
    description: image
    type: string
  DockerTripleoUIConfigImage:
    description: The container image to use for the tripleo-ui config_volume
    type: string
  TripleoUILoggingSource:
    type: json
    default:
      tag: openstack.tripleo.ui
      path: /var/log/containers/httpd/tripleo-ui/ui.log
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean
  NovaCorsAllowedOrigin:
    type: string
    default: ''
    description: Indicate whether this resource may be shared with the domain received in the request
                 "origin" header.
conditions:
  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}
  cors_allowed_origin_unset: {equals : [{get_param: NovaCorsAllowedOrigin}, '']}

resources:

  ContainersCommon:
    type: ../../../docker/services/containers-common.yaml

  ApacheServiceBase:
    type: ../../../puppet/services/apache.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}
      EnableInternalTLS: {get_param: EnableInternalTLS}

outputs:
  role_data:
    description: Role data for the TripleO UI role.
    value:
      service_name: tripleo_ui
      config_settings:
        map_merge:
          - get_attr: [ApacheServiceBase, role_data, config_settings]
          -
            if:
            - cors_allowed_origin_unset
            - {}
            - nova::cors::allowed_origin: {get_param: NovaCorsAllowedOrigin}
          - tripleo::ui::endpoint_proxy_zaqar: {get_param: [EndpointMap, ZaqarWebSocketInternal, uri_no_suffix]}
            tripleo::ui::endpoint_proxy_keystone: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}
            tripleo::ui::endpoint_proxy_heat: {get_param: [EndpointMap, HeatInternal, uri_no_suffix]}
            tripleo::ui::endpoint_proxy_ironic: {get_param: [EndpointMap, IronicInternal, uri_no_suffix]}
            tripleo::ui::endpoint_proxy_ironic_inspector: {get_param: [EndpointMap, IronicInspectorInternal, uri_no_suffix]}
            tripleo::ui::endpoint_proxy_mistral: {get_param: [EndpointMap, MistralInternal, uri_no_suffix]}
            tripleo::ui::endpoint_proxy_nova: {get_param: [EndpointMap, NovaInternal, uri_no_suffix]}
            tripleo::ui::endpoint_proxy_swift: {get_param: [EndpointMap, SwiftInternal, uri_no_suffix]}
            tripleo::ui::endpoint_config_zaqar: {get_param: [EndpointMap, ZaqarWebSocketUIConfig, uri]}
            tripleo::ui::endpoint_config_keystone: {get_param: [EndpointMap, KeystoneUIConfig, uri]}
            tripleo::ui::endpoint_config_heat: {get_param: [EndpointMap, HeatUIConfig, uri]}
            tripleo::ui::endpoint_config_ironic: {get_param: [EndpointMap, IronicUIConfig, uri]}
            tripleo::ui::endpoint_config_ironic_inspector: {get_param: [EndpointMap, IronicInspectorUIConfig, uri]}
            tripleo::ui::endpoint_config_mistral: {get_param: [EndpointMap, MistralUIConfig, uri]}
            tripleo::ui::endpoint_config_nova: {get_param: [EndpointMap, NovaUIConfig, uri]}
            tripleo::ui::endpoint_config_swift: {get_param: [EndpointMap, SwiftUIConfig, uri]}
            nova::cors::max_age: 3600
            nova::cors::allow_methods: 'GET,POST,PUT,DELETE,OPTIONS,PATCH'
            nova::cors::allow_headers: 'Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma,X-Auth-Token'
            nova::cors::expose_headers: 'Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma'
            tripleo::ui::bind_host:
              str_replace:
                template:
                  "%{hiera('$NETWORK')}"
                params:
                  $NETWORK: {get_param: [ServiceNetMap, TripleoUINetwork]}
          - apache::default_vhost: false
      service_config_settings:
        fluentd:
          tripleo_fluentd_groups_tripleo_ui:
            - tripleo
          tripleo_fluentd_sources_tripleo_ui:
            - {get_param: TripleoUILoggingSource}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: tripleo-ui
        step_config: include ::tripleo::ui
        config_image: {get_param: DockerTripleoUIConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/tripleo_ui.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files:
            - source: "/var/lib/kolla/config_files/src/etc/httpd/conf.d"
              dest: "/etc/httpd/conf.d"
              merge: false
              preserve_properties: true
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
      docker_config:
        step_4:
          tripleo_ui:
            image: {get_param: DockerTripleoUIImage}
            net: host
            privileged: false
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/tripleo_ui.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/tripleo-ui/:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/httpd/tripleo-ui:/var/log/httpd
                  -
                    if:
                      - internal_tls_enabled
                      - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                      - ''
                  -
                    if:
                      - internal_tls_enabled
                      - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                      - ''
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
      - name: create persistent logs directory
        file:
          path: "{{ item }}"
          state: directory
        with_items:
          - /var/log/containers/httpd/tripleo-ui
      upgrade_tasks:
        - when: step|int == 2
          block:
            - name: Remove openstack-tripleo-ui package if operator requests it
              package: name=openstack-tripleo-ui state=removed
              ignore_errors: True
              when: {get_param: UpgradeRemoveUnusedPackages}
      post_upgrade_tasks:
        - when: step|int == 1
          import_role:
            name: tripleo-docker-rm
          vars:
            containers_to_rm:
              - tripleo_ui
      metadata_settings:
        get_attr: [ApacheServiceBase, role_data, metadata_settings]
