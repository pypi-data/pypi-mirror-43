---
c_PigeonIMU_Create2:
  internal: true
  code: |
    self.create_called = True
    self._yaw_key = 'pigeon_srx_%d' % (talonDeviceID,)
    self._yaw_offset = 0
    self._fused_heading_offset = 0
c_PigeonIMU_Create1:
  internal: true
  code: |
    self.create_called = True
    self._yaw_key = 'pigeon_device_%d' % (deviceNumber,)
    self._yaw_offset = 0
    self._fused_heading_offset = 0
c_PigeonIMU_Destroy:
  ignore: true
c_PigeonIMU_DestroyAll:
  ignore: true
c_PigeonIMU_GetDescription:
  ignore: true # TODO
c_PigeonIMU_ConfigSetParameter:
  doc: |
    Sets a parameter. Generally this is not used.

    This can be utilized in
    - Using new features without updating API installation.
    - Errata workarounds to circumvent API implementation.
    - Allows for rapid testing / unit testing of firmware.
    
    :param param:
        Parameter enumeration.
    :param value:
        Value of parameter.
    :param subValue:
        Subvalue for parameter. Maximum value of 255.
    :param ordinal:
        Ordinal of parameter.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_ConfigGetParameter:
  doc: |
    Gets a parameter. Generally this is not used.

    This can be utilized in

    - Using new features without updating API installation.
    - Errata workarounds to circumvent API implementation.
    - Allows for rapid testing / unit testing of firmware.
    
    :param param:
        Parameter enumeration.
    :param ordinal:
        Ordinal of parameter.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Value of parameter.
c_PigeonIMU_ConfigSetCustomParam:
  doc: |
    Sets the value of a custom parameter. This is for arbitrary use.

    Sometimes it is necessary to save calibration/declination/offset
    information in the device. Particularly if the
    device is part of a subsystem that can be replaced.
    
    :param newValue:
        Value for custom parameter.
    :param paramIndex:
        Index of custom parameter [0-1].
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_ConfigGetCustomParam:
  doc: |
    Gets the value of a custom parameter. This is for arbitrary use.

    Sometimes it is necessary to save calibration/declination/offset
    information in the device. Particularly if the
    device is part of a subsystem that can be replaced.

    :param paramIndex:
        Index of custom parameter [0-1].
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Value of the custom param.
c_PigeonIMU_SetYaw:
  doc: |
    Sets the Yaw register to the specified value.

    :param angleDeg: Degree of Yaw [+/- 23040 degrees]
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
  code: |
    self._yaw_offset = angleDeg
c_PigeonIMU_AddYaw:
  doc: |
    Atomically add to the Yaw register.

    :param angleDeg: Degrees to add to the Yaw register.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
  code: |
    self._yaw_offset += angleDeg
c_PigeonIMU_SetYawToCompass:
  doc: |
    Sets the Yaw register to match the current compass value.

    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_SetFusedHeading:
  doc: |
    Sets the Fused Heading to the specified value.

    :param angleDeg: Degree of heading [+/- 23040 degrees]
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
  code: |
    self._fused_heading_offset = angleDeg
c_PigeonIMU_AddFusedHeading:
  doc: |
    Atomically add to the Fused Heading register.

    :param angleDeg: Degrees to add to the Fused Heading register.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
  code: |
    self._fused_heading_offset += angleDeg
c_PigeonIMU_SetFusedHeadingToCompass:
  doc: |
    Sets the Fused Heading register to match the current compass value.
    
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_SetAccumZAngle:
  doc: |
    Sets the AccumZAngle.
    
    :param angleDeg: Degrees to set AccumZAngle to.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_SetTemperatureCompensationDisable:
  doc: |
    Disable/Enable Temp compensation. Pigeon has this on/False at boot.

    :param bTempCompDisable: Set to "False" to enable temperature compensation.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
  code: pass
c_PigeonIMU_SetCompassDeclination:
  doc: |
    Set the declination for compass. Declination is the difference between
    Earth Magnetic north, and the geographic "True North".

    :param angleDegOffset:  Degrees to set Compass Declination to.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_SetCompassAngle:
  doc: |
    Sets the compass angle. Although compass is absolute [0,360) degrees, the
    continuous compass register holds the wrap-arounds.

    :param angleDeg:
        Degrees to set continuous compass angle to.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_EnterCalibrationMode:
  doc: |
    Enters the Calbration mode.  See the Pigeon IMU documentation for More
    information on Calibration.

    :param calMode: Calibration to execute
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for
        config success and report an error if it times out.
        If zero, no blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_GetGeneralStatus:
  internal: true
  code: |
    retval = (2, 0, 0, 0, 0.0, 0, 0, 0, 0)
c_PigeonIMU_GetLastError:
  doc: |
    Call GetLastError() generated by this object.

    Not all functions return an error code but can
    potentially report errors.

    This function can be used to retrieve those error codes.
    
    :returns: The last ErrorCode generated.
c_PigeonIMU_Get6dQuaternion:
  doc: |
    Get 6d Quaternion data.

    :param wxyz: [w, x, y, z]
    :returns: The last ErrorCode generated.
c_PigeonIMU_GetYawPitchRoll:
  doc: |
    Get Yaw, Pitch, and Roll data.

    :returns: [yaw, pitch, and roll]
  code: |
    yaw = self._yaw_offset + hal_data["robot"].get(self._yaw_key, 0)
    retval = (yaw, 0, 0)
c_PigeonIMU_GetAccumGyro:
  doc: |
    Get AccumGyro data.
    AccumGyro is the integrated gyro value on each axis.

    :returns: [x, y, z]
  code: |
    z = hal_data["robot"].get(self._yaw_key, 0)
    retval = (0, 0, z)
c_PigeonIMU_GetAbsoluteCompassHeading:
  doc: |
    Get the absolute compass heading.

    :returns: compass heading [0,360) degrees.
c_PigeonIMU_GetCompassHeading:
  doc: |
    Get the continuous compass heading.

    :returns:
        continuous compass heading [-23040, 23040) degrees.
        Use SetCompassHeading to modify the wrap-around portion.
c_PigeonIMU_GetCompassFieldStrength:
  doc: |
    Gets the compass' measured magnetic field strength.
    
    :returns: field strength in Microteslas (uT).
c_PigeonIMU_GetTemp:
  doc: |
    Gets the temperature of the pigeon.

    :returns: Temperature in ('C)
c_PigeonIMU_GetState:
  doc: |
    Gets the current Pigeon state

    :returns: PigeonState enum
c_PigeonIMU_GetUpTime:
  doc: |
    Gets the current Pigeon uptime.
    
    :returns: How long has Pigeon been running in whole seconds. Value caps at 255.
c_PigeonIMU_GetRawMagnetometer:
  doc: |
    Get Raw Magnetometer data.

    :param rm_xyz: Array to fill with x[0], y[1], and z[2] data.
                   Number is equal to 0.6 microTeslas per unit.

    :returns: The last ErrorCode generated.
c_PigeonIMU_GetBiasedMagnetometer:
  doc: |
    Get Biased Magnetometer data.

    :param bm_xyz: Array to fill with x[0], y[1], and z[2] data.
                   Number is equal to 0.6 microTeslas per unit.

    :returns: The last ErrorCode generated.
c_PigeonIMU_GetBiasedAccelerometer:
  doc: |
    Get Biased Accelerometer data.

    :param ba_xyz: Array to fill with x[0], y[1], and z[2] data.
                   These are in fixed point notation Q2.14.  e.g. 16384 = 1G

    :returns: The last ErrorCode generated.
c_PigeonIMU_GetRawGyro:
  doc: |
    Get Raw Gyro data.

    :param xyz_dps: Array to fill with x[0], y[1], and z[2] data in degrees per second.

    :returns: The last ErrorCode generated.
c_PigeonIMU_GetAccelerometerAngles:
  doc: |
    Get Accelerometer tilt angles.
    
    :param tiltAngles: Array to fill with x[0], y[1], and z[2] angles in degrees.

    :returns: The last ErrorCode generated.
c_PigeonIMU_GetFusedHeading2:
  internal: true
  code: |
    yaw = self._fused_heading_offset + hal_data["robot"].get(self._yaw_key, 0)
    retval = (0, 1, float(yaw), 0)
c_PigeonIMU_GetFusedHeading1:
  internal: true
c_PigeonIMU_GetResetCount:
c_PigeonIMU_GetResetFlags:
c_PigeonIMU_GetFirmwareVersion:
  doc: |
    Gets the firmware version of the device.

    :returns:
        param holds the firmware version of the device. Device must be powered
        cycled at least once.
c_PigeonIMU_HasResetOccurred:
  doc: |
    :returns: true iff a reset has occurred since last call.
c_PigeonIMU_SetLastError:
c_PigeonIMU_GetFaults:
  internal: true
c_PigeonIMU_GetStickyFaults:
  internal: true
c_PigeonIMU_ClearStickyFaults:
  doc: |
    Clears the Sticky Faults
    
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_SetStatusFramePeriod:
  doc: |
    Sets the period of the given status frame.
    
    :param statusFrame:
        Frame whose period is to be changed.
    :param periodMs:
        Period in ms for the given frame.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_PigeonIMU_GetStatusFramePeriod:
  doc: |
    Gets the period of the given status frame.

    :param frame:
        Frame to get the period of.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Period of the given status frame.
c_PigeonIMU_SetControlFramePeriod:
  doc: |
    Sets the period of the given control frame.
    
    :param frame:
        Frame whose period is to be changed.
    :param periodMs:
        Period in ms for the given frame.
    :returns: Error Code generated by function. 0 indicates no error.
