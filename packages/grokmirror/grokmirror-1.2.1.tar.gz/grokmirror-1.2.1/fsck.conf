# You can have multiple sections, just name them appropriately
[kernel.org]
# Where is the manifest containing the list of repositories?
manifest = /var/lib/git/mirror/manifest.js.gz
#
# Where are the repositories kept?
#toplevel = /var/lib/git/mirror
toplevel = /var/lib/git/mirror
#
# Where do we put the logs?
#log = /var/log/mirror/kernelorg-fsck.log
log = /var/log/mirror/kernelorg-fsck.log
#
# Log level can be "info" or "debug"
#loglevel = info
loglevel = info
#
# Make sure there is only one instance of grok-fsck running by
# trying to exclusive-lock this file before we do anything.
lock = /var/lock/mirror/kernelorg-fsck.lock
#
# Where to keep the status file
#statusfile = /var/lib/mirror/kernelorg-fsck.js
statusfile = /var/lib/mirror/kernelorg-fsck.js
#
# How often should we check each repository, in days.
# Any newly added repository will have the first check within a random
# period of 0 and $frequency, and then every $frequency after that,
# to assure that not all repositories are checked on the same day.
# Don't set to less than 7 unless you only mirror a few repositories
# (or really like to thrash your disks).
#frequency = 30
frequency = 30
#
# Some errors are relatively benign and can be safely ignored. Add matching
# substrings to this field to ignore them.
ignore_errors = notice: HEAD points to an unborn branch
                notice: No default references
                contains zero-padded file modes
                warning: disabling bitmap writing, as some objects are not being packed
                ignoring extra bitmap file
#
# If the fsck process finds errors that match any of these strings during its run,
# it will ask grok-pull to reclone this repository when it runs next. Only useful
# for minion mirrors, not for mirror masters.
reclone_on_errors = fatal: bad tree object
                    fatal: Failed to traverse parents
                    missing commit
                    missing blob
                    missing tree
                    broken link
#
# Should we repack the repositories? Hint: you almost always want this on.
repack = yes
#
# We set proper flags for repacking depending if the repo is using alternates
# or not, and whether this is a full repack or not. We will also always
# build bitmaps (when it makes sense), to make cloning faster.
# You can add other flags (e.g. --threads and --window-memory) via
# the following parameter:
extra_repack_flags =
#
# These flags are added *in addition* to extra_repack_flags
extra_repack_flags_full = --window=250 --depth=50
#
# Run git-prune to remove obsolete old objects if no other repositories are
# using the repo in their objects/info/alternates. If other repositories
# are relying on this repo via alternates, it will not be pruned to avoid
# potential corruption.
prune = yes
#
# Grokmirror is extremely careful about not pruning the repositories that are
# used by others via git alternates. However, it cannot prevent some other git
# process (not grokmirror-managed) from inadvertently running "git prune/gc". For
# example, this may happen if an admin mistypes a command in the wrong directory.
# Setting precious=yes will add extensions.preciousObjects=true to the git
# configuration file in such repositories, which will help prevent repository
# corruption between grok-fsck runs.
# When set to "yes", grokmirror will temporarily turn this feature off when running
# scheduled repacks in order to be able to delete redundant packs and loose objects
# that have already been packed. This is usually a safe operation when done by
# grok-fsck itself. However, if you set this to "always", grokmirror will leave this
# enabled even during grok-fsck runs, for maximum paranoia. Be warned, that this will
# result in ever-growing git repositories, so it only makes sense in very rare
# situations, such as for backup purposes.
precious = yes
