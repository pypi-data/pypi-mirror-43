# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_motion_3000')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_motion_3000')
    _motion_3000 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_motion_3000', [dirname(__file__)])
        except ImportError:
            import _motion_3000
            return _motion_3000
        try:
            _mod = imp.load_module('_motion_3000', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _motion_3000 = swig_import_helper()
    del swig_import_helper
else:
    import _motion_3000
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _motion_3000.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _motion_3000.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _motion_3000.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _motion_3000.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _motion_3000.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _motion_3000.SwigPyIterator_equal(self, x)

    def copy(self):
        return _motion_3000.SwigPyIterator_copy(self)

    def next(self):
        return _motion_3000.SwigPyIterator_next(self)

    def __next__(self):
        return _motion_3000.SwigPyIterator___next__(self)

    def previous(self):
        return _motion_3000.SwigPyIterator_previous(self)

    def advance(self, n):
        return _motion_3000.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _motion_3000.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _motion_3000.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _motion_3000.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _motion_3000.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _motion_3000.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _motion_3000.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _motion_3000.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _motion_3000.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _motion_3000.vectori___nonzero__(self)

    def __bool__(self):
        return _motion_3000.vectori___bool__(self)

    def __len__(self):
        return _motion_3000.vectori___len__(self)

    def __getslice__(self, i, j):
        return _motion_3000.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _motion_3000.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _motion_3000.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _motion_3000.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _motion_3000.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _motion_3000.vectori___setitem__(self, *args)

    def pop(self):
        return _motion_3000.vectori_pop(self)

    def append(self, x):
        return _motion_3000.vectori_append(self, x)

    def empty(self):
        return _motion_3000.vectori_empty(self)

    def size(self):
        return _motion_3000.vectori_size(self)

    def swap(self, v):
        return _motion_3000.vectori_swap(self, v)

    def begin(self):
        return _motion_3000.vectori_begin(self)

    def end(self):
        return _motion_3000.vectori_end(self)

    def rbegin(self):
        return _motion_3000.vectori_rbegin(self)

    def rend(self):
        return _motion_3000.vectori_rend(self)

    def clear(self):
        return _motion_3000.vectori_clear(self)

    def get_allocator(self):
        return _motion_3000.vectori_get_allocator(self)

    def pop_back(self):
        return _motion_3000.vectori_pop_back(self)

    def erase(self, *args):
        return _motion_3000.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _motion_3000.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _motion_3000.vectori_push_back(self, x)

    def front(self):
        return _motion_3000.vectori_front(self)

    def back(self):
        return _motion_3000.vectori_back(self)

    def assign(self, n, x):
        return _motion_3000.vectori_assign(self, n, x)

    def resize(self, *args):
        return _motion_3000.vectori_resize(self, *args)

    def insert(self, *args):
        return _motion_3000.vectori_insert(self, *args)

    def reserve(self, n):
        return _motion_3000.vectori_reserve(self, n)

    def capacity(self):
        return _motion_3000.vectori_capacity(self)
    __swig_destroy__ = _motion_3000.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _motion_3000.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _motion_3000.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _motion_3000.vectord___nonzero__(self)

    def __bool__(self):
        return _motion_3000.vectord___bool__(self)

    def __len__(self):
        return _motion_3000.vectord___len__(self)

    def __getslice__(self, i, j):
        return _motion_3000.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _motion_3000.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _motion_3000.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _motion_3000.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _motion_3000.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _motion_3000.vectord___setitem__(self, *args)

    def pop(self):
        return _motion_3000.vectord_pop(self)

    def append(self, x):
        return _motion_3000.vectord_append(self, x)

    def empty(self):
        return _motion_3000.vectord_empty(self)

    def size(self):
        return _motion_3000.vectord_size(self)

    def swap(self, v):
        return _motion_3000.vectord_swap(self, v)

    def begin(self):
        return _motion_3000.vectord_begin(self)

    def end(self):
        return _motion_3000.vectord_end(self)

    def rbegin(self):
        return _motion_3000.vectord_rbegin(self)

    def rend(self):
        return _motion_3000.vectord_rend(self)

    def clear(self):
        return _motion_3000.vectord_clear(self)

    def get_allocator(self):
        return _motion_3000.vectord_get_allocator(self)

    def pop_back(self):
        return _motion_3000.vectord_pop_back(self)

    def erase(self, *args):
        return _motion_3000.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _motion_3000.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _motion_3000.vectord_push_back(self, x)

    def front(self):
        return _motion_3000.vectord_front(self)

    def back(self):
        return _motion_3000.vectord_back(self)

    def assign(self, n, x):
        return _motion_3000.vectord_assign(self, n, x)

    def resize(self, *args):
        return _motion_3000.vectord_resize(self, *args)

    def insert(self, *args):
        return _motion_3000.vectord_insert(self, *args)

    def reserve(self, n):
        return _motion_3000.vectord_reserve(self, n)

    def capacity(self):
        return _motion_3000.vectord_capacity(self)
    __swig_destroy__ = _motion_3000.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _motion_3000.vectord_swigregister
vectord_swigregister(vectord)


def board_init_e():
    return _motion_3000.board_init_e()
board_init_e = _motion_3000.board_init_e

def board_reset_e():
    return _motion_3000.board_reset_e()
board_reset_e = _motion_3000.board_reset_e

def board_close_e():
    return _motion_3000.board_close_e()
board_close_e = _motion_3000.board_close_e

def get_card_info_list_e():
    return _motion_3000.get_card_info_list_e()
get_card_info_list_e = _motion_3000.get_card_info_list_e

def set_alm_mode_e(CardNo, axis, enable, alm_logic, alm_action):
    return _motion_3000.set_alm_mode_e(CardNo, axis, enable, alm_logic, alm_action)
set_alm_mode_e = _motion_3000.set_alm_mode_e

def write_sevon_pin_e(CardNo, axis, on_off):
    return _motion_3000.write_sevon_pin_e(CardNo, axis, on_off)
write_sevon_pin_e = _motion_3000.write_sevon_pin_e

def set_pulse_outmode_e(CardNo, axis, outmode):
    return _motion_3000.set_pulse_outmode_e(CardNo, axis, outmode)
set_pulse_outmode_e = _motion_3000.set_pulse_outmode_e

def set_profile_e(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel):
    return _motion_3000.set_profile_e(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel)
set_profile_e = _motion_3000.set_profile_e

def set_s_profile_e(CardNo, axis, s_mode, s_para):
    return _motion_3000.set_s_profile_e(CardNo, axis, s_mode, s_para)
set_s_profile_e = _motion_3000.set_s_profile_e

def set_homemode_e(CardNo, axis, home_dir, vel_mode, mode, EZ_count):
    return _motion_3000.set_homemode_e(CardNo, axis, home_dir, vel_mode, mode, EZ_count)
set_homemode_e = _motion_3000.set_homemode_e

def home_move_e(CardNo, axis):
    return _motion_3000.home_move_e(CardNo, axis)
home_move_e = _motion_3000.home_move_e

def pmove_e(CardNo, axis, Dist, posi_mode):
    return _motion_3000.pmove_e(CardNo, axis, Dist, posi_mode)
pmove_e = _motion_3000.pmove_e

def check_done(CardNo, axis):
    return _motion_3000.check_done(CardNo, axis)
check_done = _motion_3000.check_done

def get_position(CardNo, axis):
    return _motion_3000.get_position(CardNo, axis)
get_position = _motion_3000.get_position

def set_position_e(CardNo, axis, current_position):
    return _motion_3000.set_position_e(CardNo, axis, current_position)
set_position_e = _motion_3000.set_position_e

def stop(CardNo, axis, stop_mode):
    return _motion_3000.stop(CardNo, axis, stop_mode)
stop = _motion_3000.stop

def emg_stop_e(CardNo):
    return _motion_3000.emg_stop_e(CardNo)
emg_stop_e = _motion_3000.emg_stop_e

def update_target_position_e(CardNo, axis, dist, posi_mode):
    return _motion_3000.update_target_position_e(CardNo, axis, dist, posi_mode)
update_target_position_e = _motion_3000.update_target_position_e

def reset_target_position_e(CardNo, axis, dist, posi_mode):
    return _motion_3000.reset_target_position_e(CardNo, axis, dist, posi_mode)
reset_target_position_e = _motion_3000.reset_target_position_e
# This file is compatible with both classic and new-style classes.


