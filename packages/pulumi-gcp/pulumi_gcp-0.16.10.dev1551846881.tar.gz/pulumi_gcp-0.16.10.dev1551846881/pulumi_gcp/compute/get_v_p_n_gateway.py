# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetVPNGatewayResult(object):
    """
    A collection of values returned by getVPNGateway.
    """
    def __init__(__self__, description=None, network=None, project=None, region=None, self_link=None):
        if description and not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        """
        Description of this VPN gateway.
        """
        if network and not isinstance(network, basestring):
            raise TypeError('Expected argument network to be a basestring')
        __self__.network = network
        """
        The network of this VPN gateway.
        """
        if project and not isinstance(project, basestring):
            raise TypeError('Expected argument project to be a basestring')
        __self__.project = project
        if region and not isinstance(region, basestring):
            raise TypeError('Expected argument region to be a basestring')
        __self__.region = region
        """
        Region of this VPN gateway.
        """
        if self_link and not isinstance(self_link, basestring):
            raise TypeError('Expected argument self_link to be a basestring')
        __self__.self_link = self_link
        """
        The URI of the resource.
        """

def get_v_p_n_gateway(name=None, project=None, region=None):
    """
    Get a VPN gateway within GCE from its name.
    """
    __args__ = dict()

    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    __ret__ = pulumi.runtime.invoke('gcp:compute/getVPNGateway:getVPNGateway', __args__)

    return GetVPNGatewayResult(
        description=__ret__.get('description'),
        network=__ret__.get('network'),
        project=__ret__.get('project'),
        region=__ret__.get('region'),
        self_link=__ret__.get('selfLink'))
