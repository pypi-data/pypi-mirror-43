# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
q1=FMatrix(9,decimal=2)
q2=FMatrix(6,decimal=6)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
c1=CMatrix(5)
c2=CMatrix([7,3],ranged=[-10,10])
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"])

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,q1,q2,y,c1,c2]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
print("q1.decimal",q1.decimal)
q1.p
print("q1.decimal=5")
q1.decimal=5
q1.p
print('################')      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print("p.sdev()")
print(p.sdev())

print('################\n')

print("proj.find(40)")
proj.find(40)
print("proj.find(40,0)")
proj.find(40,0)
print("proj.find(111)")
proj.find(111)

print("################\n")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

print("################")
print("r=p.t")
r=p.t
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

      
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("e+=Identity(e.dim[0])*99")
e+=Identity(e.dim[0])*99
print(e)
print("\ne-=33:")
e-=33
print(e)
print("\ne+=FMatrix(e.dim):")
e+=FMatrix(e.dim)
print(e)
print("\ne*=[2,1,1,0.5,0.2,0.0003,1,3]:")
e*=[2,1,1,0.5,0.2,0.0003,1,3]
print(e)
print("e%=[2,2,2,2,1,1,1,1]")
e%=[5,5,5,5,3,3,1,1]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\n(f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)")
print((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.freq()")
print(validStr4.freq())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.variance()")
print(validStr4.variance())
print("")

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10', 'Col 11', 'Col 12', 'Col 13', 'Col 14', 'Col 15', 'Col 16', 'Col 17', 'Col 18', 'Col 19', 'Col 20']

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Features: ['Col 1']

5 


Dimension: 2x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

-17 -45 -15  21 
 24 -22  -9 -14 


Float Matrix
Dimension: 4x3
Features: ['Col 1', 'Col 2', 'Col 3']

0.7640 0.6581 0.9812 
0.7341 0.2590 0.5296 
0.5397 0.6239 0.1059 
0.0850 0.6982 0.7074 


Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

  898.4553   576.0626  -943.7176  1152.7522  -226.9009   808.2436 
 -835.2040  -772.8444   -17.1135   305.6923  1067.6953  -663.5559 
  383.2884   959.6907 -1197.7068  -355.8180  -781.3027  -446.1337 
-1003.0700    97.1289    17.4288   633.8253   467.6499 -1101.2981 
  -68.5116   779.8144  -587.3591   966.7246   269.7100   279.1229 
 -315.2216  -751.5697   400.3225   647.0245  -755.7481  -948.1940 


Dimension: 3x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 2  3 10  5  1  9 
 6  8  7  8 10  1 
 1  5  8  6  4  9 


Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

41 35 28 41 34 
 3 94 80 26 50 
17 57  2 31 55 
59 85 79  7 24 
41 63 40 22 36 


Float Matrix
Square matrix
Dimension: 4x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

0.7910 0.1293 0.5389 0.9207 
0.4508 0.5519 0.9701 0.5948 
0.9618 0.9025 0.1814 0.2848 
0.4349 0.1971 0.3524 0.1137 


Float Matrix
Square matrix
Dimension: 9x9
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9']

0.97 0.62 0.54 0.03 0.65 0.04 0.37 0.81 0.03 
0.83 0.28 0.89 0.80 0.70 0.96 0.36 0.44 0.98 
0.46 0.69 0.88 0.91 0.15 0.29 0.21 0.12 0.96 
0.65 0.95 0.88 0.62 0.40 0.22 0.82 0.90 0.58 
0.73 0.09 0.56 0.02 0.29 0.02 0.28 0.76 0.97 
0.02 0.91 0.79 0.62 0.79 0.03 0.85 0.49 0.25 
0.73 0.41 0.44 0.39 0.95 0.42 0.30 0.09 0.74 
0.20 0.88 0.85 0.85 0.54 0.85 0.58 0.31 0.12 
0.43 0.93 0.09 0.25 0.59 0.46 0.20 0.09 0.92 


Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

0.320166 0.208018 0.157274 0.302596 0.239552 0.218178 
0.646626 0.322692 0.636761 0.008596 0.378491 0.696527 
0.660621 0.169765 0.674977 0.024676 0.577527 0.050512 
0.636843 0.190340 0.659495 0.270401 0.969596 0.307520 
0.435406 0.300281 0.469596 0.413378 0.585047 0.027382 
0.572788 0.476019 0.641330 0.712038 0.167663 0.090997 


Square matrix
Dimension: 3x3
Features: ['Col 1', 'Col 2', 'Col 3']

3 5 7 
8 3 4 
5 2 5 


Complex Matrix
Square matrix
Dimension: 5x5

 0.3265+0.1707j     0.316+0.674j    0.1561+0.451j   0.6827+0.8887j    0.0265+0.892j  
 0.0401+0.7295j   0.8921+0.9626j   0.9273+0.8889j   0.6158+0.9732j   0.9934+0.2012j  
 0.5233+0.1908j   0.5659+0.7526j   0.1622+0.0539j   0.6206+0.9584j    0.1478+0.921j  
 0.1732+0.4288j   0.7316+0.4404j   0.1002+0.0598j    0.7123+0.841j   0.6387+0.2058j  
 0.7797+0.2468j   0.7353+0.4306j   0.7921+0.7843j   0.1061+0.9898j    0.038+0.4293j  


Complex Matrix
Dimension: 7x3

  2.4918+3.4888j    4.4674+2.1803j     4.612-8.5064j  
  3.6887-1.5203j    3.2885-6.5352j   -3.3613-0.2424j  
  1.7615+0.0839j    9.3574-3.7559j   -5.9862+2.1248j  
  7.7338+5.4092j    9.9073+2.6802j    9.2799+6.3709j  
  9.7406-8.9167j   -8.1865+3.8307j     -1.911+3.831j  
  2.0369-7.0455j   -4.4829-4.4017j    7.7812-3.2633j  
 -2.2426-2.0439j    -6.7744-3.631j   -6.7336-4.9107j  

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Features: ['Col 1', 'Col 2', 'Col 3']

0.7640 0.6581 0.9812 
0.7341 0.2590 0.5296 
0.5397 0.6239 0.1059 
0.0850 0.6982 0.7074 

d.matrix:

[[0.7640380142847348, 0.6580551356419897, 0.9811938393393351], [0.734094570518059, 0.25901562810004075, 0.529571937596533], [0.5397336653990035, 0.6239248167617394, 0.10590593087250111], [0.08499491115322855, 0.6981813682852067, 0.7074119718605617]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Features: ['Col 2', 'Col 3']

  576.0626  -943.7176 
 -772.8444   -17.1135 
  959.6907 -1197.7068 
   97.1289    17.4288 
 


Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

  898.4553   576.0626  -943.7176  1152.7522  -226.9009   808.2436 
 -835.2040  -772.8444   -17.1135   305.6923  1067.6953  -663.5559 
  383.2884   959.6907 -1197.7068  -355.8180  -781.3027  -446.1337 
-1003.0700    97.1289    17.4288   633.8253   467.6499 -1101.2981 
  -68.5116   779.8144  -587.3591   966.7246   269.7100   279.1229 
 -315.2216  -751.5697   400.3225   647.0245  -755.7481  -948.1940 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

  898.4553   576.0626  -943.7176  1152.7522  -226.9009   808.2436 
 -835.2040  -772.8444   -17.1135   305.6923  1067.6953  -663.5559 
  383.2884   959.6907 -1197.7068  -355.8180  -781.3027  -446.1337 
-1003.0700    97.1289    17.4288   633.8253   467.6499 -1101.2981 
  -68.5116   779.8144  -587.3591   966.7246   269.7100   279.1229 
 -315.2216  -751.5697   400.3225   647.0245  -755.7481  -948.1940 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

  898.4553   576.0626  -943.7176  1152.7522  -226.9009   808.2436 
    0.0000  -237.3367  -894.3932  1377.2906   856.7683    87.7873 
    0.0000     0.0000 -3485.5530  3295.4665  1892.7585  -526.8622 
    0.0000     0.0000     0.0000  2599.4582   809.0963   653.1682 
    0.0000     0.0000     0.0000     0.0000   473.7340   642.2911 
    0.0000     0.0000     0.0000     0.0000     0.0000  1035.6273 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
-0.9296  1.0000  0.0000  0.0000  0.0000  0.0000 
 0.4266 -3.0081  1.0000  0.0000  0.0000  0.0000 
-1.1164 -3.1191  1.0976  1.0000  0.0000  0.0000 
-0.0763 -3.4708  1.0798  0.8758  1.0000  0.0000 
-0.3508  2.3151 -0.6139 -0.0438 -3.4226  1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [1, 6], 'Col 2': [3, 8], 'Col 3': [7, 10], 'Col 4': [5, 8], 'Col 5': [1, 10], 'Col 6': [1, 9]}
g: 
Dimension: 3x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 2  3 10  5  1  9 
 6  8  7  8 10  1 
 1  5  8  6  4  9 

g.remove(3):

Dimension: 2x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 2  3 10  5  1  9 
 6  8  7  8 10  1 

################
q1.decimal 2

Float Matrix
Square matrix
Dimension: 9x9
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9']

0.97 0.62 0.54 0.03 0.65 0.04 0.37 0.81 0.03 
0.83 0.28 0.89 0.80 0.70 0.96 0.36 0.44 0.98 
0.46 0.69 0.88 0.91 0.15 0.29 0.21 0.12 0.96 
0.65 0.95 0.88 0.62 0.40 0.22 0.82 0.90 0.58 
0.73 0.09 0.56 0.02 0.29 0.02 0.28 0.76 0.97 
0.02 0.91 0.79 0.62 0.79 0.03 0.85 0.49 0.25 
0.73 0.41 0.44 0.39 0.95 0.42 0.30 0.09 0.74 
0.20 0.88 0.85 0.85 0.54 0.85 0.58 0.31 0.12 
0.43 0.93 0.09 0.25 0.59 0.46 0.20 0.09 0.92 

q1.decimal=5

Float Matrix
Square matrix
Dimension: 9x9
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9']

0.97252 0.61645 0.54391 0.03276 0.64678 0.04486 0.36912 0.80610 0.02603 
0.83275 0.27839 0.88707 0.79604 0.69690 0.96230 0.35709 0.43843 0.98292 
0.46485 0.68641 0.88487 0.91295 0.15001 0.28650 0.21458 0.12006 0.95850 
0.64939 0.94969 0.87917 0.61794 0.40333 0.22012 0.82165 0.89683 0.57992 
0.73069 0.08760 0.55939 0.02422 0.29169 0.02444 0.28474 0.76439 0.97315 
0.01853 0.90677 0.78654 0.61924 0.79292 0.02824 0.84903 0.48827 0.25296 
0.73438 0.40923 0.43846 0.38551 0.94859 0.42252 0.29974 0.08636 0.74368 
0.19889 0.87883 0.84717 0.84659 0.53569 0.84511 0.58482 0.31327 0.12176 
0.42829 0.92850 0.09220 0.25485 0.59170 0.45566 0.19653 0.09070 0.92134 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Features: ['Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10', 'Col 11']

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 5': 57.142857142857146, 'Col 6': 50.285714285714285, 'Col 7': 49.714285714285715, 'Col 8': 44.285714285714285, 'Col 9': 22.285714285714285, 'Col 10': 67.71428571428571, 'Col 11': 69.28571428571429}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7']

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Features: ['Col 8', 'Col 9', 'Col 10', 'Col 11', 'Col 12', 'Col 13', 'Col 14']

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 5', 'Col 6', 'Col 7']

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

 2  3 10  5 
 6  8  7  8 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[2, 3, 10, 5], [6, 8, 7, 8]],ranged=[-5, 5],randomFill=True,features=['Col 1', 'Col 2', 'Col 3', 'Col 4'],header=False,directory='')

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10', 'Col 11', 'Col 12', 'Col 13', 'Col 14', 'Col 15']

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

41 35 28 41 34 
 3 94 80 26 50 
17 57  2 31 55 
59 85 79  7 24 
41 63 40 22 36 

p.det:
 1184190.9999999753

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

 -305572.0000    19747.0000  -511138.0000  -643652.0000  1471176.0000 
 1441410.0000  -175437.0000  2418198.0000  3082636.0000 -6867229.0000 
 -785641.0000   108416.0000 -1334538.0000 -1682175.0000  3751744.0000 
 1459431.0000  -162352.0000  2342042.0000  2993872.0000 -6726897.0000 
-2193395.0000   263278.0000 -3598145.0000 -4622070.0000 10317316.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Features: ['Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10']

-0.2580  0.0167 -0.4316 -0.5435  1.2423 
 1.2172 -0.1481  2.0421  2.6032 -5.7991 
-0.6634  0.0916 -1.1270 -1.4205  3.1682 
 1.2324 -0.1371  1.9778  2.5282 -5.6806 
-1.8522  0.2223 -3.0385 -3.9031  8.7125 

################
p:

Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

41 35 28 41 34 
 3 94 80 26 50 
17 57  2 31 55 
59 85 79  7 24 
41 63 40 22 36 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Features: ['Col 2', 'Col 3', 'Col 4', 'Col 5']

35 28 41 34 
57  2 31 55 
85 79  7 24 
63 40 22 36 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Features: ['Col 2', 'Col', 'Col 3', 'Col 4', 'Col 5']

35 55 28 41 34 
57 55  2 31 55 
85 55 79  7 24 
63 55 40 22 36 

p.sdev()
{'Col 2': 20.558858593479034, 'Col': 0.0, 'Col 3': 32.035136959282696, 'Col 4': 14.430869689661812, 'Col 5': 12.945398152754258}
################

proj.find(40)
proj.find(40,0)
proj.find(111)
Value not in the matrix
################

id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

 1  0  0  0  0  0  0 
 0  1  0  0  0  0  0 
 0  0  1  0  0  0  0 
 0  0  0  1  0  0  0 
 0  0  0  0  1  0  0 
 0  0  0  0  0  1  0 
 0  0  0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]
################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

 1  0  0  0  0  0  0  0  0  0 
 0  1  0  0  0  0  0  0  0  0 
 0  0  1  0  0  0  0  0  0  0 
 0  0  0  1  0  0  0  0  0  0 
 0  0  0  0  1  0  0  0  0  0 
 0  0  0  0  0  1  0  0  0  0 
 0  0  0  0  0  0  1  0  0  0 
 0  0  0  0  0  0  0  1  0  0 
 0  0  0  0  0  0  0  0  1  0 
 0  0  0  0  0  0  0  0  0  1 

################
r=p.t
r.remove(r=2):

Square matrix
Dimension: 4x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

35 57 85 63 
28  2 79 40 
41 31  7 22 
34 55 24 36 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

28  2 79 40 
28  2 79 40 
41 31  7 22 
34 55 24 36 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Features: ['Col 1', 'Col 2', 'Col 3']

-52.3340 -17.5397 -27.2440 
 -3.8607  -5.2949   1.0411 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Features: ['Col 1', 'Col 2', 'Col 3']

1.5175 0.8922 0.2207 
0.5225 0.3299 0.4624 

################

f:
 
Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

  898.4553   576.0626  -943.7176  1152.7522  -226.9009   808.2436 
 -835.2040  -772.8444   -17.1135   305.6923  1067.6953  -663.5559 
  383.2884   959.6907 -1197.7068  -355.8180  -781.3027  -446.1337 
-1003.0700    97.1289    17.4288   633.8253   467.6499 -1101.2981 
  -68.5116   779.8144  -587.3591   966.7246   269.7100   279.1229 
 -315.2216  -751.5697   400.3225   647.0245  -755.7481  -948.1940 

f1=f.intForm

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

  898   576  -943  1152  -226   808 
 -835  -772   -17   305  1067  -663 
  383   959 -1197  -355  -781  -446 
-1003    97    17   633   467 -1101 
  -68   779  -587   966   269   279 
 -315  -751   400   647  -755  -948 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

  898.4600   576.0600  -943.7200  1152.7500  -226.9000   808.2400 
 -835.2000  -772.8400   -17.1100   305.6900  1067.7000  -663.5600 
  383.2900   959.6900 -1197.7100  -355.8200  -781.3000  -446.1300 
-1003.0700    97.1300    17.4300   633.8300   467.6500 -1101.3000 
  -68.5100   779.8100  -587.3600   966.7200   269.7100   279.1200 
 -315.2200  -751.5700   400.3200   647.0200  -755.7500  -948.1900 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 0.4600  0.0600 -0.7200  0.7500 -0.9000  0.2400 
-0.2000 -0.8400 -0.1100  0.6900  0.7000 -0.5600 
 0.2900  0.6900 -0.7100 -0.8200 -0.3000 -0.1300 
-0.0700  0.1300  0.4300  0.8300  0.6500 -0.3000 
-0.5100  0.8100 -0.3600  0.7200  0.7100  0.1200 
-0.2200 -0.5700  0.3200  0.0200 -0.7500 -0.1900 

################
e+=Identity(e.dim[0])*99

Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e-=33:

Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

 66 -33 -33 -33 -33 -33 -33 -33 
-33  66 -33 -33 -33 -33 -33 -33 
-33 -33  66 -33 -33 -33 -33 -33 
-33 -33 -33  66 -33 -33 -33 -33 
-33 -33 -33 -33  66 -33 -33 -33 
-33 -33 -33 -33 -33  66 -33 -33 
-33 -33 -33 -33 -33 -33  66 -33 
-33 -33 -33 -33 -33 -33 -33  66 


e+=FMatrix(e.dim):

Float Matrix
Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

 66.5864 -32.8930 -32.2131 -32.2132 -32.4661 -32.4873 -32.0225 -32.9594 
-32.5928  66.7472 -32.2786 -32.2663 -32.1998 -32.0803 -32.4736 -32.2903 
-32.1465 -32.2714  66.4112 -32.5434 -32.9143 -32.6773 -32.8611 -32.6612 
-32.2029 -32.5413 -32.5899  66.9385 -32.7466 -32.0518 -32.9851 -32.1158 
-32.4061 -32.4631 -32.9594 -32.1625  66.7171 -32.5635 -32.1325 -32.5685 
-32.5988 -32.0946 -32.3859 -32.5502 -32.5034  66.5143 -32.2212 -32.4444 
-32.0770 -32.8113 -32.4865 -32.2135 -32.6840 -32.9300  66.1625 -32.8793 
-32.9771 -32.4404 -32.9301 -32.5158 -32.5674 -32.9365 -32.5637  66.7087 


e*=[2,1,1,0.5,0.2,0.0003,1,3]:

Float Matrix
Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

133.1727 -32.8930 -32.2131 -16.1066  -6.4932  -0.0097 -32.0225 -98.8783 
-65.1856  66.7472 -32.2786 -16.1331  -6.4400  -0.0096 -32.4736 -96.8708 
-64.2929 -32.2714  66.4112 -16.2717  -6.5829  -0.0098 -32.8611 -97.9836 
-64.4058 -32.5413 -32.5899  33.4693  -6.5493  -0.0096 -32.9851 -96.3473 
-64.8123 -32.4631 -32.9594 -16.0813  13.3434  -0.0098 -32.1325 -97.7056 
-65.1975 -32.0946 -32.3859 -16.2751  -6.5007   0.0200 -32.2212 -97.3333 
-64.1541 -32.8113 -32.4865 -16.1067  -6.5368  -0.0099  66.1625 -98.6380 
-65.9543 -32.4404 -32.9301 -16.2579  -6.5135  -0.0099 -32.5637 200.1260 

e%=[2,2,2,2,1,1,1,1]

Float Matrix
Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

3.1727 2.1070 2.7869 3.8934 2.5068 2.9903 0.9775 0.1217 
4.8144 1.7472 2.7214 3.8669 2.5600 2.9904 0.5264 0.1292 
0.7071 2.7286 1.4112 3.7283 2.4171 2.9902 0.1389 0.0164 
0.5942 2.4587 2.4101 3.4693 2.4507 2.9904 0.0149 0.6527 
0.1877 2.5369 2.0406 3.9187 1.3434 2.9902 0.8675 0.2944 
4.8025 2.9054 2.6141 3.7249 2.4993 0.0200 0.7788 0.6667 
0.8459 2.1887 2.5135 3.8933 2.4632 2.9901 0.1625 0.3620 
4.0457 2.5596 2.0699 3.7421 2.4865 2.9901 0.4363 0.1260 

################

c%j

Dimension: 2x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

1 0 5 1 
0 2 5 2 


(f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Features: ['Col 1', 'Col 2', 'Col 3']

 34 -52  33 
  9  88  -3 

################
validStr2:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10']

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 21.077059193407987, 'Weight': 22.286650829472002, 'Age': 12.98858973112413}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.freq()
{'Height': {130: 1, 125: 1, 135: 1, 133: 1, 129: 1, 180: 1, 190: 1, 175: 1, 177: 1, 185: 1, 165: 1, 155: 1, 160: 1, 162: 1, 167: 1, 174: 1, 193: 1, 187: 1, 183: 1, 159: 1, 164: 1, 166: 1}, 'Weight': {30: 2, 36: 1, 34: 1, 38: 1, 90: 3, 80: 2, 60: 1, 105: 1, 55: 1, 50: 1, 58: 1, 59: 1, 62: 1, 70: 1, 88: 1, 40: 1, 66: 1, 56: 1}, 'Age': {10: 2, 11: 1, 9: 1, 12: 1, 30: 1, 25: 1, 35: 1, 22: 1, 33: 1, 27: 2, 44: 1, 39: 1, 41: 1, 55: 1, 47: 1, 23: 1, 28: 1, 29: 1, 32: 1, 42: 1}}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {'90': 3}, 'Age': {'10, 27': 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.variance()
{'Height': 444.24242424242414, 'Weight': 496.6948051948051, 'Age': 168.70346320346317}
"""
# =============================================================================

