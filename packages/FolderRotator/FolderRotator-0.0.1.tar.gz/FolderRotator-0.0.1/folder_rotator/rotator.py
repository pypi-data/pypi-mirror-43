import os
import logging
import re


class Rotator():
    def __init__(self, base_dir, folder_prefix="output_folder", file_prefix="output", max_output_files=1000):
        """Manages output folder rotation so that files per directory limits are not exceeded.

        :param base_dir: Absolute path to the base directory to output to
        :type base_dir: str
        :param folder_prefix: Prefix for output folders, defaults to "output_folder"
        :param folder_prefix: str, optional
        :param file_prefix: Prefix for output files, defaults to "output"
        :param file_prefix: str, optional
        :param max_output_files: Max number of files per folder, defaults to 1000
        :param max_output_files: int, optional
        """

        # Logging
        self.logger = logging.getLogger(__name__)

        # Folders
        self.base_dir = base_dir
        self.folder_prefix = folder_prefix
        self.file_prefix = file_prefix
        self.max_output_files = max_output_files

        # State
        self.current_output_folder_index = None
        self.current_output_folder_path = None

        self._init_base_dir()
        self._init_current_output_folder()

    def get_output_path(self):
        self._check_current_output_folder_path()
        return self.current_output_folder_path

    def _init_base_dir(self):
        self._check_or_create_new_dir(self.base_dir)

    def _init_current_output_folder(self):
        """Determine the folder index that we are up to in the event of a restart.
        """
        self._init_current_output_folder_index()
        self._init_current_output_folder_path()

    def _init_current_output_folder_index(self):
        """Initialises the correct folder index, so that old folders aren't overwritten.

        """
        # List all of the folders currently in the output dir
        list_of_folders = os.listdir(self.base_dir)

        # If there are already folders in the directory find the latest numbered one generated by this class
        if list_of_folders:
            idx = max(list_of_folders, key=self._extract_number)
            print(idx, type(idx))
            # If we found a new_index greater than 0 then set it to that index + 1
            if idx >= 0:
                new_index = idx + 1
            # This occurs if there are folders not created by this class
            else:
                new_index = 0
        # If there are no folders then start at 0! This must be the first time running the app with this strorage path
        else:
            new_index = 0

        # Set the current index
        self.current_output_folder_index = new_index
        self.logger.info(f"Set current folder index to: {new_index}")

    def _init_current_output_folder_path(self):
        """Initialise the current ouptut folder path, can only be run after the current folder index has been determined

        """
        # Init the path to the current output folder
        self._update_current_output_folder_path()

        self.logger.info(
            f"Set current output folder path to {self.current_output_folder_path}"
        )

    def _update_current_output_folder_path(self):
        """Update the current output path so that it is using the current output index.

        """
        # Format output folder name with zero padded index
        output_folder_name = \
            f"{self.folder_prefix}_{self.current_output_folder_index:04}"
        self.current_output_folder_path = os.path.join(
            self.base_dir,
            output_folder_name
        )

        # Create the updated output folder
        self._check_or_create_new_dir(self.current_output_folder_path)

    def _update_current_output_folder_index(self):
        self.current_output_folder_index += 1

    def _check_current_output_folder_path(self):
        """Check how many files are in the output dir.

        If there are more that self.max_output_files then create a new one and set current_folder_index to current_folder_index + 1.
        """

        # Validate output dir exists
        self._check_or_create_new_dir(self.current_output_folder_path)

        # Get the number of files in the current output folder
        numfiles = len(os.listdir(self.current_output_folder_path))
        if numfiles >= self.max_output_files:
            # Increment the output folder
            self._increment_current_output_folder_path()

    def _increment_current_output_folder_path(self):
        """Increment the index and update the current folder path.

        """
        # Increment the index
        self._update_current_output_folder_index()

        # Update the path to the current output folder
        self._update_current_output_folder_path()

    def _check_or_create_new_dir(self, abs_path):
        """Create a new directory.

        :param abs_path: The absolute path to the directory that needs to be created
        :type abs_path: str
        """

        # Check the current output firectory is created
        if not os.path.isdir(abs_path):
            # Otherwise make it
            os.makedirs(abs_path)

    def _extract_number(self, f):
        """For extracting the number at the end of a string.

        :return: Number from the end of the string
        :rtype: integer
        """

        # Find the numbers using a regex
        s = re.findall(r"\d+$", f)
        # If found
        if s:
            # Return the number as an integer
            return(int(s[0]))
        else:
            # Return -1
            return(-1)
