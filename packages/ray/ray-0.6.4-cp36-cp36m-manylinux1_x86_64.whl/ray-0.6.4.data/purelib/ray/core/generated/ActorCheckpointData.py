# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ActorCheckpointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsActorCheckpointData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ActorCheckpointData()
        x.Init(buf, n + offset)
        return x

    # ActorCheckpointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ActorCheckpointData
    def ActorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorCheckpointData
    def ExecutionDependency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorCheckpointData
    def HandleIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ActorCheckpointData
    def HandleIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ActorCheckpointData
    def TaskCounters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ActorCheckpointData
    def TaskCountersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ActorCheckpointData
    def TaskCountersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ActorCheckpointData
    def FrontierDependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ActorCheckpointData
    def FrontierDependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ActorCheckpointData
    def UnreleasedDummyObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ActorCheckpointData
    def UnreleasedDummyObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ActorCheckpointData
    def NumDummyObjectDependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ActorCheckpointData
    def NumDummyObjectDependenciesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ActorCheckpointData
    def NumDummyObjectDependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ActorCheckpointDataStart(builder): builder.StartObject(7)
def ActorCheckpointDataAddActorId(builder, actorId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actorId), 0)
def ActorCheckpointDataAddExecutionDependency(builder, executionDependency): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(executionDependency), 0)
def ActorCheckpointDataAddHandleIds(builder, handleIds): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(handleIds), 0)
def ActorCheckpointDataStartHandleIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ActorCheckpointDataAddTaskCounters(builder, taskCounters): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(taskCounters), 0)
def ActorCheckpointDataStartTaskCountersVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ActorCheckpointDataAddFrontierDependencies(builder, frontierDependencies): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(frontierDependencies), 0)
def ActorCheckpointDataStartFrontierDependenciesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ActorCheckpointDataAddUnreleasedDummyObjects(builder, unreleasedDummyObjects): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unreleasedDummyObjects), 0)
def ActorCheckpointDataStartUnreleasedDummyObjectsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ActorCheckpointDataAddNumDummyObjectDependencies(builder, numDummyObjectDependencies): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(numDummyObjectDependencies), 0)
def ActorCheckpointDataStartNumDummyObjectDependenciesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ActorCheckpointDataEnd(builder): return builder.EndObject()
