# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrap_tf_metadata_store_serialized', [dirname(__file__)])
        except ImportError:
            import _pywrap_tf_metadata_store_serialized
            return _pywrap_tf_metadata_store_serialized
        if fp is not None:
            try:
                _mod = imp.load_module('_pywrap_tf_metadata_store_serialized', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywrap_tf_metadata_store_serialized = swig_import_helper()
    del swig_import_helper
else:
    import _pywrap_tf_metadata_store_serialized
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def CreateMetadataStore(connection_config):
    return _pywrap_tf_metadata_store_serialized.CreateMetadataStore(connection_config)
CreateMetadataStore = _pywrap_tf_metadata_store_serialized.CreateMetadataStore

def DestroyMetadataStore(metadata_store):
    return _pywrap_tf_metadata_store_serialized.DestroyMetadataStore(metadata_store)
DestroyMetadataStore = _pywrap_tf_metadata_store_serialized.DestroyMetadataStore

def PutArtifactType(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.PutArtifactType(metadata_store, request)
PutArtifactType = _pywrap_tf_metadata_store_serialized.PutArtifactType

def PutArtifacts(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.PutArtifacts(metadata_store, request)
PutArtifacts = _pywrap_tf_metadata_store_serialized.PutArtifacts

def GetArtifactType(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetArtifactType(metadata_store, request)
GetArtifactType = _pywrap_tf_metadata_store_serialized.GetArtifactType

def GetArtifactsByID(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetArtifactsByID(metadata_store, request)
GetArtifactsByID = _pywrap_tf_metadata_store_serialized.GetArtifactsByID

def GetArtifactsByType(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetArtifactsByType(metadata_store, request)
GetArtifactsByType = _pywrap_tf_metadata_store_serialized.GetArtifactsByType

def GetArtifactsByURI(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetArtifactsByURI(metadata_store, request)
GetArtifactsByURI = _pywrap_tf_metadata_store_serialized.GetArtifactsByURI

def PutExecutionType(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.PutExecutionType(metadata_store, request)
PutExecutionType = _pywrap_tf_metadata_store_serialized.PutExecutionType

def PutExecutions(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.PutExecutions(metadata_store, request)
PutExecutions = _pywrap_tf_metadata_store_serialized.PutExecutions

def GetExecutionType(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetExecutionType(metadata_store, request)
GetExecutionType = _pywrap_tf_metadata_store_serialized.GetExecutionType

def GetExecutionsByID(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetExecutionsByID(metadata_store, request)
GetExecutionsByID = _pywrap_tf_metadata_store_serialized.GetExecutionsByID

def GetExecutionsByType(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetExecutionsByType(metadata_store, request)
GetExecutionsByType = _pywrap_tf_metadata_store_serialized.GetExecutionsByType

def GetArtifactTypesByID(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetArtifactTypesByID(metadata_store, request)
GetArtifactTypesByID = _pywrap_tf_metadata_store_serialized.GetArtifactTypesByID

def GetExecutionTypesByID(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetExecutionTypesByID(metadata_store, request)
GetExecutionTypesByID = _pywrap_tf_metadata_store_serialized.GetExecutionTypesByID

def PutEvents(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.PutEvents(metadata_store, request)
PutEvents = _pywrap_tf_metadata_store_serialized.PutEvents

def GetEventsByExecutionIDs(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetEventsByExecutionIDs(metadata_store, request)
GetEventsByExecutionIDs = _pywrap_tf_metadata_store_serialized.GetEventsByExecutionIDs

def GetEventsByArtifactIDs(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetEventsByArtifactIDs(metadata_store, request)
GetEventsByArtifactIDs = _pywrap_tf_metadata_store_serialized.GetEventsByArtifactIDs

def GetArtifacts(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetArtifacts(metadata_store, request)
GetArtifacts = _pywrap_tf_metadata_store_serialized.GetArtifacts

def GetExecutions(metadata_store, request):
    return _pywrap_tf_metadata_store_serialized.GetExecutions(metadata_store, request)
GetExecutions = _pywrap_tf_metadata_store_serialized.GetExecutions
# This file is compatible with both classic and new-style classes.


