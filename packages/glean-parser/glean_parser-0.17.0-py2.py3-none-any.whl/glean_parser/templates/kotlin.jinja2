// -*- mode: kotlin -*-

/*
 * AUTOGENERATED BY glean_parser.  DO NOT EDIT.
 */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

@file:Suppress("PackageNaming")
package {{ namespace }}

import mozilla.components.service.glean.Lifetime
import mozilla.components.service.glean.TimeUnit // ktlint-disable no-unused-imports
{% for metric_type in metric_types -%}
import mozilla.components.service.glean.{{ metric_type|Camelize }}MetricType
{% endfor -%}
{% if has_labeled_metrics -%}
import mozilla.components.service.glean.LabeledMetricType
{% endif -%}

internal object {{ category_name|Camelize }} {
{%- for metric in metrics.values() %}
    {%- if metric.labeled %}
    private val {{ metric.name|camelize }}Label: {{ metric.type|Camelize }}MetricType by lazy {
        {{ metric.type|Camelize }}MetricType(
            {% for arg_name in extra_args if metric[arg_name] is defined -%}
            {{ arg_name|camelize }} = {{ metric[arg_name]|kotlin }}{{ "," if not loop.last }}
            {% endfor -%}
        )
    }
    /**
     * {{ metric.description|wordwrap(wrapstring='\n     * ') }}
     */
    val {{ metric.name|camelize }}: LabeledMetricType<{{ metric.type|Camelize }}MetricType> by lazy {
        LabeledMetricType(
            category = {{ metric.category|kotlin }},
            name = {{ metric.name|kotlin }},
            subMetric = {{ metric.name|camelize }}Label,
            disabled = {{ metric.is_disabled()|kotlin }},
            lifetime = {{ metric.lifetime|kotlin }},
            sendInPings = {{ metric.send_in_pings|kotlin }},
            labels = {{ metric.labels|kotlin }}
        )
    }
    {%- else %}
    /**
     * {{ metric.description|wordwrap(wrapstring='\n     * ') }}
     */
    val {{ metric.name|camelize }}: {{ metric.type|Camelize }}MetricType by lazy {
        {{ metric.type|Camelize }}MetricType(
            {% for arg_name in extra_args if metric[arg_name] is defined -%}
            {{ arg_name|camelize }} = {{ metric[arg_name]|kotlin }},
            {% endfor -%}
            disabled = {{ metric.is_disabled()|kotlin }}
        )
    }
    {%- endif -%}
{%- endfor %}
}
