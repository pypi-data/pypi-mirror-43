########################################################################3456789
########################################################################72

import os  # for handling OS objects (for example files)
import errno  # for handling errors from OS objects
import shutil  # for copying files
import json  # for loading assessment definitions
import examsage as es  # for writing math exams


########################################################################
# Define the Course class
########################################################################
class Course(object):
    """Create course directory structure.

    Contains attributes common to every assessment in a given
    course. As of 20190208, it's only purposes are to create the output
    directory and assessment objects.

    Future plans
    ------------
    20190208 This class will likely be the container for any GUI
    implimentations of ExamSage

    Parameters
    ----------
    root : str
        Root location of the course.

        The assessment configuration files shoule be in
        root/schedule_type

        All generated files will be saved to
        root/term/schedule_type
    name : str
        Course name will appear the in header.
    term : str
        Course term will appear in the header.
    schedule_type : str
        Schedule type will appear in the header.
        Location of the assessment definitions.

        Courses with several sections often have incompatible
        schedules, requiring slightly different assessments. This
        attribute allows for different sections of the same course to
        have different assessment definitions.
    question_dir : str, optional
        Location of code for generating questions.
        Default is ExamSage's built-in question directory.

    Attributes
    ----------
    path : str
        Output directory for all course file generated by examsage.
    config_path : str
        Location of the assessment definitions in JSON format
    assessments : list of objects
        A list of instances of the Assessment class.


    """

    def __init__(
            self,
            root,
            name,
            term,
            schedule_type,
    ):
        self.root = root
        self.name = name
        self.term = term
        self.schedule_type = schedule_type
        # Default is ExamSage's built-in question directory.
        self.question_dir = os.path.dirname(os.path.realpath(__file__))
        # Create a list to hold the assessment objects
        self.assessments = []

        #self.quiz = [] # Will hold a list of quizzes
        #self.test = [] # Will hold a list of tests
        #self.final = [] # Will hold a list of final exams
        #self.worksheet = [] # Will hold a list of worksheets

    @property
    def _path(self):
        # Output directory for course files generated by examsage
        path = os.path.join(self.root, self.term, self.schedule_type)

        # Create the directory if necessary
        if not os.path.exists(path):
            try:
                os.makedirs(path)
            except OSError as exc:  # Guard against race condition
                if exc.errno != errno.EEXIST:
                    raise
        return path

    @property
    def _PDFdir(self):
        # Output directory for PDFs of all assessments
        PDFdir = os.path.join(self._path, 'PDF')

        # Create the directory if necessary
        if not os.path.exists(PDFdir):
            try:
                os.makedirs(PDFdir)
            except OSError as exc:  # Guard against race condition
                if exc.errno != errno.EEXIST:
                    raise
        return PDFdir

    @property
    def _config_path(self):
        # Input directory for the assessment configuration JSON files
        return os.path.join(self.root, self.schedule_type)

    def add_assessment(self, name, num_of_versions, path=None):
        """Create assessment as defined by JSON config file.

        Loads a JSON file as a dictionary which contains all of the
        header info that is specific to the assessment and the
        list of questions in the assessment. Then creates an
        assessment object and adds it to the list of assessments
        in the course.

        Parameters
        ----------
        name : str
            Name of file containing the assessment definition in
            JSON format
        num_of_versions : positive int
            Number of versions of identical assessments to generate.

        Optional Parameters
        -------------------
        path : str
            Path to the assessment definition in JSON format

        """

        # If no path to the JSON definition of the assessment is given,
        # then assume that it is located at root/schedule_type
        if path:
            config_file = os.path.join(path, name)
        else:
            config_file = os.path.join(self._config_path, name)
        # Load the JSON definition of the assessment
        try:
            with open(config_file, 'r') as json_data:
                assessment_json = json.loads(json_data.read())
                json_data.close()
        except (ValueError, KeyError, TypeError):
            print(self.__class__)
            print("JSON format error")
            print(ValueError)
            print(KeyError)
            print(TypeError)

        # Copy the JSON file to the course directory for record keeping
        source = config_file
        json_name = os.path.basename(source)
        dest = os.path.join(self._path, json_name)
        shutil.copyfile(source, dest)

        # Create the assessment and append the object to the assessment list
        assessment = es.Assessment(self, assessment_json, num_of_versions)
        self.assessments.append(assessment)

    def __repr__(self):
        return (r"Course(root='{root}', "
                "name='{name}', "
                "term='{term}', "
                "schedule_type = '{schedule_type}', "
                "question_dir='{question_dir}')".format(
                    root=os.path.abspath(self.root),
                    name=self.name,
                    term=self.term,
                    schedule_type=self.schedule_type,
                    question_dir=self.question_dir))


########################################################################3456789
########################################################################72