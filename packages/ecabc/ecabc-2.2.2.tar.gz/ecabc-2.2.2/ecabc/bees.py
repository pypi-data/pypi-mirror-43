#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  ecabc/bees.py
#  v.2.2.2
#  Developed in 2018 by Sanskriti Sharma <sanskriti_sharma@student.uml.edu> & Hernan Gelaf-Romer <hernan_gelafromer@student.uml.edu>
#
#  This program defines the bee objects created in the artificial bee colony
#

import numpy as np
from random import randint

import uuid

class EmployerBee:
    '''
    Class which stores individual employer bee information such as its id,
    position (known as values), error, score and probability of getting chosen
    in the onlooker phase.
    '''

    def __init__(self, values=[]):
        self.values = values
        self.score = None
        self.probability = 0
        self.failed_trials = 0
        self.id = uuid.uuid4()
        self.error = None

    def get_score(self, error=None):
        '''
        Calculate bee's score given it's error.
        
        Args:
        error: The error generated by an employer bee by running the
        fitness function
        '''
        if error is not None:
            self.error = error
        if self.error >= 0:
            return 1 / (self.error + 1)
        else:
            return 1 + abs(self.error)

    def calculate_probability(self, fitness_total):
        '''
        Calculates probability based on a given fitness total
        
        Args:
        fitness_total: The sum of the fitness scores of all the employer bees
        '''
        self.probability = self.score / fitness_total        

class OnlookerBee:
    '''
    Class to store best performing bees, and also calculate positions
    for any given bees
    '''

    def __init__(self):
        self.best_employers = []

    def calculate_positions(self, first_bee_val, second_bee_val, value_range):
        '''
        Calculate the positions when merging two bees
        
        Args:
        first_bee_val: The position of the first bee in a single dimension
        second bee_val: The position of the second bee in a single dimension
        value_range: A tuple containing the upper and lower limits of the dimension
        '''
        value = first_bee_val + np.random.uniform(-1, 1) \
                * (first_bee_val - second_bee_val)
        if value_range[0] == 'int': value = int(value)
        if value > value_range[1][1]: value = value_range[1][1] 
        if value < value_range[1][0]: value = value_range[1][0]

        return value
