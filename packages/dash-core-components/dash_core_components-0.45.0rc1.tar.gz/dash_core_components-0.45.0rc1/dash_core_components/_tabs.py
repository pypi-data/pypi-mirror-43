"""
Autogenerated file
DO NOT EDIT.
CONTENT WILL BE OVERWRITTEN!

WARNING: Do not import this file directly!
"""
import typing

from dash_component_system import (
    DashComponent, UNDEFINED, Undefined, ComponentProp
)


class Tabs(DashComponent):
    """
    A Dash component that lets you render pages with tabs - the Tabs
    component's children can be dcc.Tab components, which can hold a label
    that will be displayed as a tab, and can in turn hold children components
    that will be that tab's content.
    """
    _namespace = 'dash_core_components'
    _typename = 'Tabs'
    available_wildcard_properties = [

    ]
    id = ComponentProp('id', UNDEFINED, False)
    value = ComponentProp('value', UNDEFINED, False)
    className = ComponentProp('className', UNDEFINED, False)
    content_className = ComponentProp('content_className', UNDEFINED, False)
    parent_className = ComponentProp('parent_className', UNDEFINED, False)
    style = ComponentProp('style', UNDEFINED, False)
    parent_style = ComponentProp('parent_style', UNDEFINED, False)
    content_style = ComponentProp('content_style', UNDEFINED, False)
    vertical = ComponentProp('vertical', False, False)
    mobile_breakpoint = ComponentProp('mobile_breakpoint', 800, False)
    children = ComponentProp('children', UNDEFINED, False)
    colors = ComponentProp('colors', "{\n    border: '#d6d6d6',\n    primary: '#1975FA',\n    background: '#f9f9f9',\n}", False)
    loading_state = ComponentProp('loading_state', UNDEFINED, False)

    def __init__(
        self,
        children=UNDEFINED,
        id=UNDEFINED,
        value=UNDEFINED,
        className=UNDEFINED,
        content_className=UNDEFINED,
        parent_className=UNDEFINED,
        style=UNDEFINED,
        parent_style=UNDEFINED,
        content_style=UNDEFINED,
        vertical=False,
        mobile_breakpoint=800,
        colors="{\n    border: '#d6d6d6',\n    primary: '#1975FA',\n    background: '#f9f9f9',\n}",
        loading_state=UNDEFINED,
        **kwargs
    ):
        # type: (typing.Union[typing.Union[typing.List[typing.Union[str, int, float, DashComponent,typing.List[typing.Union[str, int, float, DashComponent]]]],typing.Union[str, int, float, DashComponent,typing.List[typing.Union[str, int, float, DashComponent]]]], Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Dict[str, typing.Union[str]], Undefined], typing.Union[typing.Dict[str, typing.Union[bool, str]], Undefined], typing.Any) -> None # noqa: E501
        """
        :param id: The ID of this component, used to identify dash
            components in callbacks. The ID needs to be unique
            across all of the components in an app.
        :param value: The value of the currently selected Tab
        :param className: Appends a class to the Tabs container holding the
            individual Tab components.
        :param content_className: Appends a class to the Tab content
            container holding the children of the Tab
            that is selected.
        :param parent_className: Appends a class to the top-level parent
            container holding both the Tabs container
            and the content container.
        :param style: Appends (inline) styles to the Tabs container holding
            the individual Tab components.
        :param parent_style: Appends (inline) styles to the top-level
            parent container holding both the Tabs
            container and the content container.
        :param content_style: Appends (inline) styles to the tab content
            container holding the children of the Tab
            that is selected.
        :param vertical: Renders the tabs vertically (on the side)
        :param mobile_breakpoint: Breakpoint at which tabs are rendered
            full width (can be 0 if you don't want
            full width tabs on mobile)
        :param children: Array that holds Tab components
        :param colors: Holds the colors used by the Tabs and Tab
            components. If you set these, you should specify
            colors for all properties, so: colors: {    border:
            '#d6d6d6',    primary: '#1975FA',    background:
            '#f9f9f9'  }
        :param loading_state: Object that holds the loading state object
            coming from dash-renderer
        """
        kws = {
            k: v for k, v in locals().items() if k not in ('self', 'kwargs')
        }
        kws.update(kwargs)
        DashComponent.__init__(self, **kws)
