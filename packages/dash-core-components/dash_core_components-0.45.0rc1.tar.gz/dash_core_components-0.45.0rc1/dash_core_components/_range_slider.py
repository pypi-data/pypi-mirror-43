"""
Autogenerated file
DO NOT EDIT.
CONTENT WILL BE OVERWRITTEN!

WARNING: Do not import this file directly!
"""
import typing

from dash_component_system import (
    DashComponent, UNDEFINED, Undefined, ComponentProp
)


class RangeSlider(DashComponent):
    """
    A double slider with two handles. Used for specifying a range of numerical
    values.
    """
    _namespace = 'dash_core_components'
    _typename = 'RangeSlider'
    available_wildcard_properties = [

    ]
    id = ComponentProp('id', UNDEFINED, False)
    marks = ComponentProp('marks', UNDEFINED, False)
    value = ComponentProp('value', UNDEFINED, False)
    allowCross = ComponentProp('allowCross', UNDEFINED, False)
    className = ComponentProp('className', UNDEFINED, False)
    count = ComponentProp('count', UNDEFINED, False)
    disabled = ComponentProp('disabled', UNDEFINED, False)
    dots = ComponentProp('dots', UNDEFINED, False)
    included = ComponentProp('included', UNDEFINED, False)
    min = ComponentProp('min', UNDEFINED, False)
    max = ComponentProp('max', UNDEFINED, False)
    pushable = ComponentProp('pushable', UNDEFINED, False)
    step = ComponentProp('step', UNDEFINED, False)
    vertical = ComponentProp('vertical', UNDEFINED, False)
    updatemode = ComponentProp('updatemode', "'mouseup'", False)
    loading_state = ComponentProp('loading_state', UNDEFINED, False)

    def __init__(
        self,
        id=UNDEFINED,
        marks=UNDEFINED,
        value=UNDEFINED,
        allowCross=UNDEFINED,
        className=UNDEFINED,
        count=UNDEFINED,
        disabled=UNDEFINED,
        dots=UNDEFINED,
        included=UNDEFINED,
        min=UNDEFINED,
        max=UNDEFINED,
        pushable=UNDEFINED,
        step=UNDEFINED,
        vertical=UNDEFINED,
        updatemode="'mouseup'",
        loading_state=UNDEFINED,
        **kwargs
    ):
        # type: (typing.Union[str, Undefined], typing.Union[typing.Dict[str, typing.Union[typing.Union[str,typing.Dict[str, typing.Union[typing.Dict, str]]]]], Undefined], typing.Union[typing.List[typing.Union[float, int]], Undefined], typing.Union[bool, Undefined], typing.Union[str, Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[bool, Undefined], typing.Union[bool, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Union[bool,typing.Union[float, int]], Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[bool, Undefined], typing.Union[typing.Any, Undefined], typing.Union[typing.Dict[str, typing.Union[bool, str]], Undefined], typing.Any) -> None # noqa: E501
        """
        :param id:
        :param marks: Marks on the slider. The key determines the position,
            and the value determines what will show. If you want
            to set the style of a specific mark point, the value
            should be an object which contains style and label
            properties.
        :param value: The value of the input
        :param allowCross: allowCross could be set as true to allow those
            handles to cross.
        :param className: Additional CSS class for the root DOM node
        :param count: Determine how many ranges to render, and multiple
            handles will be rendered (number + 1).
        :param disabled: If true, the handles can't be moved.
        :param dots: When the step value is greater than 1, you can set the
            dots to true if you want to render the slider with
            dots.
        :param included: If the value is true, it means a continuous value
            is included. Otherwise, it is an independent
            value.
        :param min: Minimum allowed value of the slider
        :param max: Maximum allowed value of the slider
        :param pushable: pushable could be set as true to allow pushing of
            surrounding handles when moving an handle. When
            set to a number, the number will be the minimum
            ensured distance between handles.
        :param step: Value by which increments or decrements are made
        :param vertical: If true, the slider will be vertical
        :param updatemode: Determines when the component should update its
            value. If `mouseup`, then the slider will only
            trigger its value when the user has finished
            dragging the slider. If `drag`, then the slider
            will update its value continuously as it is
            being dragged. Only use `drag` if your updates
            are fast. (Possible values: 'mouseup', 'drag')
        :param loading_state: Object that holds the loading state object
            coming from dash-renderer
        """
        kws = {
            k: v for k, v in locals().items() if k not in ('self', 'kwargs')
        }
        kws.update(kwargs)
        DashComponent.__init__(self, **kws)
