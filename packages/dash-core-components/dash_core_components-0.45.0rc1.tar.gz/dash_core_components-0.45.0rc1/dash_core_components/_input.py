"""
Autogenerated file
DO NOT EDIT.
CONTENT WILL BE OVERWRITTEN!

WARNING: Do not import this file directly!
"""
import typing

from dash_component_system import (
    DashComponent, UNDEFINED, Undefined, ComponentProp
)


class Input(DashComponent):
    """
    A basic HTML input control for entering text, numbers, or passwords.  Note
    that checkbox and radio types are supported through the Checklist and
    RadioItems component. Dates, times, and file uploads are also supported
    through separate components.
    """
    _namespace = 'dash_core_components'
    _typename = 'Input'
    available_wildcard_properties = [

    ]
    id = ComponentProp('id', UNDEFINED, False)
    value = ComponentProp('value', UNDEFINED, False)
    style = ComponentProp('style', UNDEFINED, False)
    className = ComponentProp('className', UNDEFINED, False)
    debounce = ComponentProp('debounce', False, False)
    type = ComponentProp('type', UNDEFINED, False)
    autocomplete = ComponentProp('autocomplete', UNDEFINED, False)
    autofocus = ComponentProp('autofocus', UNDEFINED, False)
    disabled = ComponentProp('disabled', UNDEFINED, False)
    inputmode = ComponentProp('inputmode', UNDEFINED, False)
    list = ComponentProp('list', UNDEFINED, False)
    max = ComponentProp('max', UNDEFINED, False)
    maxlength = ComponentProp('maxlength', UNDEFINED, False)
    min = ComponentProp('min', UNDEFINED, False)
    minlength = ComponentProp('minlength', UNDEFINED, False)
    multiple = ComponentProp('multiple', UNDEFINED, False)
    name = ComponentProp('name', UNDEFINED, False)
    pattern = ComponentProp('pattern', UNDEFINED, False)
    placeholder = ComponentProp('placeholder', UNDEFINED, False)
    readOnly = ComponentProp('readOnly', UNDEFINED, False)
    required = ComponentProp('required', UNDEFINED, False)
    selectionDirection = ComponentProp('selectionDirection', UNDEFINED, False)
    selectionEnd = ComponentProp('selectionEnd', UNDEFINED, False)
    selectionStart = ComponentProp('selectionStart', UNDEFINED, False)
    size = ComponentProp('size', UNDEFINED, False)
    spellCheck = ComponentProp('spellCheck', UNDEFINED, False)
    step = ComponentProp('step', UNDEFINED, False)
    n_submit = ComponentProp('n_submit', 0, False)
    n_submit_timestamp = ComponentProp('n_submit_timestamp', -1, False)
    n_blur = ComponentProp('n_blur', 0, False)
    n_blur_timestamp = ComponentProp('n_blur_timestamp', -1, False)
    loading_state = ComponentProp('loading_state', UNDEFINED, False)

    def __init__(
        self,
        id=UNDEFINED,
        value=UNDEFINED,
        style=UNDEFINED,
        className=UNDEFINED,
        debounce=False,
        type=UNDEFINED,
        autocomplete=UNDEFINED,
        autofocus=UNDEFINED,
        disabled=UNDEFINED,
        inputmode=UNDEFINED,
        list=UNDEFINED,
        max=UNDEFINED,
        maxlength=UNDEFINED,
        min=UNDEFINED,
        minlength=UNDEFINED,
        multiple=UNDEFINED,
        name=UNDEFINED,
        pattern=UNDEFINED,
        placeholder=UNDEFINED,
        readOnly=UNDEFINED,
        required=UNDEFINED,
        selectionDirection=UNDEFINED,
        selectionEnd=UNDEFINED,
        selectionStart=UNDEFINED,
        size=UNDEFINED,
        spellCheck=UNDEFINED,
        step=UNDEFINED,
        n_submit=0,
        n_submit_timestamp=-1,
        n_blur=0,
        n_blur_timestamp=-1,
        loading_state=UNDEFINED,
        **kwargs
    ):
        # type: (typing.Union[str, Undefined], typing.Union[typing.Union[str,typing.Union[float, int]], Undefined], typing.Union[typing.Dict, Undefined], typing.Union[str, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Any, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Any, Undefined], typing.Union[str, Undefined], typing.Union[typing.Union[str,typing.Union[float, int]], Undefined], typing.Union[str, Undefined], typing.Union[typing.Union[str,typing.Union[float, int]], Undefined], typing.Union[str, Undefined], typing.Union[bool, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[typing.Union[str,typing.Union[float, int]], Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Dict[str, typing.Union[bool, str]], Undefined], typing.Any) -> None # noqa: E501
        """
        :param id: The ID of this component, used to identify dash
            components in callbacks. The ID needs to be unique
            across all of the components in an app.
        :param value: The value of the input
        :param style: The input's inline styles
        :param className: The class of the input element
        :param debounce: If true, changes to input will be sent back to the
            Dash server only on enter or when losing focus. If
            it's false, it will sent the value back on every
            change.
        :param type: The type of control to render. (Possible values:
            "text", 'number', 'password', 'email', 'range',
            'search', 'tel', 'url', 'hidden')
        :param autocomplete: This attribute indicates whether the value of
            the control can be automatically completed by
            the browser.
        :param autofocus: The element should be automatically focused after
            the page loaded.
        :param disabled: If true, the input is disabled and can't be
            clicked on.
        :param inputmode:  (Possible values: "verbatim", "latin", "latin-
            name", "latin-prose", "full-width-latin", "kana",
            "katakana", "numeric", "tel", "email", "url")
        :param list: Identifies a list of pre-defined options to suggest to
            the user. The value must be the id of a <datalist>
            element in the same document. The browser displays
            only options that are valid values for this input
            element. This attribute is ignored when the type
            attribute's value is hidden, checkbox, radio, file, or
            a button type.
        :param max: The maximum (numeric or date-time) value for this item,
            which must not be less than its minimum (min attribute)
            value.
        :param maxlength: If the value of the type attribute is text,
            email, search, password, tel, or url, this
            attribute specifies the maximum number of
            characters (in UTF-16 code units) that the user
            can enter. For other control types, it is
            ignored. It can exceed the value of the size
            attribute. If it is not specified, the user can
            enter an unlimited number of characters.
            Specifying a negative number results in the
            default behavior (i.e. the user can enter an
            unlimited number of characters). The constraint
            is evaluated only when the value of the attribute
            has been changed.
        :param min: The minimum (numeric or date-time) value for this item,
            which must not be greater than its maximum (max
            attribute) value.
        :param minlength: If the value of the type attribute is text,
            email, search, password, tel, or url, this
            attribute specifies the minimum number of
            characters (in Unicode code points) that the user
            can enter. For other control types, it is
            ignored.
        :param multiple: This Boolean attribute indicates whether the user
            can enter more than one value. This attribute
            applies when the type attribute is set to email or
            file, otherwise it is ignored.
        :param name: The name of the control, which is submitted with the
            form data.
        :param pattern: A regular expression that the control's value is
            checked against. The pattern must match the entire
            value, not just some subset. Use the title
            attribute to describe the pattern to help the user.
            This attribute applies when the value of the type
            attribute is text, search, tel, url, email, or
            password, otherwise it is ignored. The regular
            expression language is the same as JavaScript
            RegExp algorithm, with the 'u' parameter that makes
            it treat the pattern as a sequence of unicode code
            points. The pattern is not surrounded by forward
            slashes.
        :param placeholder: A hint to the user of what can be entered in
            the control . The placeholder text must not
            contain carriage returns or line-feeds. Note:
            Do not use the placeholder attribute instead of
            a <label> element, their purposes are
            different. The <label> attribute describes the
            role of the form element (i.e. it indicates
            what kind of information is expected), and the
            placeholder attribute is a hint about the
            format that the content should take. There are
            cases in which the placeholder attribute is
            never displayed to the user, so the form must
            be understandable without it.
        :param readOnly: This attribute indicates that the user cannot
            modify the value of the control. The value of the
            attribute is irrelevant. If you need read-write
            access to the input value, do not add the
            "readonly" attribute. It is ignored if the value
            of the type attribute is hidden, range, color,
            checkbox, radio, file, or a button type (such as
            button or submit).
        :param required: This attribute specifies that the user must fill
            in a value before submitting a form. It cannot be
            used when the type attribute is hidden, image, or
            a button type (submit, reset, or button). The
            :optional and :required CSS pseudo-classes will be
            applied to the field as appropriate.
        :param selectionDirection: The direction in which selection
            occurred. This is "forward" if the
            selection was made from left-to-right in
            an LTR locale or right-to-left in an RTL
            locale, or "backward" if the selection
            was made in the opposite direction. On
            platforms on which it's possible this
            value isn't known, the value can be
            "none"; for example, on macOS, the
            default direction is "none", then as the
            user begins to modify the selection
            using the keyboard, this will change to
            reflect the direction in which the
            selection is expanding.
        :param selectionEnd: The offset into the element's text content of
            the last selected character. If there's no
            selection, this value indicates the offset to
            the character following the current text input
            cursor position (that is, the position the
            next character typed would occupy).
        :param selectionStart: The offset into the element's text content
            of the first selected character. If there's
            no selection, this value indicates the
            offset to the character following the
            current text input cursor position (that is,
            the position the next character typed would
            occupy).
        :param size: The initial size of the control. This value is in
            pixels unless the value of the type attribute is text
            or password, in which case it is an integer number of
            characters. Starting in, this attribute applies only
            when the type attribute is set to text, search, tel,
            url, email, or password, otherwise it is ignored. In
            addition, the size must be greater than zero. If you
            do not specify a size, a default value of 20 is used.'
            simply states "the user agent should ensure that at
            least that many characters are visible", but different
            characters can have different widths in certain fonts.
            In some browsers, a certain string with x characters
            will not be entirely visible even if size is defined
            to at least x.
        :param spellCheck: Setting the value of this attribute to true
            indicates that the element needs to have its
            spelling and grammar checked. The value default
            indicates that the element is to act according
            to a default behavior, possibly based on the
            parent element's own spellcheck value. The value
            false indicates that the element should not be
            checked.
        :param step: Works with the min and max attributes to limit the
            increments at which a numeric or date-time value can
            be set. It can be the string any or a positive
            floating point number. If this attribute is not set to
            any, the control accepts only values at multiples of
            the step value greater than the minimum.
        :param n_submit: Number of times the `Enter` key was pressed while
            the input had focus.
        :param n_submit_timestamp: Last time that `Enter` was pressed.
        :param n_blur: Number of times the input lost focus.
        :param n_blur_timestamp: Last time the input lost focus.
        :param loading_state: Object that holds the loading state object
            coming from dash-renderer
        """
        kws = {
            k: v for k, v in locals().items() if k not in ('self', 'kwargs')
        }
        kws.update(kwargs)
        DashComponent.__init__(self, **kws)
