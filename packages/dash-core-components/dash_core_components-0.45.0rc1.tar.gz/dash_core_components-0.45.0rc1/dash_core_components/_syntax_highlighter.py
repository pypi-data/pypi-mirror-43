"""
Autogenerated file
DO NOT EDIT.
CONTENT WILL BE OVERWRITTEN!

WARNING: Do not import this file directly!
"""
import typing

from dash_component_system import (
    DashComponent, UNDEFINED, Undefined, ComponentProp
)


class SyntaxHighlighter(DashComponent):
    """
    A component for pretty printing code.
    """
    _namespace = 'dash_core_components'
    _typename = 'SyntaxHighlighter'
    available_wildcard_properties = [

    ]
    id = ComponentProp('id', UNDEFINED, False)
    children = ComponentProp('children', UNDEFINED, False)
    language = ComponentProp('language', UNDEFINED, False)
    theme = ComponentProp('theme', UNDEFINED, False)
    customStyle = ComponentProp('customStyle', UNDEFINED, False)
    codeTagProps = ComponentProp('codeTagProps', UNDEFINED, False)
    useInlineStyles = ComponentProp('useInlineStyles', UNDEFINED, False)
    showLineNumbers = ComponentProp('showLineNumbers', UNDEFINED, False)
    startingLineNumber = ComponentProp('startingLineNumber', UNDEFINED, False)
    lineNumberContainerStyle = ComponentProp('lineNumberContainerStyle', UNDEFINED, False)
    lineNumberStyle = ComponentProp('lineNumberStyle', UNDEFINED, False)
    wrapLines = ComponentProp('wrapLines', UNDEFINED, False)
    lineStyle = ComponentProp('lineStyle', UNDEFINED, False)
    loading_state = ComponentProp('loading_state', UNDEFINED, False)

    def __init__(
        self,
        children=UNDEFINED,
        id=UNDEFINED,
        language=UNDEFINED,
        theme=UNDEFINED,
        customStyle=UNDEFINED,
        codeTagProps=UNDEFINED,
        useInlineStyles=UNDEFINED,
        showLineNumbers=UNDEFINED,
        startingLineNumber=UNDEFINED,
        lineNumberContainerStyle=UNDEFINED,
        lineNumberStyle=UNDEFINED,
        wrapLines=UNDEFINED,
        lineStyle=UNDEFINED,
        loading_state=UNDEFINED,
        **kwargs
    ):
        # type: (typing.Union[typing.Union[str,typing.List[str]], Undefined], typing.Union[str, Undefined], typing.Union[str, Undefined], typing.Union[typing.Any, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[bool, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Union[float, int], Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict[str, typing.Union[bool, str]], Undefined], typing.Any) -> None # noqa: E501
        """
        :param id:
        :param children: The text to display and highlight
        :param language: the language to highlight code in.
        :param theme: theme: light or dark (Possible values: 'light',
            'dark')
        :param customStyle: prop that will be combined with the top level
            style on the pre tag, styles here will
            overwrite earlier styles.
        :param codeTagProps: props that will be spread into the <code> tag
            that is the direct parent of the highlighted
            code elements. Useful for styling/assigning
            classNames.
        :param useInlineStyles: if this prop is passed in as false, react
            syntax highlighter will not add style
            objects to elements, and will instead
            append classNames. You can then style the
            code block by using one of the CSS files
            provided by highlight.js.
        :param showLineNumbers: if this is enabled line numbers will be
            shown next to the code block.
        :param startingLineNumber: if showLineNumbers is enabled the line
            numbering will start from here.
        :param lineNumberContainerStyle: the line numbers container default
            to appearing to the left with 10px
            of right padding. You can use this
            to override those styles.
        :param lineNumberStyle: inline style to be passed to the span
            wrapping each number. Can be either an
            object or a function that recieves current
            line number as argument and returns style
            object.
        :param wrapLines: a boolean value that determines whether or not
            each line of code should be wrapped in a parent
            element. defaults to false, when false one can
            not take action on an element on the line level.
            You can see an example of what this enables here
        :param lineStyle: inline style to be passed to the span wrapping
            each line if wrapLines is true. Can be either an
            object or a function that recieves current line
            number as argument and returns style object.
        :param loading_state: Object that holds the loading state object
            coming from dash-renderer
        """
        kws = {
            k: v for k, v in locals().items() if k not in ('self', 'kwargs')
        }
        kws.update(kwargs)
        DashComponent.__init__(self, **kws)
