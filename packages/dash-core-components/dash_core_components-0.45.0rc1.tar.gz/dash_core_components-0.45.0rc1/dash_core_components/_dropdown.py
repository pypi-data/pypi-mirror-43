"""
Autogenerated file
DO NOT EDIT.
CONTENT WILL BE OVERWRITTEN!

WARNING: Do not import this file directly!
"""
import typing

from dash_component_system import (
    DashComponent, UNDEFINED, Undefined, ComponentProp
)


class Dropdown(DashComponent):
    """
    Dropdown is an interactive dropdown element for selecting one or more
    items. The values and labels of the dropdown items are specified in the
    `options` property and the selected item(s) are specified with the `value`
    property.  Use a dropdown when you have many options (more than 5) or when
    you are constrained for space. Otherwise, you can use RadioItems or a
    Checklist, which have the benefit of showing the users all of the items at
    once.
    """
    _namespace = 'dash_core_components'
    _typename = 'Dropdown'
    available_wildcard_properties = [

    ]
    id = ComponentProp('id', UNDEFINED, False)
    options = ComponentProp('options', UNDEFINED, False)
    value = ComponentProp('value', UNDEFINED, False)
    className = ComponentProp('className', UNDEFINED, False)
    clearable = ComponentProp('clearable', True, False)
    disabled = ComponentProp('disabled', False, False)
    multi = ComponentProp('multi', False, False)
    placeholder = ComponentProp('placeholder', UNDEFINED, False)
    searchable = ComponentProp('searchable', True, False)
    style = ComponentProp('style', UNDEFINED, False)
    loading_state = ComponentProp('loading_state', UNDEFINED, False)

    def __init__(
        self,
        id=UNDEFINED,
        options=UNDEFINED,
        value=UNDEFINED,
        className=UNDEFINED,
        clearable=True,
        disabled=False,
        multi=False,
        placeholder=UNDEFINED,
        searchable=True,
        style=UNDEFINED,
        loading_state=UNDEFINED,
        **kwargs
    ):
        # type: (typing.Union[str, Undefined], typing.Union[typing.List[typing.Dict[str, typing.Union[str, bool]]], Undefined], typing.Union[typing.Union[str,typing.List[str]], Undefined], typing.Union[str, Undefined], typing.Union[bool, Undefined], typing.Union[bool, Undefined], typing.Union[bool, Undefined], typing.Union[str, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict[str, typing.Union[bool, str]], Undefined], typing.Any) -> None # noqa: E501
        """
        :param id:
        :param options: An array of options
        :param value: The value of the input. If `multi` is false (the
            default) then value is just a string that corresponds
            to the values provided in the `options` property. If
            `multi` is true, then multiple values can be selected
            at once, and `value` is an array of items with values
            corresponding to those in the `options` prop.
        :param className: className of the dropdown element
        :param clearable: Whether or not the dropdown is "clearable", that
            is, whether or not a small "x" appears on the
            right of the dropdown that removes the selected
            value.
        :param disabled: If true, the option is disabled
        :param multi: If true, the user can select multiple values
        :param placeholder: The grey, default text shown when no option is
            selected
        :param searchable: Whether to enable the searching feature or not
        :param style:
        :param loading_state: Object that holds the loading state object
            coming from dash-renderer
        """
        kws = {
            k: v for k, v in locals().items() if k not in ('self', 'kwargs')
        }
        kws.update(kwargs)
        DashComponent.__init__(self, **kws)
