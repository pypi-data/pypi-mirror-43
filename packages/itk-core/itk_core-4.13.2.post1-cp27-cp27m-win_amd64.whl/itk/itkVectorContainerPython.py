# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVectorContainerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorContainerPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorContainerPython
            return _itkVectorContainerPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVectorContainerPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVectorContainerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorContainerPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython

def itkDataObjectDecoratorVCUCD_New():
  return itkDataObjectDecoratorVCUCD.New()


def itkVectorContainerUSUS_New():
  return itkVectorContainerUSUS.New()


def itkVectorContainerUSUC_New():
  return itkVectorContainerUSUC.New()


def itkVectorContainerUSUI_New():
  return itkVectorContainerUSUI.New()


def itkVectorContainerUSULL_New():
  return itkVectorContainerUSULL.New()


def itkVectorContainerUCUS_New():
  return itkVectorContainerUCUS.New()


def itkVectorContainerUCUC_New():
  return itkVectorContainerUCUC.New()


def itkVectorContainerUCUI_New():
  return itkVectorContainerUCUI.New()


def itkVectorContainerUCULL_New():
  return itkVectorContainerUCULL.New()


def itkVectorContainerUIUS_New():
  return itkVectorContainerUIUS.New()


def itkVectorContainerUIUC_New():
  return itkVectorContainerUIUC.New()


def itkVectorContainerUIUI_New():
  return itkVectorContainerUIUI.New()


def itkVectorContainerUIULL_New():
  return itkVectorContainerUIULL.New()


def itkVectorContainerULLUS_New():
  return itkVectorContainerULLUS.New()


def itkVectorContainerULLUC_New():
  return itkVectorContainerULLUC.New()


def itkVectorContainerULLUI_New():
  return itkVectorContainerULLUI.New()


def itkVectorContainerULLULL_New():
  return itkVectorContainerULLULL.New()


def itkVectorContainerULLSULL_New():
  return itkVectorContainerULLSULL.New()


def itkVectorContainerUIVUC1_New():
  return itkVectorContainerUIVUC1.New()


def itkVectorContainerUCSS_New():
  return itkVectorContainerUCSS.New()


def itkVectorContainerUICID3_New():
  return itkVectorContainerUICID3.New()


def itkVectorContainerUCO3_New():
  return itkVectorContainerUCO3.New()


def itkVectorContainerUICID2_New():
  return itkVectorContainerUICID2.New()


def itkVectorContainerUCO2_New():
  return itkVectorContainerUCO2.New()


def itkVectorContainerULLMD33_New():
  return itkVectorContainerULLMD33.New()


def itkVectorContainerULLPD3_New():
  return itkVectorContainerULLPD3.New()


def itkVectorContainerULLVD3_New():
  return itkVectorContainerULLVD3.New()


def itkVectorContainerULLMF33_New():
  return itkVectorContainerULLMF33.New()


def itkVectorContainerULLPF3_New():
  return itkVectorContainerULLPF3.New()


def itkVectorContainerULLVF3_New():
  return itkVectorContainerULLVF3.New()


def itkVectorContainerULLMD22_New():
  return itkVectorContainerULLMD22.New()


def itkVectorContainerULLPD2_New():
  return itkVectorContainerULLPD2.New()


def itkVectorContainerULLVD2_New():
  return itkVectorContainerULLVD2.New()


def itkVectorContainerULLMF22_New():
  return itkVectorContainerULLMF22.New()


def itkVectorContainerULLPF2_New():
  return itkVectorContainerULLPF2.New()


def itkVectorContainerULLVF2_New():
  return itkVectorContainerULLVF2.New()


def itkVectorContainerUCD_New():
  return itkVectorContainerUCD.New()


def itkVectorContainerULLD_New():
  return itkVectorContainerULLD.New()


def itkVectorContainerUCF_New():
  return itkVectorContainerUCF.New()


def itkVectorContainerULLF_New():
  return itkVectorContainerULLF.New()

class itkDataObjectDecoratorVCUCD(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkDataObjectDecoratorVCUCD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkDataObjectDecoratorVCUCD_Pointer"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkDataObjectDecoratorVCUCD self) -> itkDataObjectDecoratorVCUCD_Pointer"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Clone(self)


    def Set(self, val):
        """Set(itkDataObjectDecoratorVCUCD self, itkVectorContainerUCD val)"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set(self, val)


    def Get(self):
        """Get(itkDataObjectDecoratorVCUCD self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get(self)


    def GetModifiable(self):
        """GetModifiable(itkDataObjectDecoratorVCUCD self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetModifiable(self)


    def Graft(self, *args):
        """
        Graft(itkDataObjectDecoratorVCUCD self, itkDataObject arg0)
        Graft(itkDataObjectDecoratorVCUCD self, itkDataObjectDecoratorVCUCD decorator)
        """
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Graft(self, *args)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkDataObjectDecoratorVCUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkDataObjectDecoratorVCUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkDataObjectDecoratorVCUCD self) -> itkDataObjectDecoratorVCUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorVCUCD

        Create a new object of the class itkDataObjectDecoratorVCUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorVCUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorVCUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObjectDecoratorVCUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObjectDecoratorVCUCD.Clone = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Clone, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.Set = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.Get = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.GetModifiable = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetModifiable, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.Graft = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Graft, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetPointer, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD_swigregister = _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_swigregister
itkDataObjectDecoratorVCUCD_swigregister(itkDataObjectDecoratorVCUCD)

def itkDataObjectDecoratorVCUCD___New_orig__():
    """itkDataObjectDecoratorVCUCD___New_orig__() -> itkDataObjectDecoratorVCUCD_Pointer"""
    return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__()

def itkDataObjectDecoratorVCUCD_cast(obj):
    """itkDataObjectDecoratorVCUCD_cast(itkLightObject obj) -> itkDataObjectDecoratorVCUCD"""
    return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast(obj)

class itkVectorContainerUCD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCD self) -> itkVectorContainerUCD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCD self, unsigned char arg0) -> double
        ElementAt(itkVectorContainerUCD self, unsigned char arg0) -> double const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCD_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCD self, unsigned char arg0) -> double &"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCD self, unsigned char arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCD self, unsigned char arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCD self, unsigned char arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCD self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCD_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCD self, unsigned char arg0, double * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCD self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCD self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCD self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCD self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCD self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCD self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCD self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCD

        Create a new object of the class itkVectorContainerUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCD.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Clone, None, itkVectorContainerUCD)
itkVectorContainerUCD.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer, None, itkVectorContainerUCD)
itkVectorContainerUCD.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer, None, itkVectorContainerUCD)
itkVectorContainerUCD.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_ElementAt, None, itkVectorContainerUCD)
itkVectorContainerUCD.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt, None, itkVectorContainerUCD)
itkVectorContainerUCD.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetElement, None, itkVectorContainerUCD)
itkVectorContainerUCD.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_SetElement, None, itkVectorContainerUCD)
itkVectorContainerUCD.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_InsertElement, None, itkVectorContainerUCD)
itkVectorContainerUCD.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_IndexExists, None, itkVectorContainerUCD)
itkVectorContainerUCD.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists, None, itkVectorContainerUCD)
itkVectorContainerUCD.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CreateIndex, None, itkVectorContainerUCD)
itkVectorContainerUCD.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex, None, itkVectorContainerUCD)
itkVectorContainerUCD.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Size, None, itkVectorContainerUCD)
itkVectorContainerUCD.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Reserve, None, itkVectorContainerUCD)
itkVectorContainerUCD.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Squeeze, None, itkVectorContainerUCD)
itkVectorContainerUCD.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Initialize, None, itkVectorContainerUCD)
itkVectorContainerUCD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetPointer, None, itkVectorContainerUCD)
itkVectorContainerUCD_swigregister = _itkVectorContainerPython.itkVectorContainerUCD_swigregister
itkVectorContainerUCD_swigregister(itkVectorContainerUCD)

def itkVectorContainerUCD___New_orig__():
    """itkVectorContainerUCD___New_orig__() -> itkVectorContainerUCD_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCD___New_orig__()

def itkVectorContainerUCD_cast(obj):
    """itkVectorContainerUCD_cast(itkLightObject obj) -> itkVectorContainerUCD"""
    return _itkVectorContainerPython.itkVectorContainerUCD_cast(obj)

class itkVectorContainerUCF(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCF self) -> itkVectorContainerUCF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCF self, unsigned char arg0) -> float
        ElementAt(itkVectorContainerUCF self, unsigned char arg0) -> float const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCF_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCF self, unsigned char arg0) -> float &"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCF self, unsigned char arg0) -> float"""
        return _itkVectorContainerPython.itkVectorContainerUCF_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCF self, unsigned char arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCF self, unsigned char arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCF self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCF_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCF self, unsigned char arg0, float * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCF_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCF self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCF self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCF self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCF self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCF self)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCF self)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCF

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCF self) -> itkVectorContainerUCF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCF

        Create a new object of the class itkVectorContainerUCF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCF.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Clone, None, itkVectorContainerUCF)
itkVectorContainerUCF.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CastToSTLContainer, None, itkVectorContainerUCF)
itkVectorContainerUCF.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CastToSTLConstContainer, None, itkVectorContainerUCF)
itkVectorContainerUCF.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_ElementAt, None, itkVectorContainerUCF)
itkVectorContainerUCF.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CreateElementAt, None, itkVectorContainerUCF)
itkVectorContainerUCF.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_GetElement, None, itkVectorContainerUCF)
itkVectorContainerUCF.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_SetElement, None, itkVectorContainerUCF)
itkVectorContainerUCF.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_InsertElement, None, itkVectorContainerUCF)
itkVectorContainerUCF.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_IndexExists, None, itkVectorContainerUCF)
itkVectorContainerUCF.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_GetElementIfIndexExists, None, itkVectorContainerUCF)
itkVectorContainerUCF.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CreateIndex, None, itkVectorContainerUCF)
itkVectorContainerUCF.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_DeleteIndex, None, itkVectorContainerUCF)
itkVectorContainerUCF.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Size, None, itkVectorContainerUCF)
itkVectorContainerUCF.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Reserve, None, itkVectorContainerUCF)
itkVectorContainerUCF.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Squeeze, None, itkVectorContainerUCF)
itkVectorContainerUCF.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Initialize, None, itkVectorContainerUCF)
itkVectorContainerUCF.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_GetPointer, None, itkVectorContainerUCF)
itkVectorContainerUCF_swigregister = _itkVectorContainerPython.itkVectorContainerUCF_swigregister
itkVectorContainerUCF_swigregister(itkVectorContainerUCF)

def itkVectorContainerUCF___New_orig__():
    """itkVectorContainerUCF___New_orig__() -> itkVectorContainerUCF_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCF___New_orig__()

def itkVectorContainerUCF_cast(obj):
    """itkVectorContainerUCF_cast(itkLightObject obj) -> itkVectorContainerUCF"""
    return _itkVectorContainerPython.itkVectorContainerUCF_cast(obj)

class itkVectorContainerUCO2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCO2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCO2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCO2 self) -> itkVectorContainerUCO2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCO2 self) -> std::vector< itkOffset2,std::allocator< itkOffset2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCO2 self) -> std::vector< itkOffset2,std::allocator< itkOffset2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2
        ElementAt(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2
        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCO2 self, unsigned char arg0, itkOffset2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCO2 self, unsigned char arg0, itkOffset2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCO2 self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCO2 self, unsigned char arg0, itkOffset2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCO2 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCO2 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCO2 self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCO2 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCO2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCO2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCO2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCO2 self) -> itkVectorContainerUCO2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO2

        Create a new object of the class itkVectorContainerUCO2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCO2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCO2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Clone, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_ElementAt, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetElement, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_SetElement, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_InsertElement, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_IndexExists, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Size, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Reserve, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Squeeze, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Initialize, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetPointer, None, itkVectorContainerUCO2)
itkVectorContainerUCO2_swigregister = _itkVectorContainerPython.itkVectorContainerUCO2_swigregister
itkVectorContainerUCO2_swigregister(itkVectorContainerUCO2)

def itkVectorContainerUCO2___New_orig__():
    """itkVectorContainerUCO2___New_orig__() -> itkVectorContainerUCO2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__()

def itkVectorContainerUCO2_cast(obj):
    """itkVectorContainerUCO2_cast(itkLightObject obj) -> itkVectorContainerUCO2"""
    return _itkVectorContainerPython.itkVectorContainerUCO2_cast(obj)

class itkVectorContainerUCO3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCO3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCO3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCO3 self) -> itkVectorContainerUCO3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCO3 self) -> std::vector< itkOffset3,std::allocator< itkOffset3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCO3 self) -> std::vector< itkOffset3,std::allocator< itkOffset3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3
        ElementAt(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3
        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCO3 self, unsigned char arg0, itkOffset3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCO3 self, unsigned char arg0, itkOffset3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCO3 self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCO3 self, unsigned char arg0, itkOffset3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCO3 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCO3 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCO3 self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCO3 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCO3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCO3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCO3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCO3 self) -> itkVectorContainerUCO3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO3

        Create a new object of the class itkVectorContainerUCO3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCO3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCO3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Clone, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_ElementAt, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetElement, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_SetElement, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_InsertElement, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_IndexExists, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Size, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Reserve, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Squeeze, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Initialize, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetPointer, None, itkVectorContainerUCO3)
itkVectorContainerUCO3_swigregister = _itkVectorContainerPython.itkVectorContainerUCO3_swigregister
itkVectorContainerUCO3_swigregister(itkVectorContainerUCO3)

def itkVectorContainerUCO3___New_orig__():
    """itkVectorContainerUCO3___New_orig__() -> itkVectorContainerUCO3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__()

def itkVectorContainerUCO3_cast(obj):
    """itkVectorContainerUCO3_cast(itkLightObject obj) -> itkVectorContainerUCO3"""
    return _itkVectorContainerPython.itkVectorContainerUCO3_cast(obj)

class itkVectorContainerUCSS(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCSS self) -> itkVectorContainerUCSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCSS self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCSS self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCSS self, unsigned char arg0) -> short
        ElementAt(itkVectorContainerUCSS self, unsigned char arg0) -> short const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCSS self, unsigned char arg0) -> short &"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCSS self, unsigned char arg0) -> short"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCSS self, unsigned char arg0, short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCSS self, unsigned char arg0, short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCSS self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCSS self, unsigned char arg0, short * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCSS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCSS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCSS self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCSS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCSS self)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCSS self)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCSS

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCSS self) -> itkVectorContainerUCSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCSS

        Create a new object of the class itkVectorContainerUCSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCSS.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Clone, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLContainer, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLConstContainer, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_ElementAt, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CreateElementAt, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_GetElement, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_SetElement, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_InsertElement, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_IndexExists, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_GetElementIfIndexExists, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CreateIndex, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_DeleteIndex, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Size, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Reserve, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Squeeze, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Initialize, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_GetPointer, None, itkVectorContainerUCSS)
itkVectorContainerUCSS_swigregister = _itkVectorContainerPython.itkVectorContainerUCSS_swigregister
itkVectorContainerUCSS_swigregister(itkVectorContainerUCSS)

def itkVectorContainerUCSS___New_orig__():
    """itkVectorContainerUCSS___New_orig__() -> itkVectorContainerUCSS_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCSS___New_orig__()

def itkVectorContainerUCSS_cast(obj):
    """itkVectorContainerUCSS_cast(itkLightObject obj) -> itkVectorContainerUCSS"""
    return _itkVectorContainerPython.itkVectorContainerUCSS_cast(obj)

class itkVectorContainerUCUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCUC self) -> itkVectorContainerUCUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char
        ElementAt(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char &"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCUC self, unsigned char arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCUC self, unsigned char arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCUC self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCUC self, unsigned char arg0, unsigned char * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCUC self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCUC self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCUC self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCUC self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCUC self) -> itkVectorContainerUCUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUC

        Create a new object of the class itkVectorContainerUCUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCUC.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Clone, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLContainer, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLConstContainer, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_ElementAt, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CreateElementAt, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_GetElement, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_SetElement, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_InsertElement, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_IndexExists, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_GetElementIfIndexExists, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CreateIndex, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_DeleteIndex, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Size, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Reserve, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Squeeze, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Initialize, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_GetPointer, None, itkVectorContainerUCUC)
itkVectorContainerUCUC_swigregister = _itkVectorContainerPython.itkVectorContainerUCUC_swigregister
itkVectorContainerUCUC_swigregister(itkVectorContainerUCUC)

def itkVectorContainerUCUC___New_orig__():
    """itkVectorContainerUCUC___New_orig__() -> itkVectorContainerUCUC_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCUC___New_orig__()

def itkVectorContainerUCUC_cast(obj):
    """itkVectorContainerUCUC_cast(itkLightObject obj) -> itkVectorContainerUCUC"""
    return _itkVectorContainerPython.itkVectorContainerUCUC_cast(obj)

class itkVectorContainerUCUI(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCUI self) -> itkVectorContainerUCUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int
        ElementAt(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int &"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCUI self, unsigned char arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCUI self, unsigned char arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCUI self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCUI self, unsigned char arg0, unsigned int * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCUI self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCUI self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCUI self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCUI self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUI

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCUI"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCUI self) -> itkVectorContainerUCUI"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUI

        Create a new object of the class itkVectorContainerUCUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCUI.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Clone, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLContainer, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLConstContainer, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_ElementAt, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CreateElementAt, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_GetElement, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_SetElement, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_InsertElement, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_IndexExists, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_GetElementIfIndexExists, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CreateIndex, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_DeleteIndex, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Size, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Reserve, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Squeeze, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Initialize, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_GetPointer, None, itkVectorContainerUCUI)
itkVectorContainerUCUI_swigregister = _itkVectorContainerPython.itkVectorContainerUCUI_swigregister
itkVectorContainerUCUI_swigregister(itkVectorContainerUCUI)

def itkVectorContainerUCUI___New_orig__():
    """itkVectorContainerUCUI___New_orig__() -> itkVectorContainerUCUI_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCUI___New_orig__()

def itkVectorContainerUCUI_cast(obj):
    """itkVectorContainerUCUI_cast(itkLightObject obj) -> itkVectorContainerUCUI"""
    return _itkVectorContainerPython.itkVectorContainerUCUI_cast(obj)

class itkVectorContainerUCULL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCULL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCULL self) -> itkVectorContainerUCULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCULL self, unsigned char arg0) -> unsigned long long
        ElementAt(itkVectorContainerUCULL self, unsigned char arg0) -> unsigned long long const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCULL self, unsigned char arg0) -> unsigned long long &"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCULL self, unsigned char arg0) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCULL self, unsigned char arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCULL self, unsigned char arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCULL self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCULL self, unsigned char arg0, unsigned long long * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCULL self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCULL self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCULL self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCULL self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCULL self)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCULL self)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCULL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCULL"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCULL self) -> itkVectorContainerUCULL"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCULL

        Create a new object of the class itkVectorContainerUCULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCULL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCULL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCULL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_Clone, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLContainer, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLConstContainer, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_ElementAt, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_CreateElementAt, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_GetElement, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_SetElement, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_InsertElement, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_IndexExists, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_GetElementIfIndexExists, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_CreateIndex, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_DeleteIndex, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_Size, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_Reserve, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_Squeeze, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_Initialize, None, itkVectorContainerUCULL)
itkVectorContainerUCULL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCULL_GetPointer, None, itkVectorContainerUCULL)
itkVectorContainerUCULL_swigregister = _itkVectorContainerPython.itkVectorContainerUCULL_swigregister
itkVectorContainerUCULL_swigregister(itkVectorContainerUCULL)

def itkVectorContainerUCULL___New_orig__():
    """itkVectorContainerUCULL___New_orig__() -> itkVectorContainerUCULL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCULL___New_orig__()

def itkVectorContainerUCULL_cast(obj):
    """itkVectorContainerUCULL_cast(itkLightObject obj) -> itkVectorContainerUCULL"""
    return _itkVectorContainerPython.itkVectorContainerUCULL_cast(obj)

class itkVectorContainerUCUS(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCUS self) -> itkVectorContainerUCUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCUS self, unsigned char arg0) -> unsigned short
        ElementAt(itkVectorContainerUCUS self, unsigned char arg0) -> unsigned short const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCUS self, unsigned char arg0) -> unsigned short &"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCUS self, unsigned char arg0) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCUS self, unsigned char arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCUS self, unsigned char arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCUS self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCUS self, unsigned char arg0, unsigned short * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCUS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCUS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCUS self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCUS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCUS self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCUS self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUS

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCUS"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCUS self) -> itkVectorContainerUCUS"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUS

        Create a new object of the class itkVectorContainerUCUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCUS.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_Clone, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLContainer, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLConstContainer, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_ElementAt, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_CreateElementAt, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_GetElement, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_SetElement, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_InsertElement, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_IndexExists, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_GetElementIfIndexExists, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_CreateIndex, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_DeleteIndex, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_Size, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_Reserve, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_Squeeze, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_Initialize, None, itkVectorContainerUCUS)
itkVectorContainerUCUS.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUS_GetPointer, None, itkVectorContainerUCUS)
itkVectorContainerUCUS_swigregister = _itkVectorContainerPython.itkVectorContainerUCUS_swigregister
itkVectorContainerUCUS_swigregister(itkVectorContainerUCUS)

def itkVectorContainerUCUS___New_orig__():
    """itkVectorContainerUCUS___New_orig__() -> itkVectorContainerUCUS_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCUS___New_orig__()

def itkVectorContainerUCUS_cast(obj):
    """itkVectorContainerUCUS_cast(itkLightObject obj) -> itkVectorContainerUCUS"""
    return _itkVectorContainerPython.itkVectorContainerUCUS_cast(obj)

class itkVectorContainerUICID2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUICID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUICID2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUICID2 self) -> itkVectorContainerUICID2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUICID2 self) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUICID2 self) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2
        ElementAt(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2
        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUICID2 self, unsigned int arg0, itkContinuousIndexD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUICID2 self, unsigned int arg0, itkContinuousIndexD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUICID2 self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUICID2 self, unsigned int arg0, itkContinuousIndexD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUICID2 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUICID2 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUICID2 self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUICID2 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUICID2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUICID2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUICID2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUICID2 self) -> itkVectorContainerUICID2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID2

        Create a new object of the class itkVectorContainerUICID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUICID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUICID2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Clone, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_ElementAt, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetElement, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_SetElement, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_InsertElement, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_IndexExists, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Size, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Reserve, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Squeeze, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Initialize, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetPointer, None, itkVectorContainerUICID2)
itkVectorContainerUICID2_swigregister = _itkVectorContainerPython.itkVectorContainerUICID2_swigregister
itkVectorContainerUICID2_swigregister(itkVectorContainerUICID2)

def itkVectorContainerUICID2___New_orig__():
    """itkVectorContainerUICID2___New_orig__() -> itkVectorContainerUICID2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__()

def itkVectorContainerUICID2_cast(obj):
    """itkVectorContainerUICID2_cast(itkLightObject obj) -> itkVectorContainerUICID2"""
    return _itkVectorContainerPython.itkVectorContainerUICID2_cast(obj)

class itkVectorContainerUICID3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUICID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUICID3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUICID3 self) -> itkVectorContainerUICID3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUICID3 self) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUICID3 self) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3
        ElementAt(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3
        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUICID3 self, unsigned int arg0, itkContinuousIndexD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUICID3 self, unsigned int arg0, itkContinuousIndexD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUICID3 self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUICID3 self, unsigned int arg0, itkContinuousIndexD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUICID3 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUICID3 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUICID3 self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUICID3 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUICID3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUICID3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUICID3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUICID3 self) -> itkVectorContainerUICID3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID3

        Create a new object of the class itkVectorContainerUICID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUICID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUICID3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Clone, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_ElementAt, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetElement, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_SetElement, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_InsertElement, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_IndexExists, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Size, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Reserve, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Squeeze, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Initialize, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetPointer, None, itkVectorContainerUICID3)
itkVectorContainerUICID3_swigregister = _itkVectorContainerPython.itkVectorContainerUICID3_swigregister
itkVectorContainerUICID3_swigregister(itkVectorContainerUICID3)

def itkVectorContainerUICID3___New_orig__():
    """itkVectorContainerUICID3___New_orig__() -> itkVectorContainerUICID3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__()

def itkVectorContainerUICID3_cast(obj):
    """itkVectorContainerUICID3_cast(itkLightObject obj) -> itkVectorContainerUICID3"""
    return _itkVectorContainerPython.itkVectorContainerUICID3_cast(obj)

class itkVectorContainerUIUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIUC self) -> itkVectorContainerUIUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char
        ElementAt(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char const &
        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char &"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIUC self, unsigned int arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIUC self, unsigned int arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIUC self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIUC self, unsigned int arg0, unsigned char * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIUC self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIUC self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIUC self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIUC self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIUC self) -> itkVectorContainerUIUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUC

        Create a new object of the class itkVectorContainerUIUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIUC.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Clone, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLContainer, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLConstContainer, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_ElementAt, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CreateElementAt, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_GetElement, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_SetElement, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_InsertElement, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_IndexExists, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_GetElementIfIndexExists, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CreateIndex, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_DeleteIndex, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Size, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Reserve, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Squeeze, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Initialize, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_GetPointer, None, itkVectorContainerUIUC)
itkVectorContainerUIUC_swigregister = _itkVectorContainerPython.itkVectorContainerUIUC_swigregister
itkVectorContainerUIUC_swigregister(itkVectorContainerUIUC)

def itkVectorContainerUIUC___New_orig__():
    """itkVectorContainerUIUC___New_orig__() -> itkVectorContainerUIUC_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIUC___New_orig__()

def itkVectorContainerUIUC_cast(obj):
    """itkVectorContainerUIUC_cast(itkLightObject obj) -> itkVectorContainerUIUC"""
    return _itkVectorContainerPython.itkVectorContainerUIUC_cast(obj)

class itkVectorContainerUIUI(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIUI self) -> itkVectorContainerUIUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > &"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int
        ElementAt(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int const &
        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int &"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIUI self, unsigned int arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIUI self, unsigned int arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIUI self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIUI self, unsigned int arg0, unsigned int * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIUI self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIUI self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIUI self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIUI self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUI

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIUI"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIUI self) -> itkVectorContainerUIUI"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUI

        Create a new object of the class itkVectorContainerUIUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIUI.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Clone, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLContainer, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLConstContainer, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_ElementAt, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CreateElementAt, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_GetElement, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_SetElement, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_InsertElement, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_IndexExists, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_GetElementIfIndexExists, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CreateIndex, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_DeleteIndex, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Size, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Reserve, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Squeeze, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Initialize, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_GetPointer, None, itkVectorContainerUIUI)
itkVectorContainerUIUI_swigregister = _itkVectorContainerPython.itkVectorContainerUIUI_swigregister
itkVectorContainerUIUI_swigregister(itkVectorContainerUIUI)

def itkVectorContainerUIUI___New_orig__():
    """itkVectorContainerUIUI___New_orig__() -> itkVectorContainerUIUI_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIUI___New_orig__()

def itkVectorContainerUIUI_cast(obj):
    """itkVectorContainerUIUI_cast(itkLightObject obj) -> itkVectorContainerUIUI"""
    return _itkVectorContainerPython.itkVectorContainerUIUI_cast(obj)

class itkVectorContainerUIULL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIULL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIULL self) -> itkVectorContainerUIULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIULL self, unsigned int arg0) -> unsigned long long
        ElementAt(itkVectorContainerUIULL self, unsigned int arg0) -> unsigned long long const &
        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIULL self, unsigned int arg0) -> unsigned long long &"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIULL self, unsigned int arg0) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIULL self, unsigned int arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIULL self, unsigned int arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIULL self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIULL self, unsigned int arg0, unsigned long long * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIULL self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIULL self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIULL self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIULL self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIULL self)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIULL self)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIULL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIULL"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIULL self) -> itkVectorContainerUIULL"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIULL

        Create a new object of the class itkVectorContainerUIULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIULL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIULL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIULL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_Clone, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLContainer, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLConstContainer, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_ElementAt, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_CreateElementAt, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_GetElement, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_SetElement, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_InsertElement, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_IndexExists, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_GetElementIfIndexExists, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_CreateIndex, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_DeleteIndex, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_Size, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_Reserve, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_Squeeze, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_Initialize, None, itkVectorContainerUIULL)
itkVectorContainerUIULL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIULL_GetPointer, None, itkVectorContainerUIULL)
itkVectorContainerUIULL_swigregister = _itkVectorContainerPython.itkVectorContainerUIULL_swigregister
itkVectorContainerUIULL_swigregister(itkVectorContainerUIULL)

def itkVectorContainerUIULL___New_orig__():
    """itkVectorContainerUIULL___New_orig__() -> itkVectorContainerUIULL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIULL___New_orig__()

def itkVectorContainerUIULL_cast(obj):
    """itkVectorContainerUIULL_cast(itkLightObject obj) -> itkVectorContainerUIULL"""
    return _itkVectorContainerPython.itkVectorContainerUIULL_cast(obj)

class itkVectorContainerUIUS(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIUS self) -> itkVectorContainerUIUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIUS self, unsigned int arg0) -> unsigned short
        ElementAt(itkVectorContainerUIUS self, unsigned int arg0) -> unsigned short const &
        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIUS self, unsigned int arg0) -> unsigned short &"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIUS self, unsigned int arg0) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIUS self, unsigned int arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIUS self, unsigned int arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIUS self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIUS self, unsigned int arg0, unsigned short * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIUS self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIUS self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIUS self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIUS self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIUS self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIUS self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUS

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIUS"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIUS self) -> itkVectorContainerUIUS"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUS

        Create a new object of the class itkVectorContainerUIUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIUS.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_Clone, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLContainer, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLConstContainer, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_ElementAt, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_CreateElementAt, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_GetElement, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_SetElement, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_InsertElement, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_IndexExists, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_GetElementIfIndexExists, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_CreateIndex, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_DeleteIndex, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_Size, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_Reserve, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_Squeeze, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_Initialize, None, itkVectorContainerUIUS)
itkVectorContainerUIUS.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUS_GetPointer, None, itkVectorContainerUIUS)
itkVectorContainerUIUS_swigregister = _itkVectorContainerPython.itkVectorContainerUIUS_swigregister
itkVectorContainerUIUS_swigregister(itkVectorContainerUIUS)

def itkVectorContainerUIUS___New_orig__():
    """itkVectorContainerUIUS___New_orig__() -> itkVectorContainerUIUS_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIUS___New_orig__()

def itkVectorContainerUIUS_cast(obj):
    """itkVectorContainerUIUS_cast(itkLightObject obj) -> itkVectorContainerUIUS"""
    return _itkVectorContainerPython.itkVectorContainerUIUS_cast(obj)

class itkVectorContainerUIVUC1(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIVUC1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIVUC1_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIVUC1 self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIVUC1 self) -> std::vector< itkVectorUC1,std::allocator< itkVectorUC1 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIVUC1 self) -> std::vector< itkVectorUC1,std::allocator< itkVectorUC1 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1
        ElementAt(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1
        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIVUC1 self, unsigned int arg0, itkVectorUC1 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIVUC1 self, unsigned int arg0, itkVectorUC1 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIVUC1 self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIVUC1 self, unsigned int arg0, itkVectorUC1 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIVUC1 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIVUC1 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIVUC1 self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIVUC1 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIVUC1 self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIVUC1 self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIVUC1

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIVUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIVUC1 self) -> itkVectorContainerUIVUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIVUC1

        Create a new object of the class itkVectorContainerUIVUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIVUC1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIVUC1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIVUC1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIVUC1.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Clone, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Size, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetPointer, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1_swigregister = _itkVectorContainerPython.itkVectorContainerUIVUC1_swigregister
itkVectorContainerUIVUC1_swigregister(itkVectorContainerUIVUC1)

def itkVectorContainerUIVUC1___New_orig__():
    """itkVectorContainerUIVUC1___New_orig__() -> itkVectorContainerUIVUC1_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__()

def itkVectorContainerUIVUC1_cast(obj):
    """itkVectorContainerUIVUC1_cast(itkLightObject obj) -> itkVectorContainerUIVUC1"""
    return _itkVectorContainerPython.itkVectorContainerUIVUC1_cast(obj)

class itkVectorContainerULLD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLD self) -> itkVectorContainerULLD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULLD_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULLD_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLD self, unsigned long long arg0) -> double
        ElementAt(itkVectorContainerULLD self, unsigned long long arg0) -> double const &
        """
        return _itkVectorContainerPython.itkVectorContainerULLD_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLD self, unsigned long long arg0) -> double &"""
        return _itkVectorContainerPython.itkVectorContainerULLD_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLD self, unsigned long long arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerULLD_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLD self, unsigned long long arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLD self, unsigned long long arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLD self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLD_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLD self, unsigned long long arg0, double * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLD_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLD self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLD self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLD self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLD self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLD self)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLD self)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLD

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLD"""
        return _itkVectorContainerPython.itkVectorContainerULLD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLD self) -> itkVectorContainerULLD"""
        return _itkVectorContainerPython.itkVectorContainerULLD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLD

        Create a new object of the class itkVectorContainerULLD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLD.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_Clone, None, itkVectorContainerULLD)
itkVectorContainerULLD.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_CastToSTLContainer, None, itkVectorContainerULLD)
itkVectorContainerULLD.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_CastToSTLConstContainer, None, itkVectorContainerULLD)
itkVectorContainerULLD.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_ElementAt, None, itkVectorContainerULLD)
itkVectorContainerULLD.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_CreateElementAt, None, itkVectorContainerULLD)
itkVectorContainerULLD.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_GetElement, None, itkVectorContainerULLD)
itkVectorContainerULLD.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_SetElement, None, itkVectorContainerULLD)
itkVectorContainerULLD.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_InsertElement, None, itkVectorContainerULLD)
itkVectorContainerULLD.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_IndexExists, None, itkVectorContainerULLD)
itkVectorContainerULLD.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_GetElementIfIndexExists, None, itkVectorContainerULLD)
itkVectorContainerULLD.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_CreateIndex, None, itkVectorContainerULLD)
itkVectorContainerULLD.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_DeleteIndex, None, itkVectorContainerULLD)
itkVectorContainerULLD.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_Size, None, itkVectorContainerULLD)
itkVectorContainerULLD.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_Reserve, None, itkVectorContainerULLD)
itkVectorContainerULLD.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_Squeeze, None, itkVectorContainerULLD)
itkVectorContainerULLD.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_Initialize, None, itkVectorContainerULLD)
itkVectorContainerULLD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLD_GetPointer, None, itkVectorContainerULLD)
itkVectorContainerULLD_swigregister = _itkVectorContainerPython.itkVectorContainerULLD_swigregister
itkVectorContainerULLD_swigregister(itkVectorContainerULLD)

def itkVectorContainerULLD___New_orig__():
    """itkVectorContainerULLD___New_orig__() -> itkVectorContainerULLD_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLD___New_orig__()

def itkVectorContainerULLD_cast(obj):
    """itkVectorContainerULLD_cast(itkLightObject obj) -> itkVectorContainerULLD"""
    return _itkVectorContainerPython.itkVectorContainerULLD_cast(obj)

class itkVectorContainerULLF(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLF self) -> itkVectorContainerULLF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerULLF_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerULLF_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLF self, unsigned long long arg0) -> float
        ElementAt(itkVectorContainerULLF self, unsigned long long arg0) -> float const &
        """
        return _itkVectorContainerPython.itkVectorContainerULLF_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLF self, unsigned long long arg0) -> float &"""
        return _itkVectorContainerPython.itkVectorContainerULLF_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLF self, unsigned long long arg0) -> float"""
        return _itkVectorContainerPython.itkVectorContainerULLF_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLF self, unsigned long long arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLF self, unsigned long long arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLF self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLF_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLF self, unsigned long long arg0, float * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLF_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLF self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLF self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLF self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLF self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLF self)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLF self)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLF

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLF"""
        return _itkVectorContainerPython.itkVectorContainerULLF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLF self) -> itkVectorContainerULLF"""
        return _itkVectorContainerPython.itkVectorContainerULLF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLF

        Create a new object of the class itkVectorContainerULLF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLF.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_Clone, None, itkVectorContainerULLF)
itkVectorContainerULLF.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_CastToSTLContainer, None, itkVectorContainerULLF)
itkVectorContainerULLF.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_CastToSTLConstContainer, None, itkVectorContainerULLF)
itkVectorContainerULLF.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_ElementAt, None, itkVectorContainerULLF)
itkVectorContainerULLF.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_CreateElementAt, None, itkVectorContainerULLF)
itkVectorContainerULLF.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_GetElement, None, itkVectorContainerULLF)
itkVectorContainerULLF.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_SetElement, None, itkVectorContainerULLF)
itkVectorContainerULLF.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_InsertElement, None, itkVectorContainerULLF)
itkVectorContainerULLF.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_IndexExists, None, itkVectorContainerULLF)
itkVectorContainerULLF.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_GetElementIfIndexExists, None, itkVectorContainerULLF)
itkVectorContainerULLF.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_CreateIndex, None, itkVectorContainerULLF)
itkVectorContainerULLF.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_DeleteIndex, None, itkVectorContainerULLF)
itkVectorContainerULLF.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_Size, None, itkVectorContainerULLF)
itkVectorContainerULLF.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_Reserve, None, itkVectorContainerULLF)
itkVectorContainerULLF.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_Squeeze, None, itkVectorContainerULLF)
itkVectorContainerULLF.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_Initialize, None, itkVectorContainerULLF)
itkVectorContainerULLF.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLF_GetPointer, None, itkVectorContainerULLF)
itkVectorContainerULLF_swigregister = _itkVectorContainerPython.itkVectorContainerULLF_swigregister
itkVectorContainerULLF_swigregister(itkVectorContainerULLF)

def itkVectorContainerULLF___New_orig__():
    """itkVectorContainerULLF___New_orig__() -> itkVectorContainerULLF_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLF___New_orig__()

def itkVectorContainerULLF_cast(obj):
    """itkVectorContainerULLF_cast(itkLightObject obj) -> itkVectorContainerULLF"""
    return _itkVectorContainerPython.itkVectorContainerULLF_cast(obj)

class itkVectorContainerULLMD22(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLMD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLMD22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLMD22 self) -> itkVectorContainerULLMD22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLMD22 self) -> std::vector< itkMatrixD22,std::allocator< itkMatrixD22 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLMD22 self) -> std::vector< itkMatrixD22,std::allocator< itkMatrixD22 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLMD22 self, unsigned long long arg0) -> itkMatrixD22
        ElementAt(itkVectorContainerULLMD22 self, unsigned long long arg0) -> itkMatrixD22
        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLMD22 self, unsigned long long arg0) -> itkMatrixD22"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLMD22 self, unsigned long long arg0) -> itkMatrixD22"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLMD22 self, unsigned long long arg0, itkMatrixD22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLMD22 self, unsigned long long arg0, itkMatrixD22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLMD22 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLMD22 self, unsigned long long arg0, itkMatrixD22 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLMD22 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLMD22 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLMD22 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLMD22 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLMD22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLMD22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMD22

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLMD22"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLMD22 self) -> itkVectorContainerULLMD22"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMD22

        Create a new object of the class itkVectorContainerULLMD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLMD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLMD22.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_Clone, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLContainer, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLConstContainer, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_ElementAt, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_CreateElementAt, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_GetElement, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_SetElement, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_InsertElement, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_IndexExists, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_GetElementIfIndexExists, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_CreateIndex, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_DeleteIndex, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_Size, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_Reserve, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_Squeeze, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_Initialize, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD22_GetPointer, None, itkVectorContainerULLMD22)
itkVectorContainerULLMD22_swigregister = _itkVectorContainerPython.itkVectorContainerULLMD22_swigregister
itkVectorContainerULLMD22_swigregister(itkVectorContainerULLMD22)

def itkVectorContainerULLMD22___New_orig__():
    """itkVectorContainerULLMD22___New_orig__() -> itkVectorContainerULLMD22_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLMD22___New_orig__()

def itkVectorContainerULLMD22_cast(obj):
    """itkVectorContainerULLMD22_cast(itkLightObject obj) -> itkVectorContainerULLMD22"""
    return _itkVectorContainerPython.itkVectorContainerULLMD22_cast(obj)

class itkVectorContainerULLMD33(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLMD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLMD33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLMD33 self) -> itkVectorContainerULLMD33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLMD33 self) -> std::vector< itkMatrixD33,std::allocator< itkMatrixD33 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLMD33 self) -> std::vector< itkMatrixD33,std::allocator< itkMatrixD33 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLMD33 self, unsigned long long arg0) -> itkMatrixD33
        ElementAt(itkVectorContainerULLMD33 self, unsigned long long arg0) -> itkMatrixD33
        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLMD33 self, unsigned long long arg0) -> itkMatrixD33"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLMD33 self, unsigned long long arg0) -> itkMatrixD33"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLMD33 self, unsigned long long arg0, itkMatrixD33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLMD33 self, unsigned long long arg0, itkMatrixD33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLMD33 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLMD33 self, unsigned long long arg0, itkMatrixD33 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLMD33 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLMD33 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLMD33 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLMD33 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLMD33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLMD33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMD33

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLMD33"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLMD33 self) -> itkVectorContainerULLMD33"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMD33

        Create a new object of the class itkVectorContainerULLMD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLMD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLMD33.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_Clone, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLContainer, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLConstContainer, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_ElementAt, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_CreateElementAt, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_GetElement, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_SetElement, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_InsertElement, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_IndexExists, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_GetElementIfIndexExists, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_CreateIndex, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_DeleteIndex, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_Size, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_Reserve, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_Squeeze, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_Initialize, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMD33_GetPointer, None, itkVectorContainerULLMD33)
itkVectorContainerULLMD33_swigregister = _itkVectorContainerPython.itkVectorContainerULLMD33_swigregister
itkVectorContainerULLMD33_swigregister(itkVectorContainerULLMD33)

def itkVectorContainerULLMD33___New_orig__():
    """itkVectorContainerULLMD33___New_orig__() -> itkVectorContainerULLMD33_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLMD33___New_orig__()

def itkVectorContainerULLMD33_cast(obj):
    """itkVectorContainerULLMD33_cast(itkLightObject obj) -> itkVectorContainerULLMD33"""
    return _itkVectorContainerPython.itkVectorContainerULLMD33_cast(obj)

class itkVectorContainerULLMF22(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLMF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLMF22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLMF22 self) -> itkVectorContainerULLMF22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLMF22 self) -> std::vector< itkMatrixF22,std::allocator< itkMatrixF22 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLMF22 self) -> std::vector< itkMatrixF22,std::allocator< itkMatrixF22 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLMF22 self, unsigned long long arg0) -> itkMatrixF22
        ElementAt(itkVectorContainerULLMF22 self, unsigned long long arg0) -> itkMatrixF22
        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLMF22 self, unsigned long long arg0) -> itkMatrixF22"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLMF22 self, unsigned long long arg0) -> itkMatrixF22"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLMF22 self, unsigned long long arg0, itkMatrixF22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLMF22 self, unsigned long long arg0, itkMatrixF22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLMF22 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLMF22 self, unsigned long long arg0, itkMatrixF22 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLMF22 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLMF22 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLMF22 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLMF22 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLMF22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLMF22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLMF22"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLMF22 self) -> itkVectorContainerULLMF22"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMF22

        Create a new object of the class itkVectorContainerULLMF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLMF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLMF22.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_Clone, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLContainer, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLConstContainer, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_ElementAt, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_CreateElementAt, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_GetElement, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_SetElement, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_InsertElement, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_IndexExists, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_GetElementIfIndexExists, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_CreateIndex, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_DeleteIndex, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_Size, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_Reserve, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_Squeeze, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_Initialize, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF22_GetPointer, None, itkVectorContainerULLMF22)
itkVectorContainerULLMF22_swigregister = _itkVectorContainerPython.itkVectorContainerULLMF22_swigregister
itkVectorContainerULLMF22_swigregister(itkVectorContainerULLMF22)

def itkVectorContainerULLMF22___New_orig__():
    """itkVectorContainerULLMF22___New_orig__() -> itkVectorContainerULLMF22_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLMF22___New_orig__()

def itkVectorContainerULLMF22_cast(obj):
    """itkVectorContainerULLMF22_cast(itkLightObject obj) -> itkVectorContainerULLMF22"""
    return _itkVectorContainerPython.itkVectorContainerULLMF22_cast(obj)

class itkVectorContainerULLMF33(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLMF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLMF33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLMF33 self) -> itkVectorContainerULLMF33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLMF33 self) -> std::vector< itkMatrixF33,std::allocator< itkMatrixF33 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLMF33 self) -> std::vector< itkMatrixF33,std::allocator< itkMatrixF33 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLMF33 self, unsigned long long arg0) -> itkMatrixF33
        ElementAt(itkVectorContainerULLMF33 self, unsigned long long arg0) -> itkMatrixF33
        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLMF33 self, unsigned long long arg0) -> itkMatrixF33"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLMF33 self, unsigned long long arg0) -> itkMatrixF33"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLMF33 self, unsigned long long arg0, itkMatrixF33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLMF33 self, unsigned long long arg0, itkMatrixF33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLMF33 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLMF33 self, unsigned long long arg0, itkMatrixF33 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLMF33 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLMF33 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLMF33 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLMF33 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLMF33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLMF33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLMF33"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLMF33 self) -> itkVectorContainerULLMF33"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMF33

        Create a new object of the class itkVectorContainerULLMF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLMF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLMF33.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_Clone, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLContainer, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLConstContainer, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_ElementAt, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_CreateElementAt, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_GetElement, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_SetElement, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_InsertElement, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_IndexExists, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_GetElementIfIndexExists, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_CreateIndex, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_DeleteIndex, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_Size, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_Reserve, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_Squeeze, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_Initialize, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLMF33_GetPointer, None, itkVectorContainerULLMF33)
itkVectorContainerULLMF33_swigregister = _itkVectorContainerPython.itkVectorContainerULLMF33_swigregister
itkVectorContainerULLMF33_swigregister(itkVectorContainerULLMF33)

def itkVectorContainerULLMF33___New_orig__():
    """itkVectorContainerULLMF33___New_orig__() -> itkVectorContainerULLMF33_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLMF33___New_orig__()

def itkVectorContainerULLMF33_cast(obj):
    """itkVectorContainerULLMF33_cast(itkLightObject obj) -> itkVectorContainerULLMF33"""
    return _itkVectorContainerPython.itkVectorContainerULLMF33_cast(obj)

class itkVectorContainerULLPD2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLPD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLPD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLPD2 self) -> itkVectorContainerULLPD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLPD2 self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLPD2 self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLPD2 self, unsigned long long arg0) -> itkPointD2
        ElementAt(itkVectorContainerULLPD2 self, unsigned long long arg0) -> itkPointD2
        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLPD2 self, unsigned long long arg0) -> itkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLPD2 self, unsigned long long arg0) -> itkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLPD2 self, unsigned long long arg0, itkPointD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLPD2 self, unsigned long long arg0, itkPointD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLPD2 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLPD2 self, unsigned long long arg0, itkPointD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLPD2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLPD2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLPD2 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLPD2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLPD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLPD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLPD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLPD2 self) -> itkVectorContainerULLPD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPD2

        Create a new object of the class itkVectorContainerULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLPD2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_Clone, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLContainer, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLConstContainer, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_ElementAt, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_CreateElementAt, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_GetElement, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_SetElement, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_InsertElement, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_IndexExists, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_GetElementIfIndexExists, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_CreateIndex, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_DeleteIndex, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_Size, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_Reserve, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_Squeeze, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_Initialize, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD2_GetPointer, None, itkVectorContainerULLPD2)
itkVectorContainerULLPD2_swigregister = _itkVectorContainerPython.itkVectorContainerULLPD2_swigregister
itkVectorContainerULLPD2_swigregister(itkVectorContainerULLPD2)

def itkVectorContainerULLPD2___New_orig__():
    """itkVectorContainerULLPD2___New_orig__() -> itkVectorContainerULLPD2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLPD2___New_orig__()

def itkVectorContainerULLPD2_cast(obj):
    """itkVectorContainerULLPD2_cast(itkLightObject obj) -> itkVectorContainerULLPD2"""
    return _itkVectorContainerPython.itkVectorContainerULLPD2_cast(obj)

class itkVectorContainerULLPD3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLPD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLPD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLPD3 self) -> itkVectorContainerULLPD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLPD3 self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLPD3 self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLPD3 self, unsigned long long arg0) -> itkPointD3
        ElementAt(itkVectorContainerULLPD3 self, unsigned long long arg0) -> itkPointD3
        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLPD3 self, unsigned long long arg0) -> itkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLPD3 self, unsigned long long arg0) -> itkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLPD3 self, unsigned long long arg0, itkPointD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLPD3 self, unsigned long long arg0, itkPointD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLPD3 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLPD3 self, unsigned long long arg0, itkPointD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLPD3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLPD3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLPD3 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLPD3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLPD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLPD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLPD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLPD3 self) -> itkVectorContainerULLPD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPD3

        Create a new object of the class itkVectorContainerULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLPD3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_Clone, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLContainer, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLConstContainer, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_ElementAt, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_CreateElementAt, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_GetElement, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_SetElement, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_InsertElement, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_IndexExists, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_GetElementIfIndexExists, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_CreateIndex, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_DeleteIndex, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_Size, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_Reserve, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_Squeeze, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_Initialize, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPD3_GetPointer, None, itkVectorContainerULLPD3)
itkVectorContainerULLPD3_swigregister = _itkVectorContainerPython.itkVectorContainerULLPD3_swigregister
itkVectorContainerULLPD3_swigregister(itkVectorContainerULLPD3)

def itkVectorContainerULLPD3___New_orig__():
    """itkVectorContainerULLPD3___New_orig__() -> itkVectorContainerULLPD3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLPD3___New_orig__()

def itkVectorContainerULLPD3_cast(obj):
    """itkVectorContainerULLPD3_cast(itkLightObject obj) -> itkVectorContainerULLPD3"""
    return _itkVectorContainerPython.itkVectorContainerULLPD3_cast(obj)

class itkVectorContainerULLPF2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLPF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLPF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLPF2 self) -> itkVectorContainerULLPF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLPF2 self) -> vectoritkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLPF2 self) -> vectoritkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLPF2 self, unsigned long long arg0) -> itkPointF2
        ElementAt(itkVectorContainerULLPF2 self, unsigned long long arg0) -> itkPointF2
        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLPF2 self, unsigned long long arg0) -> itkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLPF2 self, unsigned long long arg0) -> itkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLPF2 self, unsigned long long arg0, itkPointF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLPF2 self, unsigned long long arg0, itkPointF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLPF2 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLPF2 self, unsigned long long arg0, itkPointF2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLPF2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLPF2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLPF2 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLPF2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLPF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLPF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLPF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLPF2 self) -> itkVectorContainerULLPF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPF2

        Create a new object of the class itkVectorContainerULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLPF2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_Clone, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLContainer, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLConstContainer, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_ElementAt, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_CreateElementAt, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_GetElement, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_SetElement, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_InsertElement, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_IndexExists, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_GetElementIfIndexExists, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_CreateIndex, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_DeleteIndex, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_Size, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_Reserve, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_Squeeze, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_Initialize, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF2_GetPointer, None, itkVectorContainerULLPF2)
itkVectorContainerULLPF2_swigregister = _itkVectorContainerPython.itkVectorContainerULLPF2_swigregister
itkVectorContainerULLPF2_swigregister(itkVectorContainerULLPF2)

def itkVectorContainerULLPF2___New_orig__():
    """itkVectorContainerULLPF2___New_orig__() -> itkVectorContainerULLPF2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLPF2___New_orig__()

def itkVectorContainerULLPF2_cast(obj):
    """itkVectorContainerULLPF2_cast(itkLightObject obj) -> itkVectorContainerULLPF2"""
    return _itkVectorContainerPython.itkVectorContainerULLPF2_cast(obj)

class itkVectorContainerULLPF3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLPF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLPF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLPF3 self) -> itkVectorContainerULLPF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLPF3 self) -> vectoritkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLPF3 self) -> vectoritkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLPF3 self, unsigned long long arg0) -> itkPointF3
        ElementAt(itkVectorContainerULLPF3 self, unsigned long long arg0) -> itkPointF3
        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLPF3 self, unsigned long long arg0) -> itkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLPF3 self, unsigned long long arg0) -> itkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLPF3 self, unsigned long long arg0, itkPointF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLPF3 self, unsigned long long arg0, itkPointF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLPF3 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLPF3 self, unsigned long long arg0, itkPointF3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLPF3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLPF3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLPF3 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLPF3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLPF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLPF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLPF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLPF3 self) -> itkVectorContainerULLPF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPF3

        Create a new object of the class itkVectorContainerULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLPF3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_Clone, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLContainer, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLConstContainer, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_ElementAt, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_CreateElementAt, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_GetElement, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_SetElement, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_InsertElement, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_IndexExists, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_GetElementIfIndexExists, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_CreateIndex, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_DeleteIndex, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_Size, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_Reserve, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_Squeeze, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_Initialize, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLPF3_GetPointer, None, itkVectorContainerULLPF3)
itkVectorContainerULLPF3_swigregister = _itkVectorContainerPython.itkVectorContainerULLPF3_swigregister
itkVectorContainerULLPF3_swigregister(itkVectorContainerULLPF3)

def itkVectorContainerULLPF3___New_orig__():
    """itkVectorContainerULLPF3___New_orig__() -> itkVectorContainerULLPF3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLPF3___New_orig__()

def itkVectorContainerULLPF3_cast(obj):
    """itkVectorContainerULLPF3_cast(itkLightObject obj) -> itkVectorContainerULLPF3"""
    return _itkVectorContainerPython.itkVectorContainerULLPF3_cast(obj)

class itkVectorContainerULLSULL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLSULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLSULL self) -> itkVectorContainerULLSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLSULL self) -> std::vector< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::allocator< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLSULL self) -> std::vector< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::allocator< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLSULL self, unsigned long long arg0) -> setULL
        ElementAt(itkVectorContainerULLSULL self, unsigned long long arg0) -> setULL
        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLSULL self, unsigned long long arg0) -> setULL"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLSULL self, unsigned long long arg0) -> setULL"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLSULL self, unsigned long long arg0, setULL arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLSULL self, unsigned long long arg0, setULL arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLSULL self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLSULL self, unsigned long long arg0, setULL arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLSULL self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLSULL self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLSULL self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLSULL self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLSULL self)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLSULL self)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLSULL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLSULL"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLSULL self) -> itkVectorContainerULLSULL"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLSULL

        Create a new object of the class itkVectorContainerULLSULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLSULL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLSULL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLSULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLSULL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_Clone, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLContainer, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLConstContainer, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_ElementAt, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_CreateElementAt, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_GetElement, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_SetElement, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_InsertElement, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_IndexExists, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_GetElementIfIndexExists, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_CreateIndex, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_DeleteIndex, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_Size, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_Reserve, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_Squeeze, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_Initialize, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLSULL_GetPointer, None, itkVectorContainerULLSULL)
itkVectorContainerULLSULL_swigregister = _itkVectorContainerPython.itkVectorContainerULLSULL_swigregister
itkVectorContainerULLSULL_swigregister(itkVectorContainerULLSULL)

def itkVectorContainerULLSULL___New_orig__():
    """itkVectorContainerULLSULL___New_orig__() -> itkVectorContainerULLSULL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLSULL___New_orig__()

def itkVectorContainerULLSULL_cast(obj):
    """itkVectorContainerULLSULL_cast(itkLightObject obj) -> itkVectorContainerULLSULL"""
    return _itkVectorContainerPython.itkVectorContainerULLSULL_cast(obj)

class itkVectorContainerULLUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLUC self) -> itkVectorContainerULLUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLUC self, unsigned long long arg0) -> unsigned char
        ElementAt(itkVectorContainerULLUC self, unsigned long long arg0) -> unsigned char const &
        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLUC self, unsigned long long arg0) -> unsigned char &"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLUC self, unsigned long long arg0) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLUC self, unsigned long long arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLUC self, unsigned long long arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLUC self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLUC self, unsigned long long arg0, unsigned char * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLUC self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLUC self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLUC self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLUC self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLUC self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLUC self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLUC"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLUC self) -> itkVectorContainerULLUC"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUC

        Create a new object of the class itkVectorContainerULLUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLUC.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_Clone, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLContainer, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLConstContainer, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_ElementAt, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_CreateElementAt, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_GetElement, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_SetElement, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_InsertElement, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_IndexExists, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_GetElementIfIndexExists, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_CreateIndex, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_DeleteIndex, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_Size, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_Reserve, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_Squeeze, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_Initialize, None, itkVectorContainerULLUC)
itkVectorContainerULLUC.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUC_GetPointer, None, itkVectorContainerULLUC)
itkVectorContainerULLUC_swigregister = _itkVectorContainerPython.itkVectorContainerULLUC_swigregister
itkVectorContainerULLUC_swigregister(itkVectorContainerULLUC)

def itkVectorContainerULLUC___New_orig__():
    """itkVectorContainerULLUC___New_orig__() -> itkVectorContainerULLUC_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLUC___New_orig__()

def itkVectorContainerULLUC_cast(obj):
    """itkVectorContainerULLUC_cast(itkLightObject obj) -> itkVectorContainerULLUC"""
    return _itkVectorContainerPython.itkVectorContainerULLUC_cast(obj)

class itkVectorContainerULLUI(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLUI self) -> itkVectorContainerULLUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLUI self, unsigned long long arg0) -> unsigned int
        ElementAt(itkVectorContainerULLUI self, unsigned long long arg0) -> unsigned int const &
        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLUI self, unsigned long long arg0) -> unsigned int &"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLUI self, unsigned long long arg0) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLUI self, unsigned long long arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLUI self, unsigned long long arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLUI self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLUI self, unsigned long long arg0, unsigned int * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLUI self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLUI self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLUI self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLUI self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLUI self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLUI self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUI

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLUI"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLUI self) -> itkVectorContainerULLUI"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUI

        Create a new object of the class itkVectorContainerULLUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLUI.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_Clone, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLContainer, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLConstContainer, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_ElementAt, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_CreateElementAt, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_GetElement, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_SetElement, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_InsertElement, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_IndexExists, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_GetElementIfIndexExists, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_CreateIndex, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_DeleteIndex, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_Size, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_Reserve, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_Squeeze, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_Initialize, None, itkVectorContainerULLUI)
itkVectorContainerULLUI.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUI_GetPointer, None, itkVectorContainerULLUI)
itkVectorContainerULLUI_swigregister = _itkVectorContainerPython.itkVectorContainerULLUI_swigregister
itkVectorContainerULLUI_swigregister(itkVectorContainerULLUI)

def itkVectorContainerULLUI___New_orig__():
    """itkVectorContainerULLUI___New_orig__() -> itkVectorContainerULLUI_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLUI___New_orig__()

def itkVectorContainerULLUI_cast(obj):
    """itkVectorContainerULLUI_cast(itkLightObject obj) -> itkVectorContainerULLUI"""
    return _itkVectorContainerPython.itkVectorContainerULLUI_cast(obj)

class itkVectorContainerULLULL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLULL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLULL self) -> itkVectorContainerULLULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLULL self, unsigned long long arg0) -> unsigned long long
        ElementAt(itkVectorContainerULLULL self, unsigned long long arg0) -> unsigned long long const &
        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLULL self, unsigned long long arg0) -> unsigned long long &"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLULL self, unsigned long long arg0) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLULL self, unsigned long long arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLULL self, unsigned long long arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLULL self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLULL self, unsigned long long arg0, unsigned long long * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLULL self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLULL self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLULL self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLULL self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLULL self)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLULL self)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLULL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLULL"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLULL self) -> itkVectorContainerULLULL"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLULL

        Create a new object of the class itkVectorContainerULLULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLULL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLULL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLULL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_Clone, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLContainer, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLConstContainer, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_ElementAt, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_CreateElementAt, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_GetElement, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_SetElement, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_InsertElement, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_IndexExists, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_GetElementIfIndexExists, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_CreateIndex, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_DeleteIndex, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_Size, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_Reserve, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_Squeeze, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_Initialize, None, itkVectorContainerULLULL)
itkVectorContainerULLULL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLULL_GetPointer, None, itkVectorContainerULLULL)
itkVectorContainerULLULL_swigregister = _itkVectorContainerPython.itkVectorContainerULLULL_swigregister
itkVectorContainerULLULL_swigregister(itkVectorContainerULLULL)

def itkVectorContainerULLULL___New_orig__():
    """itkVectorContainerULLULL___New_orig__() -> itkVectorContainerULLULL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLULL___New_orig__()

def itkVectorContainerULLULL_cast(obj):
    """itkVectorContainerULLULL_cast(itkLightObject obj) -> itkVectorContainerULLULL"""
    return _itkVectorContainerPython.itkVectorContainerULLULL_cast(obj)

class itkVectorContainerULLUS(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLUS self) -> itkVectorContainerULLUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLUS self, unsigned long long arg0) -> unsigned short
        ElementAt(itkVectorContainerULLUS self, unsigned long long arg0) -> unsigned short const &
        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLUS self, unsigned long long arg0) -> unsigned short &"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLUS self, unsigned long long arg0) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLUS self, unsigned long long arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLUS self, unsigned long long arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLUS self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLUS self, unsigned long long arg0, unsigned short * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLUS self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLUS self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLUS self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLUS self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLUS self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLUS self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUS

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLUS"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLUS self) -> itkVectorContainerULLUS"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUS

        Create a new object of the class itkVectorContainerULLUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLUS.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_Clone, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLContainer, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLConstContainer, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_ElementAt, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_CreateElementAt, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_GetElement, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_SetElement, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_InsertElement, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_IndexExists, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_GetElementIfIndexExists, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_CreateIndex, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_DeleteIndex, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_Size, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_Reserve, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_Squeeze, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_Initialize, None, itkVectorContainerULLUS)
itkVectorContainerULLUS.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLUS_GetPointer, None, itkVectorContainerULLUS)
itkVectorContainerULLUS_swigregister = _itkVectorContainerPython.itkVectorContainerULLUS_swigregister
itkVectorContainerULLUS_swigregister(itkVectorContainerULLUS)

def itkVectorContainerULLUS___New_orig__():
    """itkVectorContainerULLUS___New_orig__() -> itkVectorContainerULLUS_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLUS___New_orig__()

def itkVectorContainerULLUS_cast(obj):
    """itkVectorContainerULLUS_cast(itkLightObject obj) -> itkVectorContainerULLUS"""
    return _itkVectorContainerPython.itkVectorContainerULLUS_cast(obj)

class itkVectorContainerULLVD2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLVD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLVD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLVD2 self) -> itkVectorContainerULLVD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLVD2 self) -> std::vector< itkVectorD2,std::allocator< itkVectorD2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLVD2 self) -> std::vector< itkVectorD2,std::allocator< itkVectorD2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2
        ElementAt(itkVectorContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2
        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLVD2 self, unsigned long long arg0, itkVectorD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLVD2 self, unsigned long long arg0, itkVectorD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLVD2 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLVD2 self, unsigned long long arg0, itkVectorD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLVD2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLVD2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLVD2 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLVD2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLVD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLVD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLVD2"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLVD2 self) -> itkVectorContainerULLVD2"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVD2

        Create a new object of the class itkVectorContainerULLVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLVD2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_Clone, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLContainer, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLConstContainer, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_ElementAt, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_CreateElementAt, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_GetElement, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_SetElement, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_InsertElement, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_IndexExists, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_GetElementIfIndexExists, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_CreateIndex, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_DeleteIndex, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_Size, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_Reserve, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_Squeeze, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_Initialize, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD2_GetPointer, None, itkVectorContainerULLVD2)
itkVectorContainerULLVD2_swigregister = _itkVectorContainerPython.itkVectorContainerULLVD2_swigregister
itkVectorContainerULLVD2_swigregister(itkVectorContainerULLVD2)

def itkVectorContainerULLVD2___New_orig__():
    """itkVectorContainerULLVD2___New_orig__() -> itkVectorContainerULLVD2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLVD2___New_orig__()

def itkVectorContainerULLVD2_cast(obj):
    """itkVectorContainerULLVD2_cast(itkLightObject obj) -> itkVectorContainerULLVD2"""
    return _itkVectorContainerPython.itkVectorContainerULLVD2_cast(obj)

class itkVectorContainerULLVD3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLVD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLVD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLVD3 self) -> itkVectorContainerULLVD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLVD3 self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLVD3 self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3
        ElementAt(itkVectorContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3
        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLVD3 self, unsigned long long arg0, itkVectorD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLVD3 self, unsigned long long arg0, itkVectorD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLVD3 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLVD3 self, unsigned long long arg0, itkVectorD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLVD3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLVD3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLVD3 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLVD3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLVD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLVD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLVD3"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLVD3 self) -> itkVectorContainerULLVD3"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVD3

        Create a new object of the class itkVectorContainerULLVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLVD3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_Clone, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLContainer, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLConstContainer, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_ElementAt, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_CreateElementAt, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_GetElement, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_SetElement, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_InsertElement, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_IndexExists, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_GetElementIfIndexExists, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_CreateIndex, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_DeleteIndex, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_Size, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_Reserve, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_Squeeze, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_Initialize, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVD3_GetPointer, None, itkVectorContainerULLVD3)
itkVectorContainerULLVD3_swigregister = _itkVectorContainerPython.itkVectorContainerULLVD3_swigregister
itkVectorContainerULLVD3_swigregister(itkVectorContainerULLVD3)

def itkVectorContainerULLVD3___New_orig__():
    """itkVectorContainerULLVD3___New_orig__() -> itkVectorContainerULLVD3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLVD3___New_orig__()

def itkVectorContainerULLVD3_cast(obj):
    """itkVectorContainerULLVD3_cast(itkLightObject obj) -> itkVectorContainerULLVD3"""
    return _itkVectorContainerPython.itkVectorContainerULLVD3_cast(obj)

class itkVectorContainerULLVF2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLVF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLVF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLVF2 self) -> itkVectorContainerULLVF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLVF2 self) -> std::vector< itkVectorF2,std::allocator< itkVectorF2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLVF2 self) -> std::vector< itkVectorF2,std::allocator< itkVectorF2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2
        ElementAt(itkVectorContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2
        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLVF2 self, unsigned long long arg0, itkVectorF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLVF2 self, unsigned long long arg0, itkVectorF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLVF2 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLVF2 self, unsigned long long arg0, itkVectorF2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLVF2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLVF2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLVF2 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLVF2 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLVF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLVF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLVF2"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLVF2 self) -> itkVectorContainerULLVF2"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVF2

        Create a new object of the class itkVectorContainerULLVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLVF2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_Clone, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLContainer, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLConstContainer, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_ElementAt, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_CreateElementAt, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_GetElement, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_SetElement, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_InsertElement, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_IndexExists, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_GetElementIfIndexExists, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_CreateIndex, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_DeleteIndex, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_Size, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_Reserve, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_Squeeze, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_Initialize, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF2_GetPointer, None, itkVectorContainerULLVF2)
itkVectorContainerULLVF2_swigregister = _itkVectorContainerPython.itkVectorContainerULLVF2_swigregister
itkVectorContainerULLVF2_swigregister(itkVectorContainerULLVF2)

def itkVectorContainerULLVF2___New_orig__():
    """itkVectorContainerULLVF2___New_orig__() -> itkVectorContainerULLVF2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLVF2___New_orig__()

def itkVectorContainerULLVF2_cast(obj):
    """itkVectorContainerULLVF2_cast(itkLightObject obj) -> itkVectorContainerULLVF2"""
    return _itkVectorContainerPython.itkVectorContainerULLVF2_cast(obj)

class itkVectorContainerULLVF3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULLVF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULLVF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULLVF3 self) -> itkVectorContainerULLVF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULLVF3 self) -> std::vector< itkVectorF3,std::allocator< itkVectorF3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULLVF3 self) -> std::vector< itkVectorF3,std::allocator< itkVectorF3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3
        ElementAt(itkVectorContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3
        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULLVF3 self, unsigned long long arg0, itkVectorF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULLVF3 self, unsigned long long arg0, itkVectorF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULLVF3 self, unsigned long long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULLVF3 self, unsigned long long arg0, itkVectorF3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULLVF3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULLVF3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULLVF3 self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULLVF3 self, unsigned long long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULLVF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULLVF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULLVF3"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULLVF3 self) -> itkVectorContainerULLVF3"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVF3

        Create a new object of the class itkVectorContainerULLVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULLVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULLVF3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_Clone, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLContainer, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLConstContainer, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_ElementAt, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_CreateElementAt, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_GetElement, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_SetElement, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_InsertElement, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_IndexExists, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_GetElementIfIndexExists, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_CreateIndex, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_DeleteIndex, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_Size, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_Reserve, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_Squeeze, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_Initialize, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULLVF3_GetPointer, None, itkVectorContainerULLVF3)
itkVectorContainerULLVF3_swigregister = _itkVectorContainerPython.itkVectorContainerULLVF3_swigregister
itkVectorContainerULLVF3_swigregister(itkVectorContainerULLVF3)

def itkVectorContainerULLVF3___New_orig__():
    """itkVectorContainerULLVF3___New_orig__() -> itkVectorContainerULLVF3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULLVF3___New_orig__()

def itkVectorContainerULLVF3_cast(obj):
    """itkVectorContainerULLVF3_cast(itkLightObject obj) -> itkVectorContainerULLVF3"""
    return _itkVectorContainerPython.itkVectorContainerULLVF3_cast(obj)

class itkVectorContainerUSUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUSUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUSUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUSUC self) -> itkVectorContainerUSUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUSUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUSUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUSUC self, unsigned short arg0) -> unsigned char
        ElementAt(itkVectorContainerUSUC self, unsigned short arg0) -> unsigned char const &
        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUSUC self, unsigned short arg0) -> unsigned char &"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUSUC self, unsigned short arg0) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUSUC self, unsigned short arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUSUC self, unsigned short arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUSUC self, unsigned short arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUSUC self, unsigned short arg0, unsigned char * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUSUC self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUSUC self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUSUC self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUSUC self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUSUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUSUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUSUC"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUSUC self) -> itkVectorContainerUSUC"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUC

        Create a new object of the class itkVectorContainerUSUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUSUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUSUC.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_Clone, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLContainer, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLConstContainer, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_ElementAt, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_CreateElementAt, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_GetElement, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_SetElement, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_InsertElement, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_IndexExists, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_GetElementIfIndexExists, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_CreateIndex, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_DeleteIndex, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_Size, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_Reserve, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_Squeeze, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_Initialize, None, itkVectorContainerUSUC)
itkVectorContainerUSUC.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUC_GetPointer, None, itkVectorContainerUSUC)
itkVectorContainerUSUC_swigregister = _itkVectorContainerPython.itkVectorContainerUSUC_swigregister
itkVectorContainerUSUC_swigregister(itkVectorContainerUSUC)

def itkVectorContainerUSUC___New_orig__():
    """itkVectorContainerUSUC___New_orig__() -> itkVectorContainerUSUC_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUSUC___New_orig__()

def itkVectorContainerUSUC_cast(obj):
    """itkVectorContainerUSUC_cast(itkLightObject obj) -> itkVectorContainerUSUC"""
    return _itkVectorContainerPython.itkVectorContainerUSUC_cast(obj)

class itkVectorContainerUSUI(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUSUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUSUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUSUI self) -> itkVectorContainerUSUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUSUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > &"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUSUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUSUI self, unsigned short arg0) -> unsigned int
        ElementAt(itkVectorContainerUSUI self, unsigned short arg0) -> unsigned int const &
        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUSUI self, unsigned short arg0) -> unsigned int &"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUSUI self, unsigned short arg0) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUSUI self, unsigned short arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUSUI self, unsigned short arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUSUI self, unsigned short arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUSUI self, unsigned short arg0, unsigned int * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUSUI self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUSUI self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUSUI self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUSUI self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUSUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUSUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUI

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUSUI"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUSUI self) -> itkVectorContainerUSUI"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUI

        Create a new object of the class itkVectorContainerUSUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUSUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUSUI.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_Clone, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLContainer, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLConstContainer, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_ElementAt, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_CreateElementAt, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_GetElement, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_SetElement, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_InsertElement, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_IndexExists, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_GetElementIfIndexExists, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_CreateIndex, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_DeleteIndex, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_Size, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_Reserve, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_Squeeze, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_Initialize, None, itkVectorContainerUSUI)
itkVectorContainerUSUI.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUI_GetPointer, None, itkVectorContainerUSUI)
itkVectorContainerUSUI_swigregister = _itkVectorContainerPython.itkVectorContainerUSUI_swigregister
itkVectorContainerUSUI_swigregister(itkVectorContainerUSUI)

def itkVectorContainerUSUI___New_orig__():
    """itkVectorContainerUSUI___New_orig__() -> itkVectorContainerUSUI_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUSUI___New_orig__()

def itkVectorContainerUSUI_cast(obj):
    """itkVectorContainerUSUI_cast(itkLightObject obj) -> itkVectorContainerUSUI"""
    return _itkVectorContainerPython.itkVectorContainerUSUI_cast(obj)

class itkVectorContainerUSULL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUSULL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSULL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUSULL self) -> itkVectorContainerUSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUSULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUSULL self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUSULL self, unsigned short arg0) -> unsigned long long
        ElementAt(itkVectorContainerUSULL self, unsigned short arg0) -> unsigned long long const &
        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUSULL self, unsigned short arg0) -> unsigned long long &"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUSULL self, unsigned short arg0) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUSULL self, unsigned short arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUSULL self, unsigned short arg0, unsigned long long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUSULL self, unsigned short arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUSULL self, unsigned short arg0, unsigned long long * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUSULL self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUSULL self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUSULL self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUSULL self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUSULL self)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUSULL self)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSULL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUSULL"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUSULL self) -> itkVectorContainerUSULL"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUSULL

        Create a new object of the class itkVectorContainerUSULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSULL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSULL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUSULL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUSULL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_Clone, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLContainer, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLConstContainer, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_ElementAt, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_CreateElementAt, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_GetElement, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_SetElement, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_InsertElement, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_IndexExists, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_GetElementIfIndexExists, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_CreateIndex, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_DeleteIndex, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_Size, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_Reserve, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_Squeeze, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_Initialize, None, itkVectorContainerUSULL)
itkVectorContainerUSULL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSULL_GetPointer, None, itkVectorContainerUSULL)
itkVectorContainerUSULL_swigregister = _itkVectorContainerPython.itkVectorContainerUSULL_swigregister
itkVectorContainerUSULL_swigregister(itkVectorContainerUSULL)

def itkVectorContainerUSULL___New_orig__():
    """itkVectorContainerUSULL___New_orig__() -> itkVectorContainerUSULL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUSULL___New_orig__()

def itkVectorContainerUSULL_cast(obj):
    """itkVectorContainerUSULL_cast(itkLightObject obj) -> itkVectorContainerUSULL"""
    return _itkVectorContainerPython.itkVectorContainerUSULL_cast(obj)

class itkVectorContainerUSUS(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUSUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUSUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUSUS self) -> itkVectorContainerUSUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUSUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUSUS self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUSUS self, unsigned short arg0) -> unsigned short
        ElementAt(itkVectorContainerUSUS self, unsigned short arg0) -> unsigned short const &
        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUSUS self, unsigned short arg0) -> unsigned short &"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUSUS self, unsigned short arg0) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUSUS self, unsigned short arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUSUS self, unsigned short arg0, unsigned short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUSUS self, unsigned short arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUSUS self, unsigned short arg0, unsigned short * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUSUS self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUSUS self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUSUS self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUSUS self, unsigned short arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUSUS self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUSUS self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUS

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUSUS"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUSUS self) -> itkVectorContainerUSUS"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUS

        Create a new object of the class itkVectorContainerUSUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUSUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUSUS.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_Clone, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLContainer, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLConstContainer, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_ElementAt, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_CreateElementAt, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_GetElement, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_SetElement, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_InsertElement, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_IndexExists, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_GetElementIfIndexExists, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_CreateIndex, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_DeleteIndex, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_Size, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_Reserve, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_Squeeze, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_Initialize, None, itkVectorContainerUSUS)
itkVectorContainerUSUS.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUSUS_GetPointer, None, itkVectorContainerUSUS)
itkVectorContainerUSUS_swigregister = _itkVectorContainerPython.itkVectorContainerUSUS_swigregister
itkVectorContainerUSUS_swigregister(itkVectorContainerUSUS)

def itkVectorContainerUSUS___New_orig__():
    """itkVectorContainerUSUS___New_orig__() -> itkVectorContainerUSUS_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUSUS___New_orig__()

def itkVectorContainerUSUS_cast(obj):
    """itkVectorContainerUSUS_cast(itkLightObject obj) -> itkVectorContainerUSUS"""
    return _itkVectorContainerPython.itkVectorContainerUSUS_cast(obj)



