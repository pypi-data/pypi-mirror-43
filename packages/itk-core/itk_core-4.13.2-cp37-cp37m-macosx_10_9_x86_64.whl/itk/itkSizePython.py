# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSizePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSizePython', [dirname(__file__)])
        except ImportError:
            import _itkSizePython
            return _itkSizePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSizePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSizePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSizePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import pyBasePython
class itkSize1(object):
    """


    Represent the size (bounds) of a n-dimensional image.

    Size is a class to represent multi-dimensional array bounds, templated
    over the dimension. Insight assumes that the first element of Size is
    the fastest moving index.

    For the sake of efficiency, Size does not define a default
    constructor, a copy constructor, or an operator=. We rely on the
    compiler to provide efficient bitwise copies.

    Size is an "aggregate" class. Its data is public (m_Size) allowing
    for fast and convenient instantiations/assignments.

    The following syntax for assigning a size is allowed/suggested:
    Size<3> size = {256, 256, 20};

    See:   Index Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
    holds the size of an image

    C++ includes: itkSize.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetSizeDimension() -> "unsigned int":
        """GetSizeDimension() -> unsigned int"""
        return _itkSizePython.itkSize1_GetSizeDimension()

    GetSizeDimension = staticmethod(GetSizeDimension)

    def __add__(self, vec: 'itkSize1') -> "itkSize1 const":
        """__add__(itkSize1 self, itkSize1 vec) -> itkSize1"""
        return _itkSizePython.itkSize1___add__(self, vec)


    def __iadd__(self, vec: 'itkSize1') -> "itkSize1 const &":
        """__iadd__(itkSize1 self, itkSize1 vec) -> itkSize1"""
        return _itkSizePython.itkSize1___iadd__(self, vec)


    def __sub__(self, vec: 'itkSize1') -> "itkSize1 const":
        """__sub__(itkSize1 self, itkSize1 vec) -> itkSize1"""
        return _itkSizePython.itkSize1___sub__(self, vec)


    def __isub__(self, vec: 'itkSize1') -> "itkSize1 const &":
        """__isub__(itkSize1 self, itkSize1 vec) -> itkSize1"""
        return _itkSizePython.itkSize1___isub__(self, vec)


    def __mul__(self, vec: 'itkSize1') -> "itkSize1 const":
        """__mul__(itkSize1 self, itkSize1 vec) -> itkSize1"""
        return _itkSizePython.itkSize1___mul__(self, vec)


    def __imul__(self, vec: 'itkSize1') -> "itkSize1 const &":
        """__imul__(itkSize1 self, itkSize1 vec) -> itkSize1"""
        return _itkSizePython.itkSize1___imul__(self, vec)


    def __eq__(self, vec: 'itkSize1') -> "bool":
        """__eq__(itkSize1 self, itkSize1 vec) -> bool"""
        return _itkSizePython.itkSize1___eq__(self, vec)


    def __ne__(self, vec: 'itkSize1') -> "bool":
        """__ne__(itkSize1 self, itkSize1 vec) -> bool"""
        return _itkSizePython.itkSize1___ne__(self, vec)


    def GetSize(self) -> "unsigned long const *":
        """
        GetSize(itkSize1 self) -> unsigned long const *

        Get the size. This provides
        a read only reference to the size. See:   SetSize 
        """
        return _itkSizePython.itkSize1_GetSize(self)


    def SetSize(self, val: 'unsigned long const *') -> "void":
        """
        SetSize(itkSize1 self, unsigned long const * val)

        Set the size. Try to
        prototype this function so that val has to point to a block of memory
        that is the appropriate size. See:   GetSize 
        """
        return _itkSizePython.itkSize1_SetSize(self, val)


    def SetElement(self, element: 'unsigned long', val: 'unsigned long') -> "void":
        """
        SetElement(itkSize1 self, unsigned long element, unsigned long val)

        Set an element of the
        Size. sets the value of one of the elements in the Size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed.

        See:   SetSize()

        See:   GetElement() 
        """
        return _itkSizePython.itkSize1_SetElement(self, element, val)


    def GetElement(self, element: 'unsigned long') -> "unsigned long":
        """
        GetElement(itkSize1 self, unsigned long element) -> unsigned long

        Get an element of the
        Size. gets the value of one of the elements in the size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed

        See:   GetSize()

        See:   SetElement() 
        """
        return _itkSizePython.itkSize1_GetElement(self, element)


    def Fill(self, value: 'unsigned long') -> "void":
        """
        Fill(itkSize1 self, unsigned long value)

        Set one value for the index in
        all dimensions. Useful for initializing an offset to zero. 
        """
        return _itkSizePython.itkSize1_Fill(self, value)


    def __init__(self, *args):
        """
        __init__(itkSize1 self) -> itkSize1
        __init__(itkSize1 self, itkSize1 arg0) -> itkSize1



        Represent the size (bounds) of a n-dimensional image.

        Size is a class to represent multi-dimensional array bounds, templated
        over the dimension. Insight assumes that the first element of Size is
        the fastest moving index.

        For the sake of efficiency, Size does not define a default
        constructor, a copy constructor, or an operator=. We rely on the
        compiler to provide efficient bitwise copies.

        Size is an "aggregate" class. Its data is public (m_Size) allowing
        for fast and convenient instantiations/assignments.

        The following syntax for assigning a size is allowed/suggested:
        Size<3> size = {256, 256, 20};

        See:   Index Wiki Examples:  All Examples

        https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
        holds the size of an image

        C++ includes: itkSize.h 
        """
        _itkSizePython.itkSize1_swiginit(self, _itkSizePython.new_itkSize1(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize1

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkSize1 self, unsigned long d) -> long"""
        return _itkSizePython.itkSize1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkSize1 self, unsigned long d, long v)"""
        return _itkSizePython.itkSize1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkSizePython.itkSize1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkSize1 self) -> std::string"""
        return _itkSizePython.itkSize1___repr__(self)

itkSize1.__add__ = new_instancemethod(_itkSizePython.itkSize1___add__, None, itkSize1)
itkSize1.__iadd__ = new_instancemethod(_itkSizePython.itkSize1___iadd__, None, itkSize1)
itkSize1.__sub__ = new_instancemethod(_itkSizePython.itkSize1___sub__, None, itkSize1)
itkSize1.__isub__ = new_instancemethod(_itkSizePython.itkSize1___isub__, None, itkSize1)
itkSize1.__mul__ = new_instancemethod(_itkSizePython.itkSize1___mul__, None, itkSize1)
itkSize1.__imul__ = new_instancemethod(_itkSizePython.itkSize1___imul__, None, itkSize1)
itkSize1.__eq__ = new_instancemethod(_itkSizePython.itkSize1___eq__, None, itkSize1)
itkSize1.__ne__ = new_instancemethod(_itkSizePython.itkSize1___ne__, None, itkSize1)
itkSize1.GetSize = new_instancemethod(_itkSizePython.itkSize1_GetSize, None, itkSize1)
itkSize1.SetSize = new_instancemethod(_itkSizePython.itkSize1_SetSize, None, itkSize1)
itkSize1.SetElement = new_instancemethod(_itkSizePython.itkSize1_SetElement, None, itkSize1)
itkSize1.GetElement = new_instancemethod(_itkSizePython.itkSize1_GetElement, None, itkSize1)
itkSize1.Fill = new_instancemethod(_itkSizePython.itkSize1_Fill, None, itkSize1)
itkSize1.__getitem__ = new_instancemethod(_itkSizePython.itkSize1___getitem__, None, itkSize1)
itkSize1.__setitem__ = new_instancemethod(_itkSizePython.itkSize1___setitem__, None, itkSize1)
itkSize1.__repr__ = new_instancemethod(_itkSizePython.itkSize1___repr__, None, itkSize1)
itkSize1_swigregister = _itkSizePython.itkSize1_swigregister
itkSize1_swigregister(itkSize1)

def itkSize1_GetSizeDimension() -> "unsigned int":
    """itkSize1_GetSizeDimension() -> unsigned int"""
    return _itkSizePython.itkSize1_GetSizeDimension()

def itkSize1___len__() -> "unsigned int":
    """itkSize1___len__() -> unsigned int"""
    return _itkSizePython.itkSize1___len__()

class itkSize2(object):
    """


    Represent the size (bounds) of a n-dimensional image.

    Size is a class to represent multi-dimensional array bounds, templated
    over the dimension. Insight assumes that the first element of Size is
    the fastest moving index.

    For the sake of efficiency, Size does not define a default
    constructor, a copy constructor, or an operator=. We rely on the
    compiler to provide efficient bitwise copies.

    Size is an "aggregate" class. Its data is public (m_Size) allowing
    for fast and convenient instantiations/assignments.

    The following syntax for assigning a size is allowed/suggested:
    Size<3> size = {256, 256, 20};

    See:   Index Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
    holds the size of an image

    C++ includes: itkSize.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetSizeDimension() -> "unsigned int":
        """GetSizeDimension() -> unsigned int"""
        return _itkSizePython.itkSize2_GetSizeDimension()

    GetSizeDimension = staticmethod(GetSizeDimension)

    def __add__(self, vec: 'itkSize2') -> "itkSize2 const":
        """__add__(itkSize2 self, itkSize2 vec) -> itkSize2"""
        return _itkSizePython.itkSize2___add__(self, vec)


    def __iadd__(self, vec: 'itkSize2') -> "itkSize2 const &":
        """__iadd__(itkSize2 self, itkSize2 vec) -> itkSize2"""
        return _itkSizePython.itkSize2___iadd__(self, vec)


    def __sub__(self, vec: 'itkSize2') -> "itkSize2 const":
        """__sub__(itkSize2 self, itkSize2 vec) -> itkSize2"""
        return _itkSizePython.itkSize2___sub__(self, vec)


    def __isub__(self, vec: 'itkSize2') -> "itkSize2 const &":
        """__isub__(itkSize2 self, itkSize2 vec) -> itkSize2"""
        return _itkSizePython.itkSize2___isub__(self, vec)


    def __mul__(self, vec: 'itkSize2') -> "itkSize2 const":
        """__mul__(itkSize2 self, itkSize2 vec) -> itkSize2"""
        return _itkSizePython.itkSize2___mul__(self, vec)


    def __imul__(self, vec: 'itkSize2') -> "itkSize2 const &":
        """__imul__(itkSize2 self, itkSize2 vec) -> itkSize2"""
        return _itkSizePython.itkSize2___imul__(self, vec)


    def __eq__(self, vec: 'itkSize2') -> "bool":
        """__eq__(itkSize2 self, itkSize2 vec) -> bool"""
        return _itkSizePython.itkSize2___eq__(self, vec)


    def __ne__(self, vec: 'itkSize2') -> "bool":
        """__ne__(itkSize2 self, itkSize2 vec) -> bool"""
        return _itkSizePython.itkSize2___ne__(self, vec)


    def GetSize(self) -> "unsigned long const *":
        """
        GetSize(itkSize2 self) -> unsigned long const *

        Get the size. This provides
        a read only reference to the size. See:   SetSize 
        """
        return _itkSizePython.itkSize2_GetSize(self)


    def SetSize(self, val: 'unsigned long const *') -> "void":
        """
        SetSize(itkSize2 self, unsigned long const * val)

        Set the size. Try to
        prototype this function so that val has to point to a block of memory
        that is the appropriate size. See:   GetSize 
        """
        return _itkSizePython.itkSize2_SetSize(self, val)


    def SetElement(self, element: 'unsigned long', val: 'unsigned long') -> "void":
        """
        SetElement(itkSize2 self, unsigned long element, unsigned long val)

        Set an element of the
        Size. sets the value of one of the elements in the Size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed.

        See:   SetSize()

        See:   GetElement() 
        """
        return _itkSizePython.itkSize2_SetElement(self, element, val)


    def GetElement(self, element: 'unsigned long') -> "unsigned long":
        """
        GetElement(itkSize2 self, unsigned long element) -> unsigned long

        Get an element of the
        Size. gets the value of one of the elements in the size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed

        See:   GetSize()

        See:   SetElement() 
        """
        return _itkSizePython.itkSize2_GetElement(self, element)


    def Fill(self, value: 'unsigned long') -> "void":
        """
        Fill(itkSize2 self, unsigned long value)

        Set one value for the index in
        all dimensions. Useful for initializing an offset to zero. 
        """
        return _itkSizePython.itkSize2_Fill(self, value)


    def __init__(self, *args):
        """
        __init__(itkSize2 self) -> itkSize2
        __init__(itkSize2 self, itkSize2 arg0) -> itkSize2



        Represent the size (bounds) of a n-dimensional image.

        Size is a class to represent multi-dimensional array bounds, templated
        over the dimension. Insight assumes that the first element of Size is
        the fastest moving index.

        For the sake of efficiency, Size does not define a default
        constructor, a copy constructor, or an operator=. We rely on the
        compiler to provide efficient bitwise copies.

        Size is an "aggregate" class. Its data is public (m_Size) allowing
        for fast and convenient instantiations/assignments.

        The following syntax for assigning a size is allowed/suggested:
        Size<3> size = {256, 256, 20};

        See:   Index Wiki Examples:  All Examples

        https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
        holds the size of an image

        C++ includes: itkSize.h 
        """
        _itkSizePython.itkSize2_swiginit(self, _itkSizePython.new_itkSize2(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize2

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkSize2 self, unsigned long d) -> long"""
        return _itkSizePython.itkSize2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkSize2 self, unsigned long d, long v)"""
        return _itkSizePython.itkSize2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkSizePython.itkSize2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkSize2 self) -> std::string"""
        return _itkSizePython.itkSize2___repr__(self)

itkSize2.__add__ = new_instancemethod(_itkSizePython.itkSize2___add__, None, itkSize2)
itkSize2.__iadd__ = new_instancemethod(_itkSizePython.itkSize2___iadd__, None, itkSize2)
itkSize2.__sub__ = new_instancemethod(_itkSizePython.itkSize2___sub__, None, itkSize2)
itkSize2.__isub__ = new_instancemethod(_itkSizePython.itkSize2___isub__, None, itkSize2)
itkSize2.__mul__ = new_instancemethod(_itkSizePython.itkSize2___mul__, None, itkSize2)
itkSize2.__imul__ = new_instancemethod(_itkSizePython.itkSize2___imul__, None, itkSize2)
itkSize2.__eq__ = new_instancemethod(_itkSizePython.itkSize2___eq__, None, itkSize2)
itkSize2.__ne__ = new_instancemethod(_itkSizePython.itkSize2___ne__, None, itkSize2)
itkSize2.GetSize = new_instancemethod(_itkSizePython.itkSize2_GetSize, None, itkSize2)
itkSize2.SetSize = new_instancemethod(_itkSizePython.itkSize2_SetSize, None, itkSize2)
itkSize2.SetElement = new_instancemethod(_itkSizePython.itkSize2_SetElement, None, itkSize2)
itkSize2.GetElement = new_instancemethod(_itkSizePython.itkSize2_GetElement, None, itkSize2)
itkSize2.Fill = new_instancemethod(_itkSizePython.itkSize2_Fill, None, itkSize2)
itkSize2.__getitem__ = new_instancemethod(_itkSizePython.itkSize2___getitem__, None, itkSize2)
itkSize2.__setitem__ = new_instancemethod(_itkSizePython.itkSize2___setitem__, None, itkSize2)
itkSize2.__repr__ = new_instancemethod(_itkSizePython.itkSize2___repr__, None, itkSize2)
itkSize2_swigregister = _itkSizePython.itkSize2_swigregister
itkSize2_swigregister(itkSize2)

def itkSize2_GetSizeDimension() -> "unsigned int":
    """itkSize2_GetSizeDimension() -> unsigned int"""
    return _itkSizePython.itkSize2_GetSizeDimension()

def itkSize2___len__() -> "unsigned int":
    """itkSize2___len__() -> unsigned int"""
    return _itkSizePython.itkSize2___len__()

class itkSize3(object):
    """


    Represent the size (bounds) of a n-dimensional image.

    Size is a class to represent multi-dimensional array bounds, templated
    over the dimension. Insight assumes that the first element of Size is
    the fastest moving index.

    For the sake of efficiency, Size does not define a default
    constructor, a copy constructor, or an operator=. We rely on the
    compiler to provide efficient bitwise copies.

    Size is an "aggregate" class. Its data is public (m_Size) allowing
    for fast and convenient instantiations/assignments.

    The following syntax for assigning a size is allowed/suggested:
    Size<3> size = {256, 256, 20};

    See:   Index Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
    holds the size of an image

    C++ includes: itkSize.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetSizeDimension() -> "unsigned int":
        """GetSizeDimension() -> unsigned int"""
        return _itkSizePython.itkSize3_GetSizeDimension()

    GetSizeDimension = staticmethod(GetSizeDimension)

    def __add__(self, vec: 'itkSize3') -> "itkSize3 const":
        """__add__(itkSize3 self, itkSize3 vec) -> itkSize3"""
        return _itkSizePython.itkSize3___add__(self, vec)


    def __iadd__(self, vec: 'itkSize3') -> "itkSize3 const &":
        """__iadd__(itkSize3 self, itkSize3 vec) -> itkSize3"""
        return _itkSizePython.itkSize3___iadd__(self, vec)


    def __sub__(self, vec: 'itkSize3') -> "itkSize3 const":
        """__sub__(itkSize3 self, itkSize3 vec) -> itkSize3"""
        return _itkSizePython.itkSize3___sub__(self, vec)


    def __isub__(self, vec: 'itkSize3') -> "itkSize3 const &":
        """__isub__(itkSize3 self, itkSize3 vec) -> itkSize3"""
        return _itkSizePython.itkSize3___isub__(self, vec)


    def __mul__(self, vec: 'itkSize3') -> "itkSize3 const":
        """__mul__(itkSize3 self, itkSize3 vec) -> itkSize3"""
        return _itkSizePython.itkSize3___mul__(self, vec)


    def __imul__(self, vec: 'itkSize3') -> "itkSize3 const &":
        """__imul__(itkSize3 self, itkSize3 vec) -> itkSize3"""
        return _itkSizePython.itkSize3___imul__(self, vec)


    def __eq__(self, vec: 'itkSize3') -> "bool":
        """__eq__(itkSize3 self, itkSize3 vec) -> bool"""
        return _itkSizePython.itkSize3___eq__(self, vec)


    def __ne__(self, vec: 'itkSize3') -> "bool":
        """__ne__(itkSize3 self, itkSize3 vec) -> bool"""
        return _itkSizePython.itkSize3___ne__(self, vec)


    def GetSize(self) -> "unsigned long const *":
        """
        GetSize(itkSize3 self) -> unsigned long const *

        Get the size. This provides
        a read only reference to the size. See:   SetSize 
        """
        return _itkSizePython.itkSize3_GetSize(self)


    def SetSize(self, val: 'unsigned long const *') -> "void":
        """
        SetSize(itkSize3 self, unsigned long const * val)

        Set the size. Try to
        prototype this function so that val has to point to a block of memory
        that is the appropriate size. See:   GetSize 
        """
        return _itkSizePython.itkSize3_SetSize(self, val)


    def SetElement(self, element: 'unsigned long', val: 'unsigned long') -> "void":
        """
        SetElement(itkSize3 self, unsigned long element, unsigned long val)

        Set an element of the
        Size. sets the value of one of the elements in the Size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed.

        See:   SetSize()

        See:   GetElement() 
        """
        return _itkSizePython.itkSize3_SetElement(self, element, val)


    def GetElement(self, element: 'unsigned long') -> "unsigned long":
        """
        GetElement(itkSize3 self, unsigned long element) -> unsigned long

        Get an element of the
        Size. gets the value of one of the elements in the size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed

        See:   GetSize()

        See:   SetElement() 
        """
        return _itkSizePython.itkSize3_GetElement(self, element)


    def Fill(self, value: 'unsigned long') -> "void":
        """
        Fill(itkSize3 self, unsigned long value)

        Set one value for the index in
        all dimensions. Useful for initializing an offset to zero. 
        """
        return _itkSizePython.itkSize3_Fill(self, value)


    def __init__(self, *args):
        """
        __init__(itkSize3 self) -> itkSize3
        __init__(itkSize3 self, itkSize3 arg0) -> itkSize3



        Represent the size (bounds) of a n-dimensional image.

        Size is a class to represent multi-dimensional array bounds, templated
        over the dimension. Insight assumes that the first element of Size is
        the fastest moving index.

        For the sake of efficiency, Size does not define a default
        constructor, a copy constructor, or an operator=. We rely on the
        compiler to provide efficient bitwise copies.

        Size is an "aggregate" class. Its data is public (m_Size) allowing
        for fast and convenient instantiations/assignments.

        The following syntax for assigning a size is allowed/suggested:
        Size<3> size = {256, 256, 20};

        See:   Index Wiki Examples:  All Examples

        https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
        holds the size of an image

        C++ includes: itkSize.h 
        """
        _itkSizePython.itkSize3_swiginit(self, _itkSizePython.new_itkSize3(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize3

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkSize3 self, unsigned long d) -> long"""
        return _itkSizePython.itkSize3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkSize3 self, unsigned long d, long v)"""
        return _itkSizePython.itkSize3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkSizePython.itkSize3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkSize3 self) -> std::string"""
        return _itkSizePython.itkSize3___repr__(self)

itkSize3.__add__ = new_instancemethod(_itkSizePython.itkSize3___add__, None, itkSize3)
itkSize3.__iadd__ = new_instancemethod(_itkSizePython.itkSize3___iadd__, None, itkSize3)
itkSize3.__sub__ = new_instancemethod(_itkSizePython.itkSize3___sub__, None, itkSize3)
itkSize3.__isub__ = new_instancemethod(_itkSizePython.itkSize3___isub__, None, itkSize3)
itkSize3.__mul__ = new_instancemethod(_itkSizePython.itkSize3___mul__, None, itkSize3)
itkSize3.__imul__ = new_instancemethod(_itkSizePython.itkSize3___imul__, None, itkSize3)
itkSize3.__eq__ = new_instancemethod(_itkSizePython.itkSize3___eq__, None, itkSize3)
itkSize3.__ne__ = new_instancemethod(_itkSizePython.itkSize3___ne__, None, itkSize3)
itkSize3.GetSize = new_instancemethod(_itkSizePython.itkSize3_GetSize, None, itkSize3)
itkSize3.SetSize = new_instancemethod(_itkSizePython.itkSize3_SetSize, None, itkSize3)
itkSize3.SetElement = new_instancemethod(_itkSizePython.itkSize3_SetElement, None, itkSize3)
itkSize3.GetElement = new_instancemethod(_itkSizePython.itkSize3_GetElement, None, itkSize3)
itkSize3.Fill = new_instancemethod(_itkSizePython.itkSize3_Fill, None, itkSize3)
itkSize3.__getitem__ = new_instancemethod(_itkSizePython.itkSize3___getitem__, None, itkSize3)
itkSize3.__setitem__ = new_instancemethod(_itkSizePython.itkSize3___setitem__, None, itkSize3)
itkSize3.__repr__ = new_instancemethod(_itkSizePython.itkSize3___repr__, None, itkSize3)
itkSize3_swigregister = _itkSizePython.itkSize3_swigregister
itkSize3_swigregister(itkSize3)

def itkSize3_GetSizeDimension() -> "unsigned int":
    """itkSize3_GetSizeDimension() -> unsigned int"""
    return _itkSizePython.itkSize3_GetSizeDimension()

def itkSize3___len__() -> "unsigned int":
    """itkSize3___len__() -> unsigned int"""
    return _itkSizePython.itkSize3___len__()

class itkSize4(object):
    """


    Represent the size (bounds) of a n-dimensional image.

    Size is a class to represent multi-dimensional array bounds, templated
    over the dimension. Insight assumes that the first element of Size is
    the fastest moving index.

    For the sake of efficiency, Size does not define a default
    constructor, a copy constructor, or an operator=. We rely on the
    compiler to provide efficient bitwise copies.

    Size is an "aggregate" class. Its data is public (m_Size) allowing
    for fast and convenient instantiations/assignments.

    The following syntax for assigning a size is allowed/suggested:
    Size<3> size = {256, 256, 20};

    See:   Index Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
    holds the size of an image

    C++ includes: itkSize.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetSizeDimension() -> "unsigned int":
        """GetSizeDimension() -> unsigned int"""
        return _itkSizePython.itkSize4_GetSizeDimension()

    GetSizeDimension = staticmethod(GetSizeDimension)

    def __add__(self, vec: 'itkSize4') -> "itkSize4 const":
        """__add__(itkSize4 self, itkSize4 vec) -> itkSize4"""
        return _itkSizePython.itkSize4___add__(self, vec)


    def __iadd__(self, vec: 'itkSize4') -> "itkSize4 const &":
        """__iadd__(itkSize4 self, itkSize4 vec) -> itkSize4"""
        return _itkSizePython.itkSize4___iadd__(self, vec)


    def __sub__(self, vec: 'itkSize4') -> "itkSize4 const":
        """__sub__(itkSize4 self, itkSize4 vec) -> itkSize4"""
        return _itkSizePython.itkSize4___sub__(self, vec)


    def __isub__(self, vec: 'itkSize4') -> "itkSize4 const &":
        """__isub__(itkSize4 self, itkSize4 vec) -> itkSize4"""
        return _itkSizePython.itkSize4___isub__(self, vec)


    def __mul__(self, vec: 'itkSize4') -> "itkSize4 const":
        """__mul__(itkSize4 self, itkSize4 vec) -> itkSize4"""
        return _itkSizePython.itkSize4___mul__(self, vec)


    def __imul__(self, vec: 'itkSize4') -> "itkSize4 const &":
        """__imul__(itkSize4 self, itkSize4 vec) -> itkSize4"""
        return _itkSizePython.itkSize4___imul__(self, vec)


    def __eq__(self, vec: 'itkSize4') -> "bool":
        """__eq__(itkSize4 self, itkSize4 vec) -> bool"""
        return _itkSizePython.itkSize4___eq__(self, vec)


    def __ne__(self, vec: 'itkSize4') -> "bool":
        """__ne__(itkSize4 self, itkSize4 vec) -> bool"""
        return _itkSizePython.itkSize4___ne__(self, vec)


    def GetSize(self) -> "unsigned long const *":
        """
        GetSize(itkSize4 self) -> unsigned long const *

        Get the size. This provides
        a read only reference to the size. See:   SetSize 
        """
        return _itkSizePython.itkSize4_GetSize(self)


    def SetSize(self, val: 'unsigned long const *') -> "void":
        """
        SetSize(itkSize4 self, unsigned long const * val)

        Set the size. Try to
        prototype this function so that val has to point to a block of memory
        that is the appropriate size. See:   GetSize 
        """
        return _itkSizePython.itkSize4_SetSize(self, val)


    def SetElement(self, element: 'unsigned long', val: 'unsigned long') -> "void":
        """
        SetElement(itkSize4 self, unsigned long element, unsigned long val)

        Set an element of the
        Size. sets the value of one of the elements in the Size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed.

        See:   SetSize()

        See:   GetElement() 
        """
        return _itkSizePython.itkSize4_SetElement(self, element, val)


    def GetElement(self, element: 'unsigned long') -> "unsigned long":
        """
        GetElement(itkSize4 self, unsigned long element) -> unsigned long

        Get an element of the
        Size. gets the value of one of the elements in the size This method is
        mainly intended to facilitate the access to elements from Tcl and
        Python where C++ notation is not very convenient. WARNING:  No bound
        checking is performed

        See:   GetSize()

        See:   SetElement() 
        """
        return _itkSizePython.itkSize4_GetElement(self, element)


    def Fill(self, value: 'unsigned long') -> "void":
        """
        Fill(itkSize4 self, unsigned long value)

        Set one value for the index in
        all dimensions. Useful for initializing an offset to zero. 
        """
        return _itkSizePython.itkSize4_Fill(self, value)


    def __init__(self, *args):
        """
        __init__(itkSize4 self) -> itkSize4
        __init__(itkSize4 self, itkSize4 arg0) -> itkSize4



        Represent the size (bounds) of a n-dimensional image.

        Size is a class to represent multi-dimensional array bounds, templated
        over the dimension. Insight assumes that the first element of Size is
        the fastest moving index.

        For the sake of efficiency, Size does not define a default
        constructor, a copy constructor, or an operator=. We rely on the
        compiler to provide efficient bitwise copies.

        Size is an "aggregate" class. Its data is public (m_Size) allowing
        for fast and convenient instantiations/assignments.

        The following syntax for assigning a size is allowed/suggested:
        Size<3> size = {256, 256, 20};

        See:   Index Wiki Examples:  All Examples

        https://www.itk.org/Wiki/ITK/Examples/Images/Size An object which
        holds the size of an image

        C++ includes: itkSize.h 
        """
        _itkSizePython.itkSize4_swiginit(self, _itkSizePython.new_itkSize4(*args))
    __swig_destroy__ = _itkSizePython.delete_itkSize4

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkSize4 self, unsigned long d) -> long"""
        return _itkSizePython.itkSize4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkSize4 self, unsigned long d, long v)"""
        return _itkSizePython.itkSize4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkSizePython.itkSize4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkSize4 self) -> std::string"""
        return _itkSizePython.itkSize4___repr__(self)

itkSize4.__add__ = new_instancemethod(_itkSizePython.itkSize4___add__, None, itkSize4)
itkSize4.__iadd__ = new_instancemethod(_itkSizePython.itkSize4___iadd__, None, itkSize4)
itkSize4.__sub__ = new_instancemethod(_itkSizePython.itkSize4___sub__, None, itkSize4)
itkSize4.__isub__ = new_instancemethod(_itkSizePython.itkSize4___isub__, None, itkSize4)
itkSize4.__mul__ = new_instancemethod(_itkSizePython.itkSize4___mul__, None, itkSize4)
itkSize4.__imul__ = new_instancemethod(_itkSizePython.itkSize4___imul__, None, itkSize4)
itkSize4.__eq__ = new_instancemethod(_itkSizePython.itkSize4___eq__, None, itkSize4)
itkSize4.__ne__ = new_instancemethod(_itkSizePython.itkSize4___ne__, None, itkSize4)
itkSize4.GetSize = new_instancemethod(_itkSizePython.itkSize4_GetSize, None, itkSize4)
itkSize4.SetSize = new_instancemethod(_itkSizePython.itkSize4_SetSize, None, itkSize4)
itkSize4.SetElement = new_instancemethod(_itkSizePython.itkSize4_SetElement, None, itkSize4)
itkSize4.GetElement = new_instancemethod(_itkSizePython.itkSize4_GetElement, None, itkSize4)
itkSize4.Fill = new_instancemethod(_itkSizePython.itkSize4_Fill, None, itkSize4)
itkSize4.__getitem__ = new_instancemethod(_itkSizePython.itkSize4___getitem__, None, itkSize4)
itkSize4.__setitem__ = new_instancemethod(_itkSizePython.itkSize4___setitem__, None, itkSize4)
itkSize4.__repr__ = new_instancemethod(_itkSizePython.itkSize4___repr__, None, itkSize4)
itkSize4_swigregister = _itkSizePython.itkSize4_swigregister
itkSize4_swigregister(itkSize4)

def itkSize4_GetSizeDimension() -> "unsigned int":
    """itkSize4_GetSizeDimension() -> unsigned int"""
    return _itkSizePython.itkSize4_GetSizeDimension()

def itkSize4___len__() -> "unsigned int":
    """itkSize4___len__() -> unsigned int"""
    return _itkSizePython.itkSize4___len__()



