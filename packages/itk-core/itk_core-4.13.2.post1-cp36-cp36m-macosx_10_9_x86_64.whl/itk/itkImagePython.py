# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImagePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImagePython', [dirname(__file__)])
        except ImportError:
            import _itkImagePython
            return _itkImagePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImagePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImagePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImagePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkRGBPixelPython
import itkFixedArrayPython
import pyBasePython
import itkSizePython
import itkMatrixPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkSymmetricSecondRankTensorPython

def itkImageCVD43_New():
  return itkImageCVD43.New()


def itkImageCVD33_New():
  return itkImageCVD33.New()


def itkImageCVD23_New():
  return itkImageCVD23.New()


def itkImageCVD42_New():
  return itkImageCVD42.New()


def itkImageCVD32_New():
  return itkImageCVD32.New()


def itkImageCVD22_New():
  return itkImageCVD22.New()


def itkImageVF13_New():
  return itkImageVF13.New()


def itkImageVD44_New():
  return itkImageVD44.New()


def itkImageVD34_New():
  return itkImageVD34.New()


def itkImageVD24_New():
  return itkImageVD24.New()


def itkImageVF12_New():
  return itkImageVF12.New()


def itkImageSSRTD33_New():
  return itkImageSSRTD33.New()


def itkImageO33_New():
  return itkImageO33.New()


def itkImageFAF33_New():
  return itkImageFAF33.New()


def itkImageB3_New():
  return itkImageB3.New()


def itkImageVD43_New():
  return itkImageVD43.New()


def itkImageVD33_New():
  return itkImageVD33.New()


def itkImageVD23_New():
  return itkImageVD23.New()


def itkImageULL3_New():
  return itkImageULL3.New()


def itkImageUL3_New():
  return itkImageUL3.New()


def itkImageD3_New():
  return itkImageD3.New()


def itkImageCF3_New():
  return itkImageCF3.New()


def itkImageF3_New():
  return itkImageF3.New()


def itkImageUS3_New():
  return itkImageUS3.New()


def itkImageUC3_New():
  return itkImageUC3.New()


def itkImageSS3_New():
  return itkImageSS3.New()


def itkImageCVF43_New():
  return itkImageCVF43.New()


def itkImageCVF33_New():
  return itkImageCVF33.New()


def itkImageCVF23_New():
  return itkImageCVF23.New()


def itkImageVF43_New():
  return itkImageVF43.New()


def itkImageVF33_New():
  return itkImageVF33.New()


def itkImageVF23_New():
  return itkImageVF23.New()


def itkImageRGBAUC3_New():
  return itkImageRGBAUC3.New()


def itkImageRGBUC3_New():
  return itkImageRGBUC3.New()


def itkImageSSRTD22_New():
  return itkImageSSRTD22.New()


def itkImageO22_New():
  return itkImageO22.New()


def itkImageFAF22_New():
  return itkImageFAF22.New()


def itkImageB2_New():
  return itkImageB2.New()


def itkImageVD42_New():
  return itkImageVD42.New()


def itkImageVD32_New():
  return itkImageVD32.New()


def itkImageVD22_New():
  return itkImageVD22.New()


def itkImageULL2_New():
  return itkImageULL2.New()


def itkImageUL2_New():
  return itkImageUL2.New()


def itkImageD2_New():
  return itkImageD2.New()


def itkImageCF2_New():
  return itkImageCF2.New()


def itkImageF2_New():
  return itkImageF2.New()


def itkImageUS2_New():
  return itkImageUS2.New()


def itkImageUC2_New():
  return itkImageUC2.New()


def itkImageSS2_New():
  return itkImageSS2.New()


def itkImageCVF42_New():
  return itkImageCVF42.New()


def itkImageCVF32_New():
  return itkImageCVF32.New()


def itkImageCVF22_New():
  return itkImageCVF22.New()


def itkImageVF42_New():
  return itkImageVF42.New()


def itkImageVF32_New():
  return itkImageVF32.New()


def itkImageVF22_New():
  return itkImageVF22.New()


def itkImageRGBAUC2_New():
  return itkImageRGBAUC2.New()


def itkImageRGBUC2_New():
  return itkImageRGBUC2.New()


def itkImageBase4_New():
  return itkImageBase4.New()


def itkImageBase3_New():
  return itkImageBase3.New()


def itkImageBase2_New():
  return itkImageBase2.New()

class itkImageBase2(ITKCommonBasePython.itkDataObject):
    """


    Base class for templated image classes.

    ImageBase is the base class for the templated Image classes. ImageBase
    is templated over the dimension of the image. It provides the API and
    ivars that depend solely on the dimension of the image. ImageBase does
    not store any of the image (pixel) data. Storage for the pixels and
    the pixel access methods are defined in subclasses of ImageBase,
    namely Image and ImageAdaptor.

    ImageBase manages the geometry of an image. The geometry of an image
    is defined by its position, orientation, spacing, and extent.

    The position and orientation of an image is defined by its "Origin"
    and its "Directions". The "Origin" is the physical position of the
    pixel whose "Index" is all zeros. The "Direction" of an image is a
    matrix whose columns indicate the direction in physical space that
    each dimension of the image traverses. The first column defines the
    direction that the fastest moving index in the image traverses in
    physical space while the last column defines the direction that the
    slowest moving index in the image traverses in physical space.

    The extent of an image is defined by the pixel spacing and a set of
    regions. The "Spacing" is the size of a pixel in physical space
    along each dimension. Regions describe a portion of an image grid via
    a starting index for the image array and a size (or number of pixels)
    in each dimension. The ivar LargestPossibleRegion defines the size and
    starting index of the image dataset. The entire image dataset,
    however, may not be resident in memory. The region of the image that
    is resident in memory is defined by the "BufferedRegion". The Buffer
    is a contiguous block of memory. The third set of meta-data defines a
    region of interest, called the "RequestedRegion". The
    RequestedRegion is used by the pipeline execution model to define what
    a filter is requested to produce.

    [RegionIndex, RegionSize] C [BufferIndex, BufferSize] C [ImageIndex,
    ImageSize]

    ImageBase provides all the methods for converting between the physical
    space and index coordinate frames. TransformIndexToPhysicalPoint()
    converts an Index in the pixel array into its coordinates in physical
    space. TransformPhysicalPointToIndex() converts a position in physical
    space into an Index into the pixel array (using rounding). Subpixel
    locations are supported by methods that convert to and from
    ContinuousIndex types.

    ImageBase also provides helper routines for the ImageIterators which
    convert an Index to an offset in memory from the first pixel address
    as well as covert an offset in memory from the first pixel address to
    an Index.

    C++ includes: itkImageBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageBase2_Pointer":
        """__New_orig__() -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageBase2_Pointer":
        """Clone(itkImageBase2 self) -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2_Clone(self)


    def GetImageDimension() -> "unsigned int":
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase2_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkImageBase2 self, itkPointD2 _arg)
        SetOrigin(itkImageBase2 self, double const * origin)
        SetOrigin(itkImageBase2 self, float const * origin)

        Set the origin of the
        image. The origin is the geometric coordinates of the image origin
        (pixel [0,0]). It is stored internally as SpacePrecisionType but may
        be set from float or double. See:   GetOrigin() 
        """
        return _itkImagePython.itkImageBase2_SetOrigin(self, *args)


    def SetDirection(self, direction: 'itkMatrixD22') -> "void":
        """
        SetDirection(itkImageBase2 self, itkMatrixD22 direction)

        Set the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next.

        Each column of the matrix indicates the direction cosines of the unit
        vector that is parallel to the lines of the image grid corresponding
        to that dimension. For example, an image with Direction matrix

        0.866 0.500 -0.500 0.866

        has an image grid were the fastest changing index (dimension[0]) walks
        over a line that in physical space is oriented parallel to the vector
        (0.866, -0.5). The second fastest changing index (dimension[1]) walks
        along a line that in Physical space is oriented parallel to the vector
        (0.5, 0.866)

        The columns of the Direction matrix are expected to form an orthogonal
        right handed coordinate syste. But this is not checked nor enforced in
        itk::ImageBase.

        For details, please see:

        https://www.itk.org/Wiki/Proposals:Orientation#Some_notes_on_the_DICOM
        _convention_and_current_ITK_usage

        See:   GetDirection() 
        """
        return _itkImagePython.itkImageBase2_SetDirection(self, direction)


    def GetDirection(self) -> "itkMatrixD22 const &":
        """
        GetDirection(itkImageBase2 self) -> itkMatrixD22

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkImagePython.itkImageBase2_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD22 const &":
        """
        GetInverseDirection(itkImageBase2 self) -> itkMatrixD22

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkImagePython.itkImageBase2_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD2 const &":
        """
        GetSpacing(itkImageBase2 self) -> itkVectorD2

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkImagePython.itkImageBase2_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD2 const &":
        """
        GetOrigin(itkImageBase2 self) -> itkPointD2

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkImagePython.itkImageBase2_GetOrigin(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkImageBase2 self, bool initialize=False)
        Allocate(itkImageBase2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkImagePython.itkImageBase2_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetLargestPossibleRegion(itkImageBase2 self, itkImageRegion2 region)

        Set the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, SetBufferedRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase2_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self) -> "itkImageRegion2 const &":
        """
        GetLargestPossibleRegion(itkImageBase2 self) -> itkImageRegion2

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase2_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetBufferedRegion(itkImageBase2 self, itkImageRegion2 region)

        Set the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase2_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "itkImageRegion2 const &":
        """
        GetBufferedRegion(itkImageBase2 self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase2_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkImageBase2 self, itkImageRegion2 region)
        SetRequestedRegion(itkImageBase2 self, itkDataObject data)

        Set the
        requested region from this data object to match the requested region
        of the data object passed in as a parameter. This method implements
        the API from DataObject. The data object parameter must be castable to
        an ImageBase. Setting the RequestedRegion does not cause the object to
        be modified. This method is called internally by the pipeline and
        therefore bypasses the modified time calculation. 
        """
        return _itkImagePython.itkImageBase2_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """
        GetRequestedRegion(itkImageBase2 self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkImagePython.itkImageBase2_GetRequestedRegion(self)


    def SetRegions(self, *args) -> "void":
        """
        SetRegions(itkImageBase2 self, itkImageRegion2 region)
        SetRegions(itkImageBase2 self, itkSize2 size)

        Convenience methods to
        set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
        Allocate must still be called. 
        """
        return _itkImagePython.itkImageBase2_SetRegions(self, *args)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkImageBase2 self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkImagePython.itkImageBase2_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex2') -> "long":
        """
        ComputeOffset(itkImageBase2 self, itkIndex2 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkImagePython.itkImageBase2_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex2":
        """
        ComputeIndex(itkImageBase2 self, long offset) -> itkIndex2

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkImagePython.itkImageBase2_ComputeIndex(self, offset)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkImageBase2 self, itkVectorD2 spacing)
        SetSpacing(itkImageBase2 self, double const * spacing)
        SetSpacing(itkImageBase2 self, float const * spacing)

        Set the spacing (size of
        a pixel) of the image. The spacing is the geometric distance between
        image samples along each dimension. It is stored internally as double,
        but may be set from float. These methods also pre-compute the Index to
        Physical point transforms of the image. See:   GetSpacing() 
        """
        return _itkImagePython.itkImageBase2_SetSpacing(self, *args)


    def Graft(self, data: 'itkImageBase2') -> "void":
        """
        Graft(itkImageBase2 self, itkImageBase2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkImagePython.itkImageBase2_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """
        GetNumberOfComponentsPerPixel(itkImageBase2 self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkImagePython.itkImageBase2_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0: 'unsigned int') -> "void":
        """SetNumberOfComponentsPerPixel(itkImageBase2 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase2_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase2

    def cast(obj: 'itkLightObject') -> "itkImageBase2 *":
        """cast(itkLightObject obj) -> itkImageBase2"""
        return _itkImagePython.itkImageBase2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageBase2 *":
        """GetPointer(itkImageBase2 self) -> itkImageBase2"""
        return _itkImagePython.itkImageBase2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageBase2

        Create a new object of the class itkImageBase2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def TransformPhysicalPointToIndex(self, point: 'itkPointD2') -> "itkIndex2":
        """
        TransformPhysicalPointToIndex(itkImageBase2 self, itkPointD2 point) -> itkIndex2

        Get
        the index (discrete) of a voxel from a physical point. Floating point
        index results are rounded to integers Returns true if the resulting
        index is within the image, false otherwise See:  Transform 
        """
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point: 'itkPointD2') -> "itkContinuousIndexD2":
        """
        TransformPhysicalPointToContinuousIndex(itkImageBase2 self, itkPointD2 point) -> itkContinuousIndexD2

        Get the continuous
        index from a physical point.

        Returns true if the resulting index is within the image, false
        otherwise. See:  Transform 
        """
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx: 'itkContinuousIndexD2 &') -> "itkPointD2":
        """
        TransformContinuousIndexToPhysicalPoint(itkImageBase2 self, itkContinuousIndexD2 & idx) -> itkPointD2

        Get a physical
        point (in the space which the origin and spacing information comes
        from) from a continuous index (in the index space) See:  Transform 
        """
        return _itkImagePython.itkImageBase2_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx: 'itkIndex2') -> "itkPointD2":
        """
        TransformIndexToPhysicalPoint(itkImageBase2 self, itkIndex2 idx) -> itkPointD2

        Get a
        physical point (in the space which the origin and spacing information
        comes from) from a discrete index (in the index space)

        See:  Transform 
        """
        return _itkImagePython.itkImageBase2_TransformIndexToPhysicalPoint(self, idx)

itkImageBase2.Clone = new_instancemethod(_itkImagePython.itkImageBase2_Clone, None, itkImageBase2)
itkImageBase2.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase2_SetOrigin, None, itkImageBase2)
itkImageBase2.SetDirection = new_instancemethod(_itkImagePython.itkImageBase2_SetDirection, None, itkImageBase2)
itkImageBase2.GetDirection = new_instancemethod(_itkImagePython.itkImageBase2_GetDirection, None, itkImageBase2)
itkImageBase2.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase2_GetInverseDirection, None, itkImageBase2)
itkImageBase2.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase2_GetSpacing, None, itkImageBase2)
itkImageBase2.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase2_GetOrigin, None, itkImageBase2)
itkImageBase2.Allocate = new_instancemethod(_itkImagePython.itkImageBase2_Allocate, None, itkImageBase2)
itkImageBase2.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetLargestPossibleRegion, None, itkImageBase2)
itkImageBase2.GetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase2_GetLargestPossibleRegion, None, itkImageBase2)
itkImageBase2.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetBufferedRegion, None, itkImageBase2)
itkImageBase2.GetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase2_GetBufferedRegion, None, itkImageBase2)
itkImageBase2.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetRequestedRegion, None, itkImageBase2)
itkImageBase2.GetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase2_GetRequestedRegion, None, itkImageBase2)
itkImageBase2.SetRegions = new_instancemethod(_itkImagePython.itkImageBase2_SetRegions, None, itkImageBase2)
itkImageBase2.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase2_GetOffsetTable, None, itkImageBase2)
itkImageBase2.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase2_ComputeOffset, None, itkImageBase2)
itkImageBase2.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase2_ComputeIndex, None, itkImageBase2)
itkImageBase2.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase2_SetSpacing, None, itkImageBase2)
itkImageBase2.Graft = new_instancemethod(_itkImagePython.itkImageBase2_Graft, None, itkImageBase2)
itkImageBase2.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase2_GetNumberOfComponentsPerPixel, None, itkImageBase2)
itkImageBase2.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase2_SetNumberOfComponentsPerPixel, None, itkImageBase2)
itkImageBase2.GetPointer = new_instancemethod(_itkImagePython.itkImageBase2_GetPointer, None, itkImageBase2)
itkImageBase2.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase2_TransformPhysicalPointToIndex, None, itkImageBase2)
itkImageBase2.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase2_TransformPhysicalPointToContinuousIndex, None, itkImageBase2)
itkImageBase2.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase2_TransformContinuousIndexToPhysicalPoint, None, itkImageBase2)
itkImageBase2.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase2_TransformIndexToPhysicalPoint, None, itkImageBase2)
itkImageBase2_swigregister = _itkImagePython.itkImageBase2_swigregister
itkImageBase2_swigregister(itkImageBase2)

def itkImageBase2___New_orig__() -> "itkImageBase2_Pointer":
    """itkImageBase2___New_orig__() -> itkImageBase2_Pointer"""
    return _itkImagePython.itkImageBase2___New_orig__()

def itkImageBase2_GetImageDimension() -> "unsigned int":
    """itkImageBase2_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase2_GetImageDimension()

def itkImageBase2_cast(obj: 'itkLightObject') -> "itkImageBase2 *":
    """itkImageBase2_cast(itkLightObject obj) -> itkImageBase2"""
    return _itkImagePython.itkImageBase2_cast(obj)

class itkImageBase3(ITKCommonBasePython.itkDataObject):
    """


    Base class for templated image classes.

    ImageBase is the base class for the templated Image classes. ImageBase
    is templated over the dimension of the image. It provides the API and
    ivars that depend solely on the dimension of the image. ImageBase does
    not store any of the image (pixel) data. Storage for the pixels and
    the pixel access methods are defined in subclasses of ImageBase,
    namely Image and ImageAdaptor.

    ImageBase manages the geometry of an image. The geometry of an image
    is defined by its position, orientation, spacing, and extent.

    The position and orientation of an image is defined by its "Origin"
    and its "Directions". The "Origin" is the physical position of the
    pixel whose "Index" is all zeros. The "Direction" of an image is a
    matrix whose columns indicate the direction in physical space that
    each dimension of the image traverses. The first column defines the
    direction that the fastest moving index in the image traverses in
    physical space while the last column defines the direction that the
    slowest moving index in the image traverses in physical space.

    The extent of an image is defined by the pixel spacing and a set of
    regions. The "Spacing" is the size of a pixel in physical space
    along each dimension. Regions describe a portion of an image grid via
    a starting index for the image array and a size (or number of pixels)
    in each dimension. The ivar LargestPossibleRegion defines the size and
    starting index of the image dataset. The entire image dataset,
    however, may not be resident in memory. The region of the image that
    is resident in memory is defined by the "BufferedRegion". The Buffer
    is a contiguous block of memory. The third set of meta-data defines a
    region of interest, called the "RequestedRegion". The
    RequestedRegion is used by the pipeline execution model to define what
    a filter is requested to produce.

    [RegionIndex, RegionSize] C [BufferIndex, BufferSize] C [ImageIndex,
    ImageSize]

    ImageBase provides all the methods for converting between the physical
    space and index coordinate frames. TransformIndexToPhysicalPoint()
    converts an Index in the pixel array into its coordinates in physical
    space. TransformPhysicalPointToIndex() converts a position in physical
    space into an Index into the pixel array (using rounding). Subpixel
    locations are supported by methods that convert to and from
    ContinuousIndex types.

    ImageBase also provides helper routines for the ImageIterators which
    convert an Index to an offset in memory from the first pixel address
    as well as covert an offset in memory from the first pixel address to
    an Index.

    C++ includes: itkImageBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageBase3_Pointer":
        """__New_orig__() -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageBase3_Pointer":
        """Clone(itkImageBase3 self) -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3_Clone(self)


    def GetImageDimension() -> "unsigned int":
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase3_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkImageBase3 self, itkPointD3 _arg)
        SetOrigin(itkImageBase3 self, double const * origin)
        SetOrigin(itkImageBase3 self, float const * origin)

        Set the origin of the
        image. The origin is the geometric coordinates of the image origin
        (pixel [0,0]). It is stored internally as SpacePrecisionType but may
        be set from float or double. See:   GetOrigin() 
        """
        return _itkImagePython.itkImageBase3_SetOrigin(self, *args)


    def SetDirection(self, direction: 'itkMatrixD33') -> "void":
        """
        SetDirection(itkImageBase3 self, itkMatrixD33 direction)

        Set the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next.

        Each column of the matrix indicates the direction cosines of the unit
        vector that is parallel to the lines of the image grid corresponding
        to that dimension. For example, an image with Direction matrix

        0.866 0.500 -0.500 0.866

        has an image grid were the fastest changing index (dimension[0]) walks
        over a line that in physical space is oriented parallel to the vector
        (0.866, -0.5). The second fastest changing index (dimension[1]) walks
        along a line that in Physical space is oriented parallel to the vector
        (0.5, 0.866)

        The columns of the Direction matrix are expected to form an orthogonal
        right handed coordinate syste. But this is not checked nor enforced in
        itk::ImageBase.

        For details, please see:

        https://www.itk.org/Wiki/Proposals:Orientation#Some_notes_on_the_DICOM
        _convention_and_current_ITK_usage

        See:   GetDirection() 
        """
        return _itkImagePython.itkImageBase3_SetDirection(self, direction)


    def GetDirection(self) -> "itkMatrixD33 const &":
        """
        GetDirection(itkImageBase3 self) -> itkMatrixD33

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkImagePython.itkImageBase3_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD33 const &":
        """
        GetInverseDirection(itkImageBase3 self) -> itkMatrixD33

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkImagePython.itkImageBase3_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD3 const &":
        """
        GetSpacing(itkImageBase3 self) -> itkVectorD3

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkImagePython.itkImageBase3_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD3 const &":
        """
        GetOrigin(itkImageBase3 self) -> itkPointD3

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkImagePython.itkImageBase3_GetOrigin(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkImageBase3 self, bool initialize=False)
        Allocate(itkImageBase3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkImagePython.itkImageBase3_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetLargestPossibleRegion(itkImageBase3 self, itkImageRegion3 region)

        Set the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, SetBufferedRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase3_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self) -> "itkImageRegion3 const &":
        """
        GetLargestPossibleRegion(itkImageBase3 self) -> itkImageRegion3

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase3_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetBufferedRegion(itkImageBase3 self, itkImageRegion3 region)

        Set the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase3_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "itkImageRegion3 const &":
        """
        GetBufferedRegion(itkImageBase3 self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase3_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkImageBase3 self, itkImageRegion3 region)
        SetRequestedRegion(itkImageBase3 self, itkDataObject data)

        Set the
        requested region from this data object to match the requested region
        of the data object passed in as a parameter. This method implements
        the API from DataObject. The data object parameter must be castable to
        an ImageBase. Setting the RequestedRegion does not cause the object to
        be modified. This method is called internally by the pipeline and
        therefore bypasses the modified time calculation. 
        """
        return _itkImagePython.itkImageBase3_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "itkImageRegion3 const &":
        """
        GetRequestedRegion(itkImageBase3 self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkImagePython.itkImageBase3_GetRequestedRegion(self)


    def SetRegions(self, *args) -> "void":
        """
        SetRegions(itkImageBase3 self, itkImageRegion3 region)
        SetRegions(itkImageBase3 self, itkSize3 size)

        Convenience methods to
        set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
        Allocate must still be called. 
        """
        return _itkImagePython.itkImageBase3_SetRegions(self, *args)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkImageBase3 self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkImagePython.itkImageBase3_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex3') -> "long":
        """
        ComputeOffset(itkImageBase3 self, itkIndex3 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkImagePython.itkImageBase3_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex3":
        """
        ComputeIndex(itkImageBase3 self, long offset) -> itkIndex3

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkImagePython.itkImageBase3_ComputeIndex(self, offset)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkImageBase3 self, itkVectorD3 spacing)
        SetSpacing(itkImageBase3 self, double const * spacing)
        SetSpacing(itkImageBase3 self, float const * spacing)

        Set the spacing (size of
        a pixel) of the image. The spacing is the geometric distance between
        image samples along each dimension. It is stored internally as double,
        but may be set from float. These methods also pre-compute the Index to
        Physical point transforms of the image. See:   GetSpacing() 
        """
        return _itkImagePython.itkImageBase3_SetSpacing(self, *args)


    def Graft(self, data: 'itkImageBase3') -> "void":
        """
        Graft(itkImageBase3 self, itkImageBase3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkImagePython.itkImageBase3_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """
        GetNumberOfComponentsPerPixel(itkImageBase3 self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkImagePython.itkImageBase3_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0: 'unsigned int') -> "void":
        """SetNumberOfComponentsPerPixel(itkImageBase3 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase3_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase3

    def cast(obj: 'itkLightObject') -> "itkImageBase3 *":
        """cast(itkLightObject obj) -> itkImageBase3"""
        return _itkImagePython.itkImageBase3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageBase3 *":
        """GetPointer(itkImageBase3 self) -> itkImageBase3"""
        return _itkImagePython.itkImageBase3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageBase3

        Create a new object of the class itkImageBase3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def TransformPhysicalPointToIndex(self, point: 'itkPointD3') -> "itkIndex3":
        """
        TransformPhysicalPointToIndex(itkImageBase3 self, itkPointD3 point) -> itkIndex3

        Get
        the index (discrete) of a voxel from a physical point. Floating point
        index results are rounded to integers Returns true if the resulting
        index is within the image, false otherwise See:  Transform 
        """
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point: 'itkPointD3') -> "itkContinuousIndexD3":
        """
        TransformPhysicalPointToContinuousIndex(itkImageBase3 self, itkPointD3 point) -> itkContinuousIndexD3

        Get the continuous
        index from a physical point.

        Returns true if the resulting index is within the image, false
        otherwise. See:  Transform 
        """
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx: 'itkContinuousIndexD3 &') -> "itkPointD3":
        """
        TransformContinuousIndexToPhysicalPoint(itkImageBase3 self, itkContinuousIndexD3 & idx) -> itkPointD3

        Get a physical
        point (in the space which the origin and spacing information comes
        from) from a continuous index (in the index space) See:  Transform 
        """
        return _itkImagePython.itkImageBase3_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx: 'itkIndex3') -> "itkPointD3":
        """
        TransformIndexToPhysicalPoint(itkImageBase3 self, itkIndex3 idx) -> itkPointD3

        Get a
        physical point (in the space which the origin and spacing information
        comes from) from a discrete index (in the index space)

        See:  Transform 
        """
        return _itkImagePython.itkImageBase3_TransformIndexToPhysicalPoint(self, idx)

itkImageBase3.Clone = new_instancemethod(_itkImagePython.itkImageBase3_Clone, None, itkImageBase3)
itkImageBase3.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase3_SetOrigin, None, itkImageBase3)
itkImageBase3.SetDirection = new_instancemethod(_itkImagePython.itkImageBase3_SetDirection, None, itkImageBase3)
itkImageBase3.GetDirection = new_instancemethod(_itkImagePython.itkImageBase3_GetDirection, None, itkImageBase3)
itkImageBase3.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase3_GetInverseDirection, None, itkImageBase3)
itkImageBase3.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase3_GetSpacing, None, itkImageBase3)
itkImageBase3.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase3_GetOrigin, None, itkImageBase3)
itkImageBase3.Allocate = new_instancemethod(_itkImagePython.itkImageBase3_Allocate, None, itkImageBase3)
itkImageBase3.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetLargestPossibleRegion, None, itkImageBase3)
itkImageBase3.GetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase3_GetLargestPossibleRegion, None, itkImageBase3)
itkImageBase3.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetBufferedRegion, None, itkImageBase3)
itkImageBase3.GetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase3_GetBufferedRegion, None, itkImageBase3)
itkImageBase3.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetRequestedRegion, None, itkImageBase3)
itkImageBase3.GetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase3_GetRequestedRegion, None, itkImageBase3)
itkImageBase3.SetRegions = new_instancemethod(_itkImagePython.itkImageBase3_SetRegions, None, itkImageBase3)
itkImageBase3.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase3_GetOffsetTable, None, itkImageBase3)
itkImageBase3.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase3_ComputeOffset, None, itkImageBase3)
itkImageBase3.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase3_ComputeIndex, None, itkImageBase3)
itkImageBase3.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase3_SetSpacing, None, itkImageBase3)
itkImageBase3.Graft = new_instancemethod(_itkImagePython.itkImageBase3_Graft, None, itkImageBase3)
itkImageBase3.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase3_GetNumberOfComponentsPerPixel, None, itkImageBase3)
itkImageBase3.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase3_SetNumberOfComponentsPerPixel, None, itkImageBase3)
itkImageBase3.GetPointer = new_instancemethod(_itkImagePython.itkImageBase3_GetPointer, None, itkImageBase3)
itkImageBase3.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase3_TransformPhysicalPointToIndex, None, itkImageBase3)
itkImageBase3.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase3_TransformPhysicalPointToContinuousIndex, None, itkImageBase3)
itkImageBase3.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase3_TransformContinuousIndexToPhysicalPoint, None, itkImageBase3)
itkImageBase3.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase3_TransformIndexToPhysicalPoint, None, itkImageBase3)
itkImageBase3_swigregister = _itkImagePython.itkImageBase3_swigregister
itkImageBase3_swigregister(itkImageBase3)

def itkImageBase3___New_orig__() -> "itkImageBase3_Pointer":
    """itkImageBase3___New_orig__() -> itkImageBase3_Pointer"""
    return _itkImagePython.itkImageBase3___New_orig__()

def itkImageBase3_GetImageDimension() -> "unsigned int":
    """itkImageBase3_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase3_GetImageDimension()

def itkImageBase3_cast(obj: 'itkLightObject') -> "itkImageBase3 *":
    """itkImageBase3_cast(itkLightObject obj) -> itkImageBase3"""
    return _itkImagePython.itkImageBase3_cast(obj)

class itkImageBase4(ITKCommonBasePython.itkDataObject):
    """


    Base class for templated image classes.

    ImageBase is the base class for the templated Image classes. ImageBase
    is templated over the dimension of the image. It provides the API and
    ivars that depend solely on the dimension of the image. ImageBase does
    not store any of the image (pixel) data. Storage for the pixels and
    the pixel access methods are defined in subclasses of ImageBase,
    namely Image and ImageAdaptor.

    ImageBase manages the geometry of an image. The geometry of an image
    is defined by its position, orientation, spacing, and extent.

    The position and orientation of an image is defined by its "Origin"
    and its "Directions". The "Origin" is the physical position of the
    pixel whose "Index" is all zeros. The "Direction" of an image is a
    matrix whose columns indicate the direction in physical space that
    each dimension of the image traverses. The first column defines the
    direction that the fastest moving index in the image traverses in
    physical space while the last column defines the direction that the
    slowest moving index in the image traverses in physical space.

    The extent of an image is defined by the pixel spacing and a set of
    regions. The "Spacing" is the size of a pixel in physical space
    along each dimension. Regions describe a portion of an image grid via
    a starting index for the image array and a size (or number of pixels)
    in each dimension. The ivar LargestPossibleRegion defines the size and
    starting index of the image dataset. The entire image dataset,
    however, may not be resident in memory. The region of the image that
    is resident in memory is defined by the "BufferedRegion". The Buffer
    is a contiguous block of memory. The third set of meta-data defines a
    region of interest, called the "RequestedRegion". The
    RequestedRegion is used by the pipeline execution model to define what
    a filter is requested to produce.

    [RegionIndex, RegionSize] C [BufferIndex, BufferSize] C [ImageIndex,
    ImageSize]

    ImageBase provides all the methods for converting between the physical
    space and index coordinate frames. TransformIndexToPhysicalPoint()
    converts an Index in the pixel array into its coordinates in physical
    space. TransformPhysicalPointToIndex() converts a position in physical
    space into an Index into the pixel array (using rounding). Subpixel
    locations are supported by methods that convert to and from
    ContinuousIndex types.

    ImageBase also provides helper routines for the ImageIterators which
    convert an Index to an offset in memory from the first pixel address
    as well as covert an offset in memory from the first pixel address to
    an Index.

    C++ includes: itkImageBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageBase4_Pointer":
        """__New_orig__() -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageBase4_Pointer":
        """Clone(itkImageBase4 self) -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4_Clone(self)


    def GetImageDimension() -> "unsigned int":
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase4_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args) -> "void":
        """
        SetOrigin(itkImageBase4 self, itkPointD4 _arg)
        SetOrigin(itkImageBase4 self, double const * origin)
        SetOrigin(itkImageBase4 self, float const * origin)

        Set the origin of the
        image. The origin is the geometric coordinates of the image origin
        (pixel [0,0]). It is stored internally as SpacePrecisionType but may
        be set from float or double. See:   GetOrigin() 
        """
        return _itkImagePython.itkImageBase4_SetOrigin(self, *args)


    def SetDirection(self, direction: 'itkMatrixD44') -> "void":
        """
        SetDirection(itkImageBase4 self, itkMatrixD44 direction)

        Set the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next.

        Each column of the matrix indicates the direction cosines of the unit
        vector that is parallel to the lines of the image grid corresponding
        to that dimension. For example, an image with Direction matrix

        0.866 0.500 -0.500 0.866

        has an image grid were the fastest changing index (dimension[0]) walks
        over a line that in physical space is oriented parallel to the vector
        (0.866, -0.5). The second fastest changing index (dimension[1]) walks
        along a line that in Physical space is oriented parallel to the vector
        (0.5, 0.866)

        The columns of the Direction matrix are expected to form an orthogonal
        right handed coordinate syste. But this is not checked nor enforced in
        itk::ImageBase.

        For details, please see:

        https://www.itk.org/Wiki/Proposals:Orientation#Some_notes_on_the_DICOM
        _convention_and_current_ITK_usage

        See:   GetDirection() 
        """
        return _itkImagePython.itkImageBase4_SetDirection(self, direction)


    def GetDirection(self) -> "itkMatrixD44 const &":
        """
        GetDirection(itkImageBase4 self) -> itkMatrixD44

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkImagePython.itkImageBase4_GetDirection(self)


    def GetInverseDirection(self) -> "itkMatrixD44 const &":
        """
        GetInverseDirection(itkImageBase4 self) -> itkMatrixD44

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkImagePython.itkImageBase4_GetInverseDirection(self)


    def GetSpacing(self) -> "itkVectorD4 const &":
        """
        GetSpacing(itkImageBase4 self) -> itkVectorD4

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkImagePython.itkImageBase4_GetSpacing(self)


    def GetOrigin(self) -> "itkPointD4 const &":
        """
        GetOrigin(itkImageBase4 self) -> itkPointD4

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkImagePython.itkImageBase4_GetOrigin(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkImageBase4 self, bool initialize=False)
        Allocate(itkImageBase4 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkImagePython.itkImageBase4_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region: 'itk::ImageRegion< 4 > const &') -> "void":
        """
        SetLargestPossibleRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)

        Set the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, SetBufferedRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase4_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetLargestPossibleRegion(itkImageBase4 self) -> itk::ImageRegion< 4 > const &

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase4_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region: 'itk::ImageRegion< 4 > const &') -> "void":
        """
        SetBufferedRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)

        Set the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase4_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetBufferedRegion(itkImageBase4 self) -> itk::ImageRegion< 4 > const &

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkImagePython.itkImageBase4_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)
        SetRequestedRegion(itkImageBase4 self, itkDataObject data)

        Set the
        requested region from this data object to match the requested region
        of the data object passed in as a parameter. This method implements
        the API from DataObject. The data object parameter must be castable to
        an ImageBase. Setting the RequestedRegion does not cause the object to
        be modified. This method is called internally by the pipeline and
        therefore bypasses the modified time calculation. 
        """
        return _itkImagePython.itkImageBase4_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "itk::ImageRegion< 4 > const &":
        """
        GetRequestedRegion(itkImageBase4 self) -> itk::ImageRegion< 4 > const &

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkImagePython.itkImageBase4_GetRequestedRegion(self)


    def SetRegions(self, *args) -> "void":
        """
        SetRegions(itkImageBase4 self, itk::ImageRegion< 4 > const & region)
        SetRegions(itkImageBase4 self, itkSize4 size)

        Convenience methods to
        set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
        Allocate must still be called. 
        """
        return _itkImagePython.itkImageBase4_SetRegions(self, *args)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkImageBase4 self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkImagePython.itkImageBase4_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex4') -> "long":
        """
        ComputeOffset(itkImageBase4 self, itkIndex4 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkImagePython.itkImageBase4_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex4":
        """
        ComputeIndex(itkImageBase4 self, long offset) -> itkIndex4

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkImagePython.itkImageBase4_ComputeIndex(self, offset)


    def SetSpacing(self, *args) -> "void":
        """
        SetSpacing(itkImageBase4 self, itkVectorD4 spacing)
        SetSpacing(itkImageBase4 self, double const * spacing)
        SetSpacing(itkImageBase4 self, float const * spacing)

        Set the spacing (size of
        a pixel) of the image. The spacing is the geometric distance between
        image samples along each dimension. It is stored internally as double,
        but may be set from float. These methods also pre-compute the Index to
        Physical point transforms of the image. See:   GetSpacing() 
        """
        return _itkImagePython.itkImageBase4_SetSpacing(self, *args)


    def Graft(self, data: 'itkImageBase4') -> "void":
        """
        Graft(itkImageBase4 self, itkImageBase4 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkImagePython.itkImageBase4_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self) -> "unsigned int":
        """
        GetNumberOfComponentsPerPixel(itkImageBase4 self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkImagePython.itkImageBase4_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0: 'unsigned int') -> "void":
        """SetNumberOfComponentsPerPixel(itkImageBase4 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase4_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase4

    def cast(obj: 'itkLightObject') -> "itkImageBase4 *":
        """cast(itkLightObject obj) -> itkImageBase4"""
        return _itkImagePython.itkImageBase4_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageBase4 *":
        """GetPointer(itkImageBase4 self) -> itkImageBase4"""
        return _itkImagePython.itkImageBase4_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageBase4

        Create a new object of the class itkImageBase4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def TransformPhysicalPointToIndex(self, point: 'itkPointD4') -> "itkIndex4":
        """
        TransformPhysicalPointToIndex(itkImageBase4 self, itkPointD4 point) -> itkIndex4

        Get
        the index (discrete) of a voxel from a physical point. Floating point
        index results are rounded to integers Returns true if the resulting
        index is within the image, false otherwise See:  Transform 
        """
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point: 'itkPointD4') -> "itkContinuousIndexD4":
        """
        TransformPhysicalPointToContinuousIndex(itkImageBase4 self, itkPointD4 point) -> itkContinuousIndexD4

        Get the continuous
        index from a physical point.

        Returns true if the resulting index is within the image, false
        otherwise. See:  Transform 
        """
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx: 'itkContinuousIndexD4 &') -> "itkPointD4":
        """
        TransformContinuousIndexToPhysicalPoint(itkImageBase4 self, itkContinuousIndexD4 & idx) -> itkPointD4

        Get a physical
        point (in the space which the origin and spacing information comes
        from) from a continuous index (in the index space) See:  Transform 
        """
        return _itkImagePython.itkImageBase4_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx: 'itkIndex4') -> "itkPointD4":
        """
        TransformIndexToPhysicalPoint(itkImageBase4 self, itkIndex4 idx) -> itkPointD4

        Get a
        physical point (in the space which the origin and spacing information
        comes from) from a discrete index (in the index space)

        See:  Transform 
        """
        return _itkImagePython.itkImageBase4_TransformIndexToPhysicalPoint(self, idx)

itkImageBase4.Clone = new_instancemethod(_itkImagePython.itkImageBase4_Clone, None, itkImageBase4)
itkImageBase4.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase4_SetOrigin, None, itkImageBase4)
itkImageBase4.SetDirection = new_instancemethod(_itkImagePython.itkImageBase4_SetDirection, None, itkImageBase4)
itkImageBase4.GetDirection = new_instancemethod(_itkImagePython.itkImageBase4_GetDirection, None, itkImageBase4)
itkImageBase4.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase4_GetInverseDirection, None, itkImageBase4)
itkImageBase4.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase4_GetSpacing, None, itkImageBase4)
itkImageBase4.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase4_GetOrigin, None, itkImageBase4)
itkImageBase4.Allocate = new_instancemethod(_itkImagePython.itkImageBase4_Allocate, None, itkImageBase4)
itkImageBase4.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetLargestPossibleRegion, None, itkImageBase4)
itkImageBase4.GetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase4_GetLargestPossibleRegion, None, itkImageBase4)
itkImageBase4.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetBufferedRegion, None, itkImageBase4)
itkImageBase4.GetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase4_GetBufferedRegion, None, itkImageBase4)
itkImageBase4.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetRequestedRegion, None, itkImageBase4)
itkImageBase4.GetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase4_GetRequestedRegion, None, itkImageBase4)
itkImageBase4.SetRegions = new_instancemethod(_itkImagePython.itkImageBase4_SetRegions, None, itkImageBase4)
itkImageBase4.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase4_GetOffsetTable, None, itkImageBase4)
itkImageBase4.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase4_ComputeOffset, None, itkImageBase4)
itkImageBase4.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase4_ComputeIndex, None, itkImageBase4)
itkImageBase4.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase4_SetSpacing, None, itkImageBase4)
itkImageBase4.Graft = new_instancemethod(_itkImagePython.itkImageBase4_Graft, None, itkImageBase4)
itkImageBase4.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase4_GetNumberOfComponentsPerPixel, None, itkImageBase4)
itkImageBase4.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase4_SetNumberOfComponentsPerPixel, None, itkImageBase4)
itkImageBase4.GetPointer = new_instancemethod(_itkImagePython.itkImageBase4_GetPointer, None, itkImageBase4)
itkImageBase4.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase4_TransformPhysicalPointToIndex, None, itkImageBase4)
itkImageBase4.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase4_TransformPhysicalPointToContinuousIndex, None, itkImageBase4)
itkImageBase4.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase4_TransformContinuousIndexToPhysicalPoint, None, itkImageBase4)
itkImageBase4.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase4_TransformIndexToPhysicalPoint, None, itkImageBase4)
itkImageBase4_swigregister = _itkImagePython.itkImageBase4_swigregister
itkImageBase4_swigregister(itkImageBase4)

def itkImageBase4___New_orig__() -> "itkImageBase4_Pointer":
    """itkImageBase4___New_orig__() -> itkImageBase4_Pointer"""
    return _itkImagePython.itkImageBase4___New_orig__()

def itkImageBase4_GetImageDimension() -> "unsigned int":
    """itkImageBase4_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase4_GetImageDimension()

def itkImageBase4_cast(obj: 'itkLightObject') -> "itkImageBase4 *":
    """itkImageBase4_cast(itkLightObject obj) -> itkImageBase4"""
    return _itkImagePython.itkImageBase4_cast(obj)

class itkImageCF2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCF2_Pointer":
        """__New_orig__() -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCF2_Pointer":
        """Clone(itkImageCF2 self) -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCF2 self, bool initializePixels=False)
        Allocate(itkImageCF2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCF2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'stdcomplexF') -> "void":
        """
        FillBuffer(itkImageCF2 self, stdcomplexF value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCF2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'stdcomplexF') -> "void":
        """
        SetPixel(itkImageCF2 self, itkIndex2 index, stdcomplexF value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCF2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "stdcomplexF &":
        """
        GetPixel(itkImageCF2 self, itkIndex2 index) -> stdcomplexF
        GetPixel(itkImageCF2 self, itkIndex2 index) -> stdcomplexF

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCF2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "stdcomplexF const *":
        """
        GetBufferPointer(itkImageCF2 self) -> stdcomplexF
        GetBufferPointer(itkImageCF2 self) -> stdcomplexF

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCF2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,std::complex< float > > const *":
        """
        GetPixelContainer(itkImageCF2 self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(itkImageCF2 self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCF2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,std::complex< float > > *') -> "void":
        """
        SetPixelContainer(itkImageCF2 self, itk::ImportImageContainer< unsigned long,std::complex< float > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCF2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCF2') -> "void":
        """
        Graft(itkImageCF2 self, itkImageCF2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCF2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< std::complex< float > > const":
        """
        GetPixelAccessor(itkImageCF2 self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(itkImageCF2 self) -> itk::DefaultPixelAccessor< std::complex< float > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCF2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > >
        GetNeighborhoodAccessor(itkImageCF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCF2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCF2

    def cast(obj: 'itkLightObject') -> "itkImageCF2 *":
        """cast(itkLightObject obj) -> itkImageCF2"""
        return _itkImagePython.itkImageCF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCF2 *":
        """GetPointer(itkImageCF2 self) -> itkImageCF2"""
        return _itkImagePython.itkImageCF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCF2

        Create a new object of the class itkImageCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCF2.Clone = new_instancemethod(_itkImagePython.itkImageCF2_Clone, None, itkImageCF2)
itkImageCF2.Allocate = new_instancemethod(_itkImagePython.itkImageCF2_Allocate, None, itkImageCF2)
itkImageCF2.FillBuffer = new_instancemethod(_itkImagePython.itkImageCF2_FillBuffer, None, itkImageCF2)
itkImageCF2.SetPixel = new_instancemethod(_itkImagePython.itkImageCF2_SetPixel, None, itkImageCF2)
itkImageCF2.GetPixel = new_instancemethod(_itkImagePython.itkImageCF2_GetPixel, None, itkImageCF2)
itkImageCF2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCF2_GetBufferPointer, None, itkImageCF2)
itkImageCF2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF2_GetPixelContainer, None, itkImageCF2)
itkImageCF2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF2_SetPixelContainer, None, itkImageCF2)
itkImageCF2.Graft = new_instancemethod(_itkImagePython.itkImageCF2_Graft, None, itkImageCF2)
itkImageCF2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCF2_GetPixelAccessor, None, itkImageCF2)
itkImageCF2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCF2_GetNeighborhoodAccessor, None, itkImageCF2)
itkImageCF2.GetPointer = new_instancemethod(_itkImagePython.itkImageCF2_GetPointer, None, itkImageCF2)
itkImageCF2_swigregister = _itkImagePython.itkImageCF2_swigregister
itkImageCF2_swigregister(itkImageCF2)

def itkImageCF2___New_orig__() -> "itkImageCF2_Pointer":
    """itkImageCF2___New_orig__() -> itkImageCF2_Pointer"""
    return _itkImagePython.itkImageCF2___New_orig__()

def itkImageCF2_cast(obj: 'itkLightObject') -> "itkImageCF2 *":
    """itkImageCF2_cast(itkLightObject obj) -> itkImageCF2"""
    return _itkImagePython.itkImageCF2_cast(obj)

class itkImageCF3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCF3_Pointer":
        """__New_orig__() -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCF3_Pointer":
        """Clone(itkImageCF3 self) -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCF3 self, bool initializePixels=False)
        Allocate(itkImageCF3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCF3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'stdcomplexF') -> "void":
        """
        FillBuffer(itkImageCF3 self, stdcomplexF value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCF3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'stdcomplexF') -> "void":
        """
        SetPixel(itkImageCF3 self, itkIndex3 index, stdcomplexF value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCF3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "stdcomplexF &":
        """
        GetPixel(itkImageCF3 self, itkIndex3 index) -> stdcomplexF
        GetPixel(itkImageCF3 self, itkIndex3 index) -> stdcomplexF

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCF3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "stdcomplexF const *":
        """
        GetBufferPointer(itkImageCF3 self) -> stdcomplexF
        GetBufferPointer(itkImageCF3 self) -> stdcomplexF

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCF3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,std::complex< float > > const *":
        """
        GetPixelContainer(itkImageCF3 self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(itkImageCF3 self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCF3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,std::complex< float > > *') -> "void":
        """
        SetPixelContainer(itkImageCF3 self, itk::ImportImageContainer< unsigned long,std::complex< float > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCF3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCF3') -> "void":
        """
        Graft(itkImageCF3 self, itkImageCF3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCF3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< std::complex< float > > const":
        """
        GetPixelAccessor(itkImageCF3 self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(itkImageCF3 self) -> itk::DefaultPixelAccessor< std::complex< float > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCF3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > >
        GetNeighborhoodAccessor(itkImageCF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCF3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCF3

    def cast(obj: 'itkLightObject') -> "itkImageCF3 *":
        """cast(itkLightObject obj) -> itkImageCF3"""
        return _itkImagePython.itkImageCF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCF3 *":
        """GetPointer(itkImageCF3 self) -> itkImageCF3"""
        return _itkImagePython.itkImageCF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCF3

        Create a new object of the class itkImageCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCF3.Clone = new_instancemethod(_itkImagePython.itkImageCF3_Clone, None, itkImageCF3)
itkImageCF3.Allocate = new_instancemethod(_itkImagePython.itkImageCF3_Allocate, None, itkImageCF3)
itkImageCF3.FillBuffer = new_instancemethod(_itkImagePython.itkImageCF3_FillBuffer, None, itkImageCF3)
itkImageCF3.SetPixel = new_instancemethod(_itkImagePython.itkImageCF3_SetPixel, None, itkImageCF3)
itkImageCF3.GetPixel = new_instancemethod(_itkImagePython.itkImageCF3_GetPixel, None, itkImageCF3)
itkImageCF3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCF3_GetBufferPointer, None, itkImageCF3)
itkImageCF3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF3_GetPixelContainer, None, itkImageCF3)
itkImageCF3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF3_SetPixelContainer, None, itkImageCF3)
itkImageCF3.Graft = new_instancemethod(_itkImagePython.itkImageCF3_Graft, None, itkImageCF3)
itkImageCF3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCF3_GetPixelAccessor, None, itkImageCF3)
itkImageCF3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCF3_GetNeighborhoodAccessor, None, itkImageCF3)
itkImageCF3.GetPointer = new_instancemethod(_itkImagePython.itkImageCF3_GetPointer, None, itkImageCF3)
itkImageCF3_swigregister = _itkImagePython.itkImageCF3_swigregister
itkImageCF3_swigregister(itkImageCF3)

def itkImageCF3___New_orig__() -> "itkImageCF3_Pointer":
    """itkImageCF3___New_orig__() -> itkImageCF3_Pointer"""
    return _itkImagePython.itkImageCF3___New_orig__()

def itkImageCF3_cast(obj: 'itkLightObject') -> "itkImageCF3 *":
    """itkImageCF3_cast(itkLightObject obj) -> itkImageCF3"""
    return _itkImagePython.itkImageCF3_cast(obj)

class itkImageCVD22(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD22_Pointer":
        """__New_orig__() -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD22_Pointer":
        """Clone(itkImageCVD22 self) -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD22 self, bool initializePixels=False)
        Allocate(itkImageCVD22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVD22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD2') -> "void":
        """
        FillBuffer(itkImageCVD22 self, itkCovariantVectorD2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVD22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorD2') -> "void":
        """
        SetPixel(itkImageCVD22 self, itkIndex2 index, itkCovariantVectorD2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVD22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD2 &":
        """
        GetPixel(itkImageCVD22 self, itkIndex2 index) -> itkCovariantVectorD2
        GetPixel(itkImageCVD22 self, itkIndex2 index) -> itkCovariantVectorD2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD2 const *":
        """
        GetBufferPointer(itkImageCVD22 self) -> itkCovariantVectorD2
        GetBufferPointer(itkImageCVD22 self) -> itkCovariantVectorD2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > const *":
        """
        GetPixelContainer(itkImageCVD22 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > >
        GetPixelContainer(itkImageCVD22 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVD22 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVD22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD22') -> "void":
        """
        Graft(itkImageCVD22 self, itkImageCVD22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVD22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const":
        """
        GetPixelAccessor(itkImageCVD22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(itkImageCVD22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD22

    def cast(obj: 'itkLightObject') -> "itkImageCVD22 *":
        """cast(itkLightObject obj) -> itkImageCVD22"""
        return _itkImagePython.itkImageCVD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVD22 *":
        """GetPointer(itkImageCVD22 self) -> itkImageCVD22"""
        return _itkImagePython.itkImageCVD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD22

        Create a new object of the class itkImageCVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD22.Clone = new_instancemethod(_itkImagePython.itkImageCVD22_Clone, None, itkImageCVD22)
itkImageCVD22.Allocate = new_instancemethod(_itkImagePython.itkImageCVD22_Allocate, None, itkImageCVD22)
itkImageCVD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD22_FillBuffer, None, itkImageCVD22)
itkImageCVD22.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD22_SetPixel, None, itkImageCVD22)
itkImageCVD22.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixel, None, itkImageCVD22)
itkImageCVD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD22_GetBufferPointer, None, itkImageCVD22)
itkImageCVD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixelContainer, None, itkImageCVD22)
itkImageCVD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD22_SetPixelContainer, None, itkImageCVD22)
itkImageCVD22.Graft = new_instancemethod(_itkImagePython.itkImageCVD22_Graft, None, itkImageCVD22)
itkImageCVD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixelAccessor, None, itkImageCVD22)
itkImageCVD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD22_GetNeighborhoodAccessor, None, itkImageCVD22)
itkImageCVD22.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD22_GetPointer, None, itkImageCVD22)
itkImageCVD22_swigregister = _itkImagePython.itkImageCVD22_swigregister
itkImageCVD22_swigregister(itkImageCVD22)

def itkImageCVD22___New_orig__() -> "itkImageCVD22_Pointer":
    """itkImageCVD22___New_orig__() -> itkImageCVD22_Pointer"""
    return _itkImagePython.itkImageCVD22___New_orig__()

def itkImageCVD22_cast(obj: 'itkLightObject') -> "itkImageCVD22 *":
    """itkImageCVD22_cast(itkLightObject obj) -> itkImageCVD22"""
    return _itkImagePython.itkImageCVD22_cast(obj)

class itkImageCVD23(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD23_Pointer":
        """__New_orig__() -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD23_Pointer":
        """Clone(itkImageCVD23 self) -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD23 self, bool initializePixels=False)
        Allocate(itkImageCVD23 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVD23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD2') -> "void":
        """
        FillBuffer(itkImageCVD23 self, itkCovariantVectorD2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVD23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorD2') -> "void":
        """
        SetPixel(itkImageCVD23 self, itkIndex3 index, itkCovariantVectorD2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVD23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD2 &":
        """
        GetPixel(itkImageCVD23 self, itkIndex3 index) -> itkCovariantVectorD2
        GetPixel(itkImageCVD23 self, itkIndex3 index) -> itkCovariantVectorD2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVD23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD2 const *":
        """
        GetBufferPointer(itkImageCVD23 self) -> itkCovariantVectorD2
        GetBufferPointer(itkImageCVD23 self) -> itkCovariantVectorD2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVD23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > const *":
        """
        GetPixelContainer(itkImageCVD23 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > >
        GetPixelContainer(itkImageCVD23 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVD23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVD23 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVD23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD23') -> "void":
        """
        Graft(itkImageCVD23 self, itkImageCVD23 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVD23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const":
        """
        GetPixelAccessor(itkImageCVD23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(itkImageCVD23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVD23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVD23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD23

    def cast(obj: 'itkLightObject') -> "itkImageCVD23 *":
        """cast(itkLightObject obj) -> itkImageCVD23"""
        return _itkImagePython.itkImageCVD23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVD23 *":
        """GetPointer(itkImageCVD23 self) -> itkImageCVD23"""
        return _itkImagePython.itkImageCVD23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD23

        Create a new object of the class itkImageCVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD23.Clone = new_instancemethod(_itkImagePython.itkImageCVD23_Clone, None, itkImageCVD23)
itkImageCVD23.Allocate = new_instancemethod(_itkImagePython.itkImageCVD23_Allocate, None, itkImageCVD23)
itkImageCVD23.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD23_FillBuffer, None, itkImageCVD23)
itkImageCVD23.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD23_SetPixel, None, itkImageCVD23)
itkImageCVD23.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixel, None, itkImageCVD23)
itkImageCVD23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD23_GetBufferPointer, None, itkImageCVD23)
itkImageCVD23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixelContainer, None, itkImageCVD23)
itkImageCVD23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD23_SetPixelContainer, None, itkImageCVD23)
itkImageCVD23.Graft = new_instancemethod(_itkImagePython.itkImageCVD23_Graft, None, itkImageCVD23)
itkImageCVD23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixelAccessor, None, itkImageCVD23)
itkImageCVD23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD23_GetNeighborhoodAccessor, None, itkImageCVD23)
itkImageCVD23.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD23_GetPointer, None, itkImageCVD23)
itkImageCVD23_swigregister = _itkImagePython.itkImageCVD23_swigregister
itkImageCVD23_swigregister(itkImageCVD23)

def itkImageCVD23___New_orig__() -> "itkImageCVD23_Pointer":
    """itkImageCVD23___New_orig__() -> itkImageCVD23_Pointer"""
    return _itkImagePython.itkImageCVD23___New_orig__()

def itkImageCVD23_cast(obj: 'itkLightObject') -> "itkImageCVD23 *":
    """itkImageCVD23_cast(itkLightObject obj) -> itkImageCVD23"""
    return _itkImagePython.itkImageCVD23_cast(obj)

class itkImageCVD32(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD32_Pointer":
        """__New_orig__() -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD32_Pointer":
        """Clone(itkImageCVD32 self) -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD32 self, bool initializePixels=False)
        Allocate(itkImageCVD32 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVD32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD3') -> "void":
        """
        FillBuffer(itkImageCVD32 self, itkCovariantVectorD3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVD32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorD3') -> "void":
        """
        SetPixel(itkImageCVD32 self, itkIndex2 index, itkCovariantVectorD3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVD32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD3 &":
        """
        GetPixel(itkImageCVD32 self, itkIndex2 index) -> itkCovariantVectorD3
        GetPixel(itkImageCVD32 self, itkIndex2 index) -> itkCovariantVectorD3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVD32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD3 const *":
        """
        GetBufferPointer(itkImageCVD32 self) -> itkCovariantVectorD3
        GetBufferPointer(itkImageCVD32 self) -> itkCovariantVectorD3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVD32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > const *":
        """
        GetPixelContainer(itkImageCVD32 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > >
        GetPixelContainer(itkImageCVD32 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVD32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVD32 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVD32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD32') -> "void":
        """
        Graft(itkImageCVD32 self, itkImageCVD32 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVD32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const":
        """
        GetPixelAccessor(itkImageCVD32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > >
        GetPixelAccessor(itkImageCVD32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVD32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVD32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD32

    def cast(obj: 'itkLightObject') -> "itkImageCVD32 *":
        """cast(itkLightObject obj) -> itkImageCVD32"""
        return _itkImagePython.itkImageCVD32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVD32 *":
        """GetPointer(itkImageCVD32 self) -> itkImageCVD32"""
        return _itkImagePython.itkImageCVD32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD32

        Create a new object of the class itkImageCVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD32.Clone = new_instancemethod(_itkImagePython.itkImageCVD32_Clone, None, itkImageCVD32)
itkImageCVD32.Allocate = new_instancemethod(_itkImagePython.itkImageCVD32_Allocate, None, itkImageCVD32)
itkImageCVD32.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD32_FillBuffer, None, itkImageCVD32)
itkImageCVD32.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD32_SetPixel, None, itkImageCVD32)
itkImageCVD32.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixel, None, itkImageCVD32)
itkImageCVD32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD32_GetBufferPointer, None, itkImageCVD32)
itkImageCVD32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixelContainer, None, itkImageCVD32)
itkImageCVD32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD32_SetPixelContainer, None, itkImageCVD32)
itkImageCVD32.Graft = new_instancemethod(_itkImagePython.itkImageCVD32_Graft, None, itkImageCVD32)
itkImageCVD32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixelAccessor, None, itkImageCVD32)
itkImageCVD32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD32_GetNeighborhoodAccessor, None, itkImageCVD32)
itkImageCVD32.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD32_GetPointer, None, itkImageCVD32)
itkImageCVD32_swigregister = _itkImagePython.itkImageCVD32_swigregister
itkImageCVD32_swigregister(itkImageCVD32)

def itkImageCVD32___New_orig__() -> "itkImageCVD32_Pointer":
    """itkImageCVD32___New_orig__() -> itkImageCVD32_Pointer"""
    return _itkImagePython.itkImageCVD32___New_orig__()

def itkImageCVD32_cast(obj: 'itkLightObject') -> "itkImageCVD32 *":
    """itkImageCVD32_cast(itkLightObject obj) -> itkImageCVD32"""
    return _itkImagePython.itkImageCVD32_cast(obj)

class itkImageCVD33(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD33_Pointer":
        """__New_orig__() -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD33_Pointer":
        """Clone(itkImageCVD33 self) -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD33 self, bool initializePixels=False)
        Allocate(itkImageCVD33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVD33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD3') -> "void":
        """
        FillBuffer(itkImageCVD33 self, itkCovariantVectorD3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVD33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorD3') -> "void":
        """
        SetPixel(itkImageCVD33 self, itkIndex3 index, itkCovariantVectorD3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVD33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD3 &":
        """
        GetPixel(itkImageCVD33 self, itkIndex3 index) -> itkCovariantVectorD3
        GetPixel(itkImageCVD33 self, itkIndex3 index) -> itkCovariantVectorD3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD3 const *":
        """
        GetBufferPointer(itkImageCVD33 self) -> itkCovariantVectorD3
        GetBufferPointer(itkImageCVD33 self) -> itkCovariantVectorD3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > const *":
        """
        GetPixelContainer(itkImageCVD33 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > >
        GetPixelContainer(itkImageCVD33 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVD33 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVD33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD33') -> "void":
        """
        Graft(itkImageCVD33 self, itkImageCVD33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVD33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const":
        """
        GetPixelAccessor(itkImageCVD33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > >
        GetPixelAccessor(itkImageCVD33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD33

    def cast(obj: 'itkLightObject') -> "itkImageCVD33 *":
        """cast(itkLightObject obj) -> itkImageCVD33"""
        return _itkImagePython.itkImageCVD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVD33 *":
        """GetPointer(itkImageCVD33 self) -> itkImageCVD33"""
        return _itkImagePython.itkImageCVD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD33

        Create a new object of the class itkImageCVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD33.Clone = new_instancemethod(_itkImagePython.itkImageCVD33_Clone, None, itkImageCVD33)
itkImageCVD33.Allocate = new_instancemethod(_itkImagePython.itkImageCVD33_Allocate, None, itkImageCVD33)
itkImageCVD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD33_FillBuffer, None, itkImageCVD33)
itkImageCVD33.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD33_SetPixel, None, itkImageCVD33)
itkImageCVD33.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixel, None, itkImageCVD33)
itkImageCVD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD33_GetBufferPointer, None, itkImageCVD33)
itkImageCVD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixelContainer, None, itkImageCVD33)
itkImageCVD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD33_SetPixelContainer, None, itkImageCVD33)
itkImageCVD33.Graft = new_instancemethod(_itkImagePython.itkImageCVD33_Graft, None, itkImageCVD33)
itkImageCVD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixelAccessor, None, itkImageCVD33)
itkImageCVD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD33_GetNeighborhoodAccessor, None, itkImageCVD33)
itkImageCVD33.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD33_GetPointer, None, itkImageCVD33)
itkImageCVD33_swigregister = _itkImagePython.itkImageCVD33_swigregister
itkImageCVD33_swigregister(itkImageCVD33)

def itkImageCVD33___New_orig__() -> "itkImageCVD33_Pointer":
    """itkImageCVD33___New_orig__() -> itkImageCVD33_Pointer"""
    return _itkImagePython.itkImageCVD33___New_orig__()

def itkImageCVD33_cast(obj: 'itkLightObject') -> "itkImageCVD33 *":
    """itkImageCVD33_cast(itkLightObject obj) -> itkImageCVD33"""
    return _itkImagePython.itkImageCVD33_cast(obj)

class itkImageCVD42(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD42_Pointer":
        """__New_orig__() -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD42_Pointer":
        """Clone(itkImageCVD42 self) -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD42 self, bool initializePixels=False)
        Allocate(itkImageCVD42 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVD42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD4') -> "void":
        """
        FillBuffer(itkImageCVD42 self, itkCovariantVectorD4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVD42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorD4') -> "void":
        """
        SetPixel(itkImageCVD42 self, itkIndex2 index, itkCovariantVectorD4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVD42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD4 &":
        """
        GetPixel(itkImageCVD42 self, itkIndex2 index) -> itkCovariantVectorD4
        GetPixel(itkImageCVD42 self, itkIndex2 index) -> itkCovariantVectorD4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVD42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD4 const *":
        """
        GetBufferPointer(itkImageCVD42 self) -> itkCovariantVectorD4
        GetBufferPointer(itkImageCVD42 self) -> itkCovariantVectorD4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVD42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > const *":
        """
        GetPixelContainer(itkImageCVD42 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > >
        GetPixelContainer(itkImageCVD42 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVD42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVD42 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVD42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD42') -> "void":
        """
        Graft(itkImageCVD42 self, itkImageCVD42 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVD42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const":
        """
        GetPixelAccessor(itkImageCVD42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(itkImageCVD42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVD42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVD42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD42

    def cast(obj: 'itkLightObject') -> "itkImageCVD42 *":
        """cast(itkLightObject obj) -> itkImageCVD42"""
        return _itkImagePython.itkImageCVD42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVD42 *":
        """GetPointer(itkImageCVD42 self) -> itkImageCVD42"""
        return _itkImagePython.itkImageCVD42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD42

        Create a new object of the class itkImageCVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD42.Clone = new_instancemethod(_itkImagePython.itkImageCVD42_Clone, None, itkImageCVD42)
itkImageCVD42.Allocate = new_instancemethod(_itkImagePython.itkImageCVD42_Allocate, None, itkImageCVD42)
itkImageCVD42.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD42_FillBuffer, None, itkImageCVD42)
itkImageCVD42.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD42_SetPixel, None, itkImageCVD42)
itkImageCVD42.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixel, None, itkImageCVD42)
itkImageCVD42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD42_GetBufferPointer, None, itkImageCVD42)
itkImageCVD42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixelContainer, None, itkImageCVD42)
itkImageCVD42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD42_SetPixelContainer, None, itkImageCVD42)
itkImageCVD42.Graft = new_instancemethod(_itkImagePython.itkImageCVD42_Graft, None, itkImageCVD42)
itkImageCVD42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixelAccessor, None, itkImageCVD42)
itkImageCVD42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD42_GetNeighborhoodAccessor, None, itkImageCVD42)
itkImageCVD42.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD42_GetPointer, None, itkImageCVD42)
itkImageCVD42_swigregister = _itkImagePython.itkImageCVD42_swigregister
itkImageCVD42_swigregister(itkImageCVD42)

def itkImageCVD42___New_orig__() -> "itkImageCVD42_Pointer":
    """itkImageCVD42___New_orig__() -> itkImageCVD42_Pointer"""
    return _itkImagePython.itkImageCVD42___New_orig__()

def itkImageCVD42_cast(obj: 'itkLightObject') -> "itkImageCVD42 *":
    """itkImageCVD42_cast(itkLightObject obj) -> itkImageCVD42"""
    return _itkImagePython.itkImageCVD42_cast(obj)

class itkImageCVD43(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVD43_Pointer":
        """__New_orig__() -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVD43_Pointer":
        """Clone(itkImageCVD43 self) -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVD43 self, bool initializePixels=False)
        Allocate(itkImageCVD43 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVD43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorD4') -> "void":
        """
        FillBuffer(itkImageCVD43 self, itkCovariantVectorD4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVD43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorD4') -> "void":
        """
        SetPixel(itkImageCVD43 self, itkIndex3 index, itkCovariantVectorD4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVD43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorD4 &":
        """
        GetPixel(itkImageCVD43 self, itkIndex3 index) -> itkCovariantVectorD4
        GetPixel(itkImageCVD43 self, itkIndex3 index) -> itkCovariantVectorD4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVD43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorD4 const *":
        """
        GetBufferPointer(itkImageCVD43 self) -> itkCovariantVectorD4
        GetBufferPointer(itkImageCVD43 self) -> itkCovariantVectorD4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVD43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > const *":
        """
        GetPixelContainer(itkImageCVD43 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > >
        GetPixelContainer(itkImageCVD43 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVD43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVD43 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVD43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVD43') -> "void":
        """
        Graft(itkImageCVD43 self, itkImageCVD43 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVD43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const":
        """
        GetPixelAccessor(itkImageCVD43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(itkImageCVD43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVD43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVD43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD43

    def cast(obj: 'itkLightObject') -> "itkImageCVD43 *":
        """cast(itkLightObject obj) -> itkImageCVD43"""
        return _itkImagePython.itkImageCVD43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVD43 *":
        """GetPointer(itkImageCVD43 self) -> itkImageCVD43"""
        return _itkImagePython.itkImageCVD43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD43

        Create a new object of the class itkImageCVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD43.Clone = new_instancemethod(_itkImagePython.itkImageCVD43_Clone, None, itkImageCVD43)
itkImageCVD43.Allocate = new_instancemethod(_itkImagePython.itkImageCVD43_Allocate, None, itkImageCVD43)
itkImageCVD43.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD43_FillBuffer, None, itkImageCVD43)
itkImageCVD43.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD43_SetPixel, None, itkImageCVD43)
itkImageCVD43.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixel, None, itkImageCVD43)
itkImageCVD43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD43_GetBufferPointer, None, itkImageCVD43)
itkImageCVD43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixelContainer, None, itkImageCVD43)
itkImageCVD43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD43_SetPixelContainer, None, itkImageCVD43)
itkImageCVD43.Graft = new_instancemethod(_itkImagePython.itkImageCVD43_Graft, None, itkImageCVD43)
itkImageCVD43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixelAccessor, None, itkImageCVD43)
itkImageCVD43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD43_GetNeighborhoodAccessor, None, itkImageCVD43)
itkImageCVD43.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD43_GetPointer, None, itkImageCVD43)
itkImageCVD43_swigregister = _itkImagePython.itkImageCVD43_swigregister
itkImageCVD43_swigregister(itkImageCVD43)

def itkImageCVD43___New_orig__() -> "itkImageCVD43_Pointer":
    """itkImageCVD43___New_orig__() -> itkImageCVD43_Pointer"""
    return _itkImagePython.itkImageCVD43___New_orig__()

def itkImageCVD43_cast(obj: 'itkLightObject') -> "itkImageCVD43 *":
    """itkImageCVD43_cast(itkLightObject obj) -> itkImageCVD43"""
    return _itkImagePython.itkImageCVD43_cast(obj)

class itkImageCVF22(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF22_Pointer":
        """__New_orig__() -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF22_Pointer":
        """Clone(itkImageCVF22 self) -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF22 self, bool initializePixels=False)
        Allocate(itkImageCVF22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVF22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF2') -> "void":
        """
        FillBuffer(itkImageCVF22 self, itkCovariantVectorF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorF2') -> "void":
        """
        SetPixel(itkImageCVF22 self, itkIndex2 index, itkCovariantVectorF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF2 &":
        """
        GetPixel(itkImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2
        GetPixel(itkImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF2 const *":
        """
        GetBufferPointer(itkImageCVF22 self) -> itkCovariantVectorF2
        GetBufferPointer(itkImageCVF22 self) -> itkCovariantVectorF2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *":
        """
        GetPixelContainer(itkImageCVF22 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(itkImageCVF22 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVF22 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVF22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF22') -> "void":
        """
        Graft(itkImageCVF22 self, itkImageCVF22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVF22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const":
        """
        GetPixelAccessor(itkImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(itkImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF22

    def cast(obj: 'itkLightObject') -> "itkImageCVF22 *":
        """cast(itkLightObject obj) -> itkImageCVF22"""
        return _itkImagePython.itkImageCVF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVF22 *":
        """GetPointer(itkImageCVF22 self) -> itkImageCVF22"""
        return _itkImagePython.itkImageCVF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF22

        Create a new object of the class itkImageCVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF22.Clone = new_instancemethod(_itkImagePython.itkImageCVF22_Clone, None, itkImageCVF22)
itkImageCVF22.Allocate = new_instancemethod(_itkImagePython.itkImageCVF22_Allocate, None, itkImageCVF22)
itkImageCVF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF22_FillBuffer, None, itkImageCVF22)
itkImageCVF22.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF22_SetPixel, None, itkImageCVF22)
itkImageCVF22.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixel, None, itkImageCVF22)
itkImageCVF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF22_GetBufferPointer, None, itkImageCVF22)
itkImageCVF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixelContainer, None, itkImageCVF22)
itkImageCVF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF22_SetPixelContainer, None, itkImageCVF22)
itkImageCVF22.Graft = new_instancemethod(_itkImagePython.itkImageCVF22_Graft, None, itkImageCVF22)
itkImageCVF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixelAccessor, None, itkImageCVF22)
itkImageCVF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF22_GetNeighborhoodAccessor, None, itkImageCVF22)
itkImageCVF22.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF22_GetPointer, None, itkImageCVF22)
itkImageCVF22_swigregister = _itkImagePython.itkImageCVF22_swigregister
itkImageCVF22_swigregister(itkImageCVF22)

def itkImageCVF22___New_orig__() -> "itkImageCVF22_Pointer":
    """itkImageCVF22___New_orig__() -> itkImageCVF22_Pointer"""
    return _itkImagePython.itkImageCVF22___New_orig__()

def itkImageCVF22_cast(obj: 'itkLightObject') -> "itkImageCVF22 *":
    """itkImageCVF22_cast(itkLightObject obj) -> itkImageCVF22"""
    return _itkImagePython.itkImageCVF22_cast(obj)

class itkImageCVF23(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF23_Pointer":
        """__New_orig__() -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF23_Pointer":
        """Clone(itkImageCVF23 self) -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF23 self, bool initializePixels=False)
        Allocate(itkImageCVF23 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVF23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF2') -> "void":
        """
        FillBuffer(itkImageCVF23 self, itkCovariantVectorF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVF23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorF2') -> "void":
        """
        SetPixel(itkImageCVF23 self, itkIndex3 index, itkCovariantVectorF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVF23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF2 &":
        """
        GetPixel(itkImageCVF23 self, itkIndex3 index) -> itkCovariantVectorF2
        GetPixel(itkImageCVF23 self, itkIndex3 index) -> itkCovariantVectorF2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVF23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF2 const *":
        """
        GetBufferPointer(itkImageCVF23 self) -> itkCovariantVectorF2
        GetBufferPointer(itkImageCVF23 self) -> itkCovariantVectorF2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVF23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *":
        """
        GetPixelContainer(itkImageCVF23 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(itkImageCVF23 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVF23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVF23 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVF23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF23') -> "void":
        """
        Graft(itkImageCVF23 self, itkImageCVF23 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVF23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const":
        """
        GetPixelAccessor(itkImageCVF23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(itkImageCVF23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVF23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVF23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF23

    def cast(obj: 'itkLightObject') -> "itkImageCVF23 *":
        """cast(itkLightObject obj) -> itkImageCVF23"""
        return _itkImagePython.itkImageCVF23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVF23 *":
        """GetPointer(itkImageCVF23 self) -> itkImageCVF23"""
        return _itkImagePython.itkImageCVF23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF23

        Create a new object of the class itkImageCVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF23.Clone = new_instancemethod(_itkImagePython.itkImageCVF23_Clone, None, itkImageCVF23)
itkImageCVF23.Allocate = new_instancemethod(_itkImagePython.itkImageCVF23_Allocate, None, itkImageCVF23)
itkImageCVF23.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF23_FillBuffer, None, itkImageCVF23)
itkImageCVF23.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF23_SetPixel, None, itkImageCVF23)
itkImageCVF23.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixel, None, itkImageCVF23)
itkImageCVF23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF23_GetBufferPointer, None, itkImageCVF23)
itkImageCVF23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixelContainer, None, itkImageCVF23)
itkImageCVF23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF23_SetPixelContainer, None, itkImageCVF23)
itkImageCVF23.Graft = new_instancemethod(_itkImagePython.itkImageCVF23_Graft, None, itkImageCVF23)
itkImageCVF23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixelAccessor, None, itkImageCVF23)
itkImageCVF23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF23_GetNeighborhoodAccessor, None, itkImageCVF23)
itkImageCVF23.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF23_GetPointer, None, itkImageCVF23)
itkImageCVF23_swigregister = _itkImagePython.itkImageCVF23_swigregister
itkImageCVF23_swigregister(itkImageCVF23)

def itkImageCVF23___New_orig__() -> "itkImageCVF23_Pointer":
    """itkImageCVF23___New_orig__() -> itkImageCVF23_Pointer"""
    return _itkImagePython.itkImageCVF23___New_orig__()

def itkImageCVF23_cast(obj: 'itkLightObject') -> "itkImageCVF23 *":
    """itkImageCVF23_cast(itkLightObject obj) -> itkImageCVF23"""
    return _itkImagePython.itkImageCVF23_cast(obj)

class itkImageCVF32(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF32_Pointer":
        """__New_orig__() -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF32_Pointer":
        """Clone(itkImageCVF32 self) -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF32 self, bool initializePixels=False)
        Allocate(itkImageCVF32 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVF32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF3') -> "void":
        """
        FillBuffer(itkImageCVF32 self, itkCovariantVectorF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVF32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorF3') -> "void":
        """
        SetPixel(itkImageCVF32 self, itkIndex2 index, itkCovariantVectorF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVF32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF3 &":
        """
        GetPixel(itkImageCVF32 self, itkIndex2 index) -> itkCovariantVectorF3
        GetPixel(itkImageCVF32 self, itkIndex2 index) -> itkCovariantVectorF3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVF32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF3 const *":
        """
        GetBufferPointer(itkImageCVF32 self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF32 self) -> itkCovariantVectorF3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVF32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *":
        """
        GetPixelContainer(itkImageCVF32 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF32 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVF32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVF32 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVF32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF32') -> "void":
        """
        Graft(itkImageCVF32 self, itkImageCVF32 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVF32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const":
        """
        GetPixelAccessor(itkImageCVF32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVF32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVF32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF32

    def cast(obj: 'itkLightObject') -> "itkImageCVF32 *":
        """cast(itkLightObject obj) -> itkImageCVF32"""
        return _itkImagePython.itkImageCVF32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVF32 *":
        """GetPointer(itkImageCVF32 self) -> itkImageCVF32"""
        return _itkImagePython.itkImageCVF32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF32

        Create a new object of the class itkImageCVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF32.Clone = new_instancemethod(_itkImagePython.itkImageCVF32_Clone, None, itkImageCVF32)
itkImageCVF32.Allocate = new_instancemethod(_itkImagePython.itkImageCVF32_Allocate, None, itkImageCVF32)
itkImageCVF32.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF32_FillBuffer, None, itkImageCVF32)
itkImageCVF32.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF32_SetPixel, None, itkImageCVF32)
itkImageCVF32.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixel, None, itkImageCVF32)
itkImageCVF32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF32_GetBufferPointer, None, itkImageCVF32)
itkImageCVF32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixelContainer, None, itkImageCVF32)
itkImageCVF32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF32_SetPixelContainer, None, itkImageCVF32)
itkImageCVF32.Graft = new_instancemethod(_itkImagePython.itkImageCVF32_Graft, None, itkImageCVF32)
itkImageCVF32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixelAccessor, None, itkImageCVF32)
itkImageCVF32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF32_GetNeighborhoodAccessor, None, itkImageCVF32)
itkImageCVF32.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF32_GetPointer, None, itkImageCVF32)
itkImageCVF32_swigregister = _itkImagePython.itkImageCVF32_swigregister
itkImageCVF32_swigregister(itkImageCVF32)

def itkImageCVF32___New_orig__() -> "itkImageCVF32_Pointer":
    """itkImageCVF32___New_orig__() -> itkImageCVF32_Pointer"""
    return _itkImagePython.itkImageCVF32___New_orig__()

def itkImageCVF32_cast(obj: 'itkLightObject') -> "itkImageCVF32 *":
    """itkImageCVF32_cast(itkLightObject obj) -> itkImageCVF32"""
    return _itkImagePython.itkImageCVF32_cast(obj)

class itkImageCVF33(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF33_Pointer":
        """__New_orig__() -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF33_Pointer":
        """Clone(itkImageCVF33 self) -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF33 self, bool initializePixels=False)
        Allocate(itkImageCVF33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVF33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF3') -> "void":
        """
        FillBuffer(itkImageCVF33 self, itkCovariantVectorF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorF3') -> "void":
        """
        SetPixel(itkImageCVF33 self, itkIndex3 index, itkCovariantVectorF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF3 &":
        """
        GetPixel(itkImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3
        GetPixel(itkImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF3 const *":
        """
        GetBufferPointer(itkImageCVF33 self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF33 self) -> itkCovariantVectorF3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *":
        """
        GetPixelContainer(itkImageCVF33 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF33 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVF33 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVF33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF33') -> "void":
        """
        Graft(itkImageCVF33 self, itkImageCVF33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVF33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const":
        """
        GetPixelAccessor(itkImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF33

    def cast(obj: 'itkLightObject') -> "itkImageCVF33 *":
        """cast(itkLightObject obj) -> itkImageCVF33"""
        return _itkImagePython.itkImageCVF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVF33 *":
        """GetPointer(itkImageCVF33 self) -> itkImageCVF33"""
        return _itkImagePython.itkImageCVF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF33

        Create a new object of the class itkImageCVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF33.Clone = new_instancemethod(_itkImagePython.itkImageCVF33_Clone, None, itkImageCVF33)
itkImageCVF33.Allocate = new_instancemethod(_itkImagePython.itkImageCVF33_Allocate, None, itkImageCVF33)
itkImageCVF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF33_FillBuffer, None, itkImageCVF33)
itkImageCVF33.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF33_SetPixel, None, itkImageCVF33)
itkImageCVF33.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixel, None, itkImageCVF33)
itkImageCVF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF33_GetBufferPointer, None, itkImageCVF33)
itkImageCVF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixelContainer, None, itkImageCVF33)
itkImageCVF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF33_SetPixelContainer, None, itkImageCVF33)
itkImageCVF33.Graft = new_instancemethod(_itkImagePython.itkImageCVF33_Graft, None, itkImageCVF33)
itkImageCVF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixelAccessor, None, itkImageCVF33)
itkImageCVF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF33_GetNeighborhoodAccessor, None, itkImageCVF33)
itkImageCVF33.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF33_GetPointer, None, itkImageCVF33)
itkImageCVF33_swigregister = _itkImagePython.itkImageCVF33_swigregister
itkImageCVF33_swigregister(itkImageCVF33)

def itkImageCVF33___New_orig__() -> "itkImageCVF33_Pointer":
    """itkImageCVF33___New_orig__() -> itkImageCVF33_Pointer"""
    return _itkImagePython.itkImageCVF33___New_orig__()

def itkImageCVF33_cast(obj: 'itkLightObject') -> "itkImageCVF33 *":
    """itkImageCVF33_cast(itkLightObject obj) -> itkImageCVF33"""
    return _itkImagePython.itkImageCVF33_cast(obj)

class itkImageCVF42(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF42_Pointer":
        """__New_orig__() -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF42_Pointer":
        """Clone(itkImageCVF42 self) -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF42 self, bool initializePixels=False)
        Allocate(itkImageCVF42 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVF42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF4') -> "void":
        """
        FillBuffer(itkImageCVF42 self, itkCovariantVectorF4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVF42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorF4') -> "void":
        """
        SetPixel(itkImageCVF42 self, itkIndex2 index, itkCovariantVectorF4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVF42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF4 &":
        """
        GetPixel(itkImageCVF42 self, itkIndex2 index) -> itkCovariantVectorF4
        GetPixel(itkImageCVF42 self, itkIndex2 index) -> itkCovariantVectorF4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVF42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF4 const *":
        """
        GetBufferPointer(itkImageCVF42 self) -> itkCovariantVectorF4
        GetBufferPointer(itkImageCVF42 self) -> itkCovariantVectorF4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVF42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *":
        """
        GetPixelContainer(itkImageCVF42 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(itkImageCVF42 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVF42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVF42 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVF42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF42') -> "void":
        """
        Graft(itkImageCVF42 self, itkImageCVF42 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVF42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const":
        """
        GetPixelAccessor(itkImageCVF42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(itkImageCVF42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVF42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVF42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF42

    def cast(obj: 'itkLightObject') -> "itkImageCVF42 *":
        """cast(itkLightObject obj) -> itkImageCVF42"""
        return _itkImagePython.itkImageCVF42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVF42 *":
        """GetPointer(itkImageCVF42 self) -> itkImageCVF42"""
        return _itkImagePython.itkImageCVF42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF42

        Create a new object of the class itkImageCVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF42.Clone = new_instancemethod(_itkImagePython.itkImageCVF42_Clone, None, itkImageCVF42)
itkImageCVF42.Allocate = new_instancemethod(_itkImagePython.itkImageCVF42_Allocate, None, itkImageCVF42)
itkImageCVF42.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF42_FillBuffer, None, itkImageCVF42)
itkImageCVF42.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF42_SetPixel, None, itkImageCVF42)
itkImageCVF42.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixel, None, itkImageCVF42)
itkImageCVF42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF42_GetBufferPointer, None, itkImageCVF42)
itkImageCVF42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixelContainer, None, itkImageCVF42)
itkImageCVF42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF42_SetPixelContainer, None, itkImageCVF42)
itkImageCVF42.Graft = new_instancemethod(_itkImagePython.itkImageCVF42_Graft, None, itkImageCVF42)
itkImageCVF42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixelAccessor, None, itkImageCVF42)
itkImageCVF42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF42_GetNeighborhoodAccessor, None, itkImageCVF42)
itkImageCVF42.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF42_GetPointer, None, itkImageCVF42)
itkImageCVF42_swigregister = _itkImagePython.itkImageCVF42_swigregister
itkImageCVF42_swigregister(itkImageCVF42)

def itkImageCVF42___New_orig__() -> "itkImageCVF42_Pointer":
    """itkImageCVF42___New_orig__() -> itkImageCVF42_Pointer"""
    return _itkImagePython.itkImageCVF42___New_orig__()

def itkImageCVF42_cast(obj: 'itkLightObject') -> "itkImageCVF42 *":
    """itkImageCVF42_cast(itkLightObject obj) -> itkImageCVF42"""
    return _itkImagePython.itkImageCVF42_cast(obj)

class itkImageCVF43(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageCVF43_Pointer":
        """__New_orig__() -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageCVF43_Pointer":
        """Clone(itkImageCVF43 self) -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageCVF43 self, bool initializePixels=False)
        Allocate(itkImageCVF43 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageCVF43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkCovariantVectorF4') -> "void":
        """
        FillBuffer(itkImageCVF43 self, itkCovariantVectorF4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageCVF43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorF4') -> "void":
        """
        SetPixel(itkImageCVF43 self, itkIndex3 index, itkCovariantVectorF4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageCVF43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF4 &":
        """
        GetPixel(itkImageCVF43 self, itkIndex3 index) -> itkCovariantVectorF4
        GetPixel(itkImageCVF43 self, itkIndex3 index) -> itkCovariantVectorF4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageCVF43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF4 const *":
        """
        GetBufferPointer(itkImageCVF43 self) -> itkCovariantVectorF4
        GetBufferPointer(itkImageCVF43 self) -> itkCovariantVectorF4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageCVF43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *":
        """
        GetPixelContainer(itkImageCVF43 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(itkImageCVF43 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageCVF43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageCVF43 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageCVF43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageCVF43') -> "void":
        """
        Graft(itkImageCVF43 self, itkImageCVF43 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageCVF43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const":
        """
        GetPixelAccessor(itkImageCVF43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(itkImageCVF43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageCVF43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageCVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageCVF43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF43

    def cast(obj: 'itkLightObject') -> "itkImageCVF43 *":
        """cast(itkLightObject obj) -> itkImageCVF43"""
        return _itkImagePython.itkImageCVF43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageCVF43 *":
        """GetPointer(itkImageCVF43 self) -> itkImageCVF43"""
        return _itkImagePython.itkImageCVF43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF43

        Create a new object of the class itkImageCVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF43.Clone = new_instancemethod(_itkImagePython.itkImageCVF43_Clone, None, itkImageCVF43)
itkImageCVF43.Allocate = new_instancemethod(_itkImagePython.itkImageCVF43_Allocate, None, itkImageCVF43)
itkImageCVF43.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF43_FillBuffer, None, itkImageCVF43)
itkImageCVF43.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF43_SetPixel, None, itkImageCVF43)
itkImageCVF43.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixel, None, itkImageCVF43)
itkImageCVF43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF43_GetBufferPointer, None, itkImageCVF43)
itkImageCVF43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixelContainer, None, itkImageCVF43)
itkImageCVF43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF43_SetPixelContainer, None, itkImageCVF43)
itkImageCVF43.Graft = new_instancemethod(_itkImagePython.itkImageCVF43_Graft, None, itkImageCVF43)
itkImageCVF43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixelAccessor, None, itkImageCVF43)
itkImageCVF43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF43_GetNeighborhoodAccessor, None, itkImageCVF43)
itkImageCVF43.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF43_GetPointer, None, itkImageCVF43)
itkImageCVF43_swigregister = _itkImagePython.itkImageCVF43_swigregister
itkImageCVF43_swigregister(itkImageCVF43)

def itkImageCVF43___New_orig__() -> "itkImageCVF43_Pointer":
    """itkImageCVF43___New_orig__() -> itkImageCVF43_Pointer"""
    return _itkImagePython.itkImageCVF43___New_orig__()

def itkImageCVF43_cast(obj: 'itkLightObject') -> "itkImageCVF43 *":
    """itkImageCVF43_cast(itkLightObject obj) -> itkImageCVF43"""
    return _itkImagePython.itkImageCVF43_cast(obj)

class itkImageD2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageD2_Pointer":
        """__New_orig__() -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageD2_Pointer":
        """Clone(itkImageD2 self) -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageD2 self, bool initializePixels=False)
        Allocate(itkImageD2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageD2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'double const &') -> "void":
        """
        FillBuffer(itkImageD2 self, double const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageD2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'double const &') -> "void":
        """
        SetPixel(itkImageD2 self, itkIndex2 index, double const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageD2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "double &":
        """
        GetPixel(itkImageD2 self, itkIndex2 index) -> double const
        GetPixel(itkImageD2 self, itkIndex2 index) -> double &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageD2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "double const *":
        """
        GetBufferPointer(itkImageD2 self) -> double
        GetBufferPointer(itkImageD2 self) -> double const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageD2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,double > const *":
        """
        GetPixelContainer(itkImageD2 self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(itkImageD2 self) -> itk::ImportImageContainer< unsigned long,double > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageD2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,double > *') -> "void":
        """
        SetPixelContainer(itkImageD2 self, itk::ImportImageContainer< unsigned long,double > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageD2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageD2') -> "void":
        """
        Graft(itkImageD2 self, itkImageD2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageD2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< double > const":
        """
        GetPixelAccessor(itkImageD2 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkImageD2 self) -> itk::DefaultPixelAccessor< double > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageD2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > >
        GetNeighborhoodAccessor(itkImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageD2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageD2

    def cast(obj: 'itkLightObject') -> "itkImageD2 *":
        """cast(itkLightObject obj) -> itkImageD2"""
        return _itkImagePython.itkImageD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageD2 *":
        """GetPointer(itkImageD2 self) -> itkImageD2"""
        return _itkImagePython.itkImageD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageD2

        Create a new object of the class itkImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageD2.Clone = new_instancemethod(_itkImagePython.itkImageD2_Clone, None, itkImageD2)
itkImageD2.Allocate = new_instancemethod(_itkImagePython.itkImageD2_Allocate, None, itkImageD2)
itkImageD2.FillBuffer = new_instancemethod(_itkImagePython.itkImageD2_FillBuffer, None, itkImageD2)
itkImageD2.SetPixel = new_instancemethod(_itkImagePython.itkImageD2_SetPixel, None, itkImageD2)
itkImageD2.GetPixel = new_instancemethod(_itkImagePython.itkImageD2_GetPixel, None, itkImageD2)
itkImageD2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageD2_GetBufferPointer, None, itkImageD2)
itkImageD2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageD2_GetPixelContainer, None, itkImageD2)
itkImageD2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageD2_SetPixelContainer, None, itkImageD2)
itkImageD2.Graft = new_instancemethod(_itkImagePython.itkImageD2_Graft, None, itkImageD2)
itkImageD2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageD2_GetPixelAccessor, None, itkImageD2)
itkImageD2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageD2_GetNeighborhoodAccessor, None, itkImageD2)
itkImageD2.GetPointer = new_instancemethod(_itkImagePython.itkImageD2_GetPointer, None, itkImageD2)
itkImageD2_swigregister = _itkImagePython.itkImageD2_swigregister
itkImageD2_swigregister(itkImageD2)

def itkImageD2___New_orig__() -> "itkImageD2_Pointer":
    """itkImageD2___New_orig__() -> itkImageD2_Pointer"""
    return _itkImagePython.itkImageD2___New_orig__()

def itkImageD2_cast(obj: 'itkLightObject') -> "itkImageD2 *":
    """itkImageD2_cast(itkLightObject obj) -> itkImageD2"""
    return _itkImagePython.itkImageD2_cast(obj)

class itkImageD3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageD3_Pointer":
        """__New_orig__() -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageD3_Pointer":
        """Clone(itkImageD3 self) -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageD3 self, bool initializePixels=False)
        Allocate(itkImageD3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageD3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'double const &') -> "void":
        """
        FillBuffer(itkImageD3 self, double const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageD3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'double const &') -> "void":
        """
        SetPixel(itkImageD3 self, itkIndex3 index, double const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageD3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "double &":
        """
        GetPixel(itkImageD3 self, itkIndex3 index) -> double const
        GetPixel(itkImageD3 self, itkIndex3 index) -> double &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageD3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "double const *":
        """
        GetBufferPointer(itkImageD3 self) -> double
        GetBufferPointer(itkImageD3 self) -> double const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageD3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,double > const *":
        """
        GetPixelContainer(itkImageD3 self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(itkImageD3 self) -> itk::ImportImageContainer< unsigned long,double > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageD3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,double > *') -> "void":
        """
        SetPixelContainer(itkImageD3 self, itk::ImportImageContainer< unsigned long,double > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageD3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageD3') -> "void":
        """
        Graft(itkImageD3 self, itkImageD3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageD3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< double > const":
        """
        GetPixelAccessor(itkImageD3 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkImageD3 self) -> itk::DefaultPixelAccessor< double > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageD3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > >
        GetNeighborhoodAccessor(itkImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageD3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageD3

    def cast(obj: 'itkLightObject') -> "itkImageD3 *":
        """cast(itkLightObject obj) -> itkImageD3"""
        return _itkImagePython.itkImageD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageD3 *":
        """GetPointer(itkImageD3 self) -> itkImageD3"""
        return _itkImagePython.itkImageD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageD3

        Create a new object of the class itkImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageD3.Clone = new_instancemethod(_itkImagePython.itkImageD3_Clone, None, itkImageD3)
itkImageD3.Allocate = new_instancemethod(_itkImagePython.itkImageD3_Allocate, None, itkImageD3)
itkImageD3.FillBuffer = new_instancemethod(_itkImagePython.itkImageD3_FillBuffer, None, itkImageD3)
itkImageD3.SetPixel = new_instancemethod(_itkImagePython.itkImageD3_SetPixel, None, itkImageD3)
itkImageD3.GetPixel = new_instancemethod(_itkImagePython.itkImageD3_GetPixel, None, itkImageD3)
itkImageD3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageD3_GetBufferPointer, None, itkImageD3)
itkImageD3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageD3_GetPixelContainer, None, itkImageD3)
itkImageD3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageD3_SetPixelContainer, None, itkImageD3)
itkImageD3.Graft = new_instancemethod(_itkImagePython.itkImageD3_Graft, None, itkImageD3)
itkImageD3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageD3_GetPixelAccessor, None, itkImageD3)
itkImageD3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageD3_GetNeighborhoodAccessor, None, itkImageD3)
itkImageD3.GetPointer = new_instancemethod(_itkImagePython.itkImageD3_GetPointer, None, itkImageD3)
itkImageD3_swigregister = _itkImagePython.itkImageD3_swigregister
itkImageD3_swigregister(itkImageD3)

def itkImageD3___New_orig__() -> "itkImageD3_Pointer":
    """itkImageD3___New_orig__() -> itkImageD3_Pointer"""
    return _itkImagePython.itkImageD3___New_orig__()

def itkImageD3_cast(obj: 'itkLightObject') -> "itkImageD3 *":
    """itkImageD3_cast(itkLightObject obj) -> itkImageD3"""
    return _itkImagePython.itkImageD3_cast(obj)

class itkImageF2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageF2_Pointer":
        """__New_orig__() -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageF2_Pointer":
        """Clone(itkImageF2 self) -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageF2 self, bool initializePixels=False)
        Allocate(itkImageF2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageF2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'float const &') -> "void":
        """
        FillBuffer(itkImageF2 self, float const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageF2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'float const &') -> "void":
        """
        SetPixel(itkImageF2 self, itkIndex2 index, float const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageF2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkImageF2 self, itkIndex2 index) -> float const
        GetPixel(itkImageF2 self, itkIndex2 index) -> float &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageF2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF2 self) -> float
        GetBufferPointer(itkImageF2 self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageF2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkImageF2 self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkImageF2 self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageF2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,float > *') -> "void":
        """
        SetPixelContainer(itkImageF2 self, itk::ImportImageContainer< unsigned long,float > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageF2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageF2') -> "void":
        """
        Graft(itkImageF2 self, itkImageF2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageF2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF2 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF2 self) -> itk::DefaultPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageF2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > >
        GetNeighborhoodAccessor(itkImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageF2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageF2

    def cast(obj: 'itkLightObject') -> "itkImageF2 *":
        """cast(itkLightObject obj) -> itkImageF2"""
        return _itkImagePython.itkImageF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageF2 *":
        """GetPointer(itkImageF2 self) -> itkImageF2"""
        return _itkImagePython.itkImageF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageF2

        Create a new object of the class itkImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF2.Clone = new_instancemethod(_itkImagePython.itkImageF2_Clone, None, itkImageF2)
itkImageF2.Allocate = new_instancemethod(_itkImagePython.itkImageF2_Allocate, None, itkImageF2)
itkImageF2.FillBuffer = new_instancemethod(_itkImagePython.itkImageF2_FillBuffer, None, itkImageF2)
itkImageF2.SetPixel = new_instancemethod(_itkImagePython.itkImageF2_SetPixel, None, itkImageF2)
itkImageF2.GetPixel = new_instancemethod(_itkImagePython.itkImageF2_GetPixel, None, itkImageF2)
itkImageF2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageF2_GetBufferPointer, None, itkImageF2)
itkImageF2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageF2_GetPixelContainer, None, itkImageF2)
itkImageF2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageF2_SetPixelContainer, None, itkImageF2)
itkImageF2.Graft = new_instancemethod(_itkImagePython.itkImageF2_Graft, None, itkImageF2)
itkImageF2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageF2_GetPixelAccessor, None, itkImageF2)
itkImageF2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageF2_GetNeighborhoodAccessor, None, itkImageF2)
itkImageF2.GetPointer = new_instancemethod(_itkImagePython.itkImageF2_GetPointer, None, itkImageF2)
itkImageF2_swigregister = _itkImagePython.itkImageF2_swigregister
itkImageF2_swigregister(itkImageF2)

def itkImageF2___New_orig__() -> "itkImageF2_Pointer":
    """itkImageF2___New_orig__() -> itkImageF2_Pointer"""
    return _itkImagePython.itkImageF2___New_orig__()

def itkImageF2_cast(obj: 'itkLightObject') -> "itkImageF2 *":
    """itkImageF2_cast(itkLightObject obj) -> itkImageF2"""
    return _itkImagePython.itkImageF2_cast(obj)

class itkImageF3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageF3_Pointer":
        """__New_orig__() -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageF3_Pointer":
        """Clone(itkImageF3 self) -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageF3 self, bool initializePixels=False)
        Allocate(itkImageF3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageF3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'float const &') -> "void":
        """
        FillBuffer(itkImageF3 self, float const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageF3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'float const &') -> "void":
        """
        SetPixel(itkImageF3 self, itkIndex3 index, float const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageF3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkImageF3 self, itkIndex3 index) -> float const
        GetPixel(itkImageF3 self, itkIndex3 index) -> float &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageF3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkImageF3 self) -> float
        GetBufferPointer(itkImageF3 self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageF3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkImageF3 self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkImageF3 self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageF3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,float > *') -> "void":
        """
        SetPixelContainer(itkImageF3 self, itk::ImportImageContainer< unsigned long,float > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageF3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageF3') -> "void":
        """
        Graft(itkImageF3 self, itkImageF3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageF3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkImageF3 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF3 self) -> itk::DefaultPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageF3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > >
        GetNeighborhoodAccessor(itkImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageF3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageF3

    def cast(obj: 'itkLightObject') -> "itkImageF3 *":
        """cast(itkLightObject obj) -> itkImageF3"""
        return _itkImagePython.itkImageF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageF3 *":
        """GetPointer(itkImageF3 self) -> itkImageF3"""
        return _itkImagePython.itkImageF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageF3

        Create a new object of the class itkImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF3.Clone = new_instancemethod(_itkImagePython.itkImageF3_Clone, None, itkImageF3)
itkImageF3.Allocate = new_instancemethod(_itkImagePython.itkImageF3_Allocate, None, itkImageF3)
itkImageF3.FillBuffer = new_instancemethod(_itkImagePython.itkImageF3_FillBuffer, None, itkImageF3)
itkImageF3.SetPixel = new_instancemethod(_itkImagePython.itkImageF3_SetPixel, None, itkImageF3)
itkImageF3.GetPixel = new_instancemethod(_itkImagePython.itkImageF3_GetPixel, None, itkImageF3)
itkImageF3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageF3_GetBufferPointer, None, itkImageF3)
itkImageF3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageF3_GetPixelContainer, None, itkImageF3)
itkImageF3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageF3_SetPixelContainer, None, itkImageF3)
itkImageF3.Graft = new_instancemethod(_itkImagePython.itkImageF3_Graft, None, itkImageF3)
itkImageF3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageF3_GetPixelAccessor, None, itkImageF3)
itkImageF3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageF3_GetNeighborhoodAccessor, None, itkImageF3)
itkImageF3.GetPointer = new_instancemethod(_itkImagePython.itkImageF3_GetPointer, None, itkImageF3)
itkImageF3_swigregister = _itkImagePython.itkImageF3_swigregister
itkImageF3_swigregister(itkImageF3)

def itkImageF3___New_orig__() -> "itkImageF3_Pointer":
    """itkImageF3___New_orig__() -> itkImageF3_Pointer"""
    return _itkImagePython.itkImageF3___New_orig__()

def itkImageF3_cast(obj: 'itkLightObject') -> "itkImageF3 *":
    """itkImageF3_cast(itkLightObject obj) -> itkImageF3"""
    return _itkImagePython.itkImageF3_cast(obj)

class itkImageFAF22(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageFAF22_Pointer":
        """__New_orig__() -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageFAF22_Pointer":
        """Clone(itkImageFAF22 self) -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageFAF22 self, bool initializePixels=False)
        Allocate(itkImageFAF22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageFAF22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkFixedArrayF2') -> "void":
        """
        FillBuffer(itkImageFAF22 self, itkFixedArrayF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageFAF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkFixedArrayF2') -> "void":
        """
        SetPixel(itkImageFAF22 self, itkIndex2 index, itkFixedArrayF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageFAF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkFixedArrayF2 &":
        """
        GetPixel(itkImageFAF22 self, itkIndex2 index) -> itkFixedArrayF2
        GetPixel(itkImageFAF22 self, itkIndex2 index) -> itkFixedArrayF2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageFAF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkFixedArrayF2 const *":
        """
        GetBufferPointer(itkImageFAF22 self) -> itkFixedArrayF2
        GetBufferPointer(itkImageFAF22 self) -> itkFixedArrayF2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageFAF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::FixedArray< float,2 > > const *":
        """
        GetPixelContainer(itkImageFAF22 self) -> itk::ImportImageContainer< unsigned long,itk::FixedArray< float,2 > >
        GetPixelContainer(itkImageFAF22 self) -> itk::ImportImageContainer< unsigned long,itk::FixedArray< float,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageFAF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::FixedArray< float,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageFAF22 self, itk::ImportImageContainer< unsigned long,itk::FixedArray< float,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageFAF22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageFAF22') -> "void":
        """
        Graft(itkImageFAF22 self, itkImageFAF22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageFAF22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::FixedArray< float,2 > > const":
        """
        GetPixelAccessor(itkImageFAF22 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > >
        GetPixelAccessor(itkImageFAF22 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageFAF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageFAF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageFAF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageFAF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageFAF22

    def cast(obj: 'itkLightObject') -> "itkImageFAF22 *":
        """cast(itkLightObject obj) -> itkImageFAF22"""
        return _itkImagePython.itkImageFAF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageFAF22 *":
        """GetPointer(itkImageFAF22 self) -> itkImageFAF22"""
        return _itkImagePython.itkImageFAF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageFAF22

        Create a new object of the class itkImageFAF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFAF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFAF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFAF22.Clone = new_instancemethod(_itkImagePython.itkImageFAF22_Clone, None, itkImageFAF22)
itkImageFAF22.Allocate = new_instancemethod(_itkImagePython.itkImageFAF22_Allocate, None, itkImageFAF22)
itkImageFAF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageFAF22_FillBuffer, None, itkImageFAF22)
itkImageFAF22.SetPixel = new_instancemethod(_itkImagePython.itkImageFAF22_SetPixel, None, itkImageFAF22)
itkImageFAF22.GetPixel = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixel, None, itkImageFAF22)
itkImageFAF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageFAF22_GetBufferPointer, None, itkImageFAF22)
itkImageFAF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixelContainer, None, itkImageFAF22)
itkImageFAF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF22_SetPixelContainer, None, itkImageFAF22)
itkImageFAF22.Graft = new_instancemethod(_itkImagePython.itkImageFAF22_Graft, None, itkImageFAF22)
itkImageFAF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixelAccessor, None, itkImageFAF22)
itkImageFAF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageFAF22_GetNeighborhoodAccessor, None, itkImageFAF22)
itkImageFAF22.GetPointer = new_instancemethod(_itkImagePython.itkImageFAF22_GetPointer, None, itkImageFAF22)
itkImageFAF22_swigregister = _itkImagePython.itkImageFAF22_swigregister
itkImageFAF22_swigregister(itkImageFAF22)

def itkImageFAF22___New_orig__() -> "itkImageFAF22_Pointer":
    """itkImageFAF22___New_orig__() -> itkImageFAF22_Pointer"""
    return _itkImagePython.itkImageFAF22___New_orig__()

def itkImageFAF22_cast(obj: 'itkLightObject') -> "itkImageFAF22 *":
    """itkImageFAF22_cast(itkLightObject obj) -> itkImageFAF22"""
    return _itkImagePython.itkImageFAF22_cast(obj)

class itkImageFAF33(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageFAF33_Pointer":
        """__New_orig__() -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageFAF33_Pointer":
        """Clone(itkImageFAF33 self) -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageFAF33 self, bool initializePixels=False)
        Allocate(itkImageFAF33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageFAF33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkFixedArrayF3') -> "void":
        """
        FillBuffer(itkImageFAF33 self, itkFixedArrayF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageFAF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkFixedArrayF3') -> "void":
        """
        SetPixel(itkImageFAF33 self, itkIndex3 index, itkFixedArrayF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageFAF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkFixedArrayF3 &":
        """
        GetPixel(itkImageFAF33 self, itkIndex3 index) -> itkFixedArrayF3
        GetPixel(itkImageFAF33 self, itkIndex3 index) -> itkFixedArrayF3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageFAF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkFixedArrayF3 const *":
        """
        GetBufferPointer(itkImageFAF33 self) -> itkFixedArrayF3
        GetBufferPointer(itkImageFAF33 self) -> itkFixedArrayF3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageFAF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::FixedArray< float,3 > > const *":
        """
        GetPixelContainer(itkImageFAF33 self) -> itk::ImportImageContainer< unsigned long,itk::FixedArray< float,3 > >
        GetPixelContainer(itkImageFAF33 self) -> itk::ImportImageContainer< unsigned long,itk::FixedArray< float,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageFAF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::FixedArray< float,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageFAF33 self, itk::ImportImageContainer< unsigned long,itk::FixedArray< float,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageFAF33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageFAF33') -> "void":
        """
        Graft(itkImageFAF33 self, itkImageFAF33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageFAF33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::FixedArray< float,3 > > const":
        """
        GetPixelAccessor(itkImageFAF33 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,3 > >
        GetPixelAccessor(itkImageFAF33 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageFAF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageFAF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageFAF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageFAF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageFAF33

    def cast(obj: 'itkLightObject') -> "itkImageFAF33 *":
        """cast(itkLightObject obj) -> itkImageFAF33"""
        return _itkImagePython.itkImageFAF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageFAF33 *":
        """GetPointer(itkImageFAF33 self) -> itkImageFAF33"""
        return _itkImagePython.itkImageFAF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageFAF33

        Create a new object of the class itkImageFAF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFAF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFAF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFAF33.Clone = new_instancemethod(_itkImagePython.itkImageFAF33_Clone, None, itkImageFAF33)
itkImageFAF33.Allocate = new_instancemethod(_itkImagePython.itkImageFAF33_Allocate, None, itkImageFAF33)
itkImageFAF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageFAF33_FillBuffer, None, itkImageFAF33)
itkImageFAF33.SetPixel = new_instancemethod(_itkImagePython.itkImageFAF33_SetPixel, None, itkImageFAF33)
itkImageFAF33.GetPixel = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixel, None, itkImageFAF33)
itkImageFAF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageFAF33_GetBufferPointer, None, itkImageFAF33)
itkImageFAF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixelContainer, None, itkImageFAF33)
itkImageFAF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF33_SetPixelContainer, None, itkImageFAF33)
itkImageFAF33.Graft = new_instancemethod(_itkImagePython.itkImageFAF33_Graft, None, itkImageFAF33)
itkImageFAF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixelAccessor, None, itkImageFAF33)
itkImageFAF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageFAF33_GetNeighborhoodAccessor, None, itkImageFAF33)
itkImageFAF33.GetPointer = new_instancemethod(_itkImagePython.itkImageFAF33_GetPointer, None, itkImageFAF33)
itkImageFAF33_swigregister = _itkImagePython.itkImageFAF33_swigregister
itkImageFAF33_swigregister(itkImageFAF33)

def itkImageFAF33___New_orig__() -> "itkImageFAF33_Pointer":
    """itkImageFAF33___New_orig__() -> itkImageFAF33_Pointer"""
    return _itkImagePython.itkImageFAF33___New_orig__()

def itkImageFAF33_cast(obj: 'itkLightObject') -> "itkImageFAF33 *":
    """itkImageFAF33_cast(itkLightObject obj) -> itkImageFAF33"""
    return _itkImagePython.itkImageFAF33_cast(obj)

class itkImageO22(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageO22_Pointer":
        """__New_orig__() -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageO22_Pointer":
        """Clone(itkImageO22 self) -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageO22 self, bool initializePixels=False)
        Allocate(itkImageO22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageO22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkOffset2') -> "void":
        """
        FillBuffer(itkImageO22 self, itkOffset2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageO22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkOffset2') -> "void":
        """
        SetPixel(itkImageO22 self, itkIndex2 index, itkOffset2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageO22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkOffset2 &":
        """
        GetPixel(itkImageO22 self, itkIndex2 index) -> itkOffset2
        GetPixel(itkImageO22 self, itkIndex2 index) -> itkOffset2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageO22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkOffset2 const *":
        """
        GetBufferPointer(itkImageO22 self) -> itkOffset2
        GetBufferPointer(itkImageO22 self) -> itkOffset2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageO22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Offset< 2 > > const *":
        """
        GetPixelContainer(itkImageO22 self) -> itk::ImportImageContainer< unsigned long,itk::Offset< 2 > >
        GetPixelContainer(itkImageO22 self) -> itk::ImportImageContainer< unsigned long,itk::Offset< 2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageO22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Offset< 2 > > *') -> "void":
        """
        SetPixelContainer(itkImageO22 self, itk::ImportImageContainer< unsigned long,itk::Offset< 2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageO22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageO22') -> "void":
        """
        Graft(itkImageO22 self, itkImageO22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageO22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Offset< 2 > > const":
        """
        GetPixelAccessor(itkImageO22 self) -> itk::DefaultPixelAccessor< itk::Offset< 2 > >
        GetPixelAccessor(itkImageO22 self) -> itk::DefaultPixelAccessor< itk::Offset< 2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageO22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageO22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > >
        GetNeighborhoodAccessor(itkImageO22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageO22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageO22

    def cast(obj: 'itkLightObject') -> "itkImageO22 *":
        """cast(itkLightObject obj) -> itkImageO22"""
        return _itkImagePython.itkImageO22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageO22 *":
        """GetPointer(itkImageO22 self) -> itkImageO22"""
        return _itkImagePython.itkImageO22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageO22

        Create a new object of the class itkImageO22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageO22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageO22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageO22.Clone = new_instancemethod(_itkImagePython.itkImageO22_Clone, None, itkImageO22)
itkImageO22.Allocate = new_instancemethod(_itkImagePython.itkImageO22_Allocate, None, itkImageO22)
itkImageO22.FillBuffer = new_instancemethod(_itkImagePython.itkImageO22_FillBuffer, None, itkImageO22)
itkImageO22.SetPixel = new_instancemethod(_itkImagePython.itkImageO22_SetPixel, None, itkImageO22)
itkImageO22.GetPixel = new_instancemethod(_itkImagePython.itkImageO22_GetPixel, None, itkImageO22)
itkImageO22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageO22_GetBufferPointer, None, itkImageO22)
itkImageO22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageO22_GetPixelContainer, None, itkImageO22)
itkImageO22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageO22_SetPixelContainer, None, itkImageO22)
itkImageO22.Graft = new_instancemethod(_itkImagePython.itkImageO22_Graft, None, itkImageO22)
itkImageO22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageO22_GetPixelAccessor, None, itkImageO22)
itkImageO22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageO22_GetNeighborhoodAccessor, None, itkImageO22)
itkImageO22.GetPointer = new_instancemethod(_itkImagePython.itkImageO22_GetPointer, None, itkImageO22)
itkImageO22_swigregister = _itkImagePython.itkImageO22_swigregister
itkImageO22_swigregister(itkImageO22)

def itkImageO22___New_orig__() -> "itkImageO22_Pointer":
    """itkImageO22___New_orig__() -> itkImageO22_Pointer"""
    return _itkImagePython.itkImageO22___New_orig__()

def itkImageO22_cast(obj: 'itkLightObject') -> "itkImageO22 *":
    """itkImageO22_cast(itkLightObject obj) -> itkImageO22"""
    return _itkImagePython.itkImageO22_cast(obj)

class itkImageO33(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageO33_Pointer":
        """__New_orig__() -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageO33_Pointer":
        """Clone(itkImageO33 self) -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageO33 self, bool initializePixels=False)
        Allocate(itkImageO33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageO33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkOffset3') -> "void":
        """
        FillBuffer(itkImageO33 self, itkOffset3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageO33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkOffset3') -> "void":
        """
        SetPixel(itkImageO33 self, itkIndex3 index, itkOffset3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageO33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkOffset3 &":
        """
        GetPixel(itkImageO33 self, itkIndex3 index) -> itkOffset3
        GetPixel(itkImageO33 self, itkIndex3 index) -> itkOffset3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageO33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkOffset3 const *":
        """
        GetBufferPointer(itkImageO33 self) -> itkOffset3
        GetBufferPointer(itkImageO33 self) -> itkOffset3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageO33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Offset< 3 > > const *":
        """
        GetPixelContainer(itkImageO33 self) -> itk::ImportImageContainer< unsigned long,itk::Offset< 3 > >
        GetPixelContainer(itkImageO33 self) -> itk::ImportImageContainer< unsigned long,itk::Offset< 3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageO33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Offset< 3 > > *') -> "void":
        """
        SetPixelContainer(itkImageO33 self, itk::ImportImageContainer< unsigned long,itk::Offset< 3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageO33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageO33') -> "void":
        """
        Graft(itkImageO33 self, itkImageO33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageO33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Offset< 3 > > const":
        """
        GetPixelAccessor(itkImageO33 self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > >
        GetPixelAccessor(itkImageO33 self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageO33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageO33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > >
        GetNeighborhoodAccessor(itkImageO33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageO33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageO33

    def cast(obj: 'itkLightObject') -> "itkImageO33 *":
        """cast(itkLightObject obj) -> itkImageO33"""
        return _itkImagePython.itkImageO33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageO33 *":
        """GetPointer(itkImageO33 self) -> itkImageO33"""
        return _itkImagePython.itkImageO33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageO33

        Create a new object of the class itkImageO33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageO33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageO33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageO33.Clone = new_instancemethod(_itkImagePython.itkImageO33_Clone, None, itkImageO33)
itkImageO33.Allocate = new_instancemethod(_itkImagePython.itkImageO33_Allocate, None, itkImageO33)
itkImageO33.FillBuffer = new_instancemethod(_itkImagePython.itkImageO33_FillBuffer, None, itkImageO33)
itkImageO33.SetPixel = new_instancemethod(_itkImagePython.itkImageO33_SetPixel, None, itkImageO33)
itkImageO33.GetPixel = new_instancemethod(_itkImagePython.itkImageO33_GetPixel, None, itkImageO33)
itkImageO33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageO33_GetBufferPointer, None, itkImageO33)
itkImageO33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageO33_GetPixelContainer, None, itkImageO33)
itkImageO33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageO33_SetPixelContainer, None, itkImageO33)
itkImageO33.Graft = new_instancemethod(_itkImagePython.itkImageO33_Graft, None, itkImageO33)
itkImageO33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageO33_GetPixelAccessor, None, itkImageO33)
itkImageO33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageO33_GetNeighborhoodAccessor, None, itkImageO33)
itkImageO33.GetPointer = new_instancemethod(_itkImagePython.itkImageO33_GetPointer, None, itkImageO33)
itkImageO33_swigregister = _itkImagePython.itkImageO33_swigregister
itkImageO33_swigregister(itkImageO33)

def itkImageO33___New_orig__() -> "itkImageO33_Pointer":
    """itkImageO33___New_orig__() -> itkImageO33_Pointer"""
    return _itkImagePython.itkImageO33___New_orig__()

def itkImageO33_cast(obj: 'itkLightObject') -> "itkImageO33 *":
    """itkImageO33_cast(itkLightObject obj) -> itkImageO33"""
    return _itkImagePython.itkImageO33_cast(obj)

class itkImageRGBAUC2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBAUC2_Pointer":
        """__New_orig__() -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBAUC2_Pointer":
        """Clone(itkImageRGBAUC2 self) -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBAUC2 self, bool initializePixels=False)
        Allocate(itkImageRGBAUC2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageRGBAUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBAPixelUC') -> "void":
        """
        FillBuffer(itkImageRGBAUC2 self, itkRGBAPixelUC value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageRGBAUC2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkRGBAPixelUC') -> "void":
        """
        SetPixel(itkImageRGBAUC2 self, itkIndex2 index, itkRGBAPixelUC value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageRGBAUC2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBAPixelUC &":
        """
        GetPixel(itkImageRGBAUC2 self, itkIndex2 index) -> itkRGBAPixelUC
        GetPixel(itkImageRGBAUC2 self, itkIndex2 index) -> itkRGBAPixelUC

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBAPixelUC const *":
        """
        GetBufferPointer(itkImageRGBAUC2 self) -> itkRGBAPixelUC
        GetBufferPointer(itkImageRGBAUC2 self) -> itkRGBAPixelUC

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageRGBAUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBAUC2 self) -> itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(itkImageRGBAUC2 self) -> itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > *') -> "void":
        """
        SetPixelContainer(itkImageRGBAUC2 self, itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageRGBAUC2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBAUC2') -> "void":
        """
        Graft(itkImageRGBAUC2 self, itkImageRGBAUC2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageRGBAUC2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBAUC2 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBAUC2 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBAUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > >
        GetNeighborhoodAccessor(itkImageRGBAUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageRGBAUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkImageRGBAUC2 *":
        """cast(itkLightObject obj) -> itkImageRGBAUC2"""
        return _itkImagePython.itkImageRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageRGBAUC2 *":
        """GetPointer(itkImageRGBAUC2 self) -> itkImageRGBAUC2"""
        return _itkImagePython.itkImageRGBAUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBAUC2

        Create a new object of the class itkImageRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBAUC2.Clone = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Clone, None, itkImageRGBAUC2)
itkImageRGBAUC2.Allocate = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Allocate, None, itkImageRGBAUC2)
itkImageRGBAUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_FillBuffer, None, itkImageRGBAUC2)
itkImageRGBAUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC2_SetPixel, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixel, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetBufferPointer, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixelContainer, None, itkImageRGBAUC2)
itkImageRGBAUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_SetPixelContainer, None, itkImageRGBAUC2)
itkImageRGBAUC2.Graft = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Graft, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixelAccessor, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetNeighborhoodAccessor, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPointer, None, itkImageRGBAUC2)
itkImageRGBAUC2_swigregister = _itkImagePython.itkImageRGBAUC2_swigregister
itkImageRGBAUC2_swigregister(itkImageRGBAUC2)

def itkImageRGBAUC2___New_orig__() -> "itkImageRGBAUC2_Pointer":
    """itkImageRGBAUC2___New_orig__() -> itkImageRGBAUC2_Pointer"""
    return _itkImagePython.itkImageRGBAUC2___New_orig__()

def itkImageRGBAUC2_cast(obj: 'itkLightObject') -> "itkImageRGBAUC2 *":
    """itkImageRGBAUC2_cast(itkLightObject obj) -> itkImageRGBAUC2"""
    return _itkImagePython.itkImageRGBAUC2_cast(obj)

class itkImageRGBAUC3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBAUC3_Pointer":
        """__New_orig__() -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBAUC3_Pointer":
        """Clone(itkImageRGBAUC3 self) -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBAUC3 self, bool initializePixels=False)
        Allocate(itkImageRGBAUC3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageRGBAUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBAPixelUC') -> "void":
        """
        FillBuffer(itkImageRGBAUC3 self, itkRGBAPixelUC value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageRGBAUC3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkRGBAPixelUC') -> "void":
        """
        SetPixel(itkImageRGBAUC3 self, itkIndex3 index, itkRGBAPixelUC value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageRGBAUC3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBAPixelUC &":
        """
        GetPixel(itkImageRGBAUC3 self, itkIndex3 index) -> itkRGBAPixelUC
        GetPixel(itkImageRGBAUC3 self, itkIndex3 index) -> itkRGBAPixelUC

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBAPixelUC const *":
        """
        GetBufferPointer(itkImageRGBAUC3 self) -> itkRGBAPixelUC
        GetBufferPointer(itkImageRGBAUC3 self) -> itkRGBAPixelUC

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageRGBAUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBAUC3 self) -> itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(itkImageRGBAUC3 self) -> itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > *') -> "void":
        """
        SetPixelContainer(itkImageRGBAUC3 self, itk::ImportImageContainer< unsigned long,itk::RGBAPixel< unsigned char > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageRGBAUC3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBAUC3') -> "void":
        """
        Graft(itkImageRGBAUC3 self, itkImageRGBAUC3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageRGBAUC3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBAUC3 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBAUC3 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBAUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(itkImageRGBAUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageRGBAUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkImageRGBAUC3 *":
        """cast(itkLightObject obj) -> itkImageRGBAUC3"""
        return _itkImagePython.itkImageRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageRGBAUC3 *":
        """GetPointer(itkImageRGBAUC3 self) -> itkImageRGBAUC3"""
        return _itkImagePython.itkImageRGBAUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBAUC3

        Create a new object of the class itkImageRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBAUC3.Clone = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Clone, None, itkImageRGBAUC3)
itkImageRGBAUC3.Allocate = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Allocate, None, itkImageRGBAUC3)
itkImageRGBAUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_FillBuffer, None, itkImageRGBAUC3)
itkImageRGBAUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC3_SetPixel, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixel, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetBufferPointer, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixelContainer, None, itkImageRGBAUC3)
itkImageRGBAUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_SetPixelContainer, None, itkImageRGBAUC3)
itkImageRGBAUC3.Graft = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Graft, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixelAccessor, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetNeighborhoodAccessor, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPointer, None, itkImageRGBAUC3)
itkImageRGBAUC3_swigregister = _itkImagePython.itkImageRGBAUC3_swigregister
itkImageRGBAUC3_swigregister(itkImageRGBAUC3)

def itkImageRGBAUC3___New_orig__() -> "itkImageRGBAUC3_Pointer":
    """itkImageRGBAUC3___New_orig__() -> itkImageRGBAUC3_Pointer"""
    return _itkImagePython.itkImageRGBAUC3___New_orig__()

def itkImageRGBAUC3_cast(obj: 'itkLightObject') -> "itkImageRGBAUC3 *":
    """itkImageRGBAUC3_cast(itkLightObject obj) -> itkImageRGBAUC3"""
    return _itkImagePython.itkImageRGBAUC3_cast(obj)

class itkImageRGBUC2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBUC2_Pointer":
        """__New_orig__() -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBUC2_Pointer":
        """Clone(itkImageRGBUC2 self) -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBUC2 self, bool initializePixels=False)
        Allocate(itkImageRGBUC2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageRGBUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBPixelUC') -> "void":
        """
        FillBuffer(itkImageRGBUC2 self, itkRGBPixelUC value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageRGBUC2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkRGBPixelUC') -> "void":
        """
        SetPixel(itkImageRGBUC2 self, itkIndex2 index, itkRGBPixelUC value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageRGBUC2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBPixelUC &":
        """
        GetPixel(itkImageRGBUC2 self, itkIndex2 index) -> itkRGBPixelUC
        GetPixel(itkImageRGBUC2 self, itkIndex2 index) -> itkRGBPixelUC

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageRGBUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBPixelUC const *":
        """
        GetBufferPointer(itkImageRGBUC2 self) -> itkRGBPixelUC
        GetBufferPointer(itkImageRGBUC2 self) -> itkRGBPixelUC

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageRGBUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBUC2 self) -> itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(itkImageRGBUC2 self) -> itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > *') -> "void":
        """
        SetPixelContainer(itkImageRGBUC2 self, itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageRGBUC2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBUC2') -> "void":
        """
        Graft(itkImageRGBUC2 self, itkImageRGBUC2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageRGBUC2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBUC2 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBUC2 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > >
        GetNeighborhoodAccessor(itkImageRGBUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageRGBUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC2

    def cast(obj: 'itkLightObject') -> "itkImageRGBUC2 *":
        """cast(itkLightObject obj) -> itkImageRGBUC2"""
        return _itkImagePython.itkImageRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageRGBUC2 *":
        """GetPointer(itkImageRGBUC2 self) -> itkImageRGBUC2"""
        return _itkImagePython.itkImageRGBUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBUC2

        Create a new object of the class itkImageRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBUC2.Clone = new_instancemethod(_itkImagePython.itkImageRGBUC2_Clone, None, itkImageRGBUC2)
itkImageRGBUC2.Allocate = new_instancemethod(_itkImagePython.itkImageRGBUC2_Allocate, None, itkImageRGBUC2)
itkImageRGBUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBUC2_FillBuffer, None, itkImageRGBUC2)
itkImageRGBUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC2_SetPixel, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixel, None, itkImageRGBUC2)
itkImageRGBUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetBufferPointer, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixelContainer, None, itkImageRGBUC2)
itkImageRGBUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC2_SetPixelContainer, None, itkImageRGBUC2)
itkImageRGBUC2.Graft = new_instancemethod(_itkImagePython.itkImageRGBUC2_Graft, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixelAccessor, None, itkImageRGBUC2)
itkImageRGBUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetNeighborhoodAccessor, None, itkImageRGBUC2)
itkImageRGBUC2.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPointer, None, itkImageRGBUC2)
itkImageRGBUC2_swigregister = _itkImagePython.itkImageRGBUC2_swigregister
itkImageRGBUC2_swigregister(itkImageRGBUC2)

def itkImageRGBUC2___New_orig__() -> "itkImageRGBUC2_Pointer":
    """itkImageRGBUC2___New_orig__() -> itkImageRGBUC2_Pointer"""
    return _itkImagePython.itkImageRGBUC2___New_orig__()

def itkImageRGBUC2_cast(obj: 'itkLightObject') -> "itkImageRGBUC2 *":
    """itkImageRGBUC2_cast(itkLightObject obj) -> itkImageRGBUC2"""
    return _itkImagePython.itkImageRGBUC2_cast(obj)

class itkImageRGBUC3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageRGBUC3_Pointer":
        """__New_orig__() -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageRGBUC3_Pointer":
        """Clone(itkImageRGBUC3 self) -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageRGBUC3 self, bool initializePixels=False)
        Allocate(itkImageRGBUC3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageRGBUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkRGBPixelUC') -> "void":
        """
        FillBuffer(itkImageRGBUC3 self, itkRGBPixelUC value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageRGBUC3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkRGBPixelUC') -> "void":
        """
        SetPixel(itkImageRGBUC3 self, itkIndex3 index, itkRGBPixelUC value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageRGBUC3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkRGBPixelUC &":
        """
        GetPixel(itkImageRGBUC3 self, itkIndex3 index) -> itkRGBPixelUC
        GetPixel(itkImageRGBUC3 self, itkIndex3 index) -> itkRGBPixelUC

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageRGBUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkRGBPixelUC const *":
        """
        GetBufferPointer(itkImageRGBUC3 self) -> itkRGBPixelUC
        GetBufferPointer(itkImageRGBUC3 self) -> itkRGBPixelUC

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageRGBUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > const *":
        """
        GetPixelContainer(itkImageRGBUC3 self) -> itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(itkImageRGBUC3 self) -> itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > *') -> "void":
        """
        SetPixelContainer(itkImageRGBUC3 self, itk::ImportImageContainer< unsigned long,itk::RGBPixel< unsigned char > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageRGBUC3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageRGBUC3') -> "void":
        """
        Graft(itkImageRGBUC3 self, itkImageRGBUC3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageRGBUC3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const":
        """
        GetPixelAccessor(itkImageRGBUC3 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBUC3 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageRGBUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(itkImageRGBUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageRGBUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC3

    def cast(obj: 'itkLightObject') -> "itkImageRGBUC3 *":
        """cast(itkLightObject obj) -> itkImageRGBUC3"""
        return _itkImagePython.itkImageRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageRGBUC3 *":
        """GetPointer(itkImageRGBUC3 self) -> itkImageRGBUC3"""
        return _itkImagePython.itkImageRGBUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBUC3

        Create a new object of the class itkImageRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBUC3.Clone = new_instancemethod(_itkImagePython.itkImageRGBUC3_Clone, None, itkImageRGBUC3)
itkImageRGBUC3.Allocate = new_instancemethod(_itkImagePython.itkImageRGBUC3_Allocate, None, itkImageRGBUC3)
itkImageRGBUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBUC3_FillBuffer, None, itkImageRGBUC3)
itkImageRGBUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC3_SetPixel, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixel, None, itkImageRGBUC3)
itkImageRGBUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetBufferPointer, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixelContainer, None, itkImageRGBUC3)
itkImageRGBUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC3_SetPixelContainer, None, itkImageRGBUC3)
itkImageRGBUC3.Graft = new_instancemethod(_itkImagePython.itkImageRGBUC3_Graft, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixelAccessor, None, itkImageRGBUC3)
itkImageRGBUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetNeighborhoodAccessor, None, itkImageRGBUC3)
itkImageRGBUC3.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPointer, None, itkImageRGBUC3)
itkImageRGBUC3_swigregister = _itkImagePython.itkImageRGBUC3_swigregister
itkImageRGBUC3_swigregister(itkImageRGBUC3)

def itkImageRGBUC3___New_orig__() -> "itkImageRGBUC3_Pointer":
    """itkImageRGBUC3___New_orig__() -> itkImageRGBUC3_Pointer"""
    return _itkImagePython.itkImageRGBUC3___New_orig__()

def itkImageRGBUC3_cast(obj: 'itkLightObject') -> "itkImageRGBUC3 *":
    """itkImageRGBUC3_cast(itkLightObject obj) -> itkImageRGBUC3"""
    return _itkImagePython.itkImageRGBUC3_cast(obj)

class itkImageSS2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSS2_Pointer":
        """__New_orig__() -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSS2_Pointer":
        """Clone(itkImageSS2 self) -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSS2 self, bool initializePixels=False)
        Allocate(itkImageSS2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageSS2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'short const &') -> "void":
        """
        FillBuffer(itkImageSS2 self, short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageSS2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'short const &') -> "void":
        """
        SetPixel(itkImageSS2 self, itkIndex2 index, short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageSS2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "short &":
        """
        GetPixel(itkImageSS2 self, itkIndex2 index) -> short const
        GetPixel(itkImageSS2 self, itkIndex2 index) -> short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageSS2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "short const *":
        """
        GetBufferPointer(itkImageSS2 self) -> short
        GetBufferPointer(itkImageSS2 self) -> short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageSS2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,short > const *":
        """
        GetPixelContainer(itkImageSS2 self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(itkImageSS2 self) -> itk::ImportImageContainer< unsigned long,short > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageSS2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,short > *') -> "void":
        """
        SetPixelContainer(itkImageSS2 self, itk::ImportImageContainer< unsigned long,short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageSS2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSS2') -> "void":
        """
        Graft(itkImageSS2 self, itkImageSS2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageSS2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< short > const":
        """
        GetPixelAccessor(itkImageSS2 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkImageSS2 self) -> itk::DefaultPixelAccessor< short > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageSS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > >
        GetNeighborhoodAccessor(itkImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageSS2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSS2

    def cast(obj: 'itkLightObject') -> "itkImageSS2 *":
        """cast(itkLightObject obj) -> itkImageSS2"""
        return _itkImagePython.itkImageSS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageSS2 *":
        """GetPointer(itkImageSS2 self) -> itkImageSS2"""
        return _itkImagePython.itkImageSS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSS2

        Create a new object of the class itkImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSS2.Clone = new_instancemethod(_itkImagePython.itkImageSS2_Clone, None, itkImageSS2)
itkImageSS2.Allocate = new_instancemethod(_itkImagePython.itkImageSS2_Allocate, None, itkImageSS2)
itkImageSS2.FillBuffer = new_instancemethod(_itkImagePython.itkImageSS2_FillBuffer, None, itkImageSS2)
itkImageSS2.SetPixel = new_instancemethod(_itkImagePython.itkImageSS2_SetPixel, None, itkImageSS2)
itkImageSS2.GetPixel = new_instancemethod(_itkImagePython.itkImageSS2_GetPixel, None, itkImageSS2)
itkImageSS2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSS2_GetBufferPointer, None, itkImageSS2)
itkImageSS2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS2_GetPixelContainer, None, itkImageSS2)
itkImageSS2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS2_SetPixelContainer, None, itkImageSS2)
itkImageSS2.Graft = new_instancemethod(_itkImagePython.itkImageSS2_Graft, None, itkImageSS2)
itkImageSS2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSS2_GetPixelAccessor, None, itkImageSS2)
itkImageSS2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSS2_GetNeighborhoodAccessor, None, itkImageSS2)
itkImageSS2.GetPointer = new_instancemethod(_itkImagePython.itkImageSS2_GetPointer, None, itkImageSS2)
itkImageSS2_swigregister = _itkImagePython.itkImageSS2_swigregister
itkImageSS2_swigregister(itkImageSS2)

def itkImageSS2___New_orig__() -> "itkImageSS2_Pointer":
    """itkImageSS2___New_orig__() -> itkImageSS2_Pointer"""
    return _itkImagePython.itkImageSS2___New_orig__()

def itkImageSS2_cast(obj: 'itkLightObject') -> "itkImageSS2 *":
    """itkImageSS2_cast(itkLightObject obj) -> itkImageSS2"""
    return _itkImagePython.itkImageSS2_cast(obj)

class itkImageSS3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSS3_Pointer":
        """__New_orig__() -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSS3_Pointer":
        """Clone(itkImageSS3 self) -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSS3 self, bool initializePixels=False)
        Allocate(itkImageSS3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageSS3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'short const &') -> "void":
        """
        FillBuffer(itkImageSS3 self, short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageSS3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'short const &') -> "void":
        """
        SetPixel(itkImageSS3 self, itkIndex3 index, short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageSS3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "short &":
        """
        GetPixel(itkImageSS3 self, itkIndex3 index) -> short const
        GetPixel(itkImageSS3 self, itkIndex3 index) -> short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageSS3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "short const *":
        """
        GetBufferPointer(itkImageSS3 self) -> short
        GetBufferPointer(itkImageSS3 self) -> short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageSS3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,short > const *":
        """
        GetPixelContainer(itkImageSS3 self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(itkImageSS3 self) -> itk::ImportImageContainer< unsigned long,short > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageSS3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,short > *') -> "void":
        """
        SetPixelContainer(itkImageSS3 self, itk::ImportImageContainer< unsigned long,short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageSS3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSS3') -> "void":
        """
        Graft(itkImageSS3 self, itkImageSS3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageSS3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< short > const":
        """
        GetPixelAccessor(itkImageSS3 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkImageSS3 self) -> itk::DefaultPixelAccessor< short > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageSS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > >
        GetNeighborhoodAccessor(itkImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageSS3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSS3

    def cast(obj: 'itkLightObject') -> "itkImageSS3 *":
        """cast(itkLightObject obj) -> itkImageSS3"""
        return _itkImagePython.itkImageSS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageSS3 *":
        """GetPointer(itkImageSS3 self) -> itkImageSS3"""
        return _itkImagePython.itkImageSS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSS3

        Create a new object of the class itkImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSS3.Clone = new_instancemethod(_itkImagePython.itkImageSS3_Clone, None, itkImageSS3)
itkImageSS3.Allocate = new_instancemethod(_itkImagePython.itkImageSS3_Allocate, None, itkImageSS3)
itkImageSS3.FillBuffer = new_instancemethod(_itkImagePython.itkImageSS3_FillBuffer, None, itkImageSS3)
itkImageSS3.SetPixel = new_instancemethod(_itkImagePython.itkImageSS3_SetPixel, None, itkImageSS3)
itkImageSS3.GetPixel = new_instancemethod(_itkImagePython.itkImageSS3_GetPixel, None, itkImageSS3)
itkImageSS3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSS3_GetBufferPointer, None, itkImageSS3)
itkImageSS3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS3_GetPixelContainer, None, itkImageSS3)
itkImageSS3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS3_SetPixelContainer, None, itkImageSS3)
itkImageSS3.Graft = new_instancemethod(_itkImagePython.itkImageSS3_Graft, None, itkImageSS3)
itkImageSS3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSS3_GetPixelAccessor, None, itkImageSS3)
itkImageSS3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSS3_GetNeighborhoodAccessor, None, itkImageSS3)
itkImageSS3.GetPointer = new_instancemethod(_itkImagePython.itkImageSS3_GetPointer, None, itkImageSS3)
itkImageSS3_swigregister = _itkImagePython.itkImageSS3_swigregister
itkImageSS3_swigregister(itkImageSS3)

def itkImageSS3___New_orig__() -> "itkImageSS3_Pointer":
    """itkImageSS3___New_orig__() -> itkImageSS3_Pointer"""
    return _itkImagePython.itkImageSS3___New_orig__()

def itkImageSS3_cast(obj: 'itkLightObject') -> "itkImageSS3 *":
    """itkImageSS3_cast(itkLightObject obj) -> itkImageSS3"""
    return _itkImagePython.itkImageSS3_cast(obj)

class itkImageSSRTD22(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSSRTD22_Pointer":
        """__New_orig__() -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSSRTD22_Pointer":
        """Clone(itkImageSSRTD22 self) -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSSRTD22 self, bool initializePixels=False)
        Allocate(itkImageSSRTD22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageSSRTD22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkSymmetricSecondRankTensorD2') -> "void":
        """
        FillBuffer(itkImageSSRTD22 self, itkSymmetricSecondRankTensorD2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageSSRTD22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkSymmetricSecondRankTensorD2') -> "void":
        """
        SetPixel(itkImageSSRTD22 self, itkIndex2 index, itkSymmetricSecondRankTensorD2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageSSRTD22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkSymmetricSecondRankTensorD2 &":
        """
        GetPixel(itkImageSSRTD22 self, itkIndex2 index) -> itkSymmetricSecondRankTensorD2
        GetPixel(itkImageSSRTD22 self, itkIndex2 index) -> itkSymmetricSecondRankTensorD2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageSSRTD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkSymmetricSecondRankTensorD2 const *":
        """
        GetBufferPointer(itkImageSSRTD22 self) -> itkSymmetricSecondRankTensorD2
        GetBufferPointer(itkImageSSRTD22 self) -> itkSymmetricSecondRankTensorD2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageSSRTD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,2 > > const *":
        """
        GetPixelContainer(itkImageSSRTD22 self) -> itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelContainer(itkImageSSRTD22 self) -> itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageSSRTD22 self, itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageSSRTD22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSSRTD22') -> "void":
        """
        Graft(itkImageSSRTD22 self, itkImageSSRTD22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageSSRTD22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > > const":
        """
        GetPixelAccessor(itkImageSSRTD22 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelAccessor(itkImageSSRTD22 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageSSRTD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageSSRTD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageSSRTD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD22

    def cast(obj: 'itkLightObject') -> "itkImageSSRTD22 *":
        """cast(itkLightObject obj) -> itkImageSSRTD22"""
        return _itkImagePython.itkImageSSRTD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageSSRTD22 *":
        """GetPointer(itkImageSSRTD22 self) -> itkImageSSRTD22"""
        return _itkImagePython.itkImageSSRTD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSSRTD22

        Create a new object of the class itkImageSSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSSRTD22.Clone = new_instancemethod(_itkImagePython.itkImageSSRTD22_Clone, None, itkImageSSRTD22)
itkImageSSRTD22.Allocate = new_instancemethod(_itkImagePython.itkImageSSRTD22_Allocate, None, itkImageSSRTD22)
itkImageSSRTD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageSSRTD22_FillBuffer, None, itkImageSSRTD22)
itkImageSSRTD22.SetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD22_SetPixel, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixel, None, itkImageSSRTD22)
itkImageSSRTD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetBufferPointer, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixelContainer, None, itkImageSSRTD22)
itkImageSSRTD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD22_SetPixelContainer, None, itkImageSSRTD22)
itkImageSSRTD22.Graft = new_instancemethod(_itkImagePython.itkImageSSRTD22_Graft, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixelAccessor, None, itkImageSSRTD22)
itkImageSSRTD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetNeighborhoodAccessor, None, itkImageSSRTD22)
itkImageSSRTD22.GetPointer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPointer, None, itkImageSSRTD22)
itkImageSSRTD22_swigregister = _itkImagePython.itkImageSSRTD22_swigregister
itkImageSSRTD22_swigregister(itkImageSSRTD22)

def itkImageSSRTD22___New_orig__() -> "itkImageSSRTD22_Pointer":
    """itkImageSSRTD22___New_orig__() -> itkImageSSRTD22_Pointer"""
    return _itkImagePython.itkImageSSRTD22___New_orig__()

def itkImageSSRTD22_cast(obj: 'itkLightObject') -> "itkImageSSRTD22 *":
    """itkImageSSRTD22_cast(itkLightObject obj) -> itkImageSSRTD22"""
    return _itkImagePython.itkImageSSRTD22_cast(obj)

class itkImageSSRTD33(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageSSRTD33_Pointer":
        """__New_orig__() -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageSSRTD33_Pointer":
        """Clone(itkImageSSRTD33 self) -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageSSRTD33 self, bool initializePixels=False)
        Allocate(itkImageSSRTD33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageSSRTD33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkSymmetricSecondRankTensorD3') -> "void":
        """
        FillBuffer(itkImageSSRTD33 self, itkSymmetricSecondRankTensorD3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageSSRTD33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkSymmetricSecondRankTensorD3') -> "void":
        """
        SetPixel(itkImageSSRTD33 self, itkIndex3 index, itkSymmetricSecondRankTensorD3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageSSRTD33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkSymmetricSecondRankTensorD3 &":
        """
        GetPixel(itkImageSSRTD33 self, itkIndex3 index) -> itkSymmetricSecondRankTensorD3
        GetPixel(itkImageSSRTD33 self, itkIndex3 index) -> itkSymmetricSecondRankTensorD3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageSSRTD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkSymmetricSecondRankTensorD3 const *":
        """
        GetBufferPointer(itkImageSSRTD33 self) -> itkSymmetricSecondRankTensorD3
        GetBufferPointer(itkImageSSRTD33 self) -> itkSymmetricSecondRankTensorD3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageSSRTD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,3 > > const *":
        """
        GetPixelContainer(itkImageSSRTD33 self) -> itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,3 > >
        GetPixelContainer(itkImageSSRTD33 self) -> itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageSSRTD33 self, itk::ImportImageContainer< unsigned long,itk::SymmetricSecondRankTensor< double,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageSSRTD33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageSSRTD33') -> "void":
        """
        Graft(itkImageSSRTD33 self, itkImageSSRTD33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageSSRTD33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > > const":
        """
        GetPixelAccessor(itkImageSSRTD33 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > >
        GetPixelAccessor(itkImageSSRTD33 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageSSRTD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageSSRTD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageSSRTD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD33

    def cast(obj: 'itkLightObject') -> "itkImageSSRTD33 *":
        """cast(itkLightObject obj) -> itkImageSSRTD33"""
        return _itkImagePython.itkImageSSRTD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageSSRTD33 *":
        """GetPointer(itkImageSSRTD33 self) -> itkImageSSRTD33"""
        return _itkImagePython.itkImageSSRTD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSSRTD33

        Create a new object of the class itkImageSSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSSRTD33.Clone = new_instancemethod(_itkImagePython.itkImageSSRTD33_Clone, None, itkImageSSRTD33)
itkImageSSRTD33.Allocate = new_instancemethod(_itkImagePython.itkImageSSRTD33_Allocate, None, itkImageSSRTD33)
itkImageSSRTD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageSSRTD33_FillBuffer, None, itkImageSSRTD33)
itkImageSSRTD33.SetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD33_SetPixel, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixel, None, itkImageSSRTD33)
itkImageSSRTD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetBufferPointer, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixelContainer, None, itkImageSSRTD33)
itkImageSSRTD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD33_SetPixelContainer, None, itkImageSSRTD33)
itkImageSSRTD33.Graft = new_instancemethod(_itkImagePython.itkImageSSRTD33_Graft, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixelAccessor, None, itkImageSSRTD33)
itkImageSSRTD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetNeighborhoodAccessor, None, itkImageSSRTD33)
itkImageSSRTD33.GetPointer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPointer, None, itkImageSSRTD33)
itkImageSSRTD33_swigregister = _itkImagePython.itkImageSSRTD33_swigregister
itkImageSSRTD33_swigregister(itkImageSSRTD33)

def itkImageSSRTD33___New_orig__() -> "itkImageSSRTD33_Pointer":
    """itkImageSSRTD33___New_orig__() -> itkImageSSRTD33_Pointer"""
    return _itkImagePython.itkImageSSRTD33___New_orig__()

def itkImageSSRTD33_cast(obj: 'itkLightObject') -> "itkImageSSRTD33 *":
    """itkImageSSRTD33_cast(itkLightObject obj) -> itkImageSSRTD33"""
    return _itkImagePython.itkImageSSRTD33_cast(obj)

class itkImageUC2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUC2_Pointer":
        """__New_orig__() -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUC2_Pointer":
        """Clone(itkImageUC2 self) -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUC2 self, bool initializePixels=False)
        Allocate(itkImageUC2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned char const &') -> "void":
        """
        FillBuffer(itkImageUC2 self, unsigned char const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageUC2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned char const &') -> "void":
        """
        SetPixel(itkImageUC2 self, itkIndex2 index, unsigned char const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageUC2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned char &":
        """
        GetPixel(itkImageUC2 self, itkIndex2 index) -> unsigned char const
        GetPixel(itkImageUC2 self, itkIndex2 index) -> unsigned char &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned char const *":
        """
        GetBufferPointer(itkImageUC2 self) -> unsigned char
        GetBufferPointer(itkImageUC2 self) -> unsigned char const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned char > const *":
        """
        GetPixelContainer(itkImageUC2 self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(itkImageUC2 self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned char > *') -> "void":
        """
        SetPixelContainer(itkImageUC2 self, itk::ImportImageContainer< unsigned long,unsigned char > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageUC2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUC2') -> "void":
        """
        Graft(itkImageUC2 self, itkImageUC2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageUC2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned char > const":
        """
        GetPixelAccessor(itkImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > >
        GetNeighborhoodAccessor(itkImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUC2

    def cast(obj: 'itkLightObject') -> "itkImageUC2 *":
        """cast(itkLightObject obj) -> itkImageUC2"""
        return _itkImagePython.itkImageUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageUC2 *":
        """GetPointer(itkImageUC2 self) -> itkImageUC2"""
        return _itkImagePython.itkImageUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUC2

        Create a new object of the class itkImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUC2.Clone = new_instancemethod(_itkImagePython.itkImageUC2_Clone, None, itkImageUC2)
itkImageUC2.Allocate = new_instancemethod(_itkImagePython.itkImageUC2_Allocate, None, itkImageUC2)
itkImageUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUC2_FillBuffer, None, itkImageUC2)
itkImageUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageUC2_SetPixel, None, itkImageUC2)
itkImageUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageUC2_GetPixel, None, itkImageUC2)
itkImageUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUC2_GetBufferPointer, None, itkImageUC2)
itkImageUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC2_GetPixelContainer, None, itkImageUC2)
itkImageUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC2_SetPixelContainer, None, itkImageUC2)
itkImageUC2.Graft = new_instancemethod(_itkImagePython.itkImageUC2_Graft, None, itkImageUC2)
itkImageUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUC2_GetPixelAccessor, None, itkImageUC2)
itkImageUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUC2_GetNeighborhoodAccessor, None, itkImageUC2)
itkImageUC2.GetPointer = new_instancemethod(_itkImagePython.itkImageUC2_GetPointer, None, itkImageUC2)
itkImageUC2_swigregister = _itkImagePython.itkImageUC2_swigregister
itkImageUC2_swigregister(itkImageUC2)

def itkImageUC2___New_orig__() -> "itkImageUC2_Pointer":
    """itkImageUC2___New_orig__() -> itkImageUC2_Pointer"""
    return _itkImagePython.itkImageUC2___New_orig__()

def itkImageUC2_cast(obj: 'itkLightObject') -> "itkImageUC2 *":
    """itkImageUC2_cast(itkLightObject obj) -> itkImageUC2"""
    return _itkImagePython.itkImageUC2_cast(obj)

class itkImageUC3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUC3_Pointer":
        """__New_orig__() -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUC3_Pointer":
        """Clone(itkImageUC3 self) -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUC3 self, bool initializePixels=False)
        Allocate(itkImageUC3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned char const &') -> "void":
        """
        FillBuffer(itkImageUC3 self, unsigned char const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageUC3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned char const &') -> "void":
        """
        SetPixel(itkImageUC3 self, itkIndex3 index, unsigned char const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageUC3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned char &":
        """
        GetPixel(itkImageUC3 self, itkIndex3 index) -> unsigned char const
        GetPixel(itkImageUC3 self, itkIndex3 index) -> unsigned char &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned char const *":
        """
        GetBufferPointer(itkImageUC3 self) -> unsigned char
        GetBufferPointer(itkImageUC3 self) -> unsigned char const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned char > const *":
        """
        GetPixelContainer(itkImageUC3 self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(itkImageUC3 self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned char > *') -> "void":
        """
        SetPixelContainer(itkImageUC3 self, itk::ImportImageContainer< unsigned long,unsigned char > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageUC3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUC3') -> "void":
        """
        Graft(itkImageUC3 self, itkImageUC3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageUC3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned char > const":
        """
        GetPixelAccessor(itkImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > >
        GetNeighborhoodAccessor(itkImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUC3

    def cast(obj: 'itkLightObject') -> "itkImageUC3 *":
        """cast(itkLightObject obj) -> itkImageUC3"""
        return _itkImagePython.itkImageUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageUC3 *":
        """GetPointer(itkImageUC3 self) -> itkImageUC3"""
        return _itkImagePython.itkImageUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUC3

        Create a new object of the class itkImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUC3.Clone = new_instancemethod(_itkImagePython.itkImageUC3_Clone, None, itkImageUC3)
itkImageUC3.Allocate = new_instancemethod(_itkImagePython.itkImageUC3_Allocate, None, itkImageUC3)
itkImageUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUC3_FillBuffer, None, itkImageUC3)
itkImageUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageUC3_SetPixel, None, itkImageUC3)
itkImageUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageUC3_GetPixel, None, itkImageUC3)
itkImageUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUC3_GetBufferPointer, None, itkImageUC3)
itkImageUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC3_GetPixelContainer, None, itkImageUC3)
itkImageUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC3_SetPixelContainer, None, itkImageUC3)
itkImageUC3.Graft = new_instancemethod(_itkImagePython.itkImageUC3_Graft, None, itkImageUC3)
itkImageUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUC3_GetPixelAccessor, None, itkImageUC3)
itkImageUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUC3_GetNeighborhoodAccessor, None, itkImageUC3)
itkImageUC3.GetPointer = new_instancemethod(_itkImagePython.itkImageUC3_GetPointer, None, itkImageUC3)
itkImageUC3_swigregister = _itkImagePython.itkImageUC3_swigregister
itkImageUC3_swigregister(itkImageUC3)

def itkImageUC3___New_orig__() -> "itkImageUC3_Pointer":
    """itkImageUC3___New_orig__() -> itkImageUC3_Pointer"""
    return _itkImagePython.itkImageUC3___New_orig__()

def itkImageUC3_cast(obj: 'itkLightObject') -> "itkImageUC3 *":
    """itkImageUC3_cast(itkLightObject obj) -> itkImageUC3"""
    return _itkImagePython.itkImageUC3_cast(obj)

class itkImageUL2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUL2_Pointer":
        """__New_orig__() -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUL2_Pointer":
        """Clone(itkImageUL2 self) -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUL2 self, bool initializePixels=False)
        Allocate(itkImageUL2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageUL2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long const &') -> "void":
        """
        FillBuffer(itkImageUL2 self, unsigned long const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageUL2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned long const &') -> "void":
        """
        SetPixel(itkImageUL2 self, itkIndex2 index, unsigned long const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageUL2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long &":
        """
        GetPixel(itkImageUL2 self, itkIndex2 index) -> unsigned long const
        GetPixel(itkImageUL2 self, itkIndex2 index) -> unsigned long &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageUL2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long const *":
        """
        GetBufferPointer(itkImageUL2 self) -> unsigned long
        GetBufferPointer(itkImageUL2 self) -> unsigned long const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageUL2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned long > const *":
        """
        GetPixelContainer(itkImageUL2 self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(itkImageUL2 self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageUL2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned long > *') -> "void":
        """
        SetPixelContainer(itkImageUL2 self, itk::ImportImageContainer< unsigned long,unsigned long > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageUL2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUL2') -> "void":
        """
        Graft(itkImageUL2 self, itkImageUL2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageUL2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long > const":
        """
        GetPixelAccessor(itkImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageUL2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > >
        GetNeighborhoodAccessor(itkImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageUL2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUL2

    def cast(obj: 'itkLightObject') -> "itkImageUL2 *":
        """cast(itkLightObject obj) -> itkImageUL2"""
        return _itkImagePython.itkImageUL2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageUL2 *":
        """GetPointer(itkImageUL2 self) -> itkImageUL2"""
        return _itkImagePython.itkImageUL2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUL2

        Create a new object of the class itkImageUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUL2.Clone = new_instancemethod(_itkImagePython.itkImageUL2_Clone, None, itkImageUL2)
itkImageUL2.Allocate = new_instancemethod(_itkImagePython.itkImageUL2_Allocate, None, itkImageUL2)
itkImageUL2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUL2_FillBuffer, None, itkImageUL2)
itkImageUL2.SetPixel = new_instancemethod(_itkImagePython.itkImageUL2_SetPixel, None, itkImageUL2)
itkImageUL2.GetPixel = new_instancemethod(_itkImagePython.itkImageUL2_GetPixel, None, itkImageUL2)
itkImageUL2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUL2_GetBufferPointer, None, itkImageUL2)
itkImageUL2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL2_GetPixelContainer, None, itkImageUL2)
itkImageUL2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL2_SetPixelContainer, None, itkImageUL2)
itkImageUL2.Graft = new_instancemethod(_itkImagePython.itkImageUL2_Graft, None, itkImageUL2)
itkImageUL2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUL2_GetPixelAccessor, None, itkImageUL2)
itkImageUL2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUL2_GetNeighborhoodAccessor, None, itkImageUL2)
itkImageUL2.GetPointer = new_instancemethod(_itkImagePython.itkImageUL2_GetPointer, None, itkImageUL2)
itkImageUL2_swigregister = _itkImagePython.itkImageUL2_swigregister
itkImageUL2_swigregister(itkImageUL2)

def itkImageUL2___New_orig__() -> "itkImageUL2_Pointer":
    """itkImageUL2___New_orig__() -> itkImageUL2_Pointer"""
    return _itkImagePython.itkImageUL2___New_orig__()

def itkImageUL2_cast(obj: 'itkLightObject') -> "itkImageUL2 *":
    """itkImageUL2_cast(itkLightObject obj) -> itkImageUL2"""
    return _itkImagePython.itkImageUL2_cast(obj)

class itkImageUL3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUL3_Pointer":
        """__New_orig__() -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUL3_Pointer":
        """Clone(itkImageUL3 self) -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUL3 self, bool initializePixels=False)
        Allocate(itkImageUL3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageUL3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long const &') -> "void":
        """
        FillBuffer(itkImageUL3 self, unsigned long const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageUL3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned long const &') -> "void":
        """
        SetPixel(itkImageUL3 self, itkIndex3 index, unsigned long const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageUL3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long &":
        """
        GetPixel(itkImageUL3 self, itkIndex3 index) -> unsigned long const
        GetPixel(itkImageUL3 self, itkIndex3 index) -> unsigned long &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageUL3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long const *":
        """
        GetBufferPointer(itkImageUL3 self) -> unsigned long
        GetBufferPointer(itkImageUL3 self) -> unsigned long const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageUL3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned long > const *":
        """
        GetPixelContainer(itkImageUL3 self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(itkImageUL3 self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageUL3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned long > *') -> "void":
        """
        SetPixelContainer(itkImageUL3 self, itk::ImportImageContainer< unsigned long,unsigned long > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageUL3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUL3') -> "void":
        """
        Graft(itkImageUL3 self, itkImageUL3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageUL3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long > const":
        """
        GetPixelAccessor(itkImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageUL3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > >
        GetNeighborhoodAccessor(itkImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageUL3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUL3

    def cast(obj: 'itkLightObject') -> "itkImageUL3 *":
        """cast(itkLightObject obj) -> itkImageUL3"""
        return _itkImagePython.itkImageUL3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageUL3 *":
        """GetPointer(itkImageUL3 self) -> itkImageUL3"""
        return _itkImagePython.itkImageUL3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUL3

        Create a new object of the class itkImageUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUL3.Clone = new_instancemethod(_itkImagePython.itkImageUL3_Clone, None, itkImageUL3)
itkImageUL3.Allocate = new_instancemethod(_itkImagePython.itkImageUL3_Allocate, None, itkImageUL3)
itkImageUL3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUL3_FillBuffer, None, itkImageUL3)
itkImageUL3.SetPixel = new_instancemethod(_itkImagePython.itkImageUL3_SetPixel, None, itkImageUL3)
itkImageUL3.GetPixel = new_instancemethod(_itkImagePython.itkImageUL3_GetPixel, None, itkImageUL3)
itkImageUL3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUL3_GetBufferPointer, None, itkImageUL3)
itkImageUL3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL3_GetPixelContainer, None, itkImageUL3)
itkImageUL3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL3_SetPixelContainer, None, itkImageUL3)
itkImageUL3.Graft = new_instancemethod(_itkImagePython.itkImageUL3_Graft, None, itkImageUL3)
itkImageUL3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUL3_GetPixelAccessor, None, itkImageUL3)
itkImageUL3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUL3_GetNeighborhoodAccessor, None, itkImageUL3)
itkImageUL3.GetPointer = new_instancemethod(_itkImagePython.itkImageUL3_GetPointer, None, itkImageUL3)
itkImageUL3_swigregister = _itkImagePython.itkImageUL3_swigregister
itkImageUL3_swigregister(itkImageUL3)

def itkImageUL3___New_orig__() -> "itkImageUL3_Pointer":
    """itkImageUL3___New_orig__() -> itkImageUL3_Pointer"""
    return _itkImagePython.itkImageUL3___New_orig__()

def itkImageUL3_cast(obj: 'itkLightObject') -> "itkImageUL3 *":
    """itkImageUL3_cast(itkLightObject obj) -> itkImageUL3"""
    return _itkImagePython.itkImageUL3_cast(obj)

class itkImageULL2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageULL2_Pointer":
        """__New_orig__() -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageULL2_Pointer":
        """Clone(itkImageULL2 self) -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageULL2 self, bool initializePixels=False)
        Allocate(itkImageULL2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageULL2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long long const &') -> "void":
        """
        FillBuffer(itkImageULL2 self, unsigned long long const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageULL2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned long long const &') -> "void":
        """
        SetPixel(itkImageULL2 self, itkIndex2 index, unsigned long long const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageULL2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long long &":
        """
        GetPixel(itkImageULL2 self, itkIndex2 index) -> unsigned long long const
        GetPixel(itkImageULL2 self, itkIndex2 index) -> unsigned long long &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageULL2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long long const *":
        """
        GetBufferPointer(itkImageULL2 self) -> unsigned long long
        GetBufferPointer(itkImageULL2 self) -> unsigned long long const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageULL2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned long long > const *":
        """
        GetPixelContainer(itkImageULL2 self) -> itk::ImportImageContainer< unsigned long,unsigned long long >
        GetPixelContainer(itkImageULL2 self) -> itk::ImportImageContainer< unsigned long,unsigned long long > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageULL2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned long long > *') -> "void":
        """
        SetPixelContainer(itkImageULL2 self, itk::ImportImageContainer< unsigned long,unsigned long long > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageULL2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageULL2') -> "void":
        """
        Graft(itkImageULL2 self, itkImageULL2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageULL2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long long > const":
        """
        GetPixelAccessor(itkImageULL2 self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(itkImageULL2 self) -> itk::DefaultPixelAccessor< unsigned long long > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageULL2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageULL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > >
        GetNeighborhoodAccessor(itkImageULL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageULL2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageULL2

    def cast(obj: 'itkLightObject') -> "itkImageULL2 *":
        """cast(itkLightObject obj) -> itkImageULL2"""
        return _itkImagePython.itkImageULL2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageULL2 *":
        """GetPointer(itkImageULL2 self) -> itkImageULL2"""
        return _itkImagePython.itkImageULL2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageULL2

        Create a new object of the class itkImageULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageULL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageULL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageULL2.Clone = new_instancemethod(_itkImagePython.itkImageULL2_Clone, None, itkImageULL2)
itkImageULL2.Allocate = new_instancemethod(_itkImagePython.itkImageULL2_Allocate, None, itkImageULL2)
itkImageULL2.FillBuffer = new_instancemethod(_itkImagePython.itkImageULL2_FillBuffer, None, itkImageULL2)
itkImageULL2.SetPixel = new_instancemethod(_itkImagePython.itkImageULL2_SetPixel, None, itkImageULL2)
itkImageULL2.GetPixel = new_instancemethod(_itkImagePython.itkImageULL2_GetPixel, None, itkImageULL2)
itkImageULL2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageULL2_GetBufferPointer, None, itkImageULL2)
itkImageULL2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL2_GetPixelContainer, None, itkImageULL2)
itkImageULL2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL2_SetPixelContainer, None, itkImageULL2)
itkImageULL2.Graft = new_instancemethod(_itkImagePython.itkImageULL2_Graft, None, itkImageULL2)
itkImageULL2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageULL2_GetPixelAccessor, None, itkImageULL2)
itkImageULL2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageULL2_GetNeighborhoodAccessor, None, itkImageULL2)
itkImageULL2.GetPointer = new_instancemethod(_itkImagePython.itkImageULL2_GetPointer, None, itkImageULL2)
itkImageULL2_swigregister = _itkImagePython.itkImageULL2_swigregister
itkImageULL2_swigregister(itkImageULL2)

def itkImageULL2___New_orig__() -> "itkImageULL2_Pointer":
    """itkImageULL2___New_orig__() -> itkImageULL2_Pointer"""
    return _itkImagePython.itkImageULL2___New_orig__()

def itkImageULL2_cast(obj: 'itkLightObject') -> "itkImageULL2 *":
    """itkImageULL2_cast(itkLightObject obj) -> itkImageULL2"""
    return _itkImagePython.itkImageULL2_cast(obj)

class itkImageULL3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageULL3_Pointer":
        """__New_orig__() -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageULL3_Pointer":
        """Clone(itkImageULL3 self) -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageULL3 self, bool initializePixels=False)
        Allocate(itkImageULL3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageULL3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned long long const &') -> "void":
        """
        FillBuffer(itkImageULL3 self, unsigned long long const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageULL3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned long long const &') -> "void":
        """
        SetPixel(itkImageULL3 self, itkIndex3 index, unsigned long long const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageULL3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long long &":
        """
        GetPixel(itkImageULL3 self, itkIndex3 index) -> unsigned long long const
        GetPixel(itkImageULL3 self, itkIndex3 index) -> unsigned long long &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageULL3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned long long const *":
        """
        GetBufferPointer(itkImageULL3 self) -> unsigned long long
        GetBufferPointer(itkImageULL3 self) -> unsigned long long const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageULL3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned long long > const *":
        """
        GetPixelContainer(itkImageULL3 self) -> itk::ImportImageContainer< unsigned long,unsigned long long >
        GetPixelContainer(itkImageULL3 self) -> itk::ImportImageContainer< unsigned long,unsigned long long > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageULL3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned long long > *') -> "void":
        """
        SetPixelContainer(itkImageULL3 self, itk::ImportImageContainer< unsigned long,unsigned long long > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageULL3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageULL3') -> "void":
        """
        Graft(itkImageULL3 self, itkImageULL3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageULL3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long long > const":
        """
        GetPixelAccessor(itkImageULL3 self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(itkImageULL3 self) -> itk::DefaultPixelAccessor< unsigned long long > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageULL3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageULL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > >
        GetNeighborhoodAccessor(itkImageULL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageULL3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageULL3

    def cast(obj: 'itkLightObject') -> "itkImageULL3 *":
        """cast(itkLightObject obj) -> itkImageULL3"""
        return _itkImagePython.itkImageULL3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageULL3 *":
        """GetPointer(itkImageULL3 self) -> itkImageULL3"""
        return _itkImagePython.itkImageULL3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageULL3

        Create a new object of the class itkImageULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageULL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageULL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageULL3.Clone = new_instancemethod(_itkImagePython.itkImageULL3_Clone, None, itkImageULL3)
itkImageULL3.Allocate = new_instancemethod(_itkImagePython.itkImageULL3_Allocate, None, itkImageULL3)
itkImageULL3.FillBuffer = new_instancemethod(_itkImagePython.itkImageULL3_FillBuffer, None, itkImageULL3)
itkImageULL3.SetPixel = new_instancemethod(_itkImagePython.itkImageULL3_SetPixel, None, itkImageULL3)
itkImageULL3.GetPixel = new_instancemethod(_itkImagePython.itkImageULL3_GetPixel, None, itkImageULL3)
itkImageULL3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageULL3_GetBufferPointer, None, itkImageULL3)
itkImageULL3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL3_GetPixelContainer, None, itkImageULL3)
itkImageULL3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL3_SetPixelContainer, None, itkImageULL3)
itkImageULL3.Graft = new_instancemethod(_itkImagePython.itkImageULL3_Graft, None, itkImageULL3)
itkImageULL3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageULL3_GetPixelAccessor, None, itkImageULL3)
itkImageULL3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageULL3_GetNeighborhoodAccessor, None, itkImageULL3)
itkImageULL3.GetPointer = new_instancemethod(_itkImagePython.itkImageULL3_GetPointer, None, itkImageULL3)
itkImageULL3_swigregister = _itkImagePython.itkImageULL3_swigregister
itkImageULL3_swigregister(itkImageULL3)

def itkImageULL3___New_orig__() -> "itkImageULL3_Pointer":
    """itkImageULL3___New_orig__() -> itkImageULL3_Pointer"""
    return _itkImagePython.itkImageULL3___New_orig__()

def itkImageULL3_cast(obj: 'itkLightObject') -> "itkImageULL3 *":
    """itkImageULL3_cast(itkLightObject obj) -> itkImageULL3"""
    return _itkImagePython.itkImageULL3_cast(obj)

class itkImageUS2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUS2_Pointer":
        """__New_orig__() -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUS2_Pointer":
        """Clone(itkImageUS2 self) -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUS2 self, bool initializePixels=False)
        Allocate(itkImageUS2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageUS2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned short const &') -> "void":
        """
        FillBuffer(itkImageUS2 self, unsigned short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageUS2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned short const &') -> "void":
        """
        SetPixel(itkImageUS2 self, itkIndex2 index, unsigned short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageUS2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned short &":
        """
        GetPixel(itkImageUS2 self, itkIndex2 index) -> unsigned short const
        GetPixel(itkImageUS2 self, itkIndex2 index) -> unsigned short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageUS2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned short const *":
        """
        GetBufferPointer(itkImageUS2 self) -> unsigned short
        GetBufferPointer(itkImageUS2 self) -> unsigned short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageUS2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned short > const *":
        """
        GetPixelContainer(itkImageUS2 self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(itkImageUS2 self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageUS2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned short > *') -> "void":
        """
        SetPixelContainer(itkImageUS2 self, itk::ImportImageContainer< unsigned long,unsigned short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageUS2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUS2') -> "void":
        """
        Graft(itkImageUS2 self, itkImageUS2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageUS2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned short > const":
        """
        GetPixelAccessor(itkImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageUS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > >
        GetNeighborhoodAccessor(itkImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageUS2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUS2

    def cast(obj: 'itkLightObject') -> "itkImageUS2 *":
        """cast(itkLightObject obj) -> itkImageUS2"""
        return _itkImagePython.itkImageUS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageUS2 *":
        """GetPointer(itkImageUS2 self) -> itkImageUS2"""
        return _itkImagePython.itkImageUS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUS2

        Create a new object of the class itkImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUS2.Clone = new_instancemethod(_itkImagePython.itkImageUS2_Clone, None, itkImageUS2)
itkImageUS2.Allocate = new_instancemethod(_itkImagePython.itkImageUS2_Allocate, None, itkImageUS2)
itkImageUS2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUS2_FillBuffer, None, itkImageUS2)
itkImageUS2.SetPixel = new_instancemethod(_itkImagePython.itkImageUS2_SetPixel, None, itkImageUS2)
itkImageUS2.GetPixel = new_instancemethod(_itkImagePython.itkImageUS2_GetPixel, None, itkImageUS2)
itkImageUS2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUS2_GetBufferPointer, None, itkImageUS2)
itkImageUS2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS2_GetPixelContainer, None, itkImageUS2)
itkImageUS2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS2_SetPixelContainer, None, itkImageUS2)
itkImageUS2.Graft = new_instancemethod(_itkImagePython.itkImageUS2_Graft, None, itkImageUS2)
itkImageUS2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUS2_GetPixelAccessor, None, itkImageUS2)
itkImageUS2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUS2_GetNeighborhoodAccessor, None, itkImageUS2)
itkImageUS2.GetPointer = new_instancemethod(_itkImagePython.itkImageUS2_GetPointer, None, itkImageUS2)
itkImageUS2_swigregister = _itkImagePython.itkImageUS2_swigregister
itkImageUS2_swigregister(itkImageUS2)

def itkImageUS2___New_orig__() -> "itkImageUS2_Pointer":
    """itkImageUS2___New_orig__() -> itkImageUS2_Pointer"""
    return _itkImagePython.itkImageUS2___New_orig__()

def itkImageUS2_cast(obj: 'itkLightObject') -> "itkImageUS2 *":
    """itkImageUS2_cast(itkLightObject obj) -> itkImageUS2"""
    return _itkImagePython.itkImageUS2_cast(obj)

class itkImageUS3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageUS3_Pointer":
        """__New_orig__() -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageUS3_Pointer":
        """Clone(itkImageUS3 self) -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageUS3 self, bool initializePixels=False)
        Allocate(itkImageUS3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageUS3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'unsigned short const &') -> "void":
        """
        FillBuffer(itkImageUS3 self, unsigned short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageUS3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned short const &') -> "void":
        """
        SetPixel(itkImageUS3 self, itkIndex3 index, unsigned short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageUS3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned short &":
        """
        GetPixel(itkImageUS3 self, itkIndex3 index) -> unsigned short const
        GetPixel(itkImageUS3 self, itkIndex3 index) -> unsigned short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageUS3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "unsigned short const *":
        """
        GetBufferPointer(itkImageUS3 self) -> unsigned short
        GetBufferPointer(itkImageUS3 self) -> unsigned short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageUS3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned short > const *":
        """
        GetPixelContainer(itkImageUS3 self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(itkImageUS3 self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageUS3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned short > *') -> "void":
        """
        SetPixelContainer(itkImageUS3 self, itk::ImportImageContainer< unsigned long,unsigned short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageUS3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageUS3') -> "void":
        """
        Graft(itkImageUS3 self, itkImageUS3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageUS3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned short > const":
        """
        GetPixelAccessor(itkImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageUS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > >
        GetNeighborhoodAccessor(itkImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageUS3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUS3

    def cast(obj: 'itkLightObject') -> "itkImageUS3 *":
        """cast(itkLightObject obj) -> itkImageUS3"""
        return _itkImagePython.itkImageUS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageUS3 *":
        """GetPointer(itkImageUS3 self) -> itkImageUS3"""
        return _itkImagePython.itkImageUS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUS3

        Create a new object of the class itkImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUS3.Clone = new_instancemethod(_itkImagePython.itkImageUS3_Clone, None, itkImageUS3)
itkImageUS3.Allocate = new_instancemethod(_itkImagePython.itkImageUS3_Allocate, None, itkImageUS3)
itkImageUS3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUS3_FillBuffer, None, itkImageUS3)
itkImageUS3.SetPixel = new_instancemethod(_itkImagePython.itkImageUS3_SetPixel, None, itkImageUS3)
itkImageUS3.GetPixel = new_instancemethod(_itkImagePython.itkImageUS3_GetPixel, None, itkImageUS3)
itkImageUS3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUS3_GetBufferPointer, None, itkImageUS3)
itkImageUS3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS3_GetPixelContainer, None, itkImageUS3)
itkImageUS3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS3_SetPixelContainer, None, itkImageUS3)
itkImageUS3.Graft = new_instancemethod(_itkImagePython.itkImageUS3_Graft, None, itkImageUS3)
itkImageUS3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUS3_GetPixelAccessor, None, itkImageUS3)
itkImageUS3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUS3_GetNeighborhoodAccessor, None, itkImageUS3)
itkImageUS3.GetPointer = new_instancemethod(_itkImagePython.itkImageUS3_GetPointer, None, itkImageUS3)
itkImageUS3_swigregister = _itkImagePython.itkImageUS3_swigregister
itkImageUS3_swigregister(itkImageUS3)

def itkImageUS3___New_orig__() -> "itkImageUS3_Pointer":
    """itkImageUS3___New_orig__() -> itkImageUS3_Pointer"""
    return _itkImagePython.itkImageUS3___New_orig__()

def itkImageUS3_cast(obj: 'itkLightObject') -> "itkImageUS3 *":
    """itkImageUS3_cast(itkLightObject obj) -> itkImageUS3"""
    return _itkImagePython.itkImageUS3_cast(obj)

class itkImageVD22(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD22_Pointer":
        """__New_orig__() -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD22_Pointer":
        """Clone(itkImageVD22 self) -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD22 self, bool initializePixels=False)
        Allocate(itkImageVD22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD2') -> "void":
        """
        FillBuffer(itkImageVD22 self, itkVectorD2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorD2') -> "void":
        """
        SetPixel(itkImageVD22 self, itkIndex2 index, itkVectorD2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD2 &":
        """
        GetPixel(itkImageVD22 self, itkIndex2 index) -> itkVectorD2
        GetPixel(itkImageVD22 self, itkIndex2 index) -> itkVectorD2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD2 const *":
        """
        GetBufferPointer(itkImageVD22 self) -> itkVectorD2
        GetBufferPointer(itkImageVD22 self) -> itkVectorD2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > const *":
        """
        GetPixelContainer(itkImageVD22 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD22 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD22 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD22') -> "void":
        """
        Graft(itkImageVD22 self, itkImageVD22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,2 > > const":
        """
        GetPixelAccessor(itkImageVD22 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD22 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD22

    def cast(obj: 'itkLightObject') -> "itkImageVD22 *":
        """cast(itkLightObject obj) -> itkImageVD22"""
        return _itkImagePython.itkImageVD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD22 *":
        """GetPointer(itkImageVD22 self) -> itkImageVD22"""
        return _itkImagePython.itkImageVD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD22

        Create a new object of the class itkImageVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD22.Clone = new_instancemethod(_itkImagePython.itkImageVD22_Clone, None, itkImageVD22)
itkImageVD22.Allocate = new_instancemethod(_itkImagePython.itkImageVD22_Allocate, None, itkImageVD22)
itkImageVD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD22_FillBuffer, None, itkImageVD22)
itkImageVD22.SetPixel = new_instancemethod(_itkImagePython.itkImageVD22_SetPixel, None, itkImageVD22)
itkImageVD22.GetPixel = new_instancemethod(_itkImagePython.itkImageVD22_GetPixel, None, itkImageVD22)
itkImageVD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD22_GetBufferPointer, None, itkImageVD22)
itkImageVD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD22_GetPixelContainer, None, itkImageVD22)
itkImageVD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD22_SetPixelContainer, None, itkImageVD22)
itkImageVD22.Graft = new_instancemethod(_itkImagePython.itkImageVD22_Graft, None, itkImageVD22)
itkImageVD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD22_GetPixelAccessor, None, itkImageVD22)
itkImageVD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD22_GetNeighborhoodAccessor, None, itkImageVD22)
itkImageVD22.GetPointer = new_instancemethod(_itkImagePython.itkImageVD22_GetPointer, None, itkImageVD22)
itkImageVD22_swigregister = _itkImagePython.itkImageVD22_swigregister
itkImageVD22_swigregister(itkImageVD22)

def itkImageVD22___New_orig__() -> "itkImageVD22_Pointer":
    """itkImageVD22___New_orig__() -> itkImageVD22_Pointer"""
    return _itkImagePython.itkImageVD22___New_orig__()

def itkImageVD22_cast(obj: 'itkLightObject') -> "itkImageVD22 *":
    """itkImageVD22_cast(itkLightObject obj) -> itkImageVD22"""
    return _itkImagePython.itkImageVD22_cast(obj)

class itkImageVD23(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD23_Pointer":
        """__New_orig__() -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD23_Pointer":
        """Clone(itkImageVD23 self) -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD23 self, bool initializePixels=False)
        Allocate(itkImageVD23 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD2') -> "void":
        """
        FillBuffer(itkImageVD23 self, itkVectorD2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorD2') -> "void":
        """
        SetPixel(itkImageVD23 self, itkIndex3 index, itkVectorD2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD2 &":
        """
        GetPixel(itkImageVD23 self, itkIndex3 index) -> itkVectorD2
        GetPixel(itkImageVD23 self, itkIndex3 index) -> itkVectorD2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD2 const *":
        """
        GetBufferPointer(itkImageVD23 self) -> itkVectorD2
        GetBufferPointer(itkImageVD23 self) -> itkVectorD2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > const *":
        """
        GetPixelContainer(itkImageVD23 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD23 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD23 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD23') -> "void":
        """
        Graft(itkImageVD23 self, itkImageVD23 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,2 > > const":
        """
        GetPixelAccessor(itkImageVD23 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD23 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > >
        GetNeighborhoodAccessor(itkImageVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD23

    def cast(obj: 'itkLightObject') -> "itkImageVD23 *":
        """cast(itkLightObject obj) -> itkImageVD23"""
        return _itkImagePython.itkImageVD23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD23 *":
        """GetPointer(itkImageVD23 self) -> itkImageVD23"""
        return _itkImagePython.itkImageVD23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD23

        Create a new object of the class itkImageVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD23.Clone = new_instancemethod(_itkImagePython.itkImageVD23_Clone, None, itkImageVD23)
itkImageVD23.Allocate = new_instancemethod(_itkImagePython.itkImageVD23_Allocate, None, itkImageVD23)
itkImageVD23.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD23_FillBuffer, None, itkImageVD23)
itkImageVD23.SetPixel = new_instancemethod(_itkImagePython.itkImageVD23_SetPixel, None, itkImageVD23)
itkImageVD23.GetPixel = new_instancemethod(_itkImagePython.itkImageVD23_GetPixel, None, itkImageVD23)
itkImageVD23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD23_GetBufferPointer, None, itkImageVD23)
itkImageVD23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD23_GetPixelContainer, None, itkImageVD23)
itkImageVD23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD23_SetPixelContainer, None, itkImageVD23)
itkImageVD23.Graft = new_instancemethod(_itkImagePython.itkImageVD23_Graft, None, itkImageVD23)
itkImageVD23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD23_GetPixelAccessor, None, itkImageVD23)
itkImageVD23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD23_GetNeighborhoodAccessor, None, itkImageVD23)
itkImageVD23.GetPointer = new_instancemethod(_itkImagePython.itkImageVD23_GetPointer, None, itkImageVD23)
itkImageVD23_swigregister = _itkImagePython.itkImageVD23_swigregister
itkImageVD23_swigregister(itkImageVD23)

def itkImageVD23___New_orig__() -> "itkImageVD23_Pointer":
    """itkImageVD23___New_orig__() -> itkImageVD23_Pointer"""
    return _itkImagePython.itkImageVD23___New_orig__()

def itkImageVD23_cast(obj: 'itkLightObject') -> "itkImageVD23 *":
    """itkImageVD23_cast(itkLightObject obj) -> itkImageVD23"""
    return _itkImagePython.itkImageVD23_cast(obj)

class itkImageVD24(itkImageBase4):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD24_Pointer":
        """__New_orig__() -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD24_Pointer":
        """Clone(itkImageVD24 self) -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD24 self, bool initializePixels=False)
        Allocate(itkImageVD24 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD24_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD2') -> "void":
        """
        FillBuffer(itkImageVD24 self, itkVectorD2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD24_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkVectorD2') -> "void":
        """
        SetPixel(itkImageVD24 self, itkIndex4 index, itkVectorD2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD24_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD2 &":
        """
        GetPixel(itkImageVD24 self, itkIndex4 index) -> itkVectorD2
        GetPixel(itkImageVD24 self, itkIndex4 index) -> itkVectorD2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD24_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD2 const *":
        """
        GetBufferPointer(itkImageVD24 self) -> itkVectorD2
        GetBufferPointer(itkImageVD24 self) -> itkVectorD2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD24_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > const *":
        """
        GetPixelContainer(itkImageVD24 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD24 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD24_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD24 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD24_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD24') -> "void":
        """
        Graft(itkImageVD24 self, itkImageVD24 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD24_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,2 > > const":
        """
        GetPixelAccessor(itkImageVD24 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD24 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD24_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD24 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > >
        GetNeighborhoodAccessor(itkImageVD24 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD24_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD24

    def cast(obj: 'itkLightObject') -> "itkImageVD24 *":
        """cast(itkLightObject obj) -> itkImageVD24"""
        return _itkImagePython.itkImageVD24_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD24 *":
        """GetPointer(itkImageVD24 self) -> itkImageVD24"""
        return _itkImagePython.itkImageVD24_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD24

        Create a new object of the class itkImageVD24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD24.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD24.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD24.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD24.Clone = new_instancemethod(_itkImagePython.itkImageVD24_Clone, None, itkImageVD24)
itkImageVD24.Allocate = new_instancemethod(_itkImagePython.itkImageVD24_Allocate, None, itkImageVD24)
itkImageVD24.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD24_FillBuffer, None, itkImageVD24)
itkImageVD24.SetPixel = new_instancemethod(_itkImagePython.itkImageVD24_SetPixel, None, itkImageVD24)
itkImageVD24.GetPixel = new_instancemethod(_itkImagePython.itkImageVD24_GetPixel, None, itkImageVD24)
itkImageVD24.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD24_GetBufferPointer, None, itkImageVD24)
itkImageVD24.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD24_GetPixelContainer, None, itkImageVD24)
itkImageVD24.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD24_SetPixelContainer, None, itkImageVD24)
itkImageVD24.Graft = new_instancemethod(_itkImagePython.itkImageVD24_Graft, None, itkImageVD24)
itkImageVD24.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD24_GetPixelAccessor, None, itkImageVD24)
itkImageVD24.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD24_GetNeighborhoodAccessor, None, itkImageVD24)
itkImageVD24.GetPointer = new_instancemethod(_itkImagePython.itkImageVD24_GetPointer, None, itkImageVD24)
itkImageVD24_swigregister = _itkImagePython.itkImageVD24_swigregister
itkImageVD24_swigregister(itkImageVD24)

def itkImageVD24___New_orig__() -> "itkImageVD24_Pointer":
    """itkImageVD24___New_orig__() -> itkImageVD24_Pointer"""
    return _itkImagePython.itkImageVD24___New_orig__()

def itkImageVD24_cast(obj: 'itkLightObject') -> "itkImageVD24 *":
    """itkImageVD24_cast(itkLightObject obj) -> itkImageVD24"""
    return _itkImagePython.itkImageVD24_cast(obj)

class itkImageVD32(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD32_Pointer":
        """__New_orig__() -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD32_Pointer":
        """Clone(itkImageVD32 self) -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD32 self, bool initializePixels=False)
        Allocate(itkImageVD32 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD3') -> "void":
        """
        FillBuffer(itkImageVD32 self, itkVectorD3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorD3') -> "void":
        """
        SetPixel(itkImageVD32 self, itkIndex2 index, itkVectorD3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD3 &":
        """
        GetPixel(itkImageVD32 self, itkIndex2 index) -> itkVectorD3
        GetPixel(itkImageVD32 self, itkIndex2 index) -> itkVectorD3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD3 const *":
        """
        GetBufferPointer(itkImageVD32 self) -> itkVectorD3
        GetBufferPointer(itkImageVD32 self) -> itkVectorD3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > const *":
        """
        GetPixelContainer(itkImageVD32 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD32 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD32 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD32') -> "void":
        """
        Graft(itkImageVD32 self, itkImageVD32 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,3 > > const":
        """
        GetPixelAccessor(itkImageVD32 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD32 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > >
        GetNeighborhoodAccessor(itkImageVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD32

    def cast(obj: 'itkLightObject') -> "itkImageVD32 *":
        """cast(itkLightObject obj) -> itkImageVD32"""
        return _itkImagePython.itkImageVD32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD32 *":
        """GetPointer(itkImageVD32 self) -> itkImageVD32"""
        return _itkImagePython.itkImageVD32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD32

        Create a new object of the class itkImageVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD32.Clone = new_instancemethod(_itkImagePython.itkImageVD32_Clone, None, itkImageVD32)
itkImageVD32.Allocate = new_instancemethod(_itkImagePython.itkImageVD32_Allocate, None, itkImageVD32)
itkImageVD32.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD32_FillBuffer, None, itkImageVD32)
itkImageVD32.SetPixel = new_instancemethod(_itkImagePython.itkImageVD32_SetPixel, None, itkImageVD32)
itkImageVD32.GetPixel = new_instancemethod(_itkImagePython.itkImageVD32_GetPixel, None, itkImageVD32)
itkImageVD32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD32_GetBufferPointer, None, itkImageVD32)
itkImageVD32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD32_GetPixelContainer, None, itkImageVD32)
itkImageVD32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD32_SetPixelContainer, None, itkImageVD32)
itkImageVD32.Graft = new_instancemethod(_itkImagePython.itkImageVD32_Graft, None, itkImageVD32)
itkImageVD32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD32_GetPixelAccessor, None, itkImageVD32)
itkImageVD32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD32_GetNeighborhoodAccessor, None, itkImageVD32)
itkImageVD32.GetPointer = new_instancemethod(_itkImagePython.itkImageVD32_GetPointer, None, itkImageVD32)
itkImageVD32_swigregister = _itkImagePython.itkImageVD32_swigregister
itkImageVD32_swigregister(itkImageVD32)

def itkImageVD32___New_orig__() -> "itkImageVD32_Pointer":
    """itkImageVD32___New_orig__() -> itkImageVD32_Pointer"""
    return _itkImagePython.itkImageVD32___New_orig__()

def itkImageVD32_cast(obj: 'itkLightObject') -> "itkImageVD32 *":
    """itkImageVD32_cast(itkLightObject obj) -> itkImageVD32"""
    return _itkImagePython.itkImageVD32_cast(obj)

class itkImageVD33(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD33_Pointer":
        """__New_orig__() -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD33_Pointer":
        """Clone(itkImageVD33 self) -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD33 self, bool initializePixels=False)
        Allocate(itkImageVD33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD3') -> "void":
        """
        FillBuffer(itkImageVD33 self, itkVectorD3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorD3') -> "void":
        """
        SetPixel(itkImageVD33 self, itkIndex3 index, itkVectorD3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD3 &":
        """
        GetPixel(itkImageVD33 self, itkIndex3 index) -> itkVectorD3
        GetPixel(itkImageVD33 self, itkIndex3 index) -> itkVectorD3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD3 const *":
        """
        GetBufferPointer(itkImageVD33 self) -> itkVectorD3
        GetBufferPointer(itkImageVD33 self) -> itkVectorD3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > const *":
        """
        GetPixelContainer(itkImageVD33 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD33 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD33 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD33') -> "void":
        """
        Graft(itkImageVD33 self, itkImageVD33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,3 > > const":
        """
        GetPixelAccessor(itkImageVD33 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD33 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD33

    def cast(obj: 'itkLightObject') -> "itkImageVD33 *":
        """cast(itkLightObject obj) -> itkImageVD33"""
        return _itkImagePython.itkImageVD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD33 *":
        """GetPointer(itkImageVD33 self) -> itkImageVD33"""
        return _itkImagePython.itkImageVD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD33

        Create a new object of the class itkImageVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD33.Clone = new_instancemethod(_itkImagePython.itkImageVD33_Clone, None, itkImageVD33)
itkImageVD33.Allocate = new_instancemethod(_itkImagePython.itkImageVD33_Allocate, None, itkImageVD33)
itkImageVD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD33_FillBuffer, None, itkImageVD33)
itkImageVD33.SetPixel = new_instancemethod(_itkImagePython.itkImageVD33_SetPixel, None, itkImageVD33)
itkImageVD33.GetPixel = new_instancemethod(_itkImagePython.itkImageVD33_GetPixel, None, itkImageVD33)
itkImageVD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD33_GetBufferPointer, None, itkImageVD33)
itkImageVD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD33_GetPixelContainer, None, itkImageVD33)
itkImageVD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD33_SetPixelContainer, None, itkImageVD33)
itkImageVD33.Graft = new_instancemethod(_itkImagePython.itkImageVD33_Graft, None, itkImageVD33)
itkImageVD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD33_GetPixelAccessor, None, itkImageVD33)
itkImageVD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD33_GetNeighborhoodAccessor, None, itkImageVD33)
itkImageVD33.GetPointer = new_instancemethod(_itkImagePython.itkImageVD33_GetPointer, None, itkImageVD33)
itkImageVD33_swigregister = _itkImagePython.itkImageVD33_swigregister
itkImageVD33_swigregister(itkImageVD33)

def itkImageVD33___New_orig__() -> "itkImageVD33_Pointer":
    """itkImageVD33___New_orig__() -> itkImageVD33_Pointer"""
    return _itkImagePython.itkImageVD33___New_orig__()

def itkImageVD33_cast(obj: 'itkLightObject') -> "itkImageVD33 *":
    """itkImageVD33_cast(itkLightObject obj) -> itkImageVD33"""
    return _itkImagePython.itkImageVD33_cast(obj)

class itkImageVD34(itkImageBase4):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD34_Pointer":
        """__New_orig__() -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD34_Pointer":
        """Clone(itkImageVD34 self) -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD34 self, bool initializePixels=False)
        Allocate(itkImageVD34 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD34_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD3') -> "void":
        """
        FillBuffer(itkImageVD34 self, itkVectorD3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD34_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkVectorD3') -> "void":
        """
        SetPixel(itkImageVD34 self, itkIndex4 index, itkVectorD3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD34_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD3 &":
        """
        GetPixel(itkImageVD34 self, itkIndex4 index) -> itkVectorD3
        GetPixel(itkImageVD34 self, itkIndex4 index) -> itkVectorD3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD34_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD3 const *":
        """
        GetBufferPointer(itkImageVD34 self) -> itkVectorD3
        GetBufferPointer(itkImageVD34 self) -> itkVectorD3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD34_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > const *":
        """
        GetPixelContainer(itkImageVD34 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD34 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD34_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD34 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD34_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD34') -> "void":
        """
        Graft(itkImageVD34 self, itkImageVD34 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD34_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,3 > > const":
        """
        GetPixelAccessor(itkImageVD34 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD34 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD34_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > >
        GetNeighborhoodAccessor(itkImageVD34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD34_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD34

    def cast(obj: 'itkLightObject') -> "itkImageVD34 *":
        """cast(itkLightObject obj) -> itkImageVD34"""
        return _itkImagePython.itkImageVD34_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD34 *":
        """GetPointer(itkImageVD34 self) -> itkImageVD34"""
        return _itkImagePython.itkImageVD34_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD34

        Create a new object of the class itkImageVD34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD34.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD34.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD34.Clone = new_instancemethod(_itkImagePython.itkImageVD34_Clone, None, itkImageVD34)
itkImageVD34.Allocate = new_instancemethod(_itkImagePython.itkImageVD34_Allocate, None, itkImageVD34)
itkImageVD34.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD34_FillBuffer, None, itkImageVD34)
itkImageVD34.SetPixel = new_instancemethod(_itkImagePython.itkImageVD34_SetPixel, None, itkImageVD34)
itkImageVD34.GetPixel = new_instancemethod(_itkImagePython.itkImageVD34_GetPixel, None, itkImageVD34)
itkImageVD34.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD34_GetBufferPointer, None, itkImageVD34)
itkImageVD34.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD34_GetPixelContainer, None, itkImageVD34)
itkImageVD34.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD34_SetPixelContainer, None, itkImageVD34)
itkImageVD34.Graft = new_instancemethod(_itkImagePython.itkImageVD34_Graft, None, itkImageVD34)
itkImageVD34.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD34_GetPixelAccessor, None, itkImageVD34)
itkImageVD34.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD34_GetNeighborhoodAccessor, None, itkImageVD34)
itkImageVD34.GetPointer = new_instancemethod(_itkImagePython.itkImageVD34_GetPointer, None, itkImageVD34)
itkImageVD34_swigregister = _itkImagePython.itkImageVD34_swigregister
itkImageVD34_swigregister(itkImageVD34)

def itkImageVD34___New_orig__() -> "itkImageVD34_Pointer":
    """itkImageVD34___New_orig__() -> itkImageVD34_Pointer"""
    return _itkImagePython.itkImageVD34___New_orig__()

def itkImageVD34_cast(obj: 'itkLightObject') -> "itkImageVD34 *":
    """itkImageVD34_cast(itkLightObject obj) -> itkImageVD34"""
    return _itkImagePython.itkImageVD34_cast(obj)

class itkImageVD42(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD42_Pointer":
        """__New_orig__() -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD42_Pointer":
        """Clone(itkImageVD42 self) -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD42 self, bool initializePixels=False)
        Allocate(itkImageVD42 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD4') -> "void":
        """
        FillBuffer(itkImageVD42 self, itkVectorD4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorD4') -> "void":
        """
        SetPixel(itkImageVD42 self, itkIndex2 index, itkVectorD4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD4 &":
        """
        GetPixel(itkImageVD42 self, itkIndex2 index) -> itkVectorD4
        GetPixel(itkImageVD42 self, itkIndex2 index) -> itkVectorD4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD4 const *":
        """
        GetBufferPointer(itkImageVD42 self) -> itkVectorD4
        GetBufferPointer(itkImageVD42 self) -> itkVectorD4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > const *":
        """
        GetPixelContainer(itkImageVD42 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD42 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD42 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD42') -> "void":
        """
        Graft(itkImageVD42 self, itkImageVD42 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,4 > > const":
        """
        GetPixelAccessor(itkImageVD42 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD42 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > >
        GetNeighborhoodAccessor(itkImageVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD42

    def cast(obj: 'itkLightObject') -> "itkImageVD42 *":
        """cast(itkLightObject obj) -> itkImageVD42"""
        return _itkImagePython.itkImageVD42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD42 *":
        """GetPointer(itkImageVD42 self) -> itkImageVD42"""
        return _itkImagePython.itkImageVD42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD42

        Create a new object of the class itkImageVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD42.Clone = new_instancemethod(_itkImagePython.itkImageVD42_Clone, None, itkImageVD42)
itkImageVD42.Allocate = new_instancemethod(_itkImagePython.itkImageVD42_Allocate, None, itkImageVD42)
itkImageVD42.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD42_FillBuffer, None, itkImageVD42)
itkImageVD42.SetPixel = new_instancemethod(_itkImagePython.itkImageVD42_SetPixel, None, itkImageVD42)
itkImageVD42.GetPixel = new_instancemethod(_itkImagePython.itkImageVD42_GetPixel, None, itkImageVD42)
itkImageVD42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD42_GetBufferPointer, None, itkImageVD42)
itkImageVD42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD42_GetPixelContainer, None, itkImageVD42)
itkImageVD42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD42_SetPixelContainer, None, itkImageVD42)
itkImageVD42.Graft = new_instancemethod(_itkImagePython.itkImageVD42_Graft, None, itkImageVD42)
itkImageVD42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD42_GetPixelAccessor, None, itkImageVD42)
itkImageVD42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD42_GetNeighborhoodAccessor, None, itkImageVD42)
itkImageVD42.GetPointer = new_instancemethod(_itkImagePython.itkImageVD42_GetPointer, None, itkImageVD42)
itkImageVD42_swigregister = _itkImagePython.itkImageVD42_swigregister
itkImageVD42_swigregister(itkImageVD42)

def itkImageVD42___New_orig__() -> "itkImageVD42_Pointer":
    """itkImageVD42___New_orig__() -> itkImageVD42_Pointer"""
    return _itkImagePython.itkImageVD42___New_orig__()

def itkImageVD42_cast(obj: 'itkLightObject') -> "itkImageVD42 *":
    """itkImageVD42_cast(itkLightObject obj) -> itkImageVD42"""
    return _itkImagePython.itkImageVD42_cast(obj)

class itkImageVD43(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD43_Pointer":
        """__New_orig__() -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD43_Pointer":
        """Clone(itkImageVD43 self) -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD43 self, bool initializePixels=False)
        Allocate(itkImageVD43 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD4') -> "void":
        """
        FillBuffer(itkImageVD43 self, itkVectorD4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorD4') -> "void":
        """
        SetPixel(itkImageVD43 self, itkIndex3 index, itkVectorD4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD4 &":
        """
        GetPixel(itkImageVD43 self, itkIndex3 index) -> itkVectorD4
        GetPixel(itkImageVD43 self, itkIndex3 index) -> itkVectorD4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD4 const *":
        """
        GetBufferPointer(itkImageVD43 self) -> itkVectorD4
        GetBufferPointer(itkImageVD43 self) -> itkVectorD4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > const *":
        """
        GetPixelContainer(itkImageVD43 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD43 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD43 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD43') -> "void":
        """
        Graft(itkImageVD43 self, itkImageVD43 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,4 > > const":
        """
        GetPixelAccessor(itkImageVD43 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD43 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > >
        GetNeighborhoodAccessor(itkImageVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD43

    def cast(obj: 'itkLightObject') -> "itkImageVD43 *":
        """cast(itkLightObject obj) -> itkImageVD43"""
        return _itkImagePython.itkImageVD43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD43 *":
        """GetPointer(itkImageVD43 self) -> itkImageVD43"""
        return _itkImagePython.itkImageVD43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD43

        Create a new object of the class itkImageVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD43.Clone = new_instancemethod(_itkImagePython.itkImageVD43_Clone, None, itkImageVD43)
itkImageVD43.Allocate = new_instancemethod(_itkImagePython.itkImageVD43_Allocate, None, itkImageVD43)
itkImageVD43.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD43_FillBuffer, None, itkImageVD43)
itkImageVD43.SetPixel = new_instancemethod(_itkImagePython.itkImageVD43_SetPixel, None, itkImageVD43)
itkImageVD43.GetPixel = new_instancemethod(_itkImagePython.itkImageVD43_GetPixel, None, itkImageVD43)
itkImageVD43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD43_GetBufferPointer, None, itkImageVD43)
itkImageVD43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD43_GetPixelContainer, None, itkImageVD43)
itkImageVD43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD43_SetPixelContainer, None, itkImageVD43)
itkImageVD43.Graft = new_instancemethod(_itkImagePython.itkImageVD43_Graft, None, itkImageVD43)
itkImageVD43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD43_GetPixelAccessor, None, itkImageVD43)
itkImageVD43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD43_GetNeighborhoodAccessor, None, itkImageVD43)
itkImageVD43.GetPointer = new_instancemethod(_itkImagePython.itkImageVD43_GetPointer, None, itkImageVD43)
itkImageVD43_swigregister = _itkImagePython.itkImageVD43_swigregister
itkImageVD43_swigregister(itkImageVD43)

def itkImageVD43___New_orig__() -> "itkImageVD43_Pointer":
    """itkImageVD43___New_orig__() -> itkImageVD43_Pointer"""
    return _itkImagePython.itkImageVD43___New_orig__()

def itkImageVD43_cast(obj: 'itkLightObject') -> "itkImageVD43 *":
    """itkImageVD43_cast(itkLightObject obj) -> itkImageVD43"""
    return _itkImagePython.itkImageVD43_cast(obj)

class itkImageVD44(itkImageBase4):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVD44_Pointer":
        """__New_orig__() -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVD44_Pointer":
        """Clone(itkImageVD44 self) -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVD44 self, bool initializePixels=False)
        Allocate(itkImageVD44 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVD44_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorD4') -> "void":
        """
        FillBuffer(itkImageVD44 self, itkVectorD4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVD44_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex4', value: 'itkVectorD4') -> "void":
        """
        SetPixel(itkImageVD44 self, itkIndex4 index, itkVectorD4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVD44_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorD4 &":
        """
        GetPixel(itkImageVD44 self, itkIndex4 index) -> itkVectorD4
        GetPixel(itkImageVD44 self, itkIndex4 index) -> itkVectorD4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVD44_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorD4 const *":
        """
        GetBufferPointer(itkImageVD44 self) -> itkVectorD4
        GetBufferPointer(itkImageVD44 self) -> itkVectorD4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVD44_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > const *":
        """
        GetPixelContainer(itkImageVD44 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD44 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVD44_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageVD44 self, itk::ImportImageContainer< unsigned long,itk::Vector< double,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVD44_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVD44') -> "void":
        """
        Graft(itkImageVD44 self, itkImageVD44 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVD44_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< double,4 > > const":
        """
        GetPixelAccessor(itkImageVD44 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD44 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVD44_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > > const":
        """
        GetNeighborhoodAccessor(itkImageVD44 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > >
        GetNeighborhoodAccessor(itkImageVD44 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVD44_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD44

    def cast(obj: 'itkLightObject') -> "itkImageVD44 *":
        """cast(itkLightObject obj) -> itkImageVD44"""
        return _itkImagePython.itkImageVD44_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVD44 *":
        """GetPointer(itkImageVD44 self) -> itkImageVD44"""
        return _itkImagePython.itkImageVD44_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD44

        Create a new object of the class itkImageVD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD44.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD44.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD44.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD44.Clone = new_instancemethod(_itkImagePython.itkImageVD44_Clone, None, itkImageVD44)
itkImageVD44.Allocate = new_instancemethod(_itkImagePython.itkImageVD44_Allocate, None, itkImageVD44)
itkImageVD44.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD44_FillBuffer, None, itkImageVD44)
itkImageVD44.SetPixel = new_instancemethod(_itkImagePython.itkImageVD44_SetPixel, None, itkImageVD44)
itkImageVD44.GetPixel = new_instancemethod(_itkImagePython.itkImageVD44_GetPixel, None, itkImageVD44)
itkImageVD44.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD44_GetBufferPointer, None, itkImageVD44)
itkImageVD44.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD44_GetPixelContainer, None, itkImageVD44)
itkImageVD44.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD44_SetPixelContainer, None, itkImageVD44)
itkImageVD44.Graft = new_instancemethod(_itkImagePython.itkImageVD44_Graft, None, itkImageVD44)
itkImageVD44.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD44_GetPixelAccessor, None, itkImageVD44)
itkImageVD44.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD44_GetNeighborhoodAccessor, None, itkImageVD44)
itkImageVD44.GetPointer = new_instancemethod(_itkImagePython.itkImageVD44_GetPointer, None, itkImageVD44)
itkImageVD44_swigregister = _itkImagePython.itkImageVD44_swigregister
itkImageVD44_swigregister(itkImageVD44)

def itkImageVD44___New_orig__() -> "itkImageVD44_Pointer":
    """itkImageVD44___New_orig__() -> itkImageVD44_Pointer"""
    return _itkImagePython.itkImageVD44___New_orig__()

def itkImageVD44_cast(obj: 'itkLightObject') -> "itkImageVD44 *":
    """itkImageVD44_cast(itkLightObject obj) -> itkImageVD44"""
    return _itkImagePython.itkImageVD44_cast(obj)

class itkImageVF12(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF12_Pointer":
        """__New_orig__() -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF12_Pointer":
        """Clone(itkImageVF12 self) -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF12 self, bool initializePixels=False)
        Allocate(itkImageVF12 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF12_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF1') -> "void":
        """
        FillBuffer(itkImageVF12 self, itkVectorF1 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF12_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF1') -> "void":
        """
        SetPixel(itkImageVF12 self, itkIndex2 index, itkVectorF1 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF12_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF1 &":
        """
        GetPixel(itkImageVF12 self, itkIndex2 index) -> itkVectorF1
        GetPixel(itkImageVF12 self, itkIndex2 index) -> itkVectorF1

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF12_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF1 const *":
        """
        GetBufferPointer(itkImageVF12 self) -> itkVectorF1
        GetBufferPointer(itkImageVF12 self) -> itkVectorF1

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF12_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > const *":
        """
        GetPixelContainer(itkImageVF12 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > >
        GetPixelContainer(itkImageVF12 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF12_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF12 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF12_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF12') -> "void":
        """
        Graft(itkImageVF12 self, itkImageVF12 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF12_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,1 > > const":
        """
        GetPixelAccessor(itkImageVF12 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(itkImageVF12 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF12_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF12 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > >
        GetNeighborhoodAccessor(itkImageVF12 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF12_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF12

    def cast(obj: 'itkLightObject') -> "itkImageVF12 *":
        """cast(itkLightObject obj) -> itkImageVF12"""
        return _itkImagePython.itkImageVF12_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF12 *":
        """GetPointer(itkImageVF12 self) -> itkImageVF12"""
        return _itkImagePython.itkImageVF12_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF12

        Create a new object of the class itkImageVF12 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF12.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF12.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF12.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF12.Clone = new_instancemethod(_itkImagePython.itkImageVF12_Clone, None, itkImageVF12)
itkImageVF12.Allocate = new_instancemethod(_itkImagePython.itkImageVF12_Allocate, None, itkImageVF12)
itkImageVF12.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF12_FillBuffer, None, itkImageVF12)
itkImageVF12.SetPixel = new_instancemethod(_itkImagePython.itkImageVF12_SetPixel, None, itkImageVF12)
itkImageVF12.GetPixel = new_instancemethod(_itkImagePython.itkImageVF12_GetPixel, None, itkImageVF12)
itkImageVF12.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF12_GetBufferPointer, None, itkImageVF12)
itkImageVF12.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF12_GetPixelContainer, None, itkImageVF12)
itkImageVF12.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF12_SetPixelContainer, None, itkImageVF12)
itkImageVF12.Graft = new_instancemethod(_itkImagePython.itkImageVF12_Graft, None, itkImageVF12)
itkImageVF12.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF12_GetPixelAccessor, None, itkImageVF12)
itkImageVF12.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF12_GetNeighborhoodAccessor, None, itkImageVF12)
itkImageVF12.GetPointer = new_instancemethod(_itkImagePython.itkImageVF12_GetPointer, None, itkImageVF12)
itkImageVF12_swigregister = _itkImagePython.itkImageVF12_swigregister
itkImageVF12_swigregister(itkImageVF12)

def itkImageVF12___New_orig__() -> "itkImageVF12_Pointer":
    """itkImageVF12___New_orig__() -> itkImageVF12_Pointer"""
    return _itkImagePython.itkImageVF12___New_orig__()

def itkImageVF12_cast(obj: 'itkLightObject') -> "itkImageVF12 *":
    """itkImageVF12_cast(itkLightObject obj) -> itkImageVF12"""
    return _itkImagePython.itkImageVF12_cast(obj)

class itkImageVF13(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF13_Pointer":
        """__New_orig__() -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF13_Pointer":
        """Clone(itkImageVF13 self) -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF13 self, bool initializePixels=False)
        Allocate(itkImageVF13 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF13_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF1') -> "void":
        """
        FillBuffer(itkImageVF13 self, itkVectorF1 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF13_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF1') -> "void":
        """
        SetPixel(itkImageVF13 self, itkIndex3 index, itkVectorF1 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF13_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF1 &":
        """
        GetPixel(itkImageVF13 self, itkIndex3 index) -> itkVectorF1
        GetPixel(itkImageVF13 self, itkIndex3 index) -> itkVectorF1

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF13_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF1 const *":
        """
        GetBufferPointer(itkImageVF13 self) -> itkVectorF1
        GetBufferPointer(itkImageVF13 self) -> itkVectorF1

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF13_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > const *":
        """
        GetPixelContainer(itkImageVF13 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > >
        GetPixelContainer(itkImageVF13 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF13_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF13 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,1 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF13_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF13') -> "void":
        """
        Graft(itkImageVF13 self, itkImageVF13 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF13_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,1 > > const":
        """
        GetPixelAccessor(itkImageVF13 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(itkImageVF13 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF13_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF13 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > >
        GetNeighborhoodAccessor(itkImageVF13 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF13_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF13

    def cast(obj: 'itkLightObject') -> "itkImageVF13 *":
        """cast(itkLightObject obj) -> itkImageVF13"""
        return _itkImagePython.itkImageVF13_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF13 *":
        """GetPointer(itkImageVF13 self) -> itkImageVF13"""
        return _itkImagePython.itkImageVF13_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF13

        Create a new object of the class itkImageVF13 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF13.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF13.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF13.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF13.Clone = new_instancemethod(_itkImagePython.itkImageVF13_Clone, None, itkImageVF13)
itkImageVF13.Allocate = new_instancemethod(_itkImagePython.itkImageVF13_Allocate, None, itkImageVF13)
itkImageVF13.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF13_FillBuffer, None, itkImageVF13)
itkImageVF13.SetPixel = new_instancemethod(_itkImagePython.itkImageVF13_SetPixel, None, itkImageVF13)
itkImageVF13.GetPixel = new_instancemethod(_itkImagePython.itkImageVF13_GetPixel, None, itkImageVF13)
itkImageVF13.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF13_GetBufferPointer, None, itkImageVF13)
itkImageVF13.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF13_GetPixelContainer, None, itkImageVF13)
itkImageVF13.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF13_SetPixelContainer, None, itkImageVF13)
itkImageVF13.Graft = new_instancemethod(_itkImagePython.itkImageVF13_Graft, None, itkImageVF13)
itkImageVF13.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF13_GetPixelAccessor, None, itkImageVF13)
itkImageVF13.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF13_GetNeighborhoodAccessor, None, itkImageVF13)
itkImageVF13.GetPointer = new_instancemethod(_itkImagePython.itkImageVF13_GetPointer, None, itkImageVF13)
itkImageVF13_swigregister = _itkImagePython.itkImageVF13_swigregister
itkImageVF13_swigregister(itkImageVF13)

def itkImageVF13___New_orig__() -> "itkImageVF13_Pointer":
    """itkImageVF13___New_orig__() -> itkImageVF13_Pointer"""
    return _itkImagePython.itkImageVF13___New_orig__()

def itkImageVF13_cast(obj: 'itkLightObject') -> "itkImageVF13 *":
    """itkImageVF13_cast(itkLightObject obj) -> itkImageVF13"""
    return _itkImagePython.itkImageVF13_cast(obj)

class itkImageVF22(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF22_Pointer":
        """__New_orig__() -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF22_Pointer":
        """Clone(itkImageVF22 self) -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF22 self, bool initializePixels=False)
        Allocate(itkImageVF22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF2') -> "void":
        """
        FillBuffer(itkImageVF22 self, itkVectorF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF2') -> "void":
        """
        SetPixel(itkImageVF22 self, itkIndex2 index, itkVectorF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF2 &":
        """
        GetPixel(itkImageVF22 self, itkIndex2 index) -> itkVectorF2
        GetPixel(itkImageVF22 self, itkIndex2 index) -> itkVectorF2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF2 const *":
        """
        GetBufferPointer(itkImageVF22 self) -> itkVectorF2
        GetBufferPointer(itkImageVF22 self) -> itkVectorF2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *":
        """
        GetPixelContainer(itkImageVF22 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(itkImageVF22 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF22 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF22') -> "void":
        """
        Graft(itkImageVF22 self, itkImageVF22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,2 > > const":
        """
        GetPixelAccessor(itkImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(itkImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF22

    def cast(obj: 'itkLightObject') -> "itkImageVF22 *":
        """cast(itkLightObject obj) -> itkImageVF22"""
        return _itkImagePython.itkImageVF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF22 *":
        """GetPointer(itkImageVF22 self) -> itkImageVF22"""
        return _itkImagePython.itkImageVF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF22

        Create a new object of the class itkImageVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF22.Clone = new_instancemethod(_itkImagePython.itkImageVF22_Clone, None, itkImageVF22)
itkImageVF22.Allocate = new_instancemethod(_itkImagePython.itkImageVF22_Allocate, None, itkImageVF22)
itkImageVF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF22_FillBuffer, None, itkImageVF22)
itkImageVF22.SetPixel = new_instancemethod(_itkImagePython.itkImageVF22_SetPixel, None, itkImageVF22)
itkImageVF22.GetPixel = new_instancemethod(_itkImagePython.itkImageVF22_GetPixel, None, itkImageVF22)
itkImageVF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF22_GetBufferPointer, None, itkImageVF22)
itkImageVF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF22_GetPixelContainer, None, itkImageVF22)
itkImageVF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF22_SetPixelContainer, None, itkImageVF22)
itkImageVF22.Graft = new_instancemethod(_itkImagePython.itkImageVF22_Graft, None, itkImageVF22)
itkImageVF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF22_GetPixelAccessor, None, itkImageVF22)
itkImageVF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF22_GetNeighborhoodAccessor, None, itkImageVF22)
itkImageVF22.GetPointer = new_instancemethod(_itkImagePython.itkImageVF22_GetPointer, None, itkImageVF22)
itkImageVF22_swigregister = _itkImagePython.itkImageVF22_swigregister
itkImageVF22_swigregister(itkImageVF22)

def itkImageVF22___New_orig__() -> "itkImageVF22_Pointer":
    """itkImageVF22___New_orig__() -> itkImageVF22_Pointer"""
    return _itkImagePython.itkImageVF22___New_orig__()

def itkImageVF22_cast(obj: 'itkLightObject') -> "itkImageVF22 *":
    """itkImageVF22_cast(itkLightObject obj) -> itkImageVF22"""
    return _itkImagePython.itkImageVF22_cast(obj)

class itkImageVF23(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF23_Pointer":
        """__New_orig__() -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF23_Pointer":
        """Clone(itkImageVF23 self) -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF23 self, bool initializePixels=False)
        Allocate(itkImageVF23 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF23_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF2') -> "void":
        """
        FillBuffer(itkImageVF23 self, itkVectorF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF23_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF2') -> "void":
        """
        SetPixel(itkImageVF23 self, itkIndex3 index, itkVectorF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF23_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF2 &":
        """
        GetPixel(itkImageVF23 self, itkIndex3 index) -> itkVectorF2
        GetPixel(itkImageVF23 self, itkIndex3 index) -> itkVectorF2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF23_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF2 const *":
        """
        GetBufferPointer(itkImageVF23 self) -> itkVectorF2
        GetBufferPointer(itkImageVF23 self) -> itkVectorF2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *":
        """
        GetPixelContainer(itkImageVF23 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(itkImageVF23 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF23 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF23_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF23') -> "void":
        """
        Graft(itkImageVF23 self, itkImageVF23 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF23_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,2 > > const":
        """
        GetPixelAccessor(itkImageVF23 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(itkImageVF23 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > >
        GetNeighborhoodAccessor(itkImageVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF23

    def cast(obj: 'itkLightObject') -> "itkImageVF23 *":
        """cast(itkLightObject obj) -> itkImageVF23"""
        return _itkImagePython.itkImageVF23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF23 *":
        """GetPointer(itkImageVF23 self) -> itkImageVF23"""
        return _itkImagePython.itkImageVF23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF23

        Create a new object of the class itkImageVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF23.Clone = new_instancemethod(_itkImagePython.itkImageVF23_Clone, None, itkImageVF23)
itkImageVF23.Allocate = new_instancemethod(_itkImagePython.itkImageVF23_Allocate, None, itkImageVF23)
itkImageVF23.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF23_FillBuffer, None, itkImageVF23)
itkImageVF23.SetPixel = new_instancemethod(_itkImagePython.itkImageVF23_SetPixel, None, itkImageVF23)
itkImageVF23.GetPixel = new_instancemethod(_itkImagePython.itkImageVF23_GetPixel, None, itkImageVF23)
itkImageVF23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF23_GetBufferPointer, None, itkImageVF23)
itkImageVF23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF23_GetPixelContainer, None, itkImageVF23)
itkImageVF23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF23_SetPixelContainer, None, itkImageVF23)
itkImageVF23.Graft = new_instancemethod(_itkImagePython.itkImageVF23_Graft, None, itkImageVF23)
itkImageVF23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF23_GetPixelAccessor, None, itkImageVF23)
itkImageVF23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF23_GetNeighborhoodAccessor, None, itkImageVF23)
itkImageVF23.GetPointer = new_instancemethod(_itkImagePython.itkImageVF23_GetPointer, None, itkImageVF23)
itkImageVF23_swigregister = _itkImagePython.itkImageVF23_swigregister
itkImageVF23_swigregister(itkImageVF23)

def itkImageVF23___New_orig__() -> "itkImageVF23_Pointer":
    """itkImageVF23___New_orig__() -> itkImageVF23_Pointer"""
    return _itkImagePython.itkImageVF23___New_orig__()

def itkImageVF23_cast(obj: 'itkLightObject') -> "itkImageVF23 *":
    """itkImageVF23_cast(itkLightObject obj) -> itkImageVF23"""
    return _itkImagePython.itkImageVF23_cast(obj)

class itkImageVF32(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF32_Pointer":
        """__New_orig__() -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF32_Pointer":
        """Clone(itkImageVF32 self) -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF32 self, bool initializePixels=False)
        Allocate(itkImageVF32 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF32_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF3') -> "void":
        """
        FillBuffer(itkImageVF32 self, itkVectorF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF32_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF3') -> "void":
        """
        SetPixel(itkImageVF32 self, itkIndex2 index, itkVectorF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF32_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF3 &":
        """
        GetPixel(itkImageVF32 self, itkIndex2 index) -> itkVectorF3
        GetPixel(itkImageVF32 self, itkIndex2 index) -> itkVectorF3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF32_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF3 const *":
        """
        GetBufferPointer(itkImageVF32 self) -> itkVectorF3
        GetBufferPointer(itkImageVF32 self) -> itkVectorF3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *":
        """
        GetPixelContainer(itkImageVF32 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > >
        GetPixelContainer(itkImageVF32 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF32 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF32_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF32') -> "void":
        """
        Graft(itkImageVF32 self, itkImageVF32 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF32_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,3 > > const":
        """
        GetPixelAccessor(itkImageVF32 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkImageVF32 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > >
        GetNeighborhoodAccessor(itkImageVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF32

    def cast(obj: 'itkLightObject') -> "itkImageVF32 *":
        """cast(itkLightObject obj) -> itkImageVF32"""
        return _itkImagePython.itkImageVF32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF32 *":
        """GetPointer(itkImageVF32 self) -> itkImageVF32"""
        return _itkImagePython.itkImageVF32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF32

        Create a new object of the class itkImageVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF32.Clone = new_instancemethod(_itkImagePython.itkImageVF32_Clone, None, itkImageVF32)
itkImageVF32.Allocate = new_instancemethod(_itkImagePython.itkImageVF32_Allocate, None, itkImageVF32)
itkImageVF32.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF32_FillBuffer, None, itkImageVF32)
itkImageVF32.SetPixel = new_instancemethod(_itkImagePython.itkImageVF32_SetPixel, None, itkImageVF32)
itkImageVF32.GetPixel = new_instancemethod(_itkImagePython.itkImageVF32_GetPixel, None, itkImageVF32)
itkImageVF32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF32_GetBufferPointer, None, itkImageVF32)
itkImageVF32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF32_GetPixelContainer, None, itkImageVF32)
itkImageVF32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF32_SetPixelContainer, None, itkImageVF32)
itkImageVF32.Graft = new_instancemethod(_itkImagePython.itkImageVF32_Graft, None, itkImageVF32)
itkImageVF32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF32_GetPixelAccessor, None, itkImageVF32)
itkImageVF32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF32_GetNeighborhoodAccessor, None, itkImageVF32)
itkImageVF32.GetPointer = new_instancemethod(_itkImagePython.itkImageVF32_GetPointer, None, itkImageVF32)
itkImageVF32_swigregister = _itkImagePython.itkImageVF32_swigregister
itkImageVF32_swigregister(itkImageVF32)

def itkImageVF32___New_orig__() -> "itkImageVF32_Pointer":
    """itkImageVF32___New_orig__() -> itkImageVF32_Pointer"""
    return _itkImagePython.itkImageVF32___New_orig__()

def itkImageVF32_cast(obj: 'itkLightObject') -> "itkImageVF32 *":
    """itkImageVF32_cast(itkLightObject obj) -> itkImageVF32"""
    return _itkImagePython.itkImageVF32_cast(obj)

class itkImageVF33(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF33_Pointer":
        """__New_orig__() -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF33_Pointer":
        """Clone(itkImageVF33 self) -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF33 self, bool initializePixels=False)
        Allocate(itkImageVF33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF3') -> "void":
        """
        FillBuffer(itkImageVF33 self, itkVectorF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF3') -> "void":
        """
        SetPixel(itkImageVF33 self, itkIndex3 index, itkVectorF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF3 &":
        """
        GetPixel(itkImageVF33 self, itkIndex3 index) -> itkVectorF3
        GetPixel(itkImageVF33 self, itkIndex3 index) -> itkVectorF3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF3 const *":
        """
        GetBufferPointer(itkImageVF33 self) -> itkVectorF3
        GetBufferPointer(itkImageVF33 self) -> itkVectorF3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *":
        """
        GetPixelContainer(itkImageVF33 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > >
        GetPixelContainer(itkImageVF33 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF33 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF33') -> "void":
        """
        Graft(itkImageVF33 self, itkImageVF33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,3 > > const":
        """
        GetPixelAccessor(itkImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF33

    def cast(obj: 'itkLightObject') -> "itkImageVF33 *":
        """cast(itkLightObject obj) -> itkImageVF33"""
        return _itkImagePython.itkImageVF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF33 *":
        """GetPointer(itkImageVF33 self) -> itkImageVF33"""
        return _itkImagePython.itkImageVF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF33

        Create a new object of the class itkImageVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF33.Clone = new_instancemethod(_itkImagePython.itkImageVF33_Clone, None, itkImageVF33)
itkImageVF33.Allocate = new_instancemethod(_itkImagePython.itkImageVF33_Allocate, None, itkImageVF33)
itkImageVF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF33_FillBuffer, None, itkImageVF33)
itkImageVF33.SetPixel = new_instancemethod(_itkImagePython.itkImageVF33_SetPixel, None, itkImageVF33)
itkImageVF33.GetPixel = new_instancemethod(_itkImagePython.itkImageVF33_GetPixel, None, itkImageVF33)
itkImageVF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF33_GetBufferPointer, None, itkImageVF33)
itkImageVF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF33_GetPixelContainer, None, itkImageVF33)
itkImageVF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF33_SetPixelContainer, None, itkImageVF33)
itkImageVF33.Graft = new_instancemethod(_itkImagePython.itkImageVF33_Graft, None, itkImageVF33)
itkImageVF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF33_GetPixelAccessor, None, itkImageVF33)
itkImageVF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF33_GetNeighborhoodAccessor, None, itkImageVF33)
itkImageVF33.GetPointer = new_instancemethod(_itkImagePython.itkImageVF33_GetPointer, None, itkImageVF33)
itkImageVF33_swigregister = _itkImagePython.itkImageVF33_swigregister
itkImageVF33_swigregister(itkImageVF33)

def itkImageVF33___New_orig__() -> "itkImageVF33_Pointer":
    """itkImageVF33___New_orig__() -> itkImageVF33_Pointer"""
    return _itkImagePython.itkImageVF33___New_orig__()

def itkImageVF33_cast(obj: 'itkLightObject') -> "itkImageVF33 *":
    """itkImageVF33_cast(itkLightObject obj) -> itkImageVF33"""
    return _itkImagePython.itkImageVF33_cast(obj)

class itkImageVF42(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF42_Pointer":
        """__New_orig__() -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF42_Pointer":
        """Clone(itkImageVF42 self) -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF42 self, bool initializePixels=False)
        Allocate(itkImageVF42 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF42_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF4') -> "void":
        """
        FillBuffer(itkImageVF42 self, itkVectorF4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF42_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF4') -> "void":
        """
        SetPixel(itkImageVF42 self, itkIndex2 index, itkVectorF4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF42_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF4 &":
        """
        GetPixel(itkImageVF42 self, itkIndex2 index) -> itkVectorF4
        GetPixel(itkImageVF42 self, itkIndex2 index) -> itkVectorF4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF42_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF4 const *":
        """
        GetBufferPointer(itkImageVF42 self) -> itkVectorF4
        GetBufferPointer(itkImageVF42 self) -> itkVectorF4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *":
        """
        GetPixelContainer(itkImageVF42 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(itkImageVF42 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF42 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF42_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF42') -> "void":
        """
        Graft(itkImageVF42 self, itkImageVF42 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF42_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,4 > > const":
        """
        GetPixelAccessor(itkImageVF42 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(itkImageVF42 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > >
        GetNeighborhoodAccessor(itkImageVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF42

    def cast(obj: 'itkLightObject') -> "itkImageVF42 *":
        """cast(itkLightObject obj) -> itkImageVF42"""
        return _itkImagePython.itkImageVF42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF42 *":
        """GetPointer(itkImageVF42 self) -> itkImageVF42"""
        return _itkImagePython.itkImageVF42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF42

        Create a new object of the class itkImageVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF42.Clone = new_instancemethod(_itkImagePython.itkImageVF42_Clone, None, itkImageVF42)
itkImageVF42.Allocate = new_instancemethod(_itkImagePython.itkImageVF42_Allocate, None, itkImageVF42)
itkImageVF42.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF42_FillBuffer, None, itkImageVF42)
itkImageVF42.SetPixel = new_instancemethod(_itkImagePython.itkImageVF42_SetPixel, None, itkImageVF42)
itkImageVF42.GetPixel = new_instancemethod(_itkImagePython.itkImageVF42_GetPixel, None, itkImageVF42)
itkImageVF42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF42_GetBufferPointer, None, itkImageVF42)
itkImageVF42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF42_GetPixelContainer, None, itkImageVF42)
itkImageVF42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF42_SetPixelContainer, None, itkImageVF42)
itkImageVF42.Graft = new_instancemethod(_itkImagePython.itkImageVF42_Graft, None, itkImageVF42)
itkImageVF42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF42_GetPixelAccessor, None, itkImageVF42)
itkImageVF42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF42_GetNeighborhoodAccessor, None, itkImageVF42)
itkImageVF42.GetPointer = new_instancemethod(_itkImagePython.itkImageVF42_GetPointer, None, itkImageVF42)
itkImageVF42_swigregister = _itkImagePython.itkImageVF42_swigregister
itkImageVF42_swigregister(itkImageVF42)

def itkImageVF42___New_orig__() -> "itkImageVF42_Pointer":
    """itkImageVF42___New_orig__() -> itkImageVF42_Pointer"""
    return _itkImagePython.itkImageVF42___New_orig__()

def itkImageVF42_cast(obj: 'itkLightObject') -> "itkImageVF42 *":
    """itkImageVF42_cast(itkLightObject obj) -> itkImageVF42"""
    return _itkImagePython.itkImageVF42_cast(obj)

class itkImageVF43(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageVF43_Pointer":
        """__New_orig__() -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageVF43_Pointer":
        """Clone(itkImageVF43 self) -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageVF43 self, bool initializePixels=False)
        Allocate(itkImageVF43 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageVF43_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkVectorF4') -> "void":
        """
        FillBuffer(itkImageVF43 self, itkVectorF4 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageVF43_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF4') -> "void":
        """
        SetPixel(itkImageVF43 self, itkIndex3 index, itkVectorF4 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageVF43_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF4 &":
        """
        GetPixel(itkImageVF43 self, itkIndex3 index) -> itkVectorF4
        GetPixel(itkImageVF43 self, itkIndex3 index) -> itkVectorF4

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageVF43_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkVectorF4 const *":
        """
        GetBufferPointer(itkImageVF43 self) -> itkVectorF4
        GetBufferPointer(itkImageVF43 self) -> itkVectorF4

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageVF43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *":
        """
        GetPixelContainer(itkImageVF43 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(itkImageVF43 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageVF43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > *') -> "void":
        """
        SetPixelContainer(itkImageVF43 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageVF43_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageVF43') -> "void":
        """
        Graft(itkImageVF43 self, itkImageVF43 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageVF43_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,4 > > const":
        """
        GetPixelAccessor(itkImageVF43 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(itkImageVF43 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageVF43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > >
        GetNeighborhoodAccessor(itkImageVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageVF43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF43

    def cast(obj: 'itkLightObject') -> "itkImageVF43 *":
        """cast(itkLightObject obj) -> itkImageVF43"""
        return _itkImagePython.itkImageVF43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageVF43 *":
        """GetPointer(itkImageVF43 self) -> itkImageVF43"""
        return _itkImagePython.itkImageVF43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF43

        Create a new object of the class itkImageVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF43.Clone = new_instancemethod(_itkImagePython.itkImageVF43_Clone, None, itkImageVF43)
itkImageVF43.Allocate = new_instancemethod(_itkImagePython.itkImageVF43_Allocate, None, itkImageVF43)
itkImageVF43.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF43_FillBuffer, None, itkImageVF43)
itkImageVF43.SetPixel = new_instancemethod(_itkImagePython.itkImageVF43_SetPixel, None, itkImageVF43)
itkImageVF43.GetPixel = new_instancemethod(_itkImagePython.itkImageVF43_GetPixel, None, itkImageVF43)
itkImageVF43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF43_GetBufferPointer, None, itkImageVF43)
itkImageVF43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF43_GetPixelContainer, None, itkImageVF43)
itkImageVF43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF43_SetPixelContainer, None, itkImageVF43)
itkImageVF43.Graft = new_instancemethod(_itkImagePython.itkImageVF43_Graft, None, itkImageVF43)
itkImageVF43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF43_GetPixelAccessor, None, itkImageVF43)
itkImageVF43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF43_GetNeighborhoodAccessor, None, itkImageVF43)
itkImageVF43.GetPointer = new_instancemethod(_itkImagePython.itkImageVF43_GetPointer, None, itkImageVF43)
itkImageVF43_swigregister = _itkImagePython.itkImageVF43_swigregister
itkImageVF43_swigregister(itkImageVF43)

def itkImageVF43___New_orig__() -> "itkImageVF43_Pointer":
    """itkImageVF43___New_orig__() -> itkImageVF43_Pointer"""
    return _itkImagePython.itkImageVF43___New_orig__()

def itkImageVF43_cast(obj: 'itkLightObject') -> "itkImageVF43 *":
    """itkImageVF43_cast(itkLightObject obj) -> itkImageVF43"""
    return _itkImagePython.itkImageVF43_cast(obj)

class itkImageB2(itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageB2_Pointer":
        """__New_orig__() -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageB2_Pointer":
        """Clone(itkImageB2 self) -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageB2 self, bool initializePixels=False)
        Allocate(itkImageB2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageB2_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'bool const &') -> "void":
        """
        FillBuffer(itkImageB2 self, bool const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageB2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'bool const &') -> "void":
        """
        SetPixel(itkImageB2 self, itkIndex2 index, bool const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageB2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "bool &":
        """
        GetPixel(itkImageB2 self, itkIndex2 index) -> bool const
        GetPixel(itkImageB2 self, itkIndex2 index) -> bool &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageB2_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "bool const *":
        """
        GetBufferPointer(itkImageB2 self) -> bool
        GetBufferPointer(itkImageB2 self) -> bool const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageB2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,bool > const *":
        """
        GetPixelContainer(itkImageB2 self) -> itk::ImportImageContainer< unsigned long,bool >
        GetPixelContainer(itkImageB2 self) -> itk::ImportImageContainer< unsigned long,bool > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageB2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,bool > *') -> "void":
        """
        SetPixelContainer(itkImageB2 self, itk::ImportImageContainer< unsigned long,bool > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageB2_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageB2') -> "void":
        """
        Graft(itkImageB2 self, itkImageB2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageB2_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< bool > const":
        """
        GetPixelAccessor(itkImageB2 self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(itkImageB2 self) -> itk::DefaultPixelAccessor< bool > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageB2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageB2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > >
        GetNeighborhoodAccessor(itkImageB2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageB2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageB2

    def cast(obj: 'itkLightObject') -> "itkImageB2 *":
        """cast(itkLightObject obj) -> itkImageB2"""
        return _itkImagePython.itkImageB2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageB2 *":
        """GetPointer(itkImageB2 self) -> itkImageB2"""
        return _itkImagePython.itkImageB2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageB2

        Create a new object of the class itkImageB2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageB2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageB2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageB2.Clone = new_instancemethod(_itkImagePython.itkImageB2_Clone, None, itkImageB2)
itkImageB2.Allocate = new_instancemethod(_itkImagePython.itkImageB2_Allocate, None, itkImageB2)
itkImageB2.FillBuffer = new_instancemethod(_itkImagePython.itkImageB2_FillBuffer, None, itkImageB2)
itkImageB2.SetPixel = new_instancemethod(_itkImagePython.itkImageB2_SetPixel, None, itkImageB2)
itkImageB2.GetPixel = new_instancemethod(_itkImagePython.itkImageB2_GetPixel, None, itkImageB2)
itkImageB2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageB2_GetBufferPointer, None, itkImageB2)
itkImageB2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageB2_GetPixelContainer, None, itkImageB2)
itkImageB2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageB2_SetPixelContainer, None, itkImageB2)
itkImageB2.Graft = new_instancemethod(_itkImagePython.itkImageB2_Graft, None, itkImageB2)
itkImageB2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageB2_GetPixelAccessor, None, itkImageB2)
itkImageB2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageB2_GetNeighborhoodAccessor, None, itkImageB2)
itkImageB2.GetPointer = new_instancemethod(_itkImagePython.itkImageB2_GetPointer, None, itkImageB2)
itkImageB2_swigregister = _itkImagePython.itkImageB2_swigregister
itkImageB2_swigregister(itkImageB2)

def itkImageB2___New_orig__() -> "itkImageB2_Pointer":
    """itkImageB2___New_orig__() -> itkImageB2_Pointer"""
    return _itkImagePython.itkImageB2___New_orig__()

def itkImageB2_cast(obj: 'itkLightObject') -> "itkImageB2 *":
    """itkImageB2_cast(itkLightObject obj) -> itkImageB2"""
    return _itkImagePython.itkImageB2_cast(obj)

class itkImageB3(itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed direcly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:   ImageBase

    See:  ImageContainerInterface Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SimpleOperations/SetPixels Set
    specified pixels to specified values

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageB3_Pointer":
        """__New_orig__() -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageB3_Pointer":
        """Clone(itkImageB3 self) -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageB3 self, bool initializePixels=False)
        Allocate(itkImageB3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkImagePython.itkImageB3_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'bool const &') -> "void":
        """
        FillBuffer(itkImageB3 self, bool const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkImagePython.itkImageB3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'bool const &') -> "void":
        """
        SetPixel(itkImageB3 self, itkIndex3 index, bool const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkImagePython.itkImageB3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "bool &":
        """
        GetPixel(itkImageB3 self, itkIndex3 index) -> bool const
        GetPixel(itkImageB3 self, itkIndex3 index) -> bool &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkImagePython.itkImageB3_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "bool const *":
        """
        GetBufferPointer(itkImageB3 self) -> bool
        GetBufferPointer(itkImageB3 self) -> bool const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkImagePython.itkImageB3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,bool > const *":
        """
        GetPixelContainer(itkImageB3 self) -> itk::ImportImageContainer< unsigned long,bool >
        GetPixelContainer(itkImageB3 self) -> itk::ImportImageContainer< unsigned long,bool > const *

        Return a pointer
        to the container. 
        """
        return _itkImagePython.itkImageB3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,bool > *') -> "void":
        """
        SetPixelContainer(itkImageB3 self, itk::ImportImageContainer< unsigned long,bool > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkImagePython.itkImageB3_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageB3') -> "void":
        """
        Graft(itkImageB3 self, itkImageB3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkImagePython.itkImageB3_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< bool > const":
        """
        GetPixelAccessor(itkImageB3 self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(itkImageB3 self) -> itk::DefaultPixelAccessor< bool > const

        Return the Pixel
        Accesor object 
        """
        return _itkImagePython.itkImageB3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageB3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > >
        GetNeighborhoodAccessor(itkImageB3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkImagePython.itkImageB3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageB3

    def cast(obj: 'itkLightObject') -> "itkImageB3 *":
        """cast(itkLightObject obj) -> itkImageB3"""
        return _itkImagePython.itkImageB3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageB3 *":
        """GetPointer(itkImageB3 self) -> itkImageB3"""
        return _itkImagePython.itkImageB3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageB3

        Create a new object of the class itkImageB3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageB3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageB3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageB3.Clone = new_instancemethod(_itkImagePython.itkImageB3_Clone, None, itkImageB3)
itkImageB3.Allocate = new_instancemethod(_itkImagePython.itkImageB3_Allocate, None, itkImageB3)
itkImageB3.FillBuffer = new_instancemethod(_itkImagePython.itkImageB3_FillBuffer, None, itkImageB3)
itkImageB3.SetPixel = new_instancemethod(_itkImagePython.itkImageB3_SetPixel, None, itkImageB3)
itkImageB3.GetPixel = new_instancemethod(_itkImagePython.itkImageB3_GetPixel, None, itkImageB3)
itkImageB3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageB3_GetBufferPointer, None, itkImageB3)
itkImageB3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageB3_GetPixelContainer, None, itkImageB3)
itkImageB3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageB3_SetPixelContainer, None, itkImageB3)
itkImageB3.Graft = new_instancemethod(_itkImagePython.itkImageB3_Graft, None, itkImageB3)
itkImageB3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageB3_GetPixelAccessor, None, itkImageB3)
itkImageB3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageB3_GetNeighborhoodAccessor, None, itkImageB3)
itkImageB3.GetPointer = new_instancemethod(_itkImagePython.itkImageB3_GetPointer, None, itkImageB3)
itkImageB3_swigregister = _itkImagePython.itkImageB3_swigregister
itkImageB3_swigregister(itkImageB3)

def itkImageB3___New_orig__() -> "itkImageB3_Pointer":
    """itkImageB3___New_orig__() -> itkImageB3_Pointer"""
    return _itkImagePython.itkImageB3___New_orig__()

def itkImageB3_cast(obj: 'itkLightObject') -> "itkImageB3 *":
    """itkImageB3_cast(itkLightObject obj) -> itkImageB3"""
    return _itkImagePython.itkImageB3_cast(obj)



