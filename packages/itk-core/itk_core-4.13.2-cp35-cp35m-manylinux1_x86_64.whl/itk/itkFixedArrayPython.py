# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFixedArrayPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFixedArrayPython', [dirname(__file__)])
        except ImportError:
            import _itkFixedArrayPython
            return _itkFixedArrayPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFixedArrayPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFixedArrayPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFixedArrayPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import pyBasePython
class itkFixedArrayB1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayB1') -> "bool":
        """__eq__(itkFixedArrayB1 self, itkFixedArrayB1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayB1') -> "bool":
        """__ne__(itkFixedArrayB1 self, itkFixedArrayB1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'bool const &') -> "void":
        """
        SetElement(itkFixedArrayB1 self, unsigned short index, bool const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayB1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "bool const &":
        """GetElement(itkFixedArrayB1 self, unsigned short index) -> bool const &"""
        return _itkFixedArrayPython.itkFixedArrayB1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "bool const *":
        """
        GetDataPointer(itkFixedArrayB1 self) -> bool
        GetDataPointer(itkFixedArrayB1 self) -> bool const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayB1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayB1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB1_Size(self)


    def Fill(self, arg0: 'bool const &') -> "void":
        """Fill(itkFixedArrayB1 self, bool const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayB1_Fill(self, arg0)


    def Filled(arg0: 'bool const &') -> "itkFixedArrayB1":
        """Filled(bool const & arg0) -> itkFixedArrayB1"""
        return _itkFixedArrayPython.itkFixedArrayB1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayB1 self) -> itkFixedArrayB1
        __init__(itkFixedArrayB1 self, bool const * r) -> itkFixedArrayB1
        __init__(itkFixedArrayB1 self, bool const & r) -> itkFixedArrayB1
        __init__(itkFixedArrayB1 self, itkFixedArrayB1 arg0) -> itkFixedArrayB1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayB1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB1

    def __getitem__(self, d: 'unsigned long') -> "bool":
        """__getitem__(itkFixedArrayB1 self, unsigned long d) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'bool') -> "void":
        """__setitem__(itkFixedArrayB1 self, unsigned long d, bool v)"""
        return _itkFixedArrayPython.itkFixedArrayB1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayB1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayB1___repr__(self)

itkFixedArrayB1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1___eq__, None, itkFixedArrayB1)
itkFixedArrayB1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1___ne__, None, itkFixedArrayB1)
itkFixedArrayB1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1_SetElement, None, itkFixedArrayB1)
itkFixedArrayB1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1_GetElement, None, itkFixedArrayB1)
itkFixedArrayB1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1_GetDataPointer, None, itkFixedArrayB1)
itkFixedArrayB1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1_Size, None, itkFixedArrayB1)
itkFixedArrayB1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1_Fill, None, itkFixedArrayB1)
itkFixedArrayB1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1___getitem__, None, itkFixedArrayB1)
itkFixedArrayB1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1___setitem__, None, itkFixedArrayB1)
itkFixedArrayB1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB1___repr__, None, itkFixedArrayB1)
itkFixedArrayB1_swigregister = _itkFixedArrayPython.itkFixedArrayB1_swigregister
itkFixedArrayB1_swigregister(itkFixedArrayB1)

def itkFixedArrayB1_Filled(arg0: 'bool const &') -> "itkFixedArrayB1":
    """itkFixedArrayB1_Filled(bool const & arg0) -> itkFixedArrayB1"""
    return _itkFixedArrayPython.itkFixedArrayB1_Filled(arg0)

def itkFixedArrayB1___len__() -> "unsigned int":
    """itkFixedArrayB1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayB1___len__()

class itkFixedArrayB2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayB2') -> "bool":
        """__eq__(itkFixedArrayB2 self, itkFixedArrayB2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayB2') -> "bool":
        """__ne__(itkFixedArrayB2 self, itkFixedArrayB2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'bool const &') -> "void":
        """
        SetElement(itkFixedArrayB2 self, unsigned short index, bool const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayB2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "bool const &":
        """GetElement(itkFixedArrayB2 self, unsigned short index) -> bool const &"""
        return _itkFixedArrayPython.itkFixedArrayB2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "bool const *":
        """
        GetDataPointer(itkFixedArrayB2 self) -> bool
        GetDataPointer(itkFixedArrayB2 self) -> bool const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayB2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayB2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB2_Size(self)


    def Fill(self, arg0: 'bool const &') -> "void":
        """Fill(itkFixedArrayB2 self, bool const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayB2_Fill(self, arg0)


    def Filled(arg0: 'bool const &') -> "itkFixedArrayB2":
        """Filled(bool const & arg0) -> itkFixedArrayB2"""
        return _itkFixedArrayPython.itkFixedArrayB2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayB2 self) -> itkFixedArrayB2
        __init__(itkFixedArrayB2 self, bool const * r) -> itkFixedArrayB2
        __init__(itkFixedArrayB2 self, bool const & r) -> itkFixedArrayB2
        __init__(itkFixedArrayB2 self, itkFixedArrayB2 arg0) -> itkFixedArrayB2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayB2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB2

    def __getitem__(self, d: 'unsigned long') -> "bool":
        """__getitem__(itkFixedArrayB2 self, unsigned long d) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'bool') -> "void":
        """__setitem__(itkFixedArrayB2 self, unsigned long d, bool v)"""
        return _itkFixedArrayPython.itkFixedArrayB2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayB2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayB2___repr__(self)

itkFixedArrayB2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2___eq__, None, itkFixedArrayB2)
itkFixedArrayB2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2___ne__, None, itkFixedArrayB2)
itkFixedArrayB2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2_SetElement, None, itkFixedArrayB2)
itkFixedArrayB2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2_GetElement, None, itkFixedArrayB2)
itkFixedArrayB2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2_GetDataPointer, None, itkFixedArrayB2)
itkFixedArrayB2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2_Size, None, itkFixedArrayB2)
itkFixedArrayB2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2_Fill, None, itkFixedArrayB2)
itkFixedArrayB2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2___getitem__, None, itkFixedArrayB2)
itkFixedArrayB2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2___setitem__, None, itkFixedArrayB2)
itkFixedArrayB2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB2___repr__, None, itkFixedArrayB2)
itkFixedArrayB2_swigregister = _itkFixedArrayPython.itkFixedArrayB2_swigregister
itkFixedArrayB2_swigregister(itkFixedArrayB2)

def itkFixedArrayB2_Filled(arg0: 'bool const &') -> "itkFixedArrayB2":
    """itkFixedArrayB2_Filled(bool const & arg0) -> itkFixedArrayB2"""
    return _itkFixedArrayPython.itkFixedArrayB2_Filled(arg0)

def itkFixedArrayB2___len__() -> "unsigned int":
    """itkFixedArrayB2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayB2___len__()

class itkFixedArrayB3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayB3') -> "bool":
        """__eq__(itkFixedArrayB3 self, itkFixedArrayB3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayB3') -> "bool":
        """__ne__(itkFixedArrayB3 self, itkFixedArrayB3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'bool const &') -> "void":
        """
        SetElement(itkFixedArrayB3 self, unsigned short index, bool const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayB3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "bool const &":
        """GetElement(itkFixedArrayB3 self, unsigned short index) -> bool const &"""
        return _itkFixedArrayPython.itkFixedArrayB3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "bool const *":
        """
        GetDataPointer(itkFixedArrayB3 self) -> bool
        GetDataPointer(itkFixedArrayB3 self) -> bool const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayB3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayB3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB3_Size(self)


    def Fill(self, arg0: 'bool const &') -> "void":
        """Fill(itkFixedArrayB3 self, bool const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayB3_Fill(self, arg0)


    def Filled(arg0: 'bool const &') -> "itkFixedArrayB3":
        """Filled(bool const & arg0) -> itkFixedArrayB3"""
        return _itkFixedArrayPython.itkFixedArrayB3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayB3 self) -> itkFixedArrayB3
        __init__(itkFixedArrayB3 self, bool const * r) -> itkFixedArrayB3
        __init__(itkFixedArrayB3 self, bool const & r) -> itkFixedArrayB3
        __init__(itkFixedArrayB3 self, itkFixedArrayB3 arg0) -> itkFixedArrayB3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayB3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB3

    def __getitem__(self, d: 'unsigned long') -> "bool":
        """__getitem__(itkFixedArrayB3 self, unsigned long d) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'bool') -> "void":
        """__setitem__(itkFixedArrayB3 self, unsigned long d, bool v)"""
        return _itkFixedArrayPython.itkFixedArrayB3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayB3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayB3___repr__(self)

itkFixedArrayB3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3___eq__, None, itkFixedArrayB3)
itkFixedArrayB3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3___ne__, None, itkFixedArrayB3)
itkFixedArrayB3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3_SetElement, None, itkFixedArrayB3)
itkFixedArrayB3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3_GetElement, None, itkFixedArrayB3)
itkFixedArrayB3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3_GetDataPointer, None, itkFixedArrayB3)
itkFixedArrayB3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3_Size, None, itkFixedArrayB3)
itkFixedArrayB3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3_Fill, None, itkFixedArrayB3)
itkFixedArrayB3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3___getitem__, None, itkFixedArrayB3)
itkFixedArrayB3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3___setitem__, None, itkFixedArrayB3)
itkFixedArrayB3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB3___repr__, None, itkFixedArrayB3)
itkFixedArrayB3_swigregister = _itkFixedArrayPython.itkFixedArrayB3_swigregister
itkFixedArrayB3_swigregister(itkFixedArrayB3)

def itkFixedArrayB3_Filled(arg0: 'bool const &') -> "itkFixedArrayB3":
    """itkFixedArrayB3_Filled(bool const & arg0) -> itkFixedArrayB3"""
    return _itkFixedArrayPython.itkFixedArrayB3_Filled(arg0)

def itkFixedArrayB3___len__() -> "unsigned int":
    """itkFixedArrayB3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayB3___len__()

class itkFixedArrayB4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayB4') -> "bool":
        """__eq__(itkFixedArrayB4 self, itkFixedArrayB4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayB4') -> "bool":
        """__ne__(itkFixedArrayB4 self, itkFixedArrayB4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'bool const &') -> "void":
        """
        SetElement(itkFixedArrayB4 self, unsigned short index, bool const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayB4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "bool const &":
        """GetElement(itkFixedArrayB4 self, unsigned short index) -> bool const &"""
        return _itkFixedArrayPython.itkFixedArrayB4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "bool const *":
        """
        GetDataPointer(itkFixedArrayB4 self) -> bool
        GetDataPointer(itkFixedArrayB4 self) -> bool const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayB4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayB4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB4_Size(self)


    def Fill(self, arg0: 'bool const &') -> "void":
        """Fill(itkFixedArrayB4 self, bool const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayB4_Fill(self, arg0)


    def Filled(arg0: 'bool const &') -> "itkFixedArrayB4":
        """Filled(bool const & arg0) -> itkFixedArrayB4"""
        return _itkFixedArrayPython.itkFixedArrayB4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayB4 self) -> itkFixedArrayB4
        __init__(itkFixedArrayB4 self, bool const * r) -> itkFixedArrayB4
        __init__(itkFixedArrayB4 self, bool const & r) -> itkFixedArrayB4
        __init__(itkFixedArrayB4 self, itkFixedArrayB4 arg0) -> itkFixedArrayB4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayB4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB4

    def __getitem__(self, d: 'unsigned long') -> "bool":
        """__getitem__(itkFixedArrayB4 self, unsigned long d) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'bool') -> "void":
        """__setitem__(itkFixedArrayB4 self, unsigned long d, bool v)"""
        return _itkFixedArrayPython.itkFixedArrayB4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayB4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayB4___repr__(self)

itkFixedArrayB4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4___eq__, None, itkFixedArrayB4)
itkFixedArrayB4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4___ne__, None, itkFixedArrayB4)
itkFixedArrayB4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4_SetElement, None, itkFixedArrayB4)
itkFixedArrayB4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4_GetElement, None, itkFixedArrayB4)
itkFixedArrayB4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4_GetDataPointer, None, itkFixedArrayB4)
itkFixedArrayB4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4_Size, None, itkFixedArrayB4)
itkFixedArrayB4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4_Fill, None, itkFixedArrayB4)
itkFixedArrayB4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4___getitem__, None, itkFixedArrayB4)
itkFixedArrayB4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4___setitem__, None, itkFixedArrayB4)
itkFixedArrayB4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB4___repr__, None, itkFixedArrayB4)
itkFixedArrayB4_swigregister = _itkFixedArrayPython.itkFixedArrayB4_swigregister
itkFixedArrayB4_swigregister(itkFixedArrayB4)

def itkFixedArrayB4_Filled(arg0: 'bool const &') -> "itkFixedArrayB4":
    """itkFixedArrayB4_Filled(bool const & arg0) -> itkFixedArrayB4"""
    return _itkFixedArrayPython.itkFixedArrayB4_Filled(arg0)

def itkFixedArrayB4___len__() -> "unsigned int":
    """itkFixedArrayB4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayB4___len__()

class itkFixedArrayB5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayB5') -> "bool":
        """__eq__(itkFixedArrayB5 self, itkFixedArrayB5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayB5') -> "bool":
        """__ne__(itkFixedArrayB5 self, itkFixedArrayB5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'bool const &') -> "void":
        """
        SetElement(itkFixedArrayB5 self, unsigned short index, bool const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayB5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "bool const &":
        """GetElement(itkFixedArrayB5 self, unsigned short index) -> bool const &"""
        return _itkFixedArrayPython.itkFixedArrayB5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "bool const *":
        """
        GetDataPointer(itkFixedArrayB5 self) -> bool
        GetDataPointer(itkFixedArrayB5 self) -> bool const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayB5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayB5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB5_Size(self)


    def Fill(self, arg0: 'bool const &') -> "void":
        """Fill(itkFixedArrayB5 self, bool const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayB5_Fill(self, arg0)


    def Filled(arg0: 'bool const &') -> "itkFixedArrayB5":
        """Filled(bool const & arg0) -> itkFixedArrayB5"""
        return _itkFixedArrayPython.itkFixedArrayB5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayB5 self) -> itkFixedArrayB5
        __init__(itkFixedArrayB5 self, bool const * r) -> itkFixedArrayB5
        __init__(itkFixedArrayB5 self, bool const & r) -> itkFixedArrayB5
        __init__(itkFixedArrayB5 self, itkFixedArrayB5 arg0) -> itkFixedArrayB5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayB5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB5

    def __getitem__(self, d: 'unsigned long') -> "bool":
        """__getitem__(itkFixedArrayB5 self, unsigned long d) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'bool') -> "void":
        """__setitem__(itkFixedArrayB5 self, unsigned long d, bool v)"""
        return _itkFixedArrayPython.itkFixedArrayB5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayB5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayB5___repr__(self)

itkFixedArrayB5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5___eq__, None, itkFixedArrayB5)
itkFixedArrayB5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5___ne__, None, itkFixedArrayB5)
itkFixedArrayB5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5_SetElement, None, itkFixedArrayB5)
itkFixedArrayB5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5_GetElement, None, itkFixedArrayB5)
itkFixedArrayB5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5_GetDataPointer, None, itkFixedArrayB5)
itkFixedArrayB5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5_Size, None, itkFixedArrayB5)
itkFixedArrayB5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5_Fill, None, itkFixedArrayB5)
itkFixedArrayB5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5___getitem__, None, itkFixedArrayB5)
itkFixedArrayB5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5___setitem__, None, itkFixedArrayB5)
itkFixedArrayB5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB5___repr__, None, itkFixedArrayB5)
itkFixedArrayB5_swigregister = _itkFixedArrayPython.itkFixedArrayB5_swigregister
itkFixedArrayB5_swigregister(itkFixedArrayB5)

def itkFixedArrayB5_Filled(arg0: 'bool const &') -> "itkFixedArrayB5":
    """itkFixedArrayB5_Filled(bool const & arg0) -> itkFixedArrayB5"""
    return _itkFixedArrayPython.itkFixedArrayB5_Filled(arg0)

def itkFixedArrayB5___len__() -> "unsigned int":
    """itkFixedArrayB5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayB5___len__()

class itkFixedArrayB6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayB6') -> "bool":
        """__eq__(itkFixedArrayB6 self, itkFixedArrayB6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayB6') -> "bool":
        """__ne__(itkFixedArrayB6 self, itkFixedArrayB6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'bool const &') -> "void":
        """
        SetElement(itkFixedArrayB6 self, unsigned short index, bool const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayB6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "bool const &":
        """GetElement(itkFixedArrayB6 self, unsigned short index) -> bool const &"""
        return _itkFixedArrayPython.itkFixedArrayB6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "bool const *":
        """
        GetDataPointer(itkFixedArrayB6 self) -> bool
        GetDataPointer(itkFixedArrayB6 self) -> bool const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayB6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayB6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB6_Size(self)


    def Fill(self, arg0: 'bool const &') -> "void":
        """Fill(itkFixedArrayB6 self, bool const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayB6_Fill(self, arg0)


    def Filled(arg0: 'bool const &') -> "itkFixedArrayB6":
        """Filled(bool const & arg0) -> itkFixedArrayB6"""
        return _itkFixedArrayPython.itkFixedArrayB6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayB6 self) -> itkFixedArrayB6
        __init__(itkFixedArrayB6 self, bool const * r) -> itkFixedArrayB6
        __init__(itkFixedArrayB6 self, bool const & r) -> itkFixedArrayB6
        __init__(itkFixedArrayB6 self, itkFixedArrayB6 arg0) -> itkFixedArrayB6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayB6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayB6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayB6

    def __getitem__(self, d: 'unsigned long') -> "bool":
        """__getitem__(itkFixedArrayB6 self, unsigned long d) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayB6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'bool') -> "void":
        """__setitem__(itkFixedArrayB6 self, unsigned long d, bool v)"""
        return _itkFixedArrayPython.itkFixedArrayB6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayB6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayB6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayB6___repr__(self)

itkFixedArrayB6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6___eq__, None, itkFixedArrayB6)
itkFixedArrayB6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6___ne__, None, itkFixedArrayB6)
itkFixedArrayB6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6_SetElement, None, itkFixedArrayB6)
itkFixedArrayB6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6_GetElement, None, itkFixedArrayB6)
itkFixedArrayB6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6_GetDataPointer, None, itkFixedArrayB6)
itkFixedArrayB6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6_Size, None, itkFixedArrayB6)
itkFixedArrayB6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6_Fill, None, itkFixedArrayB6)
itkFixedArrayB6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6___getitem__, None, itkFixedArrayB6)
itkFixedArrayB6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6___setitem__, None, itkFixedArrayB6)
itkFixedArrayB6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayB6___repr__, None, itkFixedArrayB6)
itkFixedArrayB6_swigregister = _itkFixedArrayPython.itkFixedArrayB6_swigregister
itkFixedArrayB6_swigregister(itkFixedArrayB6)

def itkFixedArrayB6_Filled(arg0: 'bool const &') -> "itkFixedArrayB6":
    """itkFixedArrayB6_Filled(bool const & arg0) -> itkFixedArrayB6"""
    return _itkFixedArrayPython.itkFixedArrayB6_Filled(arg0)

def itkFixedArrayB6___len__() -> "unsigned int":
    """itkFixedArrayB6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayB6___len__()

class itkFixedArrayD1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayD1') -> "bool":
        """__eq__(itkFixedArrayD1 self, itkFixedArrayD1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayD1') -> "bool":
        """__ne__(itkFixedArrayD1 self, itkFixedArrayD1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'double const &') -> "void":
        """
        SetElement(itkFixedArrayD1 self, unsigned short index, double const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayD1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "double const &":
        """GetElement(itkFixedArrayD1 self, unsigned short index) -> double const &"""
        return _itkFixedArrayPython.itkFixedArrayD1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "double const *":
        """
        GetDataPointer(itkFixedArrayD1 self) -> double
        GetDataPointer(itkFixedArrayD1 self) -> double const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayD1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayD1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD1_Size(self)


    def Fill(self, arg0: 'double const &') -> "void":
        """Fill(itkFixedArrayD1 self, double const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayD1_Fill(self, arg0)


    def Filled(arg0: 'double const &') -> "itkFixedArrayD1":
        """Filled(double const & arg0) -> itkFixedArrayD1"""
        return _itkFixedArrayPython.itkFixedArrayD1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayD1 self) -> itkFixedArrayD1
        __init__(itkFixedArrayD1 self, double const * r) -> itkFixedArrayD1
        __init__(itkFixedArrayD1 self, double const & r) -> itkFixedArrayD1
        __init__(itkFixedArrayD1 self, itkFixedArrayD1 arg0) -> itkFixedArrayD1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayD1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD1

    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkFixedArrayD1 self, unsigned long d) -> double"""
        return _itkFixedArrayPython.itkFixedArrayD1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkFixedArrayD1 self, unsigned long d, double v)"""
        return _itkFixedArrayPython.itkFixedArrayD1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayD1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayD1___repr__(self)

itkFixedArrayD1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1___eq__, None, itkFixedArrayD1)
itkFixedArrayD1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1___ne__, None, itkFixedArrayD1)
itkFixedArrayD1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1_SetElement, None, itkFixedArrayD1)
itkFixedArrayD1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1_GetElement, None, itkFixedArrayD1)
itkFixedArrayD1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1_GetDataPointer, None, itkFixedArrayD1)
itkFixedArrayD1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1_Size, None, itkFixedArrayD1)
itkFixedArrayD1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1_Fill, None, itkFixedArrayD1)
itkFixedArrayD1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1___getitem__, None, itkFixedArrayD1)
itkFixedArrayD1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1___setitem__, None, itkFixedArrayD1)
itkFixedArrayD1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD1___repr__, None, itkFixedArrayD1)
itkFixedArrayD1_swigregister = _itkFixedArrayPython.itkFixedArrayD1_swigregister
itkFixedArrayD1_swigregister(itkFixedArrayD1)

def itkFixedArrayD1_Filled(arg0: 'double const &') -> "itkFixedArrayD1":
    """itkFixedArrayD1_Filled(double const & arg0) -> itkFixedArrayD1"""
    return _itkFixedArrayPython.itkFixedArrayD1_Filled(arg0)

def itkFixedArrayD1___len__() -> "unsigned int":
    """itkFixedArrayD1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayD1___len__()

class itkFixedArrayD2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayD2') -> "bool":
        """__eq__(itkFixedArrayD2 self, itkFixedArrayD2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayD2') -> "bool":
        """__ne__(itkFixedArrayD2 self, itkFixedArrayD2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'double const &') -> "void":
        """
        SetElement(itkFixedArrayD2 self, unsigned short index, double const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayD2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "double const &":
        """GetElement(itkFixedArrayD2 self, unsigned short index) -> double const &"""
        return _itkFixedArrayPython.itkFixedArrayD2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "double const *":
        """
        GetDataPointer(itkFixedArrayD2 self) -> double
        GetDataPointer(itkFixedArrayD2 self) -> double const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayD2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayD2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD2_Size(self)


    def Fill(self, arg0: 'double const &') -> "void":
        """Fill(itkFixedArrayD2 self, double const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayD2_Fill(self, arg0)


    def Filled(arg0: 'double const &') -> "itkFixedArrayD2":
        """Filled(double const & arg0) -> itkFixedArrayD2"""
        return _itkFixedArrayPython.itkFixedArrayD2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayD2 self) -> itkFixedArrayD2
        __init__(itkFixedArrayD2 self, double const * r) -> itkFixedArrayD2
        __init__(itkFixedArrayD2 self, double const & r) -> itkFixedArrayD2
        __init__(itkFixedArrayD2 self, itkFixedArrayD2 arg0) -> itkFixedArrayD2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayD2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD2

    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkFixedArrayD2 self, unsigned long d) -> double"""
        return _itkFixedArrayPython.itkFixedArrayD2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkFixedArrayD2 self, unsigned long d, double v)"""
        return _itkFixedArrayPython.itkFixedArrayD2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayD2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayD2___repr__(self)

itkFixedArrayD2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2___eq__, None, itkFixedArrayD2)
itkFixedArrayD2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2___ne__, None, itkFixedArrayD2)
itkFixedArrayD2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2_SetElement, None, itkFixedArrayD2)
itkFixedArrayD2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2_GetElement, None, itkFixedArrayD2)
itkFixedArrayD2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2_GetDataPointer, None, itkFixedArrayD2)
itkFixedArrayD2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2_Size, None, itkFixedArrayD2)
itkFixedArrayD2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2_Fill, None, itkFixedArrayD2)
itkFixedArrayD2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2___getitem__, None, itkFixedArrayD2)
itkFixedArrayD2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2___setitem__, None, itkFixedArrayD2)
itkFixedArrayD2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD2___repr__, None, itkFixedArrayD2)
itkFixedArrayD2_swigregister = _itkFixedArrayPython.itkFixedArrayD2_swigregister
itkFixedArrayD2_swigregister(itkFixedArrayD2)

def itkFixedArrayD2_Filled(arg0: 'double const &') -> "itkFixedArrayD2":
    """itkFixedArrayD2_Filled(double const & arg0) -> itkFixedArrayD2"""
    return _itkFixedArrayPython.itkFixedArrayD2_Filled(arg0)

def itkFixedArrayD2___len__() -> "unsigned int":
    """itkFixedArrayD2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayD2___len__()

class itkFixedArrayD3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayD3') -> "bool":
        """__eq__(itkFixedArrayD3 self, itkFixedArrayD3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayD3') -> "bool":
        """__ne__(itkFixedArrayD3 self, itkFixedArrayD3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'double const &') -> "void":
        """
        SetElement(itkFixedArrayD3 self, unsigned short index, double const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayD3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "double const &":
        """GetElement(itkFixedArrayD3 self, unsigned short index) -> double const &"""
        return _itkFixedArrayPython.itkFixedArrayD3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "double const *":
        """
        GetDataPointer(itkFixedArrayD3 self) -> double
        GetDataPointer(itkFixedArrayD3 self) -> double const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayD3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayD3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD3_Size(self)


    def Fill(self, arg0: 'double const &') -> "void":
        """Fill(itkFixedArrayD3 self, double const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayD3_Fill(self, arg0)


    def Filled(arg0: 'double const &') -> "itkFixedArrayD3":
        """Filled(double const & arg0) -> itkFixedArrayD3"""
        return _itkFixedArrayPython.itkFixedArrayD3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayD3 self) -> itkFixedArrayD3
        __init__(itkFixedArrayD3 self, double const * r) -> itkFixedArrayD3
        __init__(itkFixedArrayD3 self, double const & r) -> itkFixedArrayD3
        __init__(itkFixedArrayD3 self, itkFixedArrayD3 arg0) -> itkFixedArrayD3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayD3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD3

    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkFixedArrayD3 self, unsigned long d) -> double"""
        return _itkFixedArrayPython.itkFixedArrayD3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkFixedArrayD3 self, unsigned long d, double v)"""
        return _itkFixedArrayPython.itkFixedArrayD3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayD3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayD3___repr__(self)

itkFixedArrayD3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3___eq__, None, itkFixedArrayD3)
itkFixedArrayD3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3___ne__, None, itkFixedArrayD3)
itkFixedArrayD3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3_SetElement, None, itkFixedArrayD3)
itkFixedArrayD3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3_GetElement, None, itkFixedArrayD3)
itkFixedArrayD3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3_GetDataPointer, None, itkFixedArrayD3)
itkFixedArrayD3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3_Size, None, itkFixedArrayD3)
itkFixedArrayD3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3_Fill, None, itkFixedArrayD3)
itkFixedArrayD3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3___getitem__, None, itkFixedArrayD3)
itkFixedArrayD3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3___setitem__, None, itkFixedArrayD3)
itkFixedArrayD3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD3___repr__, None, itkFixedArrayD3)
itkFixedArrayD3_swigregister = _itkFixedArrayPython.itkFixedArrayD3_swigregister
itkFixedArrayD3_swigregister(itkFixedArrayD3)

def itkFixedArrayD3_Filled(arg0: 'double const &') -> "itkFixedArrayD3":
    """itkFixedArrayD3_Filled(double const & arg0) -> itkFixedArrayD3"""
    return _itkFixedArrayPython.itkFixedArrayD3_Filled(arg0)

def itkFixedArrayD3___len__() -> "unsigned int":
    """itkFixedArrayD3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayD3___len__()

class itkFixedArrayD4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayD4') -> "bool":
        """__eq__(itkFixedArrayD4 self, itkFixedArrayD4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayD4') -> "bool":
        """__ne__(itkFixedArrayD4 self, itkFixedArrayD4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'double const &') -> "void":
        """
        SetElement(itkFixedArrayD4 self, unsigned short index, double const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayD4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "double const &":
        """GetElement(itkFixedArrayD4 self, unsigned short index) -> double const &"""
        return _itkFixedArrayPython.itkFixedArrayD4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "double const *":
        """
        GetDataPointer(itkFixedArrayD4 self) -> double
        GetDataPointer(itkFixedArrayD4 self) -> double const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayD4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayD4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD4_Size(self)


    def Fill(self, arg0: 'double const &') -> "void":
        """Fill(itkFixedArrayD4 self, double const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayD4_Fill(self, arg0)


    def Filled(arg0: 'double const &') -> "itkFixedArrayD4":
        """Filled(double const & arg0) -> itkFixedArrayD4"""
        return _itkFixedArrayPython.itkFixedArrayD4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayD4 self) -> itkFixedArrayD4
        __init__(itkFixedArrayD4 self, double const * r) -> itkFixedArrayD4
        __init__(itkFixedArrayD4 self, double const & r) -> itkFixedArrayD4
        __init__(itkFixedArrayD4 self, itkFixedArrayD4 arg0) -> itkFixedArrayD4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayD4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD4

    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkFixedArrayD4 self, unsigned long d) -> double"""
        return _itkFixedArrayPython.itkFixedArrayD4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkFixedArrayD4 self, unsigned long d, double v)"""
        return _itkFixedArrayPython.itkFixedArrayD4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayD4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayD4___repr__(self)

itkFixedArrayD4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4___eq__, None, itkFixedArrayD4)
itkFixedArrayD4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4___ne__, None, itkFixedArrayD4)
itkFixedArrayD4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4_SetElement, None, itkFixedArrayD4)
itkFixedArrayD4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4_GetElement, None, itkFixedArrayD4)
itkFixedArrayD4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4_GetDataPointer, None, itkFixedArrayD4)
itkFixedArrayD4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4_Size, None, itkFixedArrayD4)
itkFixedArrayD4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4_Fill, None, itkFixedArrayD4)
itkFixedArrayD4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4___getitem__, None, itkFixedArrayD4)
itkFixedArrayD4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4___setitem__, None, itkFixedArrayD4)
itkFixedArrayD4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD4___repr__, None, itkFixedArrayD4)
itkFixedArrayD4_swigregister = _itkFixedArrayPython.itkFixedArrayD4_swigregister
itkFixedArrayD4_swigregister(itkFixedArrayD4)

def itkFixedArrayD4_Filled(arg0: 'double const &') -> "itkFixedArrayD4":
    """itkFixedArrayD4_Filled(double const & arg0) -> itkFixedArrayD4"""
    return _itkFixedArrayPython.itkFixedArrayD4_Filled(arg0)

def itkFixedArrayD4___len__() -> "unsigned int":
    """itkFixedArrayD4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayD4___len__()

class itkFixedArrayD5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayD5') -> "bool":
        """__eq__(itkFixedArrayD5 self, itkFixedArrayD5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayD5') -> "bool":
        """__ne__(itkFixedArrayD5 self, itkFixedArrayD5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'double const &') -> "void":
        """
        SetElement(itkFixedArrayD5 self, unsigned short index, double const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayD5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "double const &":
        """GetElement(itkFixedArrayD5 self, unsigned short index) -> double const &"""
        return _itkFixedArrayPython.itkFixedArrayD5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "double const *":
        """
        GetDataPointer(itkFixedArrayD5 self) -> double
        GetDataPointer(itkFixedArrayD5 self) -> double const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayD5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayD5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD5_Size(self)


    def Fill(self, arg0: 'double const &') -> "void":
        """Fill(itkFixedArrayD5 self, double const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayD5_Fill(self, arg0)


    def Filled(arg0: 'double const &') -> "itkFixedArrayD5":
        """Filled(double const & arg0) -> itkFixedArrayD5"""
        return _itkFixedArrayPython.itkFixedArrayD5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayD5 self) -> itkFixedArrayD5
        __init__(itkFixedArrayD5 self, double const * r) -> itkFixedArrayD5
        __init__(itkFixedArrayD5 self, double const & r) -> itkFixedArrayD5
        __init__(itkFixedArrayD5 self, itkFixedArrayD5 arg0) -> itkFixedArrayD5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayD5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD5

    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkFixedArrayD5 self, unsigned long d) -> double"""
        return _itkFixedArrayPython.itkFixedArrayD5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkFixedArrayD5 self, unsigned long d, double v)"""
        return _itkFixedArrayPython.itkFixedArrayD5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayD5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayD5___repr__(self)

itkFixedArrayD5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5___eq__, None, itkFixedArrayD5)
itkFixedArrayD5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5___ne__, None, itkFixedArrayD5)
itkFixedArrayD5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5_SetElement, None, itkFixedArrayD5)
itkFixedArrayD5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5_GetElement, None, itkFixedArrayD5)
itkFixedArrayD5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5_GetDataPointer, None, itkFixedArrayD5)
itkFixedArrayD5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5_Size, None, itkFixedArrayD5)
itkFixedArrayD5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5_Fill, None, itkFixedArrayD5)
itkFixedArrayD5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5___getitem__, None, itkFixedArrayD5)
itkFixedArrayD5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5___setitem__, None, itkFixedArrayD5)
itkFixedArrayD5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD5___repr__, None, itkFixedArrayD5)
itkFixedArrayD5_swigregister = _itkFixedArrayPython.itkFixedArrayD5_swigregister
itkFixedArrayD5_swigregister(itkFixedArrayD5)

def itkFixedArrayD5_Filled(arg0: 'double const &') -> "itkFixedArrayD5":
    """itkFixedArrayD5_Filled(double const & arg0) -> itkFixedArrayD5"""
    return _itkFixedArrayPython.itkFixedArrayD5_Filled(arg0)

def itkFixedArrayD5___len__() -> "unsigned int":
    """itkFixedArrayD5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayD5___len__()

class itkFixedArrayD6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayD6') -> "bool":
        """__eq__(itkFixedArrayD6 self, itkFixedArrayD6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayD6') -> "bool":
        """__ne__(itkFixedArrayD6 self, itkFixedArrayD6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayD6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'double const &') -> "void":
        """
        SetElement(itkFixedArrayD6 self, unsigned short index, double const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayD6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "double const &":
        """GetElement(itkFixedArrayD6 self, unsigned short index) -> double const &"""
        return _itkFixedArrayPython.itkFixedArrayD6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "double const *":
        """
        GetDataPointer(itkFixedArrayD6 self) -> double
        GetDataPointer(itkFixedArrayD6 self) -> double const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayD6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayD6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD6_Size(self)


    def Fill(self, arg0: 'double const &') -> "void":
        """Fill(itkFixedArrayD6 self, double const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayD6_Fill(self, arg0)


    def Filled(arg0: 'double const &') -> "itkFixedArrayD6":
        """Filled(double const & arg0) -> itkFixedArrayD6"""
        return _itkFixedArrayPython.itkFixedArrayD6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayD6 self) -> itkFixedArrayD6
        __init__(itkFixedArrayD6 self, double const * r) -> itkFixedArrayD6
        __init__(itkFixedArrayD6 self, double const & r) -> itkFixedArrayD6
        __init__(itkFixedArrayD6 self, itkFixedArrayD6 arg0) -> itkFixedArrayD6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayD6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayD6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayD6

    def __getitem__(self, d: 'unsigned long') -> "double":
        """__getitem__(itkFixedArrayD6 self, unsigned long d) -> double"""
        return _itkFixedArrayPython.itkFixedArrayD6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'double') -> "void":
        """__setitem__(itkFixedArrayD6 self, unsigned long d, double v)"""
        return _itkFixedArrayPython.itkFixedArrayD6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayD6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayD6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayD6___repr__(self)

itkFixedArrayD6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6___eq__, None, itkFixedArrayD6)
itkFixedArrayD6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6___ne__, None, itkFixedArrayD6)
itkFixedArrayD6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6_SetElement, None, itkFixedArrayD6)
itkFixedArrayD6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6_GetElement, None, itkFixedArrayD6)
itkFixedArrayD6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6_GetDataPointer, None, itkFixedArrayD6)
itkFixedArrayD6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6_Size, None, itkFixedArrayD6)
itkFixedArrayD6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6_Fill, None, itkFixedArrayD6)
itkFixedArrayD6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6___getitem__, None, itkFixedArrayD6)
itkFixedArrayD6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6___setitem__, None, itkFixedArrayD6)
itkFixedArrayD6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayD6___repr__, None, itkFixedArrayD6)
itkFixedArrayD6_swigregister = _itkFixedArrayPython.itkFixedArrayD6_swigregister
itkFixedArrayD6_swigregister(itkFixedArrayD6)

def itkFixedArrayD6_Filled(arg0: 'double const &') -> "itkFixedArrayD6":
    """itkFixedArrayD6_Filled(double const & arg0) -> itkFixedArrayD6"""
    return _itkFixedArrayPython.itkFixedArrayD6_Filled(arg0)

def itkFixedArrayD6___len__() -> "unsigned int":
    """itkFixedArrayD6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayD6___len__()

class itkFixedArrayF1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayF1') -> "bool":
        """__eq__(itkFixedArrayF1 self, itkFixedArrayF1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayF1') -> "bool":
        """__ne__(itkFixedArrayF1 self, itkFixedArrayF1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'float const &') -> "void":
        """
        SetElement(itkFixedArrayF1 self, unsigned short index, float const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayF1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "float const &":
        """GetElement(itkFixedArrayF1 self, unsigned short index) -> float const &"""
        return _itkFixedArrayPython.itkFixedArrayF1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "float const *":
        """
        GetDataPointer(itkFixedArrayF1 self) -> float
        GetDataPointer(itkFixedArrayF1 self) -> float const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayF1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayF1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF1_Size(self)


    def Fill(self, arg0: 'float const &') -> "void":
        """Fill(itkFixedArrayF1 self, float const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayF1_Fill(self, arg0)


    def Filled(arg0: 'float const &') -> "itkFixedArrayF1":
        """Filled(float const & arg0) -> itkFixedArrayF1"""
        return _itkFixedArrayPython.itkFixedArrayF1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayF1 self) -> itkFixedArrayF1
        __init__(itkFixedArrayF1 self, float const * r) -> itkFixedArrayF1
        __init__(itkFixedArrayF1 self, float const & r) -> itkFixedArrayF1
        __init__(itkFixedArrayF1 self, itkFixedArrayF1 arg0) -> itkFixedArrayF1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayF1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF1

    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkFixedArrayF1 self, unsigned long d) -> float"""
        return _itkFixedArrayPython.itkFixedArrayF1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkFixedArrayF1 self, unsigned long d, float v)"""
        return _itkFixedArrayPython.itkFixedArrayF1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayF1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayF1___repr__(self)

itkFixedArrayF1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1___eq__, None, itkFixedArrayF1)
itkFixedArrayF1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1___ne__, None, itkFixedArrayF1)
itkFixedArrayF1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1_SetElement, None, itkFixedArrayF1)
itkFixedArrayF1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1_GetElement, None, itkFixedArrayF1)
itkFixedArrayF1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1_GetDataPointer, None, itkFixedArrayF1)
itkFixedArrayF1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1_Size, None, itkFixedArrayF1)
itkFixedArrayF1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1_Fill, None, itkFixedArrayF1)
itkFixedArrayF1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1___getitem__, None, itkFixedArrayF1)
itkFixedArrayF1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1___setitem__, None, itkFixedArrayF1)
itkFixedArrayF1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF1___repr__, None, itkFixedArrayF1)
itkFixedArrayF1_swigregister = _itkFixedArrayPython.itkFixedArrayF1_swigregister
itkFixedArrayF1_swigregister(itkFixedArrayF1)

def itkFixedArrayF1_Filled(arg0: 'float const &') -> "itkFixedArrayF1":
    """itkFixedArrayF1_Filled(float const & arg0) -> itkFixedArrayF1"""
    return _itkFixedArrayPython.itkFixedArrayF1_Filled(arg0)

def itkFixedArrayF1___len__() -> "unsigned int":
    """itkFixedArrayF1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayF1___len__()

class itkFixedArrayF2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayF2') -> "bool":
        """__eq__(itkFixedArrayF2 self, itkFixedArrayF2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayF2') -> "bool":
        """__ne__(itkFixedArrayF2 self, itkFixedArrayF2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'float const &') -> "void":
        """
        SetElement(itkFixedArrayF2 self, unsigned short index, float const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayF2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "float const &":
        """GetElement(itkFixedArrayF2 self, unsigned short index) -> float const &"""
        return _itkFixedArrayPython.itkFixedArrayF2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "float const *":
        """
        GetDataPointer(itkFixedArrayF2 self) -> float
        GetDataPointer(itkFixedArrayF2 self) -> float const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayF2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayF2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF2_Size(self)


    def Fill(self, arg0: 'float const &') -> "void":
        """Fill(itkFixedArrayF2 self, float const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayF2_Fill(self, arg0)


    def Filled(arg0: 'float const &') -> "itkFixedArrayF2":
        """Filled(float const & arg0) -> itkFixedArrayF2"""
        return _itkFixedArrayPython.itkFixedArrayF2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayF2 self) -> itkFixedArrayF2
        __init__(itkFixedArrayF2 self, float const * r) -> itkFixedArrayF2
        __init__(itkFixedArrayF2 self, float const & r) -> itkFixedArrayF2
        __init__(itkFixedArrayF2 self, itkFixedArrayF2 arg0) -> itkFixedArrayF2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayF2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF2

    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkFixedArrayF2 self, unsigned long d) -> float"""
        return _itkFixedArrayPython.itkFixedArrayF2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkFixedArrayF2 self, unsigned long d, float v)"""
        return _itkFixedArrayPython.itkFixedArrayF2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayF2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayF2___repr__(self)

itkFixedArrayF2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2___eq__, None, itkFixedArrayF2)
itkFixedArrayF2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2___ne__, None, itkFixedArrayF2)
itkFixedArrayF2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2_SetElement, None, itkFixedArrayF2)
itkFixedArrayF2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2_GetElement, None, itkFixedArrayF2)
itkFixedArrayF2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2_GetDataPointer, None, itkFixedArrayF2)
itkFixedArrayF2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2_Size, None, itkFixedArrayF2)
itkFixedArrayF2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2_Fill, None, itkFixedArrayF2)
itkFixedArrayF2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2___getitem__, None, itkFixedArrayF2)
itkFixedArrayF2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2___setitem__, None, itkFixedArrayF2)
itkFixedArrayF2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF2___repr__, None, itkFixedArrayF2)
itkFixedArrayF2_swigregister = _itkFixedArrayPython.itkFixedArrayF2_swigregister
itkFixedArrayF2_swigregister(itkFixedArrayF2)

def itkFixedArrayF2_Filled(arg0: 'float const &') -> "itkFixedArrayF2":
    """itkFixedArrayF2_Filled(float const & arg0) -> itkFixedArrayF2"""
    return _itkFixedArrayPython.itkFixedArrayF2_Filled(arg0)

def itkFixedArrayF2___len__() -> "unsigned int":
    """itkFixedArrayF2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayF2___len__()

class itkFixedArrayF3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayF3') -> "bool":
        """__eq__(itkFixedArrayF3 self, itkFixedArrayF3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayF3') -> "bool":
        """__ne__(itkFixedArrayF3 self, itkFixedArrayF3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'float const &') -> "void":
        """
        SetElement(itkFixedArrayF3 self, unsigned short index, float const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayF3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "float const &":
        """GetElement(itkFixedArrayF3 self, unsigned short index) -> float const &"""
        return _itkFixedArrayPython.itkFixedArrayF3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "float const *":
        """
        GetDataPointer(itkFixedArrayF3 self) -> float
        GetDataPointer(itkFixedArrayF3 self) -> float const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayF3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayF3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF3_Size(self)


    def Fill(self, arg0: 'float const &') -> "void":
        """Fill(itkFixedArrayF3 self, float const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayF3_Fill(self, arg0)


    def Filled(arg0: 'float const &') -> "itkFixedArrayF3":
        """Filled(float const & arg0) -> itkFixedArrayF3"""
        return _itkFixedArrayPython.itkFixedArrayF3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayF3 self) -> itkFixedArrayF3
        __init__(itkFixedArrayF3 self, float const * r) -> itkFixedArrayF3
        __init__(itkFixedArrayF3 self, float const & r) -> itkFixedArrayF3
        __init__(itkFixedArrayF3 self, itkFixedArrayF3 arg0) -> itkFixedArrayF3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayF3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF3

    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkFixedArrayF3 self, unsigned long d) -> float"""
        return _itkFixedArrayPython.itkFixedArrayF3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkFixedArrayF3 self, unsigned long d, float v)"""
        return _itkFixedArrayPython.itkFixedArrayF3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayF3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayF3___repr__(self)

itkFixedArrayF3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3___eq__, None, itkFixedArrayF3)
itkFixedArrayF3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3___ne__, None, itkFixedArrayF3)
itkFixedArrayF3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3_SetElement, None, itkFixedArrayF3)
itkFixedArrayF3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3_GetElement, None, itkFixedArrayF3)
itkFixedArrayF3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3_GetDataPointer, None, itkFixedArrayF3)
itkFixedArrayF3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3_Size, None, itkFixedArrayF3)
itkFixedArrayF3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3_Fill, None, itkFixedArrayF3)
itkFixedArrayF3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3___getitem__, None, itkFixedArrayF3)
itkFixedArrayF3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3___setitem__, None, itkFixedArrayF3)
itkFixedArrayF3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF3___repr__, None, itkFixedArrayF3)
itkFixedArrayF3_swigregister = _itkFixedArrayPython.itkFixedArrayF3_swigregister
itkFixedArrayF3_swigregister(itkFixedArrayF3)

def itkFixedArrayF3_Filled(arg0: 'float const &') -> "itkFixedArrayF3":
    """itkFixedArrayF3_Filled(float const & arg0) -> itkFixedArrayF3"""
    return _itkFixedArrayPython.itkFixedArrayF3_Filled(arg0)

def itkFixedArrayF3___len__() -> "unsigned int":
    """itkFixedArrayF3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayF3___len__()

class itkFixedArrayF4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayF4') -> "bool":
        """__eq__(itkFixedArrayF4 self, itkFixedArrayF4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayF4') -> "bool":
        """__ne__(itkFixedArrayF4 self, itkFixedArrayF4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'float const &') -> "void":
        """
        SetElement(itkFixedArrayF4 self, unsigned short index, float const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayF4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "float const &":
        """GetElement(itkFixedArrayF4 self, unsigned short index) -> float const &"""
        return _itkFixedArrayPython.itkFixedArrayF4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "float const *":
        """
        GetDataPointer(itkFixedArrayF4 self) -> float
        GetDataPointer(itkFixedArrayF4 self) -> float const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayF4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayF4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF4_Size(self)


    def Fill(self, arg0: 'float const &') -> "void":
        """Fill(itkFixedArrayF4 self, float const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayF4_Fill(self, arg0)


    def Filled(arg0: 'float const &') -> "itkFixedArrayF4":
        """Filled(float const & arg0) -> itkFixedArrayF4"""
        return _itkFixedArrayPython.itkFixedArrayF4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayF4 self) -> itkFixedArrayF4
        __init__(itkFixedArrayF4 self, float const * r) -> itkFixedArrayF4
        __init__(itkFixedArrayF4 self, float const & r) -> itkFixedArrayF4
        __init__(itkFixedArrayF4 self, itkFixedArrayF4 arg0) -> itkFixedArrayF4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayF4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF4

    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkFixedArrayF4 self, unsigned long d) -> float"""
        return _itkFixedArrayPython.itkFixedArrayF4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkFixedArrayF4 self, unsigned long d, float v)"""
        return _itkFixedArrayPython.itkFixedArrayF4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayF4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayF4___repr__(self)

itkFixedArrayF4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4___eq__, None, itkFixedArrayF4)
itkFixedArrayF4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4___ne__, None, itkFixedArrayF4)
itkFixedArrayF4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4_SetElement, None, itkFixedArrayF4)
itkFixedArrayF4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4_GetElement, None, itkFixedArrayF4)
itkFixedArrayF4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4_GetDataPointer, None, itkFixedArrayF4)
itkFixedArrayF4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4_Size, None, itkFixedArrayF4)
itkFixedArrayF4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4_Fill, None, itkFixedArrayF4)
itkFixedArrayF4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4___getitem__, None, itkFixedArrayF4)
itkFixedArrayF4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4___setitem__, None, itkFixedArrayF4)
itkFixedArrayF4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF4___repr__, None, itkFixedArrayF4)
itkFixedArrayF4_swigregister = _itkFixedArrayPython.itkFixedArrayF4_swigregister
itkFixedArrayF4_swigregister(itkFixedArrayF4)

def itkFixedArrayF4_Filled(arg0: 'float const &') -> "itkFixedArrayF4":
    """itkFixedArrayF4_Filled(float const & arg0) -> itkFixedArrayF4"""
    return _itkFixedArrayPython.itkFixedArrayF4_Filled(arg0)

def itkFixedArrayF4___len__() -> "unsigned int":
    """itkFixedArrayF4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayF4___len__()

class itkFixedArrayF5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayF5') -> "bool":
        """__eq__(itkFixedArrayF5 self, itkFixedArrayF5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayF5') -> "bool":
        """__ne__(itkFixedArrayF5 self, itkFixedArrayF5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'float const &') -> "void":
        """
        SetElement(itkFixedArrayF5 self, unsigned short index, float const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayF5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "float const &":
        """GetElement(itkFixedArrayF5 self, unsigned short index) -> float const &"""
        return _itkFixedArrayPython.itkFixedArrayF5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "float const *":
        """
        GetDataPointer(itkFixedArrayF5 self) -> float
        GetDataPointer(itkFixedArrayF5 self) -> float const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayF5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayF5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF5_Size(self)


    def Fill(self, arg0: 'float const &') -> "void":
        """Fill(itkFixedArrayF5 self, float const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayF5_Fill(self, arg0)


    def Filled(arg0: 'float const &') -> "itkFixedArrayF5":
        """Filled(float const & arg0) -> itkFixedArrayF5"""
        return _itkFixedArrayPython.itkFixedArrayF5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayF5 self) -> itkFixedArrayF5
        __init__(itkFixedArrayF5 self, float const * r) -> itkFixedArrayF5
        __init__(itkFixedArrayF5 self, float const & r) -> itkFixedArrayF5
        __init__(itkFixedArrayF5 self, itkFixedArrayF5 arg0) -> itkFixedArrayF5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayF5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF5

    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkFixedArrayF5 self, unsigned long d) -> float"""
        return _itkFixedArrayPython.itkFixedArrayF5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkFixedArrayF5 self, unsigned long d, float v)"""
        return _itkFixedArrayPython.itkFixedArrayF5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayF5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayF5___repr__(self)

itkFixedArrayF5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5___eq__, None, itkFixedArrayF5)
itkFixedArrayF5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5___ne__, None, itkFixedArrayF5)
itkFixedArrayF5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5_SetElement, None, itkFixedArrayF5)
itkFixedArrayF5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5_GetElement, None, itkFixedArrayF5)
itkFixedArrayF5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5_GetDataPointer, None, itkFixedArrayF5)
itkFixedArrayF5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5_Size, None, itkFixedArrayF5)
itkFixedArrayF5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5_Fill, None, itkFixedArrayF5)
itkFixedArrayF5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5___getitem__, None, itkFixedArrayF5)
itkFixedArrayF5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5___setitem__, None, itkFixedArrayF5)
itkFixedArrayF5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF5___repr__, None, itkFixedArrayF5)
itkFixedArrayF5_swigregister = _itkFixedArrayPython.itkFixedArrayF5_swigregister
itkFixedArrayF5_swigregister(itkFixedArrayF5)

def itkFixedArrayF5_Filled(arg0: 'float const &') -> "itkFixedArrayF5":
    """itkFixedArrayF5_Filled(float const & arg0) -> itkFixedArrayF5"""
    return _itkFixedArrayPython.itkFixedArrayF5_Filled(arg0)

def itkFixedArrayF5___len__() -> "unsigned int":
    """itkFixedArrayF5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayF5___len__()

class itkFixedArrayF6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayF6') -> "bool":
        """__eq__(itkFixedArrayF6 self, itkFixedArrayF6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayF6') -> "bool":
        """__ne__(itkFixedArrayF6 self, itkFixedArrayF6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayF6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'float const &') -> "void":
        """
        SetElement(itkFixedArrayF6 self, unsigned short index, float const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayF6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "float const &":
        """GetElement(itkFixedArrayF6 self, unsigned short index) -> float const &"""
        return _itkFixedArrayPython.itkFixedArrayF6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "float const *":
        """
        GetDataPointer(itkFixedArrayF6 self) -> float
        GetDataPointer(itkFixedArrayF6 self) -> float const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayF6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayF6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF6_Size(self)


    def Fill(self, arg0: 'float const &') -> "void":
        """Fill(itkFixedArrayF6 self, float const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayF6_Fill(self, arg0)


    def Filled(arg0: 'float const &') -> "itkFixedArrayF6":
        """Filled(float const & arg0) -> itkFixedArrayF6"""
        return _itkFixedArrayPython.itkFixedArrayF6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayF6 self) -> itkFixedArrayF6
        __init__(itkFixedArrayF6 self, float const * r) -> itkFixedArrayF6
        __init__(itkFixedArrayF6 self, float const & r) -> itkFixedArrayF6
        __init__(itkFixedArrayF6 self, itkFixedArrayF6 arg0) -> itkFixedArrayF6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayF6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayF6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayF6

    def __getitem__(self, d: 'unsigned long') -> "float":
        """__getitem__(itkFixedArrayF6 self, unsigned long d) -> float"""
        return _itkFixedArrayPython.itkFixedArrayF6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'float') -> "void":
        """__setitem__(itkFixedArrayF6 self, unsigned long d, float v)"""
        return _itkFixedArrayPython.itkFixedArrayF6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayF6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayF6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayF6___repr__(self)

itkFixedArrayF6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6___eq__, None, itkFixedArrayF6)
itkFixedArrayF6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6___ne__, None, itkFixedArrayF6)
itkFixedArrayF6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6_SetElement, None, itkFixedArrayF6)
itkFixedArrayF6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6_GetElement, None, itkFixedArrayF6)
itkFixedArrayF6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6_GetDataPointer, None, itkFixedArrayF6)
itkFixedArrayF6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6_Size, None, itkFixedArrayF6)
itkFixedArrayF6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6_Fill, None, itkFixedArrayF6)
itkFixedArrayF6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6___getitem__, None, itkFixedArrayF6)
itkFixedArrayF6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6___setitem__, None, itkFixedArrayF6)
itkFixedArrayF6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayF6___repr__, None, itkFixedArrayF6)
itkFixedArrayF6_swigregister = _itkFixedArrayPython.itkFixedArrayF6_swigregister
itkFixedArrayF6_swigregister(itkFixedArrayF6)

def itkFixedArrayF6_Filled(arg0: 'float const &') -> "itkFixedArrayF6":
    """itkFixedArrayF6_Filled(float const & arg0) -> itkFixedArrayF6"""
    return _itkFixedArrayPython.itkFixedArrayF6_Filled(arg0)

def itkFixedArrayF6___len__() -> "unsigned int":
    """itkFixedArrayF6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayF6___len__()

class itkFixedArraySC1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySC1') -> "bool":
        """__eq__(itkFixedArraySC1 self, itkFixedArraySC1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySC1') -> "bool":
        """__ne__(itkFixedArraySC1 self, itkFixedArraySC1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'signed char const &') -> "void":
        """
        SetElement(itkFixedArraySC1 self, unsigned short index, signed char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySC1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "signed char const &":
        """GetElement(itkFixedArraySC1 self, unsigned short index) -> signed char const &"""
        return _itkFixedArrayPython.itkFixedArraySC1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "signed char const *":
        """
        GetDataPointer(itkFixedArraySC1 self) -> signed char
        GetDataPointer(itkFixedArraySC1 self) -> signed char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySC1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySC1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC1_Size(self)


    def Fill(self, arg0: 'signed char const &') -> "void":
        """Fill(itkFixedArraySC1 self, signed char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySC1_Fill(self, arg0)


    def Filled(arg0: 'signed char const &') -> "itkFixedArraySC1":
        """Filled(signed char const & arg0) -> itkFixedArraySC1"""
        return _itkFixedArrayPython.itkFixedArraySC1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySC1 self) -> itkFixedArraySC1
        __init__(itkFixedArraySC1 self, signed char const * r) -> itkFixedArraySC1
        __init__(itkFixedArraySC1 self, signed char const & r) -> itkFixedArraySC1
        __init__(itkFixedArraySC1 self, itkFixedArraySC1 arg0) -> itkFixedArraySC1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySC1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC1

    def __getitem__(self, d: 'unsigned long') -> "signed char":
        """__getitem__(itkFixedArraySC1 self, unsigned long d) -> signed char"""
        return _itkFixedArrayPython.itkFixedArraySC1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'signed char') -> "void":
        """__setitem__(itkFixedArraySC1 self, unsigned long d, signed char v)"""
        return _itkFixedArrayPython.itkFixedArraySC1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySC1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySC1___repr__(self)

itkFixedArraySC1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1___eq__, None, itkFixedArraySC1)
itkFixedArraySC1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1___ne__, None, itkFixedArraySC1)
itkFixedArraySC1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1_SetElement, None, itkFixedArraySC1)
itkFixedArraySC1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1_GetElement, None, itkFixedArraySC1)
itkFixedArraySC1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1_GetDataPointer, None, itkFixedArraySC1)
itkFixedArraySC1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1_Size, None, itkFixedArraySC1)
itkFixedArraySC1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1_Fill, None, itkFixedArraySC1)
itkFixedArraySC1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1___getitem__, None, itkFixedArraySC1)
itkFixedArraySC1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1___setitem__, None, itkFixedArraySC1)
itkFixedArraySC1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC1___repr__, None, itkFixedArraySC1)
itkFixedArraySC1_swigregister = _itkFixedArrayPython.itkFixedArraySC1_swigregister
itkFixedArraySC1_swigregister(itkFixedArraySC1)

def itkFixedArraySC1_Filled(arg0: 'signed char const &') -> "itkFixedArraySC1":
    """itkFixedArraySC1_Filled(signed char const & arg0) -> itkFixedArraySC1"""
    return _itkFixedArrayPython.itkFixedArraySC1_Filled(arg0)

def itkFixedArraySC1___len__() -> "unsigned int":
    """itkFixedArraySC1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySC1___len__()

class itkFixedArraySC2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySC2') -> "bool":
        """__eq__(itkFixedArraySC2 self, itkFixedArraySC2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySC2') -> "bool":
        """__ne__(itkFixedArraySC2 self, itkFixedArraySC2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'signed char const &') -> "void":
        """
        SetElement(itkFixedArraySC2 self, unsigned short index, signed char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySC2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "signed char const &":
        """GetElement(itkFixedArraySC2 self, unsigned short index) -> signed char const &"""
        return _itkFixedArrayPython.itkFixedArraySC2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "signed char const *":
        """
        GetDataPointer(itkFixedArraySC2 self) -> signed char
        GetDataPointer(itkFixedArraySC2 self) -> signed char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySC2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySC2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC2_Size(self)


    def Fill(self, arg0: 'signed char const &') -> "void":
        """Fill(itkFixedArraySC2 self, signed char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySC2_Fill(self, arg0)


    def Filled(arg0: 'signed char const &') -> "itkFixedArraySC2":
        """Filled(signed char const & arg0) -> itkFixedArraySC2"""
        return _itkFixedArrayPython.itkFixedArraySC2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySC2 self) -> itkFixedArraySC2
        __init__(itkFixedArraySC2 self, signed char const * r) -> itkFixedArraySC2
        __init__(itkFixedArraySC2 self, signed char const & r) -> itkFixedArraySC2
        __init__(itkFixedArraySC2 self, itkFixedArraySC2 arg0) -> itkFixedArraySC2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySC2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC2

    def __getitem__(self, d: 'unsigned long') -> "signed char":
        """__getitem__(itkFixedArraySC2 self, unsigned long d) -> signed char"""
        return _itkFixedArrayPython.itkFixedArraySC2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'signed char') -> "void":
        """__setitem__(itkFixedArraySC2 self, unsigned long d, signed char v)"""
        return _itkFixedArrayPython.itkFixedArraySC2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySC2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySC2___repr__(self)

itkFixedArraySC2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2___eq__, None, itkFixedArraySC2)
itkFixedArraySC2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2___ne__, None, itkFixedArraySC2)
itkFixedArraySC2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2_SetElement, None, itkFixedArraySC2)
itkFixedArraySC2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2_GetElement, None, itkFixedArraySC2)
itkFixedArraySC2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2_GetDataPointer, None, itkFixedArraySC2)
itkFixedArraySC2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2_Size, None, itkFixedArraySC2)
itkFixedArraySC2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2_Fill, None, itkFixedArraySC2)
itkFixedArraySC2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2___getitem__, None, itkFixedArraySC2)
itkFixedArraySC2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2___setitem__, None, itkFixedArraySC2)
itkFixedArraySC2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC2___repr__, None, itkFixedArraySC2)
itkFixedArraySC2_swigregister = _itkFixedArrayPython.itkFixedArraySC2_swigregister
itkFixedArraySC2_swigregister(itkFixedArraySC2)

def itkFixedArraySC2_Filled(arg0: 'signed char const &') -> "itkFixedArraySC2":
    """itkFixedArraySC2_Filled(signed char const & arg0) -> itkFixedArraySC2"""
    return _itkFixedArrayPython.itkFixedArraySC2_Filled(arg0)

def itkFixedArraySC2___len__() -> "unsigned int":
    """itkFixedArraySC2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySC2___len__()

class itkFixedArraySC3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySC3') -> "bool":
        """__eq__(itkFixedArraySC3 self, itkFixedArraySC3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySC3') -> "bool":
        """__ne__(itkFixedArraySC3 self, itkFixedArraySC3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'signed char const &') -> "void":
        """
        SetElement(itkFixedArraySC3 self, unsigned short index, signed char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySC3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "signed char const &":
        """GetElement(itkFixedArraySC3 self, unsigned short index) -> signed char const &"""
        return _itkFixedArrayPython.itkFixedArraySC3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "signed char const *":
        """
        GetDataPointer(itkFixedArraySC3 self) -> signed char
        GetDataPointer(itkFixedArraySC3 self) -> signed char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySC3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySC3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC3_Size(self)


    def Fill(self, arg0: 'signed char const &') -> "void":
        """Fill(itkFixedArraySC3 self, signed char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySC3_Fill(self, arg0)


    def Filled(arg0: 'signed char const &') -> "itkFixedArraySC3":
        """Filled(signed char const & arg0) -> itkFixedArraySC3"""
        return _itkFixedArrayPython.itkFixedArraySC3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySC3 self) -> itkFixedArraySC3
        __init__(itkFixedArraySC3 self, signed char const * r) -> itkFixedArraySC3
        __init__(itkFixedArraySC3 self, signed char const & r) -> itkFixedArraySC3
        __init__(itkFixedArraySC3 self, itkFixedArraySC3 arg0) -> itkFixedArraySC3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySC3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC3

    def __getitem__(self, d: 'unsigned long') -> "signed char":
        """__getitem__(itkFixedArraySC3 self, unsigned long d) -> signed char"""
        return _itkFixedArrayPython.itkFixedArraySC3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'signed char') -> "void":
        """__setitem__(itkFixedArraySC3 self, unsigned long d, signed char v)"""
        return _itkFixedArrayPython.itkFixedArraySC3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySC3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySC3___repr__(self)

itkFixedArraySC3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3___eq__, None, itkFixedArraySC3)
itkFixedArraySC3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3___ne__, None, itkFixedArraySC3)
itkFixedArraySC3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3_SetElement, None, itkFixedArraySC3)
itkFixedArraySC3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3_GetElement, None, itkFixedArraySC3)
itkFixedArraySC3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3_GetDataPointer, None, itkFixedArraySC3)
itkFixedArraySC3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3_Size, None, itkFixedArraySC3)
itkFixedArraySC3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3_Fill, None, itkFixedArraySC3)
itkFixedArraySC3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3___getitem__, None, itkFixedArraySC3)
itkFixedArraySC3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3___setitem__, None, itkFixedArraySC3)
itkFixedArraySC3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC3___repr__, None, itkFixedArraySC3)
itkFixedArraySC3_swigregister = _itkFixedArrayPython.itkFixedArraySC3_swigregister
itkFixedArraySC3_swigregister(itkFixedArraySC3)

def itkFixedArraySC3_Filled(arg0: 'signed char const &') -> "itkFixedArraySC3":
    """itkFixedArraySC3_Filled(signed char const & arg0) -> itkFixedArraySC3"""
    return _itkFixedArrayPython.itkFixedArraySC3_Filled(arg0)

def itkFixedArraySC3___len__() -> "unsigned int":
    """itkFixedArraySC3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySC3___len__()

class itkFixedArraySC4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySC4') -> "bool":
        """__eq__(itkFixedArraySC4 self, itkFixedArraySC4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySC4') -> "bool":
        """__ne__(itkFixedArraySC4 self, itkFixedArraySC4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'signed char const &') -> "void":
        """
        SetElement(itkFixedArraySC4 self, unsigned short index, signed char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySC4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "signed char const &":
        """GetElement(itkFixedArraySC4 self, unsigned short index) -> signed char const &"""
        return _itkFixedArrayPython.itkFixedArraySC4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "signed char const *":
        """
        GetDataPointer(itkFixedArraySC4 self) -> signed char
        GetDataPointer(itkFixedArraySC4 self) -> signed char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySC4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySC4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC4_Size(self)


    def Fill(self, arg0: 'signed char const &') -> "void":
        """Fill(itkFixedArraySC4 self, signed char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySC4_Fill(self, arg0)


    def Filled(arg0: 'signed char const &') -> "itkFixedArraySC4":
        """Filled(signed char const & arg0) -> itkFixedArraySC4"""
        return _itkFixedArrayPython.itkFixedArraySC4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySC4 self) -> itkFixedArraySC4
        __init__(itkFixedArraySC4 self, signed char const * r) -> itkFixedArraySC4
        __init__(itkFixedArraySC4 self, signed char const & r) -> itkFixedArraySC4
        __init__(itkFixedArraySC4 self, itkFixedArraySC4 arg0) -> itkFixedArraySC4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySC4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC4

    def __getitem__(self, d: 'unsigned long') -> "signed char":
        """__getitem__(itkFixedArraySC4 self, unsigned long d) -> signed char"""
        return _itkFixedArrayPython.itkFixedArraySC4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'signed char') -> "void":
        """__setitem__(itkFixedArraySC4 self, unsigned long d, signed char v)"""
        return _itkFixedArrayPython.itkFixedArraySC4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySC4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySC4___repr__(self)

itkFixedArraySC4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4___eq__, None, itkFixedArraySC4)
itkFixedArraySC4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4___ne__, None, itkFixedArraySC4)
itkFixedArraySC4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4_SetElement, None, itkFixedArraySC4)
itkFixedArraySC4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4_GetElement, None, itkFixedArraySC4)
itkFixedArraySC4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4_GetDataPointer, None, itkFixedArraySC4)
itkFixedArraySC4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4_Size, None, itkFixedArraySC4)
itkFixedArraySC4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4_Fill, None, itkFixedArraySC4)
itkFixedArraySC4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4___getitem__, None, itkFixedArraySC4)
itkFixedArraySC4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4___setitem__, None, itkFixedArraySC4)
itkFixedArraySC4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC4___repr__, None, itkFixedArraySC4)
itkFixedArraySC4_swigregister = _itkFixedArrayPython.itkFixedArraySC4_swigregister
itkFixedArraySC4_swigregister(itkFixedArraySC4)

def itkFixedArraySC4_Filled(arg0: 'signed char const &') -> "itkFixedArraySC4":
    """itkFixedArraySC4_Filled(signed char const & arg0) -> itkFixedArraySC4"""
    return _itkFixedArrayPython.itkFixedArraySC4_Filled(arg0)

def itkFixedArraySC4___len__() -> "unsigned int":
    """itkFixedArraySC4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySC4___len__()

class itkFixedArraySC5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySC5') -> "bool":
        """__eq__(itkFixedArraySC5 self, itkFixedArraySC5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySC5') -> "bool":
        """__ne__(itkFixedArraySC5 self, itkFixedArraySC5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'signed char const &') -> "void":
        """
        SetElement(itkFixedArraySC5 self, unsigned short index, signed char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySC5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "signed char const &":
        """GetElement(itkFixedArraySC5 self, unsigned short index) -> signed char const &"""
        return _itkFixedArrayPython.itkFixedArraySC5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "signed char const *":
        """
        GetDataPointer(itkFixedArraySC5 self) -> signed char
        GetDataPointer(itkFixedArraySC5 self) -> signed char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySC5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySC5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC5_Size(self)


    def Fill(self, arg0: 'signed char const &') -> "void":
        """Fill(itkFixedArraySC5 self, signed char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySC5_Fill(self, arg0)


    def Filled(arg0: 'signed char const &') -> "itkFixedArraySC5":
        """Filled(signed char const & arg0) -> itkFixedArraySC5"""
        return _itkFixedArrayPython.itkFixedArraySC5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySC5 self) -> itkFixedArraySC5
        __init__(itkFixedArraySC5 self, signed char const * r) -> itkFixedArraySC5
        __init__(itkFixedArraySC5 self, signed char const & r) -> itkFixedArraySC5
        __init__(itkFixedArraySC5 self, itkFixedArraySC5 arg0) -> itkFixedArraySC5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySC5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC5

    def __getitem__(self, d: 'unsigned long') -> "signed char":
        """__getitem__(itkFixedArraySC5 self, unsigned long d) -> signed char"""
        return _itkFixedArrayPython.itkFixedArraySC5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'signed char') -> "void":
        """__setitem__(itkFixedArraySC5 self, unsigned long d, signed char v)"""
        return _itkFixedArrayPython.itkFixedArraySC5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySC5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySC5___repr__(self)

itkFixedArraySC5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5___eq__, None, itkFixedArraySC5)
itkFixedArraySC5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5___ne__, None, itkFixedArraySC5)
itkFixedArraySC5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5_SetElement, None, itkFixedArraySC5)
itkFixedArraySC5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5_GetElement, None, itkFixedArraySC5)
itkFixedArraySC5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5_GetDataPointer, None, itkFixedArraySC5)
itkFixedArraySC5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5_Size, None, itkFixedArraySC5)
itkFixedArraySC5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5_Fill, None, itkFixedArraySC5)
itkFixedArraySC5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5___getitem__, None, itkFixedArraySC5)
itkFixedArraySC5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5___setitem__, None, itkFixedArraySC5)
itkFixedArraySC5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC5___repr__, None, itkFixedArraySC5)
itkFixedArraySC5_swigregister = _itkFixedArrayPython.itkFixedArraySC5_swigregister
itkFixedArraySC5_swigregister(itkFixedArraySC5)

def itkFixedArraySC5_Filled(arg0: 'signed char const &') -> "itkFixedArraySC5":
    """itkFixedArraySC5_Filled(signed char const & arg0) -> itkFixedArraySC5"""
    return _itkFixedArrayPython.itkFixedArraySC5_Filled(arg0)

def itkFixedArraySC5___len__() -> "unsigned int":
    """itkFixedArraySC5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySC5___len__()

class itkFixedArraySC6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySC6') -> "bool":
        """__eq__(itkFixedArraySC6 self, itkFixedArraySC6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySC6') -> "bool":
        """__ne__(itkFixedArraySC6 self, itkFixedArraySC6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySC6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'signed char const &') -> "void":
        """
        SetElement(itkFixedArraySC6 self, unsigned short index, signed char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySC6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "signed char const &":
        """GetElement(itkFixedArraySC6 self, unsigned short index) -> signed char const &"""
        return _itkFixedArrayPython.itkFixedArraySC6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "signed char const *":
        """
        GetDataPointer(itkFixedArraySC6 self) -> signed char
        GetDataPointer(itkFixedArraySC6 self) -> signed char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySC6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySC6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC6_Size(self)


    def Fill(self, arg0: 'signed char const &') -> "void":
        """Fill(itkFixedArraySC6 self, signed char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySC6_Fill(self, arg0)


    def Filled(arg0: 'signed char const &') -> "itkFixedArraySC6":
        """Filled(signed char const & arg0) -> itkFixedArraySC6"""
        return _itkFixedArrayPython.itkFixedArraySC6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySC6 self) -> itkFixedArraySC6
        __init__(itkFixedArraySC6 self, signed char const * r) -> itkFixedArraySC6
        __init__(itkFixedArraySC6 self, signed char const & r) -> itkFixedArraySC6
        __init__(itkFixedArraySC6 self, itkFixedArraySC6 arg0) -> itkFixedArraySC6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySC6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySC6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySC6

    def __getitem__(self, d: 'unsigned long') -> "signed char":
        """__getitem__(itkFixedArraySC6 self, unsigned long d) -> signed char"""
        return _itkFixedArrayPython.itkFixedArraySC6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'signed char') -> "void":
        """__setitem__(itkFixedArraySC6 self, unsigned long d, signed char v)"""
        return _itkFixedArrayPython.itkFixedArraySC6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySC6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySC6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySC6___repr__(self)

itkFixedArraySC6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6___eq__, None, itkFixedArraySC6)
itkFixedArraySC6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6___ne__, None, itkFixedArraySC6)
itkFixedArraySC6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6_SetElement, None, itkFixedArraySC6)
itkFixedArraySC6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6_GetElement, None, itkFixedArraySC6)
itkFixedArraySC6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6_GetDataPointer, None, itkFixedArraySC6)
itkFixedArraySC6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6_Size, None, itkFixedArraySC6)
itkFixedArraySC6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6_Fill, None, itkFixedArraySC6)
itkFixedArraySC6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6___getitem__, None, itkFixedArraySC6)
itkFixedArraySC6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6___setitem__, None, itkFixedArraySC6)
itkFixedArraySC6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySC6___repr__, None, itkFixedArraySC6)
itkFixedArraySC6_swigregister = _itkFixedArrayPython.itkFixedArraySC6_swigregister
itkFixedArraySC6_swigregister(itkFixedArraySC6)

def itkFixedArraySC6_Filled(arg0: 'signed char const &') -> "itkFixedArraySC6":
    """itkFixedArraySC6_Filled(signed char const & arg0) -> itkFixedArraySC6"""
    return _itkFixedArrayPython.itkFixedArraySC6_Filled(arg0)

def itkFixedArraySC6___len__() -> "unsigned int":
    """itkFixedArraySC6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySC6___len__()

class itkFixedArraySL1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySL1') -> "bool":
        """__eq__(itkFixedArraySL1 self, itkFixedArraySL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySL1') -> "bool":
        """__ne__(itkFixedArraySL1 self, itkFixedArraySL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long const &') -> "void":
        """
        SetElement(itkFixedArraySL1 self, unsigned short index, long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySL1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long const &":
        """GetElement(itkFixedArraySL1 self, unsigned short index) -> long const &"""
        return _itkFixedArrayPython.itkFixedArraySL1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long const *":
        """
        GetDataPointer(itkFixedArraySL1 self) -> long
        GetDataPointer(itkFixedArraySL1 self) -> long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySL1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySL1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL1_Size(self)


    def Fill(self, arg0: 'long const &') -> "void":
        """Fill(itkFixedArraySL1 self, long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySL1_Fill(self, arg0)


    def Filled(arg0: 'long const &') -> "itkFixedArraySL1":
        """Filled(long const & arg0) -> itkFixedArraySL1"""
        return _itkFixedArrayPython.itkFixedArraySL1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySL1 self) -> itkFixedArraySL1
        __init__(itkFixedArraySL1 self, long const * r) -> itkFixedArraySL1
        __init__(itkFixedArraySL1 self, long const & r) -> itkFixedArraySL1
        __init__(itkFixedArraySL1 self, itkFixedArraySL1 arg0) -> itkFixedArraySL1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL1

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkFixedArraySL1 self, unsigned long d) -> long"""
        return _itkFixedArrayPython.itkFixedArraySL1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkFixedArraySL1 self, unsigned long d, long v)"""
        return _itkFixedArrayPython.itkFixedArraySL1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySL1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySL1___repr__(self)

itkFixedArraySL1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1___eq__, None, itkFixedArraySL1)
itkFixedArraySL1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1___ne__, None, itkFixedArraySL1)
itkFixedArraySL1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1_SetElement, None, itkFixedArraySL1)
itkFixedArraySL1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1_GetElement, None, itkFixedArraySL1)
itkFixedArraySL1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1_GetDataPointer, None, itkFixedArraySL1)
itkFixedArraySL1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1_Size, None, itkFixedArraySL1)
itkFixedArraySL1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1_Fill, None, itkFixedArraySL1)
itkFixedArraySL1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1___getitem__, None, itkFixedArraySL1)
itkFixedArraySL1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1___setitem__, None, itkFixedArraySL1)
itkFixedArraySL1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL1___repr__, None, itkFixedArraySL1)
itkFixedArraySL1_swigregister = _itkFixedArrayPython.itkFixedArraySL1_swigregister
itkFixedArraySL1_swigregister(itkFixedArraySL1)

def itkFixedArraySL1_Filled(arg0: 'long const &') -> "itkFixedArraySL1":
    """itkFixedArraySL1_Filled(long const & arg0) -> itkFixedArraySL1"""
    return _itkFixedArrayPython.itkFixedArraySL1_Filled(arg0)

def itkFixedArraySL1___len__() -> "unsigned int":
    """itkFixedArraySL1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySL1___len__()

class itkFixedArraySL2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySL2') -> "bool":
        """__eq__(itkFixedArraySL2 self, itkFixedArraySL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySL2') -> "bool":
        """__ne__(itkFixedArraySL2 self, itkFixedArraySL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long const &') -> "void":
        """
        SetElement(itkFixedArraySL2 self, unsigned short index, long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySL2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long const &":
        """GetElement(itkFixedArraySL2 self, unsigned short index) -> long const &"""
        return _itkFixedArrayPython.itkFixedArraySL2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long const *":
        """
        GetDataPointer(itkFixedArraySL2 self) -> long
        GetDataPointer(itkFixedArraySL2 self) -> long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySL2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySL2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL2_Size(self)


    def Fill(self, arg0: 'long const &') -> "void":
        """Fill(itkFixedArraySL2 self, long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySL2_Fill(self, arg0)


    def Filled(arg0: 'long const &') -> "itkFixedArraySL2":
        """Filled(long const & arg0) -> itkFixedArraySL2"""
        return _itkFixedArrayPython.itkFixedArraySL2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySL2 self) -> itkFixedArraySL2
        __init__(itkFixedArraySL2 self, long const * r) -> itkFixedArraySL2
        __init__(itkFixedArraySL2 self, long const & r) -> itkFixedArraySL2
        __init__(itkFixedArraySL2 self, itkFixedArraySL2 arg0) -> itkFixedArraySL2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL2

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkFixedArraySL2 self, unsigned long d) -> long"""
        return _itkFixedArrayPython.itkFixedArraySL2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkFixedArraySL2 self, unsigned long d, long v)"""
        return _itkFixedArrayPython.itkFixedArraySL2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySL2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySL2___repr__(self)

itkFixedArraySL2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2___eq__, None, itkFixedArraySL2)
itkFixedArraySL2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2___ne__, None, itkFixedArraySL2)
itkFixedArraySL2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2_SetElement, None, itkFixedArraySL2)
itkFixedArraySL2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2_GetElement, None, itkFixedArraySL2)
itkFixedArraySL2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2_GetDataPointer, None, itkFixedArraySL2)
itkFixedArraySL2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2_Size, None, itkFixedArraySL2)
itkFixedArraySL2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2_Fill, None, itkFixedArraySL2)
itkFixedArraySL2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2___getitem__, None, itkFixedArraySL2)
itkFixedArraySL2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2___setitem__, None, itkFixedArraySL2)
itkFixedArraySL2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL2___repr__, None, itkFixedArraySL2)
itkFixedArraySL2_swigregister = _itkFixedArrayPython.itkFixedArraySL2_swigregister
itkFixedArraySL2_swigregister(itkFixedArraySL2)

def itkFixedArraySL2_Filled(arg0: 'long const &') -> "itkFixedArraySL2":
    """itkFixedArraySL2_Filled(long const & arg0) -> itkFixedArraySL2"""
    return _itkFixedArrayPython.itkFixedArraySL2_Filled(arg0)

def itkFixedArraySL2___len__() -> "unsigned int":
    """itkFixedArraySL2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySL2___len__()

class itkFixedArraySL3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySL3') -> "bool":
        """__eq__(itkFixedArraySL3 self, itkFixedArraySL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySL3') -> "bool":
        """__ne__(itkFixedArraySL3 self, itkFixedArraySL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long const &') -> "void":
        """
        SetElement(itkFixedArraySL3 self, unsigned short index, long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySL3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long const &":
        """GetElement(itkFixedArraySL3 self, unsigned short index) -> long const &"""
        return _itkFixedArrayPython.itkFixedArraySL3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long const *":
        """
        GetDataPointer(itkFixedArraySL3 self) -> long
        GetDataPointer(itkFixedArraySL3 self) -> long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySL3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySL3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL3_Size(self)


    def Fill(self, arg0: 'long const &') -> "void":
        """Fill(itkFixedArraySL3 self, long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySL3_Fill(self, arg0)


    def Filled(arg0: 'long const &') -> "itkFixedArraySL3":
        """Filled(long const & arg0) -> itkFixedArraySL3"""
        return _itkFixedArrayPython.itkFixedArraySL3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySL3 self) -> itkFixedArraySL3
        __init__(itkFixedArraySL3 self, long const * r) -> itkFixedArraySL3
        __init__(itkFixedArraySL3 self, long const & r) -> itkFixedArraySL3
        __init__(itkFixedArraySL3 self, itkFixedArraySL3 arg0) -> itkFixedArraySL3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL3

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkFixedArraySL3 self, unsigned long d) -> long"""
        return _itkFixedArrayPython.itkFixedArraySL3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkFixedArraySL3 self, unsigned long d, long v)"""
        return _itkFixedArrayPython.itkFixedArraySL3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySL3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySL3___repr__(self)

itkFixedArraySL3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3___eq__, None, itkFixedArraySL3)
itkFixedArraySL3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3___ne__, None, itkFixedArraySL3)
itkFixedArraySL3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3_SetElement, None, itkFixedArraySL3)
itkFixedArraySL3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3_GetElement, None, itkFixedArraySL3)
itkFixedArraySL3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3_GetDataPointer, None, itkFixedArraySL3)
itkFixedArraySL3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3_Size, None, itkFixedArraySL3)
itkFixedArraySL3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3_Fill, None, itkFixedArraySL3)
itkFixedArraySL3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3___getitem__, None, itkFixedArraySL3)
itkFixedArraySL3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3___setitem__, None, itkFixedArraySL3)
itkFixedArraySL3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL3___repr__, None, itkFixedArraySL3)
itkFixedArraySL3_swigregister = _itkFixedArrayPython.itkFixedArraySL3_swigregister
itkFixedArraySL3_swigregister(itkFixedArraySL3)

def itkFixedArraySL3_Filled(arg0: 'long const &') -> "itkFixedArraySL3":
    """itkFixedArraySL3_Filled(long const & arg0) -> itkFixedArraySL3"""
    return _itkFixedArrayPython.itkFixedArraySL3_Filled(arg0)

def itkFixedArraySL3___len__() -> "unsigned int":
    """itkFixedArraySL3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySL3___len__()

class itkFixedArraySL4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySL4') -> "bool":
        """__eq__(itkFixedArraySL4 self, itkFixedArraySL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySL4') -> "bool":
        """__ne__(itkFixedArraySL4 self, itkFixedArraySL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long const &') -> "void":
        """
        SetElement(itkFixedArraySL4 self, unsigned short index, long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySL4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long const &":
        """GetElement(itkFixedArraySL4 self, unsigned short index) -> long const &"""
        return _itkFixedArrayPython.itkFixedArraySL4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long const *":
        """
        GetDataPointer(itkFixedArraySL4 self) -> long
        GetDataPointer(itkFixedArraySL4 self) -> long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySL4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySL4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL4_Size(self)


    def Fill(self, arg0: 'long const &') -> "void":
        """Fill(itkFixedArraySL4 self, long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySL4_Fill(self, arg0)


    def Filled(arg0: 'long const &') -> "itkFixedArraySL4":
        """Filled(long const & arg0) -> itkFixedArraySL4"""
        return _itkFixedArrayPython.itkFixedArraySL4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySL4 self) -> itkFixedArraySL4
        __init__(itkFixedArraySL4 self, long const * r) -> itkFixedArraySL4
        __init__(itkFixedArraySL4 self, long const & r) -> itkFixedArraySL4
        __init__(itkFixedArraySL4 self, itkFixedArraySL4 arg0) -> itkFixedArraySL4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL4

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkFixedArraySL4 self, unsigned long d) -> long"""
        return _itkFixedArrayPython.itkFixedArraySL4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkFixedArraySL4 self, unsigned long d, long v)"""
        return _itkFixedArrayPython.itkFixedArraySL4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySL4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySL4___repr__(self)

itkFixedArraySL4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4___eq__, None, itkFixedArraySL4)
itkFixedArraySL4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4___ne__, None, itkFixedArraySL4)
itkFixedArraySL4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4_SetElement, None, itkFixedArraySL4)
itkFixedArraySL4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4_GetElement, None, itkFixedArraySL4)
itkFixedArraySL4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4_GetDataPointer, None, itkFixedArraySL4)
itkFixedArraySL4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4_Size, None, itkFixedArraySL4)
itkFixedArraySL4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4_Fill, None, itkFixedArraySL4)
itkFixedArraySL4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4___getitem__, None, itkFixedArraySL4)
itkFixedArraySL4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4___setitem__, None, itkFixedArraySL4)
itkFixedArraySL4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL4___repr__, None, itkFixedArraySL4)
itkFixedArraySL4_swigregister = _itkFixedArrayPython.itkFixedArraySL4_swigregister
itkFixedArraySL4_swigregister(itkFixedArraySL4)

def itkFixedArraySL4_Filled(arg0: 'long const &') -> "itkFixedArraySL4":
    """itkFixedArraySL4_Filled(long const & arg0) -> itkFixedArraySL4"""
    return _itkFixedArrayPython.itkFixedArraySL4_Filled(arg0)

def itkFixedArraySL4___len__() -> "unsigned int":
    """itkFixedArraySL4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySL4___len__()

class itkFixedArraySL5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySL5') -> "bool":
        """__eq__(itkFixedArraySL5 self, itkFixedArraySL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySL5') -> "bool":
        """__ne__(itkFixedArraySL5 self, itkFixedArraySL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long const &') -> "void":
        """
        SetElement(itkFixedArraySL5 self, unsigned short index, long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySL5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long const &":
        """GetElement(itkFixedArraySL5 self, unsigned short index) -> long const &"""
        return _itkFixedArrayPython.itkFixedArraySL5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long const *":
        """
        GetDataPointer(itkFixedArraySL5 self) -> long
        GetDataPointer(itkFixedArraySL5 self) -> long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySL5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySL5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL5_Size(self)


    def Fill(self, arg0: 'long const &') -> "void":
        """Fill(itkFixedArraySL5 self, long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySL5_Fill(self, arg0)


    def Filled(arg0: 'long const &') -> "itkFixedArraySL5":
        """Filled(long const & arg0) -> itkFixedArraySL5"""
        return _itkFixedArrayPython.itkFixedArraySL5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySL5 self) -> itkFixedArraySL5
        __init__(itkFixedArraySL5 self, long const * r) -> itkFixedArraySL5
        __init__(itkFixedArraySL5 self, long const & r) -> itkFixedArraySL5
        __init__(itkFixedArraySL5 self, itkFixedArraySL5 arg0) -> itkFixedArraySL5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL5

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkFixedArraySL5 self, unsigned long d) -> long"""
        return _itkFixedArrayPython.itkFixedArraySL5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkFixedArraySL5 self, unsigned long d, long v)"""
        return _itkFixedArrayPython.itkFixedArraySL5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySL5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySL5___repr__(self)

itkFixedArraySL5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5___eq__, None, itkFixedArraySL5)
itkFixedArraySL5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5___ne__, None, itkFixedArraySL5)
itkFixedArraySL5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5_SetElement, None, itkFixedArraySL5)
itkFixedArraySL5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5_GetElement, None, itkFixedArraySL5)
itkFixedArraySL5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5_GetDataPointer, None, itkFixedArraySL5)
itkFixedArraySL5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5_Size, None, itkFixedArraySL5)
itkFixedArraySL5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5_Fill, None, itkFixedArraySL5)
itkFixedArraySL5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5___getitem__, None, itkFixedArraySL5)
itkFixedArraySL5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5___setitem__, None, itkFixedArraySL5)
itkFixedArraySL5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL5___repr__, None, itkFixedArraySL5)
itkFixedArraySL5_swigregister = _itkFixedArrayPython.itkFixedArraySL5_swigregister
itkFixedArraySL5_swigregister(itkFixedArraySL5)

def itkFixedArraySL5_Filled(arg0: 'long const &') -> "itkFixedArraySL5":
    """itkFixedArraySL5_Filled(long const & arg0) -> itkFixedArraySL5"""
    return _itkFixedArrayPython.itkFixedArraySL5_Filled(arg0)

def itkFixedArraySL5___len__() -> "unsigned int":
    """itkFixedArraySL5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySL5___len__()

class itkFixedArraySL6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySL6') -> "bool":
        """__eq__(itkFixedArraySL6 self, itkFixedArraySL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySL6') -> "bool":
        """__ne__(itkFixedArraySL6 self, itkFixedArraySL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySL6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long const &') -> "void":
        """
        SetElement(itkFixedArraySL6 self, unsigned short index, long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySL6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long const &":
        """GetElement(itkFixedArraySL6 self, unsigned short index) -> long const &"""
        return _itkFixedArrayPython.itkFixedArraySL6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long const *":
        """
        GetDataPointer(itkFixedArraySL6 self) -> long
        GetDataPointer(itkFixedArraySL6 self) -> long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySL6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySL6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL6_Size(self)


    def Fill(self, arg0: 'long const &') -> "void":
        """Fill(itkFixedArraySL6 self, long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySL6_Fill(self, arg0)


    def Filled(arg0: 'long const &') -> "itkFixedArraySL6":
        """Filled(long const & arg0) -> itkFixedArraySL6"""
        return _itkFixedArrayPython.itkFixedArraySL6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySL6 self) -> itkFixedArraySL6
        __init__(itkFixedArraySL6 self, long const * r) -> itkFixedArraySL6
        __init__(itkFixedArraySL6 self, long const & r) -> itkFixedArraySL6
        __init__(itkFixedArraySL6 self, itkFixedArraySL6 arg0) -> itkFixedArraySL6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySL6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySL6

    def __getitem__(self, d: 'unsigned long') -> "long":
        """__getitem__(itkFixedArraySL6 self, unsigned long d) -> long"""
        return _itkFixedArrayPython.itkFixedArraySL6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long') -> "void":
        """__setitem__(itkFixedArraySL6 self, unsigned long d, long v)"""
        return _itkFixedArrayPython.itkFixedArraySL6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySL6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySL6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySL6___repr__(self)

itkFixedArraySL6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6___eq__, None, itkFixedArraySL6)
itkFixedArraySL6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6___ne__, None, itkFixedArraySL6)
itkFixedArraySL6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6_SetElement, None, itkFixedArraySL6)
itkFixedArraySL6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6_GetElement, None, itkFixedArraySL6)
itkFixedArraySL6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6_GetDataPointer, None, itkFixedArraySL6)
itkFixedArraySL6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6_Size, None, itkFixedArraySL6)
itkFixedArraySL6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6_Fill, None, itkFixedArraySL6)
itkFixedArraySL6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6___getitem__, None, itkFixedArraySL6)
itkFixedArraySL6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6___setitem__, None, itkFixedArraySL6)
itkFixedArraySL6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySL6___repr__, None, itkFixedArraySL6)
itkFixedArraySL6_swigregister = _itkFixedArrayPython.itkFixedArraySL6_swigregister
itkFixedArraySL6_swigregister(itkFixedArraySL6)

def itkFixedArraySL6_Filled(arg0: 'long const &') -> "itkFixedArraySL6":
    """itkFixedArraySL6_Filled(long const & arg0) -> itkFixedArraySL6"""
    return _itkFixedArrayPython.itkFixedArraySL6_Filled(arg0)

def itkFixedArraySL6___len__() -> "unsigned int":
    """itkFixedArraySL6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySL6___len__()

class itkFixedArraySLL1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySLL1') -> "bool":
        """__eq__(itkFixedArraySLL1 self, itkFixedArraySLL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySLL1') -> "bool":
        """__ne__(itkFixedArraySLL1 self, itkFixedArraySLL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long long const &') -> "void":
        """
        SetElement(itkFixedArraySLL1 self, unsigned short index, long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySLL1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long long const &":
        """GetElement(itkFixedArraySLL1 self, unsigned short index) -> long long const &"""
        return _itkFixedArrayPython.itkFixedArraySLL1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long long const *":
        """
        GetDataPointer(itkFixedArraySLL1 self) -> long long
        GetDataPointer(itkFixedArraySLL1 self) -> long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySLL1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySLL1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL1_Size(self)


    def Fill(self, arg0: 'long long const &') -> "void":
        """Fill(itkFixedArraySLL1 self, long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySLL1_Fill(self, arg0)


    def Filled(arg0: 'long long const &') -> "itkFixedArraySLL1":
        """Filled(long long const & arg0) -> itkFixedArraySLL1"""
        return _itkFixedArrayPython.itkFixedArraySLL1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySLL1 self) -> itkFixedArraySLL1
        __init__(itkFixedArraySLL1 self, long long const * r) -> itkFixedArraySLL1
        __init__(itkFixedArraySLL1 self, long long const & r) -> itkFixedArraySLL1
        __init__(itkFixedArraySLL1 self, itkFixedArraySLL1 arg0) -> itkFixedArraySLL1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySLL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL1

    def __getitem__(self, d: 'unsigned long') -> "long long":
        """__getitem__(itkFixedArraySLL1 self, unsigned long d) -> long long"""
        return _itkFixedArrayPython.itkFixedArraySLL1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long long') -> "void":
        """__setitem__(itkFixedArraySLL1 self, unsigned long d, long long v)"""
        return _itkFixedArrayPython.itkFixedArraySLL1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySLL1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySLL1___repr__(self)

itkFixedArraySLL1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1___eq__, None, itkFixedArraySLL1)
itkFixedArraySLL1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1___ne__, None, itkFixedArraySLL1)
itkFixedArraySLL1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1_SetElement, None, itkFixedArraySLL1)
itkFixedArraySLL1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1_GetElement, None, itkFixedArraySLL1)
itkFixedArraySLL1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1_GetDataPointer, None, itkFixedArraySLL1)
itkFixedArraySLL1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1_Size, None, itkFixedArraySLL1)
itkFixedArraySLL1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1_Fill, None, itkFixedArraySLL1)
itkFixedArraySLL1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1___getitem__, None, itkFixedArraySLL1)
itkFixedArraySLL1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1___setitem__, None, itkFixedArraySLL1)
itkFixedArraySLL1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL1___repr__, None, itkFixedArraySLL1)
itkFixedArraySLL1_swigregister = _itkFixedArrayPython.itkFixedArraySLL1_swigregister
itkFixedArraySLL1_swigregister(itkFixedArraySLL1)

def itkFixedArraySLL1_Filled(arg0: 'long long const &') -> "itkFixedArraySLL1":
    """itkFixedArraySLL1_Filled(long long const & arg0) -> itkFixedArraySLL1"""
    return _itkFixedArrayPython.itkFixedArraySLL1_Filled(arg0)

def itkFixedArraySLL1___len__() -> "unsigned int":
    """itkFixedArraySLL1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySLL1___len__()

class itkFixedArraySLL2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySLL2') -> "bool":
        """__eq__(itkFixedArraySLL2 self, itkFixedArraySLL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySLL2') -> "bool":
        """__ne__(itkFixedArraySLL2 self, itkFixedArraySLL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long long const &') -> "void":
        """
        SetElement(itkFixedArraySLL2 self, unsigned short index, long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySLL2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long long const &":
        """GetElement(itkFixedArraySLL2 self, unsigned short index) -> long long const &"""
        return _itkFixedArrayPython.itkFixedArraySLL2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long long const *":
        """
        GetDataPointer(itkFixedArraySLL2 self) -> long long
        GetDataPointer(itkFixedArraySLL2 self) -> long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySLL2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySLL2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL2_Size(self)


    def Fill(self, arg0: 'long long const &') -> "void":
        """Fill(itkFixedArraySLL2 self, long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySLL2_Fill(self, arg0)


    def Filled(arg0: 'long long const &') -> "itkFixedArraySLL2":
        """Filled(long long const & arg0) -> itkFixedArraySLL2"""
        return _itkFixedArrayPython.itkFixedArraySLL2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySLL2 self) -> itkFixedArraySLL2
        __init__(itkFixedArraySLL2 self, long long const * r) -> itkFixedArraySLL2
        __init__(itkFixedArraySLL2 self, long long const & r) -> itkFixedArraySLL2
        __init__(itkFixedArraySLL2 self, itkFixedArraySLL2 arg0) -> itkFixedArraySLL2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySLL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL2

    def __getitem__(self, d: 'unsigned long') -> "long long":
        """__getitem__(itkFixedArraySLL2 self, unsigned long d) -> long long"""
        return _itkFixedArrayPython.itkFixedArraySLL2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long long') -> "void":
        """__setitem__(itkFixedArraySLL2 self, unsigned long d, long long v)"""
        return _itkFixedArrayPython.itkFixedArraySLL2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySLL2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySLL2___repr__(self)

itkFixedArraySLL2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2___eq__, None, itkFixedArraySLL2)
itkFixedArraySLL2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2___ne__, None, itkFixedArraySLL2)
itkFixedArraySLL2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2_SetElement, None, itkFixedArraySLL2)
itkFixedArraySLL2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2_GetElement, None, itkFixedArraySLL2)
itkFixedArraySLL2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2_GetDataPointer, None, itkFixedArraySLL2)
itkFixedArraySLL2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2_Size, None, itkFixedArraySLL2)
itkFixedArraySLL2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2_Fill, None, itkFixedArraySLL2)
itkFixedArraySLL2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2___getitem__, None, itkFixedArraySLL2)
itkFixedArraySLL2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2___setitem__, None, itkFixedArraySLL2)
itkFixedArraySLL2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL2___repr__, None, itkFixedArraySLL2)
itkFixedArraySLL2_swigregister = _itkFixedArrayPython.itkFixedArraySLL2_swigregister
itkFixedArraySLL2_swigregister(itkFixedArraySLL2)

def itkFixedArraySLL2_Filled(arg0: 'long long const &') -> "itkFixedArraySLL2":
    """itkFixedArraySLL2_Filled(long long const & arg0) -> itkFixedArraySLL2"""
    return _itkFixedArrayPython.itkFixedArraySLL2_Filled(arg0)

def itkFixedArraySLL2___len__() -> "unsigned int":
    """itkFixedArraySLL2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySLL2___len__()

class itkFixedArraySLL3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySLL3') -> "bool":
        """__eq__(itkFixedArraySLL3 self, itkFixedArraySLL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySLL3') -> "bool":
        """__ne__(itkFixedArraySLL3 self, itkFixedArraySLL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long long const &') -> "void":
        """
        SetElement(itkFixedArraySLL3 self, unsigned short index, long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySLL3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long long const &":
        """GetElement(itkFixedArraySLL3 self, unsigned short index) -> long long const &"""
        return _itkFixedArrayPython.itkFixedArraySLL3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long long const *":
        """
        GetDataPointer(itkFixedArraySLL3 self) -> long long
        GetDataPointer(itkFixedArraySLL3 self) -> long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySLL3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySLL3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL3_Size(self)


    def Fill(self, arg0: 'long long const &') -> "void":
        """Fill(itkFixedArraySLL3 self, long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySLL3_Fill(self, arg0)


    def Filled(arg0: 'long long const &') -> "itkFixedArraySLL3":
        """Filled(long long const & arg0) -> itkFixedArraySLL3"""
        return _itkFixedArrayPython.itkFixedArraySLL3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySLL3 self) -> itkFixedArraySLL3
        __init__(itkFixedArraySLL3 self, long long const * r) -> itkFixedArraySLL3
        __init__(itkFixedArraySLL3 self, long long const & r) -> itkFixedArraySLL3
        __init__(itkFixedArraySLL3 self, itkFixedArraySLL3 arg0) -> itkFixedArraySLL3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySLL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL3

    def __getitem__(self, d: 'unsigned long') -> "long long":
        """__getitem__(itkFixedArraySLL3 self, unsigned long d) -> long long"""
        return _itkFixedArrayPython.itkFixedArraySLL3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long long') -> "void":
        """__setitem__(itkFixedArraySLL3 self, unsigned long d, long long v)"""
        return _itkFixedArrayPython.itkFixedArraySLL3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySLL3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySLL3___repr__(self)

itkFixedArraySLL3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3___eq__, None, itkFixedArraySLL3)
itkFixedArraySLL3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3___ne__, None, itkFixedArraySLL3)
itkFixedArraySLL3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3_SetElement, None, itkFixedArraySLL3)
itkFixedArraySLL3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3_GetElement, None, itkFixedArraySLL3)
itkFixedArraySLL3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3_GetDataPointer, None, itkFixedArraySLL3)
itkFixedArraySLL3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3_Size, None, itkFixedArraySLL3)
itkFixedArraySLL3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3_Fill, None, itkFixedArraySLL3)
itkFixedArraySLL3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3___getitem__, None, itkFixedArraySLL3)
itkFixedArraySLL3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3___setitem__, None, itkFixedArraySLL3)
itkFixedArraySLL3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL3___repr__, None, itkFixedArraySLL3)
itkFixedArraySLL3_swigregister = _itkFixedArrayPython.itkFixedArraySLL3_swigregister
itkFixedArraySLL3_swigregister(itkFixedArraySLL3)

def itkFixedArraySLL3_Filled(arg0: 'long long const &') -> "itkFixedArraySLL3":
    """itkFixedArraySLL3_Filled(long long const & arg0) -> itkFixedArraySLL3"""
    return _itkFixedArrayPython.itkFixedArraySLL3_Filled(arg0)

def itkFixedArraySLL3___len__() -> "unsigned int":
    """itkFixedArraySLL3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySLL3___len__()

class itkFixedArraySLL4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySLL4') -> "bool":
        """__eq__(itkFixedArraySLL4 self, itkFixedArraySLL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySLL4') -> "bool":
        """__ne__(itkFixedArraySLL4 self, itkFixedArraySLL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long long const &') -> "void":
        """
        SetElement(itkFixedArraySLL4 self, unsigned short index, long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySLL4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long long const &":
        """GetElement(itkFixedArraySLL4 self, unsigned short index) -> long long const &"""
        return _itkFixedArrayPython.itkFixedArraySLL4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long long const *":
        """
        GetDataPointer(itkFixedArraySLL4 self) -> long long
        GetDataPointer(itkFixedArraySLL4 self) -> long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySLL4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySLL4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL4_Size(self)


    def Fill(self, arg0: 'long long const &') -> "void":
        """Fill(itkFixedArraySLL4 self, long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySLL4_Fill(self, arg0)


    def Filled(arg0: 'long long const &') -> "itkFixedArraySLL4":
        """Filled(long long const & arg0) -> itkFixedArraySLL4"""
        return _itkFixedArrayPython.itkFixedArraySLL4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySLL4 self) -> itkFixedArraySLL4
        __init__(itkFixedArraySLL4 self, long long const * r) -> itkFixedArraySLL4
        __init__(itkFixedArraySLL4 self, long long const & r) -> itkFixedArraySLL4
        __init__(itkFixedArraySLL4 self, itkFixedArraySLL4 arg0) -> itkFixedArraySLL4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySLL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL4

    def __getitem__(self, d: 'unsigned long') -> "long long":
        """__getitem__(itkFixedArraySLL4 self, unsigned long d) -> long long"""
        return _itkFixedArrayPython.itkFixedArraySLL4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long long') -> "void":
        """__setitem__(itkFixedArraySLL4 self, unsigned long d, long long v)"""
        return _itkFixedArrayPython.itkFixedArraySLL4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySLL4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySLL4___repr__(self)

itkFixedArraySLL4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4___eq__, None, itkFixedArraySLL4)
itkFixedArraySLL4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4___ne__, None, itkFixedArraySLL4)
itkFixedArraySLL4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4_SetElement, None, itkFixedArraySLL4)
itkFixedArraySLL4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4_GetElement, None, itkFixedArraySLL4)
itkFixedArraySLL4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4_GetDataPointer, None, itkFixedArraySLL4)
itkFixedArraySLL4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4_Size, None, itkFixedArraySLL4)
itkFixedArraySLL4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4_Fill, None, itkFixedArraySLL4)
itkFixedArraySLL4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4___getitem__, None, itkFixedArraySLL4)
itkFixedArraySLL4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4___setitem__, None, itkFixedArraySLL4)
itkFixedArraySLL4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL4___repr__, None, itkFixedArraySLL4)
itkFixedArraySLL4_swigregister = _itkFixedArrayPython.itkFixedArraySLL4_swigregister
itkFixedArraySLL4_swigregister(itkFixedArraySLL4)

def itkFixedArraySLL4_Filled(arg0: 'long long const &') -> "itkFixedArraySLL4":
    """itkFixedArraySLL4_Filled(long long const & arg0) -> itkFixedArraySLL4"""
    return _itkFixedArrayPython.itkFixedArraySLL4_Filled(arg0)

def itkFixedArraySLL4___len__() -> "unsigned int":
    """itkFixedArraySLL4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySLL4___len__()

class itkFixedArraySLL5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySLL5') -> "bool":
        """__eq__(itkFixedArraySLL5 self, itkFixedArraySLL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySLL5') -> "bool":
        """__ne__(itkFixedArraySLL5 self, itkFixedArraySLL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long long const &') -> "void":
        """
        SetElement(itkFixedArraySLL5 self, unsigned short index, long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySLL5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long long const &":
        """GetElement(itkFixedArraySLL5 self, unsigned short index) -> long long const &"""
        return _itkFixedArrayPython.itkFixedArraySLL5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long long const *":
        """
        GetDataPointer(itkFixedArraySLL5 self) -> long long
        GetDataPointer(itkFixedArraySLL5 self) -> long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySLL5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySLL5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL5_Size(self)


    def Fill(self, arg0: 'long long const &') -> "void":
        """Fill(itkFixedArraySLL5 self, long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySLL5_Fill(self, arg0)


    def Filled(arg0: 'long long const &') -> "itkFixedArraySLL5":
        """Filled(long long const & arg0) -> itkFixedArraySLL5"""
        return _itkFixedArrayPython.itkFixedArraySLL5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySLL5 self) -> itkFixedArraySLL5
        __init__(itkFixedArraySLL5 self, long long const * r) -> itkFixedArraySLL5
        __init__(itkFixedArraySLL5 self, long long const & r) -> itkFixedArraySLL5
        __init__(itkFixedArraySLL5 self, itkFixedArraySLL5 arg0) -> itkFixedArraySLL5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySLL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL5

    def __getitem__(self, d: 'unsigned long') -> "long long":
        """__getitem__(itkFixedArraySLL5 self, unsigned long d) -> long long"""
        return _itkFixedArrayPython.itkFixedArraySLL5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long long') -> "void":
        """__setitem__(itkFixedArraySLL5 self, unsigned long d, long long v)"""
        return _itkFixedArrayPython.itkFixedArraySLL5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySLL5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySLL5___repr__(self)

itkFixedArraySLL5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5___eq__, None, itkFixedArraySLL5)
itkFixedArraySLL5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5___ne__, None, itkFixedArraySLL5)
itkFixedArraySLL5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5_SetElement, None, itkFixedArraySLL5)
itkFixedArraySLL5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5_GetElement, None, itkFixedArraySLL5)
itkFixedArraySLL5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5_GetDataPointer, None, itkFixedArraySLL5)
itkFixedArraySLL5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5_Size, None, itkFixedArraySLL5)
itkFixedArraySLL5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5_Fill, None, itkFixedArraySLL5)
itkFixedArraySLL5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5___getitem__, None, itkFixedArraySLL5)
itkFixedArraySLL5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5___setitem__, None, itkFixedArraySLL5)
itkFixedArraySLL5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL5___repr__, None, itkFixedArraySLL5)
itkFixedArraySLL5_swigregister = _itkFixedArrayPython.itkFixedArraySLL5_swigregister
itkFixedArraySLL5_swigregister(itkFixedArraySLL5)

def itkFixedArraySLL5_Filled(arg0: 'long long const &') -> "itkFixedArraySLL5":
    """itkFixedArraySLL5_Filled(long long const & arg0) -> itkFixedArraySLL5"""
    return _itkFixedArrayPython.itkFixedArraySLL5_Filled(arg0)

def itkFixedArraySLL5___len__() -> "unsigned int":
    """itkFixedArraySLL5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySLL5___len__()

class itkFixedArraySLL6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySLL6') -> "bool":
        """__eq__(itkFixedArraySLL6 self, itkFixedArraySLL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySLL6') -> "bool":
        """__ne__(itkFixedArraySLL6 self, itkFixedArraySLL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySLL6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'long long const &') -> "void":
        """
        SetElement(itkFixedArraySLL6 self, unsigned short index, long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySLL6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "long long const &":
        """GetElement(itkFixedArraySLL6 self, unsigned short index) -> long long const &"""
        return _itkFixedArrayPython.itkFixedArraySLL6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "long long const *":
        """
        GetDataPointer(itkFixedArraySLL6 self) -> long long
        GetDataPointer(itkFixedArraySLL6 self) -> long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySLL6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySLL6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL6_Size(self)


    def Fill(self, arg0: 'long long const &') -> "void":
        """Fill(itkFixedArraySLL6 self, long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySLL6_Fill(self, arg0)


    def Filled(arg0: 'long long const &') -> "itkFixedArraySLL6":
        """Filled(long long const & arg0) -> itkFixedArraySLL6"""
        return _itkFixedArrayPython.itkFixedArraySLL6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySLL6 self) -> itkFixedArraySLL6
        __init__(itkFixedArraySLL6 self, long long const * r) -> itkFixedArraySLL6
        __init__(itkFixedArraySLL6 self, long long const & r) -> itkFixedArraySLL6
        __init__(itkFixedArraySLL6 self, itkFixedArraySLL6 arg0) -> itkFixedArraySLL6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySLL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySLL6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySLL6

    def __getitem__(self, d: 'unsigned long') -> "long long":
        """__getitem__(itkFixedArraySLL6 self, unsigned long d) -> long long"""
        return _itkFixedArrayPython.itkFixedArraySLL6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'long long') -> "void":
        """__setitem__(itkFixedArraySLL6 self, unsigned long d, long long v)"""
        return _itkFixedArrayPython.itkFixedArraySLL6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySLL6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySLL6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySLL6___repr__(self)

itkFixedArraySLL6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6___eq__, None, itkFixedArraySLL6)
itkFixedArraySLL6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6___ne__, None, itkFixedArraySLL6)
itkFixedArraySLL6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6_SetElement, None, itkFixedArraySLL6)
itkFixedArraySLL6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6_GetElement, None, itkFixedArraySLL6)
itkFixedArraySLL6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6_GetDataPointer, None, itkFixedArraySLL6)
itkFixedArraySLL6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6_Size, None, itkFixedArraySLL6)
itkFixedArraySLL6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6_Fill, None, itkFixedArraySLL6)
itkFixedArraySLL6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6___getitem__, None, itkFixedArraySLL6)
itkFixedArraySLL6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6___setitem__, None, itkFixedArraySLL6)
itkFixedArraySLL6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySLL6___repr__, None, itkFixedArraySLL6)
itkFixedArraySLL6_swigregister = _itkFixedArrayPython.itkFixedArraySLL6_swigregister
itkFixedArraySLL6_swigregister(itkFixedArraySLL6)

def itkFixedArraySLL6_Filled(arg0: 'long long const &') -> "itkFixedArraySLL6":
    """itkFixedArraySLL6_Filled(long long const & arg0) -> itkFixedArraySLL6"""
    return _itkFixedArrayPython.itkFixedArraySLL6_Filled(arg0)

def itkFixedArraySLL6___len__() -> "unsigned int":
    """itkFixedArraySLL6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySLL6___len__()

class itkFixedArraySS1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySS1') -> "bool":
        """__eq__(itkFixedArraySS1 self, itkFixedArraySS1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySS1') -> "bool":
        """__ne__(itkFixedArraySS1 self, itkFixedArraySS1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'short const &') -> "void":
        """
        SetElement(itkFixedArraySS1 self, unsigned short index, short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySS1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "short const &":
        """GetElement(itkFixedArraySS1 self, unsigned short index) -> short const &"""
        return _itkFixedArrayPython.itkFixedArraySS1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "short const *":
        """
        GetDataPointer(itkFixedArraySS1 self) -> short
        GetDataPointer(itkFixedArraySS1 self) -> short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySS1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySS1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS1_Size(self)


    def Fill(self, arg0: 'short const &') -> "void":
        """Fill(itkFixedArraySS1 self, short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySS1_Fill(self, arg0)


    def Filled(arg0: 'short const &') -> "itkFixedArraySS1":
        """Filled(short const & arg0) -> itkFixedArraySS1"""
        return _itkFixedArrayPython.itkFixedArraySS1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySS1 self) -> itkFixedArraySS1
        __init__(itkFixedArraySS1 self, short const * r) -> itkFixedArraySS1
        __init__(itkFixedArraySS1 self, short const & r) -> itkFixedArraySS1
        __init__(itkFixedArraySS1 self, itkFixedArraySS1 arg0) -> itkFixedArraySS1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySS1_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS1

    def __getitem__(self, d: 'unsigned long') -> "short":
        """__getitem__(itkFixedArraySS1 self, unsigned long d) -> short"""
        return _itkFixedArrayPython.itkFixedArraySS1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'short') -> "void":
        """__setitem__(itkFixedArraySS1 self, unsigned long d, short v)"""
        return _itkFixedArrayPython.itkFixedArraySS1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySS1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySS1___repr__(self)

itkFixedArraySS1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1___eq__, None, itkFixedArraySS1)
itkFixedArraySS1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1___ne__, None, itkFixedArraySS1)
itkFixedArraySS1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1_SetElement, None, itkFixedArraySS1)
itkFixedArraySS1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1_GetElement, None, itkFixedArraySS1)
itkFixedArraySS1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1_GetDataPointer, None, itkFixedArraySS1)
itkFixedArraySS1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1_Size, None, itkFixedArraySS1)
itkFixedArraySS1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1_Fill, None, itkFixedArraySS1)
itkFixedArraySS1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1___getitem__, None, itkFixedArraySS1)
itkFixedArraySS1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1___setitem__, None, itkFixedArraySS1)
itkFixedArraySS1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS1___repr__, None, itkFixedArraySS1)
itkFixedArraySS1_swigregister = _itkFixedArrayPython.itkFixedArraySS1_swigregister
itkFixedArraySS1_swigregister(itkFixedArraySS1)

def itkFixedArraySS1_Filled(arg0: 'short const &') -> "itkFixedArraySS1":
    """itkFixedArraySS1_Filled(short const & arg0) -> itkFixedArraySS1"""
    return _itkFixedArrayPython.itkFixedArraySS1_Filled(arg0)

def itkFixedArraySS1___len__() -> "unsigned int":
    """itkFixedArraySS1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySS1___len__()

class itkFixedArraySS2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySS2') -> "bool":
        """__eq__(itkFixedArraySS2 self, itkFixedArraySS2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySS2') -> "bool":
        """__ne__(itkFixedArraySS2 self, itkFixedArraySS2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'short const &') -> "void":
        """
        SetElement(itkFixedArraySS2 self, unsigned short index, short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySS2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "short const &":
        """GetElement(itkFixedArraySS2 self, unsigned short index) -> short const &"""
        return _itkFixedArrayPython.itkFixedArraySS2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "short const *":
        """
        GetDataPointer(itkFixedArraySS2 self) -> short
        GetDataPointer(itkFixedArraySS2 self) -> short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySS2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySS2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS2_Size(self)


    def Fill(self, arg0: 'short const &') -> "void":
        """Fill(itkFixedArraySS2 self, short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySS2_Fill(self, arg0)


    def Filled(arg0: 'short const &') -> "itkFixedArraySS2":
        """Filled(short const & arg0) -> itkFixedArraySS2"""
        return _itkFixedArrayPython.itkFixedArraySS2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySS2 self) -> itkFixedArraySS2
        __init__(itkFixedArraySS2 self, short const * r) -> itkFixedArraySS2
        __init__(itkFixedArraySS2 self, short const & r) -> itkFixedArraySS2
        __init__(itkFixedArraySS2 self, itkFixedArraySS2 arg0) -> itkFixedArraySS2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySS2_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS2

    def __getitem__(self, d: 'unsigned long') -> "short":
        """__getitem__(itkFixedArraySS2 self, unsigned long d) -> short"""
        return _itkFixedArrayPython.itkFixedArraySS2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'short') -> "void":
        """__setitem__(itkFixedArraySS2 self, unsigned long d, short v)"""
        return _itkFixedArrayPython.itkFixedArraySS2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySS2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySS2___repr__(self)

itkFixedArraySS2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2___eq__, None, itkFixedArraySS2)
itkFixedArraySS2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2___ne__, None, itkFixedArraySS2)
itkFixedArraySS2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2_SetElement, None, itkFixedArraySS2)
itkFixedArraySS2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2_GetElement, None, itkFixedArraySS2)
itkFixedArraySS2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2_GetDataPointer, None, itkFixedArraySS2)
itkFixedArraySS2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2_Size, None, itkFixedArraySS2)
itkFixedArraySS2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2_Fill, None, itkFixedArraySS2)
itkFixedArraySS2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2___getitem__, None, itkFixedArraySS2)
itkFixedArraySS2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2___setitem__, None, itkFixedArraySS2)
itkFixedArraySS2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS2___repr__, None, itkFixedArraySS2)
itkFixedArraySS2_swigregister = _itkFixedArrayPython.itkFixedArraySS2_swigregister
itkFixedArraySS2_swigregister(itkFixedArraySS2)

def itkFixedArraySS2_Filled(arg0: 'short const &') -> "itkFixedArraySS2":
    """itkFixedArraySS2_Filled(short const & arg0) -> itkFixedArraySS2"""
    return _itkFixedArrayPython.itkFixedArraySS2_Filled(arg0)

def itkFixedArraySS2___len__() -> "unsigned int":
    """itkFixedArraySS2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySS2___len__()

class itkFixedArraySS3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySS3') -> "bool":
        """__eq__(itkFixedArraySS3 self, itkFixedArraySS3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySS3') -> "bool":
        """__ne__(itkFixedArraySS3 self, itkFixedArraySS3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'short const &') -> "void":
        """
        SetElement(itkFixedArraySS3 self, unsigned short index, short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySS3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "short const &":
        """GetElement(itkFixedArraySS3 self, unsigned short index) -> short const &"""
        return _itkFixedArrayPython.itkFixedArraySS3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "short const *":
        """
        GetDataPointer(itkFixedArraySS3 self) -> short
        GetDataPointer(itkFixedArraySS3 self) -> short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySS3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySS3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS3_Size(self)


    def Fill(self, arg0: 'short const &') -> "void":
        """Fill(itkFixedArraySS3 self, short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySS3_Fill(self, arg0)


    def Filled(arg0: 'short const &') -> "itkFixedArraySS3":
        """Filled(short const & arg0) -> itkFixedArraySS3"""
        return _itkFixedArrayPython.itkFixedArraySS3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySS3 self) -> itkFixedArraySS3
        __init__(itkFixedArraySS3 self, short const * r) -> itkFixedArraySS3
        __init__(itkFixedArraySS3 self, short const & r) -> itkFixedArraySS3
        __init__(itkFixedArraySS3 self, itkFixedArraySS3 arg0) -> itkFixedArraySS3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySS3_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS3

    def __getitem__(self, d: 'unsigned long') -> "short":
        """__getitem__(itkFixedArraySS3 self, unsigned long d) -> short"""
        return _itkFixedArrayPython.itkFixedArraySS3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'short') -> "void":
        """__setitem__(itkFixedArraySS3 self, unsigned long d, short v)"""
        return _itkFixedArrayPython.itkFixedArraySS3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySS3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySS3___repr__(self)

itkFixedArraySS3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3___eq__, None, itkFixedArraySS3)
itkFixedArraySS3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3___ne__, None, itkFixedArraySS3)
itkFixedArraySS3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3_SetElement, None, itkFixedArraySS3)
itkFixedArraySS3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3_GetElement, None, itkFixedArraySS3)
itkFixedArraySS3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3_GetDataPointer, None, itkFixedArraySS3)
itkFixedArraySS3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3_Size, None, itkFixedArraySS3)
itkFixedArraySS3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3_Fill, None, itkFixedArraySS3)
itkFixedArraySS3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3___getitem__, None, itkFixedArraySS3)
itkFixedArraySS3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3___setitem__, None, itkFixedArraySS3)
itkFixedArraySS3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS3___repr__, None, itkFixedArraySS3)
itkFixedArraySS3_swigregister = _itkFixedArrayPython.itkFixedArraySS3_swigregister
itkFixedArraySS3_swigregister(itkFixedArraySS3)

def itkFixedArraySS3_Filled(arg0: 'short const &') -> "itkFixedArraySS3":
    """itkFixedArraySS3_Filled(short const & arg0) -> itkFixedArraySS3"""
    return _itkFixedArrayPython.itkFixedArraySS3_Filled(arg0)

def itkFixedArraySS3___len__() -> "unsigned int":
    """itkFixedArraySS3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySS3___len__()

class itkFixedArraySS4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySS4') -> "bool":
        """__eq__(itkFixedArraySS4 self, itkFixedArraySS4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySS4') -> "bool":
        """__ne__(itkFixedArraySS4 self, itkFixedArraySS4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'short const &') -> "void":
        """
        SetElement(itkFixedArraySS4 self, unsigned short index, short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySS4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "short const &":
        """GetElement(itkFixedArraySS4 self, unsigned short index) -> short const &"""
        return _itkFixedArrayPython.itkFixedArraySS4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "short const *":
        """
        GetDataPointer(itkFixedArraySS4 self) -> short
        GetDataPointer(itkFixedArraySS4 self) -> short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySS4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySS4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS4_Size(self)


    def Fill(self, arg0: 'short const &') -> "void":
        """Fill(itkFixedArraySS4 self, short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySS4_Fill(self, arg0)


    def Filled(arg0: 'short const &') -> "itkFixedArraySS4":
        """Filled(short const & arg0) -> itkFixedArraySS4"""
        return _itkFixedArrayPython.itkFixedArraySS4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySS4 self) -> itkFixedArraySS4
        __init__(itkFixedArraySS4 self, short const * r) -> itkFixedArraySS4
        __init__(itkFixedArraySS4 self, short const & r) -> itkFixedArraySS4
        __init__(itkFixedArraySS4 self, itkFixedArraySS4 arg0) -> itkFixedArraySS4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySS4_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS4

    def __getitem__(self, d: 'unsigned long') -> "short":
        """__getitem__(itkFixedArraySS4 self, unsigned long d) -> short"""
        return _itkFixedArrayPython.itkFixedArraySS4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'short') -> "void":
        """__setitem__(itkFixedArraySS4 self, unsigned long d, short v)"""
        return _itkFixedArrayPython.itkFixedArraySS4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySS4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySS4___repr__(self)

itkFixedArraySS4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4___eq__, None, itkFixedArraySS4)
itkFixedArraySS4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4___ne__, None, itkFixedArraySS4)
itkFixedArraySS4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4_SetElement, None, itkFixedArraySS4)
itkFixedArraySS4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4_GetElement, None, itkFixedArraySS4)
itkFixedArraySS4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4_GetDataPointer, None, itkFixedArraySS4)
itkFixedArraySS4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4_Size, None, itkFixedArraySS4)
itkFixedArraySS4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4_Fill, None, itkFixedArraySS4)
itkFixedArraySS4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4___getitem__, None, itkFixedArraySS4)
itkFixedArraySS4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4___setitem__, None, itkFixedArraySS4)
itkFixedArraySS4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS4___repr__, None, itkFixedArraySS4)
itkFixedArraySS4_swigregister = _itkFixedArrayPython.itkFixedArraySS4_swigregister
itkFixedArraySS4_swigregister(itkFixedArraySS4)

def itkFixedArraySS4_Filled(arg0: 'short const &') -> "itkFixedArraySS4":
    """itkFixedArraySS4_Filled(short const & arg0) -> itkFixedArraySS4"""
    return _itkFixedArrayPython.itkFixedArraySS4_Filled(arg0)

def itkFixedArraySS4___len__() -> "unsigned int":
    """itkFixedArraySS4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySS4___len__()

class itkFixedArraySS5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySS5') -> "bool":
        """__eq__(itkFixedArraySS5 self, itkFixedArraySS5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySS5') -> "bool":
        """__ne__(itkFixedArraySS5 self, itkFixedArraySS5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'short const &') -> "void":
        """
        SetElement(itkFixedArraySS5 self, unsigned short index, short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySS5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "short const &":
        """GetElement(itkFixedArraySS5 self, unsigned short index) -> short const &"""
        return _itkFixedArrayPython.itkFixedArraySS5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "short const *":
        """
        GetDataPointer(itkFixedArraySS5 self) -> short
        GetDataPointer(itkFixedArraySS5 self) -> short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySS5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySS5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS5_Size(self)


    def Fill(self, arg0: 'short const &') -> "void":
        """Fill(itkFixedArraySS5 self, short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySS5_Fill(self, arg0)


    def Filled(arg0: 'short const &') -> "itkFixedArraySS5":
        """Filled(short const & arg0) -> itkFixedArraySS5"""
        return _itkFixedArrayPython.itkFixedArraySS5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySS5 self) -> itkFixedArraySS5
        __init__(itkFixedArraySS5 self, short const * r) -> itkFixedArraySS5
        __init__(itkFixedArraySS5 self, short const & r) -> itkFixedArraySS5
        __init__(itkFixedArraySS5 self, itkFixedArraySS5 arg0) -> itkFixedArraySS5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySS5_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS5

    def __getitem__(self, d: 'unsigned long') -> "short":
        """__getitem__(itkFixedArraySS5 self, unsigned long d) -> short"""
        return _itkFixedArrayPython.itkFixedArraySS5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'short') -> "void":
        """__setitem__(itkFixedArraySS5 self, unsigned long d, short v)"""
        return _itkFixedArrayPython.itkFixedArraySS5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySS5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySS5___repr__(self)

itkFixedArraySS5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5___eq__, None, itkFixedArraySS5)
itkFixedArraySS5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5___ne__, None, itkFixedArraySS5)
itkFixedArraySS5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5_SetElement, None, itkFixedArraySS5)
itkFixedArraySS5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5_GetElement, None, itkFixedArraySS5)
itkFixedArraySS5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5_GetDataPointer, None, itkFixedArraySS5)
itkFixedArraySS5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5_Size, None, itkFixedArraySS5)
itkFixedArraySS5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5_Fill, None, itkFixedArraySS5)
itkFixedArraySS5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5___getitem__, None, itkFixedArraySS5)
itkFixedArraySS5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5___setitem__, None, itkFixedArraySS5)
itkFixedArraySS5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS5___repr__, None, itkFixedArraySS5)
itkFixedArraySS5_swigregister = _itkFixedArrayPython.itkFixedArraySS5_swigregister
itkFixedArraySS5_swigregister(itkFixedArraySS5)

def itkFixedArraySS5_Filled(arg0: 'short const &') -> "itkFixedArraySS5":
    """itkFixedArraySS5_Filled(short const & arg0) -> itkFixedArraySS5"""
    return _itkFixedArrayPython.itkFixedArraySS5_Filled(arg0)

def itkFixedArraySS5___len__() -> "unsigned int":
    """itkFixedArraySS5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySS5___len__()

class itkFixedArraySS6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArraySS6') -> "bool":
        """__eq__(itkFixedArraySS6 self, itkFixedArraySS6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArraySS6') -> "bool":
        """__ne__(itkFixedArraySS6 self, itkFixedArraySS6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArraySS6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'short const &') -> "void":
        """
        SetElement(itkFixedArraySS6 self, unsigned short index, short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArraySS6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "short const &":
        """GetElement(itkFixedArraySS6 self, unsigned short index) -> short const &"""
        return _itkFixedArrayPython.itkFixedArraySS6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "short const *":
        """
        GetDataPointer(itkFixedArraySS6 self) -> short
        GetDataPointer(itkFixedArraySS6 self) -> short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArraySS6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArraySS6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS6_Size(self)


    def Fill(self, arg0: 'short const &') -> "void":
        """Fill(itkFixedArraySS6 self, short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArraySS6_Fill(self, arg0)


    def Filled(arg0: 'short const &') -> "itkFixedArraySS6":
        """Filled(short const & arg0) -> itkFixedArraySS6"""
        return _itkFixedArrayPython.itkFixedArraySS6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArraySS6 self) -> itkFixedArraySS6
        __init__(itkFixedArraySS6 self, short const * r) -> itkFixedArraySS6
        __init__(itkFixedArraySS6 self, short const & r) -> itkFixedArraySS6
        __init__(itkFixedArraySS6 self, itkFixedArraySS6 arg0) -> itkFixedArraySS6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArraySS6_swiginit(self, _itkFixedArrayPython.new_itkFixedArraySS6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArraySS6

    def __getitem__(self, d: 'unsigned long') -> "short":
        """__getitem__(itkFixedArraySS6 self, unsigned long d) -> short"""
        return _itkFixedArrayPython.itkFixedArraySS6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'short') -> "void":
        """__setitem__(itkFixedArraySS6 self, unsigned long d, short v)"""
        return _itkFixedArrayPython.itkFixedArraySS6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArraySS6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArraySS6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArraySS6___repr__(self)

itkFixedArraySS6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6___eq__, None, itkFixedArraySS6)
itkFixedArraySS6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6___ne__, None, itkFixedArraySS6)
itkFixedArraySS6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6_SetElement, None, itkFixedArraySS6)
itkFixedArraySS6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6_GetElement, None, itkFixedArraySS6)
itkFixedArraySS6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6_GetDataPointer, None, itkFixedArraySS6)
itkFixedArraySS6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6_Size, None, itkFixedArraySS6)
itkFixedArraySS6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6_Fill, None, itkFixedArraySS6)
itkFixedArraySS6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6___getitem__, None, itkFixedArraySS6)
itkFixedArraySS6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6___setitem__, None, itkFixedArraySS6)
itkFixedArraySS6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArraySS6___repr__, None, itkFixedArraySS6)
itkFixedArraySS6_swigregister = _itkFixedArrayPython.itkFixedArraySS6_swigregister
itkFixedArraySS6_swigregister(itkFixedArraySS6)

def itkFixedArraySS6_Filled(arg0: 'short const &') -> "itkFixedArraySS6":
    """itkFixedArraySS6_Filled(short const & arg0) -> itkFixedArraySS6"""
    return _itkFixedArrayPython.itkFixedArraySS6_Filled(arg0)

def itkFixedArraySS6___len__() -> "unsigned int":
    """itkFixedArraySS6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArraySS6___len__()

class itkFixedArrayUC1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUC1') -> "bool":
        """__eq__(itkFixedArrayUC1 self, itkFixedArrayUC1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUC1') -> "bool":
        """__ne__(itkFixedArrayUC1 self, itkFixedArrayUC1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned char const &') -> "void":
        """
        SetElement(itkFixedArrayUC1 self, unsigned short index, unsigned char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUC1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned char const &":
        """GetElement(itkFixedArrayUC1 self, unsigned short index) -> unsigned char const &"""
        return _itkFixedArrayPython.itkFixedArrayUC1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned char const *":
        """
        GetDataPointer(itkFixedArrayUC1 self) -> unsigned char
        GetDataPointer(itkFixedArrayUC1 self) -> unsigned char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUC1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUC1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC1_Size(self)


    def Fill(self, arg0: 'unsigned char const &') -> "void":
        """Fill(itkFixedArrayUC1 self, unsigned char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUC1_Fill(self, arg0)


    def Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC1":
        """Filled(unsigned char const & arg0) -> itkFixedArrayUC1"""
        return _itkFixedArrayPython.itkFixedArrayUC1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUC1 self) -> itkFixedArrayUC1
        __init__(itkFixedArrayUC1 self, unsigned char const * r) -> itkFixedArrayUC1
        __init__(itkFixedArrayUC1 self, unsigned char const & r) -> itkFixedArrayUC1
        __init__(itkFixedArrayUC1 self, itkFixedArrayUC1 arg0) -> itkFixedArrayUC1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUC1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC1

    def __getitem__(self, d: 'unsigned long') -> "unsigned char":
        """__getitem__(itkFixedArrayUC1 self, unsigned long d) -> unsigned char"""
        return _itkFixedArrayPython.itkFixedArrayUC1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned char') -> "void":
        """__setitem__(itkFixedArrayUC1 self, unsigned long d, unsigned char v)"""
        return _itkFixedArrayPython.itkFixedArrayUC1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUC1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUC1___repr__(self)

itkFixedArrayUC1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1___eq__, None, itkFixedArrayUC1)
itkFixedArrayUC1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1___ne__, None, itkFixedArrayUC1)
itkFixedArrayUC1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1_SetElement, None, itkFixedArrayUC1)
itkFixedArrayUC1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1_GetElement, None, itkFixedArrayUC1)
itkFixedArrayUC1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1_GetDataPointer, None, itkFixedArrayUC1)
itkFixedArrayUC1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1_Size, None, itkFixedArrayUC1)
itkFixedArrayUC1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1_Fill, None, itkFixedArrayUC1)
itkFixedArrayUC1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1___getitem__, None, itkFixedArrayUC1)
itkFixedArrayUC1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1___setitem__, None, itkFixedArrayUC1)
itkFixedArrayUC1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC1___repr__, None, itkFixedArrayUC1)
itkFixedArrayUC1_swigregister = _itkFixedArrayPython.itkFixedArrayUC1_swigregister
itkFixedArrayUC1_swigregister(itkFixedArrayUC1)

def itkFixedArrayUC1_Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC1":
    """itkFixedArrayUC1_Filled(unsigned char const & arg0) -> itkFixedArrayUC1"""
    return _itkFixedArrayPython.itkFixedArrayUC1_Filled(arg0)

def itkFixedArrayUC1___len__() -> "unsigned int":
    """itkFixedArrayUC1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUC1___len__()

class itkFixedArrayUC2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUC2') -> "bool":
        """__eq__(itkFixedArrayUC2 self, itkFixedArrayUC2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUC2') -> "bool":
        """__ne__(itkFixedArrayUC2 self, itkFixedArrayUC2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned char const &') -> "void":
        """
        SetElement(itkFixedArrayUC2 self, unsigned short index, unsigned char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUC2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned char const &":
        """GetElement(itkFixedArrayUC2 self, unsigned short index) -> unsigned char const &"""
        return _itkFixedArrayPython.itkFixedArrayUC2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned char const *":
        """
        GetDataPointer(itkFixedArrayUC2 self) -> unsigned char
        GetDataPointer(itkFixedArrayUC2 self) -> unsigned char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUC2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUC2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC2_Size(self)


    def Fill(self, arg0: 'unsigned char const &') -> "void":
        """Fill(itkFixedArrayUC2 self, unsigned char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUC2_Fill(self, arg0)


    def Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC2":
        """Filled(unsigned char const & arg0) -> itkFixedArrayUC2"""
        return _itkFixedArrayPython.itkFixedArrayUC2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUC2 self) -> itkFixedArrayUC2
        __init__(itkFixedArrayUC2 self, unsigned char const * r) -> itkFixedArrayUC2
        __init__(itkFixedArrayUC2 self, unsigned char const & r) -> itkFixedArrayUC2
        __init__(itkFixedArrayUC2 self, itkFixedArrayUC2 arg0) -> itkFixedArrayUC2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUC2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC2

    def __getitem__(self, d: 'unsigned long') -> "unsigned char":
        """__getitem__(itkFixedArrayUC2 self, unsigned long d) -> unsigned char"""
        return _itkFixedArrayPython.itkFixedArrayUC2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned char') -> "void":
        """__setitem__(itkFixedArrayUC2 self, unsigned long d, unsigned char v)"""
        return _itkFixedArrayPython.itkFixedArrayUC2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUC2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUC2___repr__(self)

itkFixedArrayUC2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2___eq__, None, itkFixedArrayUC2)
itkFixedArrayUC2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2___ne__, None, itkFixedArrayUC2)
itkFixedArrayUC2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2_SetElement, None, itkFixedArrayUC2)
itkFixedArrayUC2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2_GetElement, None, itkFixedArrayUC2)
itkFixedArrayUC2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2_GetDataPointer, None, itkFixedArrayUC2)
itkFixedArrayUC2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2_Size, None, itkFixedArrayUC2)
itkFixedArrayUC2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2_Fill, None, itkFixedArrayUC2)
itkFixedArrayUC2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2___getitem__, None, itkFixedArrayUC2)
itkFixedArrayUC2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2___setitem__, None, itkFixedArrayUC2)
itkFixedArrayUC2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC2___repr__, None, itkFixedArrayUC2)
itkFixedArrayUC2_swigregister = _itkFixedArrayPython.itkFixedArrayUC2_swigregister
itkFixedArrayUC2_swigregister(itkFixedArrayUC2)

def itkFixedArrayUC2_Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC2":
    """itkFixedArrayUC2_Filled(unsigned char const & arg0) -> itkFixedArrayUC2"""
    return _itkFixedArrayPython.itkFixedArrayUC2_Filled(arg0)

def itkFixedArrayUC2___len__() -> "unsigned int":
    """itkFixedArrayUC2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUC2___len__()

class itkFixedArrayUC3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUC3') -> "bool":
        """__eq__(itkFixedArrayUC3 self, itkFixedArrayUC3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUC3') -> "bool":
        """__ne__(itkFixedArrayUC3 self, itkFixedArrayUC3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned char const &') -> "void":
        """
        SetElement(itkFixedArrayUC3 self, unsigned short index, unsigned char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUC3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned char const &":
        """GetElement(itkFixedArrayUC3 self, unsigned short index) -> unsigned char const &"""
        return _itkFixedArrayPython.itkFixedArrayUC3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned char const *":
        """
        GetDataPointer(itkFixedArrayUC3 self) -> unsigned char
        GetDataPointer(itkFixedArrayUC3 self) -> unsigned char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUC3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUC3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC3_Size(self)


    def Fill(self, arg0: 'unsigned char const &') -> "void":
        """Fill(itkFixedArrayUC3 self, unsigned char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUC3_Fill(self, arg0)


    def Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC3":
        """Filled(unsigned char const & arg0) -> itkFixedArrayUC3"""
        return _itkFixedArrayPython.itkFixedArrayUC3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUC3 self) -> itkFixedArrayUC3
        __init__(itkFixedArrayUC3 self, unsigned char const * r) -> itkFixedArrayUC3
        __init__(itkFixedArrayUC3 self, unsigned char const & r) -> itkFixedArrayUC3
        __init__(itkFixedArrayUC3 self, itkFixedArrayUC3 arg0) -> itkFixedArrayUC3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUC3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC3

    def __getitem__(self, d: 'unsigned long') -> "unsigned char":
        """__getitem__(itkFixedArrayUC3 self, unsigned long d) -> unsigned char"""
        return _itkFixedArrayPython.itkFixedArrayUC3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned char') -> "void":
        """__setitem__(itkFixedArrayUC3 self, unsigned long d, unsigned char v)"""
        return _itkFixedArrayPython.itkFixedArrayUC3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUC3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUC3___repr__(self)

itkFixedArrayUC3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3___eq__, None, itkFixedArrayUC3)
itkFixedArrayUC3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3___ne__, None, itkFixedArrayUC3)
itkFixedArrayUC3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3_SetElement, None, itkFixedArrayUC3)
itkFixedArrayUC3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3_GetElement, None, itkFixedArrayUC3)
itkFixedArrayUC3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3_GetDataPointer, None, itkFixedArrayUC3)
itkFixedArrayUC3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3_Size, None, itkFixedArrayUC3)
itkFixedArrayUC3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3_Fill, None, itkFixedArrayUC3)
itkFixedArrayUC3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3___getitem__, None, itkFixedArrayUC3)
itkFixedArrayUC3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3___setitem__, None, itkFixedArrayUC3)
itkFixedArrayUC3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC3___repr__, None, itkFixedArrayUC3)
itkFixedArrayUC3_swigregister = _itkFixedArrayPython.itkFixedArrayUC3_swigregister
itkFixedArrayUC3_swigregister(itkFixedArrayUC3)

def itkFixedArrayUC3_Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC3":
    """itkFixedArrayUC3_Filled(unsigned char const & arg0) -> itkFixedArrayUC3"""
    return _itkFixedArrayPython.itkFixedArrayUC3_Filled(arg0)

def itkFixedArrayUC3___len__() -> "unsigned int":
    """itkFixedArrayUC3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUC3___len__()

class itkFixedArrayUC4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUC4') -> "bool":
        """__eq__(itkFixedArrayUC4 self, itkFixedArrayUC4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUC4') -> "bool":
        """__ne__(itkFixedArrayUC4 self, itkFixedArrayUC4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned char const &') -> "void":
        """
        SetElement(itkFixedArrayUC4 self, unsigned short index, unsigned char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUC4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned char const &":
        """GetElement(itkFixedArrayUC4 self, unsigned short index) -> unsigned char const &"""
        return _itkFixedArrayPython.itkFixedArrayUC4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned char const *":
        """
        GetDataPointer(itkFixedArrayUC4 self) -> unsigned char
        GetDataPointer(itkFixedArrayUC4 self) -> unsigned char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUC4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUC4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC4_Size(self)


    def Fill(self, arg0: 'unsigned char const &') -> "void":
        """Fill(itkFixedArrayUC4 self, unsigned char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUC4_Fill(self, arg0)


    def Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC4":
        """Filled(unsigned char const & arg0) -> itkFixedArrayUC4"""
        return _itkFixedArrayPython.itkFixedArrayUC4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUC4 self) -> itkFixedArrayUC4
        __init__(itkFixedArrayUC4 self, unsigned char const * r) -> itkFixedArrayUC4
        __init__(itkFixedArrayUC4 self, unsigned char const & r) -> itkFixedArrayUC4
        __init__(itkFixedArrayUC4 self, itkFixedArrayUC4 arg0) -> itkFixedArrayUC4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUC4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC4

    def __getitem__(self, d: 'unsigned long') -> "unsigned char":
        """__getitem__(itkFixedArrayUC4 self, unsigned long d) -> unsigned char"""
        return _itkFixedArrayPython.itkFixedArrayUC4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned char') -> "void":
        """__setitem__(itkFixedArrayUC4 self, unsigned long d, unsigned char v)"""
        return _itkFixedArrayPython.itkFixedArrayUC4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUC4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUC4___repr__(self)

itkFixedArrayUC4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4___eq__, None, itkFixedArrayUC4)
itkFixedArrayUC4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4___ne__, None, itkFixedArrayUC4)
itkFixedArrayUC4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4_SetElement, None, itkFixedArrayUC4)
itkFixedArrayUC4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4_GetElement, None, itkFixedArrayUC4)
itkFixedArrayUC4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4_GetDataPointer, None, itkFixedArrayUC4)
itkFixedArrayUC4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4_Size, None, itkFixedArrayUC4)
itkFixedArrayUC4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4_Fill, None, itkFixedArrayUC4)
itkFixedArrayUC4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4___getitem__, None, itkFixedArrayUC4)
itkFixedArrayUC4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4___setitem__, None, itkFixedArrayUC4)
itkFixedArrayUC4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC4___repr__, None, itkFixedArrayUC4)
itkFixedArrayUC4_swigregister = _itkFixedArrayPython.itkFixedArrayUC4_swigregister
itkFixedArrayUC4_swigregister(itkFixedArrayUC4)

def itkFixedArrayUC4_Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC4":
    """itkFixedArrayUC4_Filled(unsigned char const & arg0) -> itkFixedArrayUC4"""
    return _itkFixedArrayPython.itkFixedArrayUC4_Filled(arg0)

def itkFixedArrayUC4___len__() -> "unsigned int":
    """itkFixedArrayUC4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUC4___len__()

class itkFixedArrayUC5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUC5') -> "bool":
        """__eq__(itkFixedArrayUC5 self, itkFixedArrayUC5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUC5') -> "bool":
        """__ne__(itkFixedArrayUC5 self, itkFixedArrayUC5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned char const &') -> "void":
        """
        SetElement(itkFixedArrayUC5 self, unsigned short index, unsigned char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUC5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned char const &":
        """GetElement(itkFixedArrayUC5 self, unsigned short index) -> unsigned char const &"""
        return _itkFixedArrayPython.itkFixedArrayUC5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned char const *":
        """
        GetDataPointer(itkFixedArrayUC5 self) -> unsigned char
        GetDataPointer(itkFixedArrayUC5 self) -> unsigned char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUC5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUC5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC5_Size(self)


    def Fill(self, arg0: 'unsigned char const &') -> "void":
        """Fill(itkFixedArrayUC5 self, unsigned char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUC5_Fill(self, arg0)


    def Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC5":
        """Filled(unsigned char const & arg0) -> itkFixedArrayUC5"""
        return _itkFixedArrayPython.itkFixedArrayUC5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUC5 self) -> itkFixedArrayUC5
        __init__(itkFixedArrayUC5 self, unsigned char const * r) -> itkFixedArrayUC5
        __init__(itkFixedArrayUC5 self, unsigned char const & r) -> itkFixedArrayUC5
        __init__(itkFixedArrayUC5 self, itkFixedArrayUC5 arg0) -> itkFixedArrayUC5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUC5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC5

    def __getitem__(self, d: 'unsigned long') -> "unsigned char":
        """__getitem__(itkFixedArrayUC5 self, unsigned long d) -> unsigned char"""
        return _itkFixedArrayPython.itkFixedArrayUC5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned char') -> "void":
        """__setitem__(itkFixedArrayUC5 self, unsigned long d, unsigned char v)"""
        return _itkFixedArrayPython.itkFixedArrayUC5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUC5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUC5___repr__(self)

itkFixedArrayUC5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5___eq__, None, itkFixedArrayUC5)
itkFixedArrayUC5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5___ne__, None, itkFixedArrayUC5)
itkFixedArrayUC5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5_SetElement, None, itkFixedArrayUC5)
itkFixedArrayUC5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5_GetElement, None, itkFixedArrayUC5)
itkFixedArrayUC5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5_GetDataPointer, None, itkFixedArrayUC5)
itkFixedArrayUC5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5_Size, None, itkFixedArrayUC5)
itkFixedArrayUC5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5_Fill, None, itkFixedArrayUC5)
itkFixedArrayUC5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5___getitem__, None, itkFixedArrayUC5)
itkFixedArrayUC5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5___setitem__, None, itkFixedArrayUC5)
itkFixedArrayUC5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC5___repr__, None, itkFixedArrayUC5)
itkFixedArrayUC5_swigregister = _itkFixedArrayPython.itkFixedArrayUC5_swigregister
itkFixedArrayUC5_swigregister(itkFixedArrayUC5)

def itkFixedArrayUC5_Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC5":
    """itkFixedArrayUC5_Filled(unsigned char const & arg0) -> itkFixedArrayUC5"""
    return _itkFixedArrayPython.itkFixedArrayUC5_Filled(arg0)

def itkFixedArrayUC5___len__() -> "unsigned int":
    """itkFixedArrayUC5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUC5___len__()

class itkFixedArrayUC6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUC6') -> "bool":
        """__eq__(itkFixedArrayUC6 self, itkFixedArrayUC6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUC6') -> "bool":
        """__ne__(itkFixedArrayUC6 self, itkFixedArrayUC6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUC6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned char const &') -> "void":
        """
        SetElement(itkFixedArrayUC6 self, unsigned short index, unsigned char const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUC6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned char const &":
        """GetElement(itkFixedArrayUC6 self, unsigned short index) -> unsigned char const &"""
        return _itkFixedArrayPython.itkFixedArrayUC6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned char const *":
        """
        GetDataPointer(itkFixedArrayUC6 self) -> unsigned char
        GetDataPointer(itkFixedArrayUC6 self) -> unsigned char const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUC6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUC6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC6_Size(self)


    def Fill(self, arg0: 'unsigned char const &') -> "void":
        """Fill(itkFixedArrayUC6 self, unsigned char const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUC6_Fill(self, arg0)


    def Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC6":
        """Filled(unsigned char const & arg0) -> itkFixedArrayUC6"""
        return _itkFixedArrayPython.itkFixedArrayUC6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUC6 self) -> itkFixedArrayUC6
        __init__(itkFixedArrayUC6 self, unsigned char const * r) -> itkFixedArrayUC6
        __init__(itkFixedArrayUC6 self, unsigned char const & r) -> itkFixedArrayUC6
        __init__(itkFixedArrayUC6 self, itkFixedArrayUC6 arg0) -> itkFixedArrayUC6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUC6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUC6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUC6

    def __getitem__(self, d: 'unsigned long') -> "unsigned char":
        """__getitem__(itkFixedArrayUC6 self, unsigned long d) -> unsigned char"""
        return _itkFixedArrayPython.itkFixedArrayUC6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned char') -> "void":
        """__setitem__(itkFixedArrayUC6 self, unsigned long d, unsigned char v)"""
        return _itkFixedArrayPython.itkFixedArrayUC6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUC6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUC6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUC6___repr__(self)

itkFixedArrayUC6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6___eq__, None, itkFixedArrayUC6)
itkFixedArrayUC6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6___ne__, None, itkFixedArrayUC6)
itkFixedArrayUC6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6_SetElement, None, itkFixedArrayUC6)
itkFixedArrayUC6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6_GetElement, None, itkFixedArrayUC6)
itkFixedArrayUC6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6_GetDataPointer, None, itkFixedArrayUC6)
itkFixedArrayUC6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6_Size, None, itkFixedArrayUC6)
itkFixedArrayUC6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6_Fill, None, itkFixedArrayUC6)
itkFixedArrayUC6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6___getitem__, None, itkFixedArrayUC6)
itkFixedArrayUC6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6___setitem__, None, itkFixedArrayUC6)
itkFixedArrayUC6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUC6___repr__, None, itkFixedArrayUC6)
itkFixedArrayUC6_swigregister = _itkFixedArrayPython.itkFixedArrayUC6_swigregister
itkFixedArrayUC6_swigregister(itkFixedArrayUC6)

def itkFixedArrayUC6_Filled(arg0: 'unsigned char const &') -> "itkFixedArrayUC6":
    """itkFixedArrayUC6_Filled(unsigned char const & arg0) -> itkFixedArrayUC6"""
    return _itkFixedArrayPython.itkFixedArrayUC6_Filled(arg0)

def itkFixedArrayUC6___len__() -> "unsigned int":
    """itkFixedArrayUC6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUC6___len__()

class itkFixedArrayUI1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUI1') -> "bool":
        """__eq__(itkFixedArrayUI1 self, itkFixedArrayUI1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUI1') -> "bool":
        """__ne__(itkFixedArrayUI1 self, itkFixedArrayUI1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned int const &') -> "void":
        """
        SetElement(itkFixedArrayUI1 self, unsigned short index, unsigned int const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUI1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned int const &":
        """GetElement(itkFixedArrayUI1 self, unsigned short index) -> unsigned int const &"""
        return _itkFixedArrayPython.itkFixedArrayUI1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned int const *":
        """
        GetDataPointer(itkFixedArrayUI1 self) -> unsigned int
        GetDataPointer(itkFixedArrayUI1 self) -> unsigned int const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUI1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUI1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI1_Size(self)


    def Fill(self, arg0: 'unsigned int const &') -> "void":
        """Fill(itkFixedArrayUI1 self, unsigned int const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUI1_Fill(self, arg0)


    def Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI1":
        """Filled(unsigned int const & arg0) -> itkFixedArrayUI1"""
        return _itkFixedArrayPython.itkFixedArrayUI1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUI1 self) -> itkFixedArrayUI1
        __init__(itkFixedArrayUI1 self, unsigned int const * r) -> itkFixedArrayUI1
        __init__(itkFixedArrayUI1 self, unsigned int const & r) -> itkFixedArrayUI1
        __init__(itkFixedArrayUI1 self, itkFixedArrayUI1 arg0) -> itkFixedArrayUI1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUI1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI1

    def __getitem__(self, d: 'unsigned long') -> "unsigned int":
        """__getitem__(itkFixedArrayUI1 self, unsigned long d) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned int') -> "void":
        """__setitem__(itkFixedArrayUI1 self, unsigned long d, unsigned int v)"""
        return _itkFixedArrayPython.itkFixedArrayUI1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUI1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUI1___repr__(self)

itkFixedArrayUI1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1___eq__, None, itkFixedArrayUI1)
itkFixedArrayUI1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1___ne__, None, itkFixedArrayUI1)
itkFixedArrayUI1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1_SetElement, None, itkFixedArrayUI1)
itkFixedArrayUI1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1_GetElement, None, itkFixedArrayUI1)
itkFixedArrayUI1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1_GetDataPointer, None, itkFixedArrayUI1)
itkFixedArrayUI1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1_Size, None, itkFixedArrayUI1)
itkFixedArrayUI1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1_Fill, None, itkFixedArrayUI1)
itkFixedArrayUI1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1___getitem__, None, itkFixedArrayUI1)
itkFixedArrayUI1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1___setitem__, None, itkFixedArrayUI1)
itkFixedArrayUI1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI1___repr__, None, itkFixedArrayUI1)
itkFixedArrayUI1_swigregister = _itkFixedArrayPython.itkFixedArrayUI1_swigregister
itkFixedArrayUI1_swigregister(itkFixedArrayUI1)

def itkFixedArrayUI1_Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI1":
    """itkFixedArrayUI1_Filled(unsigned int const & arg0) -> itkFixedArrayUI1"""
    return _itkFixedArrayPython.itkFixedArrayUI1_Filled(arg0)

def itkFixedArrayUI1___len__() -> "unsigned int":
    """itkFixedArrayUI1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUI1___len__()

class itkFixedArrayUI2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUI2') -> "bool":
        """__eq__(itkFixedArrayUI2 self, itkFixedArrayUI2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUI2') -> "bool":
        """__ne__(itkFixedArrayUI2 self, itkFixedArrayUI2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned int const &') -> "void":
        """
        SetElement(itkFixedArrayUI2 self, unsigned short index, unsigned int const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUI2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned int const &":
        """GetElement(itkFixedArrayUI2 self, unsigned short index) -> unsigned int const &"""
        return _itkFixedArrayPython.itkFixedArrayUI2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned int const *":
        """
        GetDataPointer(itkFixedArrayUI2 self) -> unsigned int
        GetDataPointer(itkFixedArrayUI2 self) -> unsigned int const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUI2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUI2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI2_Size(self)


    def Fill(self, arg0: 'unsigned int const &') -> "void":
        """Fill(itkFixedArrayUI2 self, unsigned int const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUI2_Fill(self, arg0)


    def Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI2":
        """Filled(unsigned int const & arg0) -> itkFixedArrayUI2"""
        return _itkFixedArrayPython.itkFixedArrayUI2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUI2 self) -> itkFixedArrayUI2
        __init__(itkFixedArrayUI2 self, unsigned int const * r) -> itkFixedArrayUI2
        __init__(itkFixedArrayUI2 self, unsigned int const & r) -> itkFixedArrayUI2
        __init__(itkFixedArrayUI2 self, itkFixedArrayUI2 arg0) -> itkFixedArrayUI2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUI2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI2

    def __getitem__(self, d: 'unsigned long') -> "unsigned int":
        """__getitem__(itkFixedArrayUI2 self, unsigned long d) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned int') -> "void":
        """__setitem__(itkFixedArrayUI2 self, unsigned long d, unsigned int v)"""
        return _itkFixedArrayPython.itkFixedArrayUI2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUI2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUI2___repr__(self)

itkFixedArrayUI2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2___eq__, None, itkFixedArrayUI2)
itkFixedArrayUI2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2___ne__, None, itkFixedArrayUI2)
itkFixedArrayUI2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2_SetElement, None, itkFixedArrayUI2)
itkFixedArrayUI2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2_GetElement, None, itkFixedArrayUI2)
itkFixedArrayUI2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2_GetDataPointer, None, itkFixedArrayUI2)
itkFixedArrayUI2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2_Size, None, itkFixedArrayUI2)
itkFixedArrayUI2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2_Fill, None, itkFixedArrayUI2)
itkFixedArrayUI2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2___getitem__, None, itkFixedArrayUI2)
itkFixedArrayUI2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2___setitem__, None, itkFixedArrayUI2)
itkFixedArrayUI2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI2___repr__, None, itkFixedArrayUI2)
itkFixedArrayUI2_swigregister = _itkFixedArrayPython.itkFixedArrayUI2_swigregister
itkFixedArrayUI2_swigregister(itkFixedArrayUI2)

def itkFixedArrayUI2_Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI2":
    """itkFixedArrayUI2_Filled(unsigned int const & arg0) -> itkFixedArrayUI2"""
    return _itkFixedArrayPython.itkFixedArrayUI2_Filled(arg0)

def itkFixedArrayUI2___len__() -> "unsigned int":
    """itkFixedArrayUI2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUI2___len__()

class itkFixedArrayUI3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUI3') -> "bool":
        """__eq__(itkFixedArrayUI3 self, itkFixedArrayUI3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUI3') -> "bool":
        """__ne__(itkFixedArrayUI3 self, itkFixedArrayUI3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned int const &') -> "void":
        """
        SetElement(itkFixedArrayUI3 self, unsigned short index, unsigned int const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUI3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned int const &":
        """GetElement(itkFixedArrayUI3 self, unsigned short index) -> unsigned int const &"""
        return _itkFixedArrayPython.itkFixedArrayUI3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned int const *":
        """
        GetDataPointer(itkFixedArrayUI3 self) -> unsigned int
        GetDataPointer(itkFixedArrayUI3 self) -> unsigned int const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUI3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUI3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI3_Size(self)


    def Fill(self, arg0: 'unsigned int const &') -> "void":
        """Fill(itkFixedArrayUI3 self, unsigned int const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUI3_Fill(self, arg0)


    def Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI3":
        """Filled(unsigned int const & arg0) -> itkFixedArrayUI3"""
        return _itkFixedArrayPython.itkFixedArrayUI3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUI3 self) -> itkFixedArrayUI3
        __init__(itkFixedArrayUI3 self, unsigned int const * r) -> itkFixedArrayUI3
        __init__(itkFixedArrayUI3 self, unsigned int const & r) -> itkFixedArrayUI3
        __init__(itkFixedArrayUI3 self, itkFixedArrayUI3 arg0) -> itkFixedArrayUI3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUI3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI3

    def __getitem__(self, d: 'unsigned long') -> "unsigned int":
        """__getitem__(itkFixedArrayUI3 self, unsigned long d) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned int') -> "void":
        """__setitem__(itkFixedArrayUI3 self, unsigned long d, unsigned int v)"""
        return _itkFixedArrayPython.itkFixedArrayUI3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUI3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUI3___repr__(self)

itkFixedArrayUI3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3___eq__, None, itkFixedArrayUI3)
itkFixedArrayUI3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3___ne__, None, itkFixedArrayUI3)
itkFixedArrayUI3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3_SetElement, None, itkFixedArrayUI3)
itkFixedArrayUI3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3_GetElement, None, itkFixedArrayUI3)
itkFixedArrayUI3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3_GetDataPointer, None, itkFixedArrayUI3)
itkFixedArrayUI3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3_Size, None, itkFixedArrayUI3)
itkFixedArrayUI3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3_Fill, None, itkFixedArrayUI3)
itkFixedArrayUI3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3___getitem__, None, itkFixedArrayUI3)
itkFixedArrayUI3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3___setitem__, None, itkFixedArrayUI3)
itkFixedArrayUI3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI3___repr__, None, itkFixedArrayUI3)
itkFixedArrayUI3_swigregister = _itkFixedArrayPython.itkFixedArrayUI3_swigregister
itkFixedArrayUI3_swigregister(itkFixedArrayUI3)

def itkFixedArrayUI3_Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI3":
    """itkFixedArrayUI3_Filled(unsigned int const & arg0) -> itkFixedArrayUI3"""
    return _itkFixedArrayPython.itkFixedArrayUI3_Filled(arg0)

def itkFixedArrayUI3___len__() -> "unsigned int":
    """itkFixedArrayUI3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUI3___len__()

class itkFixedArrayUI4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUI4') -> "bool":
        """__eq__(itkFixedArrayUI4 self, itkFixedArrayUI4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUI4') -> "bool":
        """__ne__(itkFixedArrayUI4 self, itkFixedArrayUI4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned int const &') -> "void":
        """
        SetElement(itkFixedArrayUI4 self, unsigned short index, unsigned int const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUI4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned int const &":
        """GetElement(itkFixedArrayUI4 self, unsigned short index) -> unsigned int const &"""
        return _itkFixedArrayPython.itkFixedArrayUI4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned int const *":
        """
        GetDataPointer(itkFixedArrayUI4 self) -> unsigned int
        GetDataPointer(itkFixedArrayUI4 self) -> unsigned int const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUI4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUI4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI4_Size(self)


    def Fill(self, arg0: 'unsigned int const &') -> "void":
        """Fill(itkFixedArrayUI4 self, unsigned int const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUI4_Fill(self, arg0)


    def Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI4":
        """Filled(unsigned int const & arg0) -> itkFixedArrayUI4"""
        return _itkFixedArrayPython.itkFixedArrayUI4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUI4 self) -> itkFixedArrayUI4
        __init__(itkFixedArrayUI4 self, unsigned int const * r) -> itkFixedArrayUI4
        __init__(itkFixedArrayUI4 self, unsigned int const & r) -> itkFixedArrayUI4
        __init__(itkFixedArrayUI4 self, itkFixedArrayUI4 arg0) -> itkFixedArrayUI4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUI4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI4

    def __getitem__(self, d: 'unsigned long') -> "unsigned int":
        """__getitem__(itkFixedArrayUI4 self, unsigned long d) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned int') -> "void":
        """__setitem__(itkFixedArrayUI4 self, unsigned long d, unsigned int v)"""
        return _itkFixedArrayPython.itkFixedArrayUI4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUI4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUI4___repr__(self)

itkFixedArrayUI4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4___eq__, None, itkFixedArrayUI4)
itkFixedArrayUI4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4___ne__, None, itkFixedArrayUI4)
itkFixedArrayUI4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4_SetElement, None, itkFixedArrayUI4)
itkFixedArrayUI4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4_GetElement, None, itkFixedArrayUI4)
itkFixedArrayUI4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4_GetDataPointer, None, itkFixedArrayUI4)
itkFixedArrayUI4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4_Size, None, itkFixedArrayUI4)
itkFixedArrayUI4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4_Fill, None, itkFixedArrayUI4)
itkFixedArrayUI4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4___getitem__, None, itkFixedArrayUI4)
itkFixedArrayUI4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4___setitem__, None, itkFixedArrayUI4)
itkFixedArrayUI4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI4___repr__, None, itkFixedArrayUI4)
itkFixedArrayUI4_swigregister = _itkFixedArrayPython.itkFixedArrayUI4_swigregister
itkFixedArrayUI4_swigregister(itkFixedArrayUI4)

def itkFixedArrayUI4_Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI4":
    """itkFixedArrayUI4_Filled(unsigned int const & arg0) -> itkFixedArrayUI4"""
    return _itkFixedArrayPython.itkFixedArrayUI4_Filled(arg0)

def itkFixedArrayUI4___len__() -> "unsigned int":
    """itkFixedArrayUI4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUI4___len__()

class itkFixedArrayUI5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUI5') -> "bool":
        """__eq__(itkFixedArrayUI5 self, itkFixedArrayUI5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUI5') -> "bool":
        """__ne__(itkFixedArrayUI5 self, itkFixedArrayUI5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned int const &') -> "void":
        """
        SetElement(itkFixedArrayUI5 self, unsigned short index, unsigned int const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUI5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned int const &":
        """GetElement(itkFixedArrayUI5 self, unsigned short index) -> unsigned int const &"""
        return _itkFixedArrayPython.itkFixedArrayUI5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned int const *":
        """
        GetDataPointer(itkFixedArrayUI5 self) -> unsigned int
        GetDataPointer(itkFixedArrayUI5 self) -> unsigned int const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUI5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUI5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI5_Size(self)


    def Fill(self, arg0: 'unsigned int const &') -> "void":
        """Fill(itkFixedArrayUI5 self, unsigned int const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUI5_Fill(self, arg0)


    def Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI5":
        """Filled(unsigned int const & arg0) -> itkFixedArrayUI5"""
        return _itkFixedArrayPython.itkFixedArrayUI5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUI5 self) -> itkFixedArrayUI5
        __init__(itkFixedArrayUI5 self, unsigned int const * r) -> itkFixedArrayUI5
        __init__(itkFixedArrayUI5 self, unsigned int const & r) -> itkFixedArrayUI5
        __init__(itkFixedArrayUI5 self, itkFixedArrayUI5 arg0) -> itkFixedArrayUI5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUI5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI5

    def __getitem__(self, d: 'unsigned long') -> "unsigned int":
        """__getitem__(itkFixedArrayUI5 self, unsigned long d) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned int') -> "void":
        """__setitem__(itkFixedArrayUI5 self, unsigned long d, unsigned int v)"""
        return _itkFixedArrayPython.itkFixedArrayUI5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUI5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUI5___repr__(self)

itkFixedArrayUI5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5___eq__, None, itkFixedArrayUI5)
itkFixedArrayUI5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5___ne__, None, itkFixedArrayUI5)
itkFixedArrayUI5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5_SetElement, None, itkFixedArrayUI5)
itkFixedArrayUI5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5_GetElement, None, itkFixedArrayUI5)
itkFixedArrayUI5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5_GetDataPointer, None, itkFixedArrayUI5)
itkFixedArrayUI5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5_Size, None, itkFixedArrayUI5)
itkFixedArrayUI5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5_Fill, None, itkFixedArrayUI5)
itkFixedArrayUI5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5___getitem__, None, itkFixedArrayUI5)
itkFixedArrayUI5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5___setitem__, None, itkFixedArrayUI5)
itkFixedArrayUI5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI5___repr__, None, itkFixedArrayUI5)
itkFixedArrayUI5_swigregister = _itkFixedArrayPython.itkFixedArrayUI5_swigregister
itkFixedArrayUI5_swigregister(itkFixedArrayUI5)

def itkFixedArrayUI5_Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI5":
    """itkFixedArrayUI5_Filled(unsigned int const & arg0) -> itkFixedArrayUI5"""
    return _itkFixedArrayPython.itkFixedArrayUI5_Filled(arg0)

def itkFixedArrayUI5___len__() -> "unsigned int":
    """itkFixedArrayUI5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUI5___len__()

class itkFixedArrayUI6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUI6') -> "bool":
        """__eq__(itkFixedArrayUI6 self, itkFixedArrayUI6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUI6') -> "bool":
        """__ne__(itkFixedArrayUI6 self, itkFixedArrayUI6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUI6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned int const &') -> "void":
        """
        SetElement(itkFixedArrayUI6 self, unsigned short index, unsigned int const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUI6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned int const &":
        """GetElement(itkFixedArrayUI6 self, unsigned short index) -> unsigned int const &"""
        return _itkFixedArrayPython.itkFixedArrayUI6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned int const *":
        """
        GetDataPointer(itkFixedArrayUI6 self) -> unsigned int
        GetDataPointer(itkFixedArrayUI6 self) -> unsigned int const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUI6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUI6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI6_Size(self)


    def Fill(self, arg0: 'unsigned int const &') -> "void":
        """Fill(itkFixedArrayUI6 self, unsigned int const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUI6_Fill(self, arg0)


    def Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI6":
        """Filled(unsigned int const & arg0) -> itkFixedArrayUI6"""
        return _itkFixedArrayPython.itkFixedArrayUI6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUI6 self) -> itkFixedArrayUI6
        __init__(itkFixedArrayUI6 self, unsigned int const * r) -> itkFixedArrayUI6
        __init__(itkFixedArrayUI6 self, unsigned int const & r) -> itkFixedArrayUI6
        __init__(itkFixedArrayUI6 self, itkFixedArrayUI6 arg0) -> itkFixedArrayUI6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUI6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUI6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUI6

    def __getitem__(self, d: 'unsigned long') -> "unsigned int":
        """__getitem__(itkFixedArrayUI6 self, unsigned long d) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned int') -> "void":
        """__setitem__(itkFixedArrayUI6 self, unsigned long d, unsigned int v)"""
        return _itkFixedArrayPython.itkFixedArrayUI6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUI6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUI6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUI6___repr__(self)

itkFixedArrayUI6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6___eq__, None, itkFixedArrayUI6)
itkFixedArrayUI6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6___ne__, None, itkFixedArrayUI6)
itkFixedArrayUI6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6_SetElement, None, itkFixedArrayUI6)
itkFixedArrayUI6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6_GetElement, None, itkFixedArrayUI6)
itkFixedArrayUI6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6_GetDataPointer, None, itkFixedArrayUI6)
itkFixedArrayUI6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6_Size, None, itkFixedArrayUI6)
itkFixedArrayUI6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6_Fill, None, itkFixedArrayUI6)
itkFixedArrayUI6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6___getitem__, None, itkFixedArrayUI6)
itkFixedArrayUI6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6___setitem__, None, itkFixedArrayUI6)
itkFixedArrayUI6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUI6___repr__, None, itkFixedArrayUI6)
itkFixedArrayUI6_swigregister = _itkFixedArrayPython.itkFixedArrayUI6_swigregister
itkFixedArrayUI6_swigregister(itkFixedArrayUI6)

def itkFixedArrayUI6_Filled(arg0: 'unsigned int const &') -> "itkFixedArrayUI6":
    """itkFixedArrayUI6_Filled(unsigned int const & arg0) -> itkFixedArrayUI6"""
    return _itkFixedArrayPython.itkFixedArrayUI6_Filled(arg0)

def itkFixedArrayUI6___len__() -> "unsigned int":
    """itkFixedArrayUI6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUI6___len__()

class itkFixedArrayUL1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUL1') -> "bool":
        """__eq__(itkFixedArrayUL1 self, itkFixedArrayUL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUL1') -> "bool":
        """__ne__(itkFixedArrayUL1 self, itkFixedArrayUL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long const &') -> "void":
        """
        SetElement(itkFixedArrayUL1 self, unsigned short index, unsigned long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUL1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long const &":
        """GetElement(itkFixedArrayUL1 self, unsigned short index) -> unsigned long const &"""
        return _itkFixedArrayPython.itkFixedArrayUL1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long const *":
        """
        GetDataPointer(itkFixedArrayUL1 self) -> unsigned long
        GetDataPointer(itkFixedArrayUL1 self) -> unsigned long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUL1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUL1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL1_Size(self)


    def Fill(self, arg0: 'unsigned long const &') -> "void":
        """Fill(itkFixedArrayUL1 self, unsigned long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUL1_Fill(self, arg0)


    def Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL1":
        """Filled(unsigned long const & arg0) -> itkFixedArrayUL1"""
        return _itkFixedArrayPython.itkFixedArrayUL1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUL1 self) -> itkFixedArrayUL1
        __init__(itkFixedArrayUL1 self, unsigned long const * r) -> itkFixedArrayUL1
        __init__(itkFixedArrayUL1 self, unsigned long const & r) -> itkFixedArrayUL1
        __init__(itkFixedArrayUL1 self, itkFixedArrayUL1 arg0) -> itkFixedArrayUL1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL1

    def __getitem__(self, d: 'unsigned long') -> "unsigned long":
        """__getitem__(itkFixedArrayUL1 self, unsigned long d) -> unsigned long"""
        return _itkFixedArrayPython.itkFixedArrayUL1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long') -> "void":
        """__setitem__(itkFixedArrayUL1 self, unsigned long d, unsigned long v)"""
        return _itkFixedArrayPython.itkFixedArrayUL1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUL1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUL1___repr__(self)

itkFixedArrayUL1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1___eq__, None, itkFixedArrayUL1)
itkFixedArrayUL1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1___ne__, None, itkFixedArrayUL1)
itkFixedArrayUL1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1_SetElement, None, itkFixedArrayUL1)
itkFixedArrayUL1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1_GetElement, None, itkFixedArrayUL1)
itkFixedArrayUL1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1_GetDataPointer, None, itkFixedArrayUL1)
itkFixedArrayUL1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1_Size, None, itkFixedArrayUL1)
itkFixedArrayUL1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1_Fill, None, itkFixedArrayUL1)
itkFixedArrayUL1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1___getitem__, None, itkFixedArrayUL1)
itkFixedArrayUL1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1___setitem__, None, itkFixedArrayUL1)
itkFixedArrayUL1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL1___repr__, None, itkFixedArrayUL1)
itkFixedArrayUL1_swigregister = _itkFixedArrayPython.itkFixedArrayUL1_swigregister
itkFixedArrayUL1_swigregister(itkFixedArrayUL1)

def itkFixedArrayUL1_Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL1":
    """itkFixedArrayUL1_Filled(unsigned long const & arg0) -> itkFixedArrayUL1"""
    return _itkFixedArrayPython.itkFixedArrayUL1_Filled(arg0)

def itkFixedArrayUL1___len__() -> "unsigned int":
    """itkFixedArrayUL1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUL1___len__()

class itkFixedArrayUL2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUL2') -> "bool":
        """__eq__(itkFixedArrayUL2 self, itkFixedArrayUL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUL2') -> "bool":
        """__ne__(itkFixedArrayUL2 self, itkFixedArrayUL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long const &') -> "void":
        """
        SetElement(itkFixedArrayUL2 self, unsigned short index, unsigned long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUL2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long const &":
        """GetElement(itkFixedArrayUL2 self, unsigned short index) -> unsigned long const &"""
        return _itkFixedArrayPython.itkFixedArrayUL2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long const *":
        """
        GetDataPointer(itkFixedArrayUL2 self) -> unsigned long
        GetDataPointer(itkFixedArrayUL2 self) -> unsigned long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUL2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUL2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL2_Size(self)


    def Fill(self, arg0: 'unsigned long const &') -> "void":
        """Fill(itkFixedArrayUL2 self, unsigned long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUL2_Fill(self, arg0)


    def Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL2":
        """Filled(unsigned long const & arg0) -> itkFixedArrayUL2"""
        return _itkFixedArrayPython.itkFixedArrayUL2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUL2 self) -> itkFixedArrayUL2
        __init__(itkFixedArrayUL2 self, unsigned long const * r) -> itkFixedArrayUL2
        __init__(itkFixedArrayUL2 self, unsigned long const & r) -> itkFixedArrayUL2
        __init__(itkFixedArrayUL2 self, itkFixedArrayUL2 arg0) -> itkFixedArrayUL2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL2

    def __getitem__(self, d: 'unsigned long') -> "unsigned long":
        """__getitem__(itkFixedArrayUL2 self, unsigned long d) -> unsigned long"""
        return _itkFixedArrayPython.itkFixedArrayUL2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long') -> "void":
        """__setitem__(itkFixedArrayUL2 self, unsigned long d, unsigned long v)"""
        return _itkFixedArrayPython.itkFixedArrayUL2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUL2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUL2___repr__(self)

itkFixedArrayUL2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2___eq__, None, itkFixedArrayUL2)
itkFixedArrayUL2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2___ne__, None, itkFixedArrayUL2)
itkFixedArrayUL2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2_SetElement, None, itkFixedArrayUL2)
itkFixedArrayUL2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2_GetElement, None, itkFixedArrayUL2)
itkFixedArrayUL2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2_GetDataPointer, None, itkFixedArrayUL2)
itkFixedArrayUL2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2_Size, None, itkFixedArrayUL2)
itkFixedArrayUL2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2_Fill, None, itkFixedArrayUL2)
itkFixedArrayUL2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2___getitem__, None, itkFixedArrayUL2)
itkFixedArrayUL2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2___setitem__, None, itkFixedArrayUL2)
itkFixedArrayUL2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL2___repr__, None, itkFixedArrayUL2)
itkFixedArrayUL2_swigregister = _itkFixedArrayPython.itkFixedArrayUL2_swigregister
itkFixedArrayUL2_swigregister(itkFixedArrayUL2)

def itkFixedArrayUL2_Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL2":
    """itkFixedArrayUL2_Filled(unsigned long const & arg0) -> itkFixedArrayUL2"""
    return _itkFixedArrayPython.itkFixedArrayUL2_Filled(arg0)

def itkFixedArrayUL2___len__() -> "unsigned int":
    """itkFixedArrayUL2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUL2___len__()

class itkFixedArrayUL3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUL3') -> "bool":
        """__eq__(itkFixedArrayUL3 self, itkFixedArrayUL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUL3') -> "bool":
        """__ne__(itkFixedArrayUL3 self, itkFixedArrayUL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long const &') -> "void":
        """
        SetElement(itkFixedArrayUL3 self, unsigned short index, unsigned long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUL3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long const &":
        """GetElement(itkFixedArrayUL3 self, unsigned short index) -> unsigned long const &"""
        return _itkFixedArrayPython.itkFixedArrayUL3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long const *":
        """
        GetDataPointer(itkFixedArrayUL3 self) -> unsigned long
        GetDataPointer(itkFixedArrayUL3 self) -> unsigned long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUL3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUL3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL3_Size(self)


    def Fill(self, arg0: 'unsigned long const &') -> "void":
        """Fill(itkFixedArrayUL3 self, unsigned long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUL3_Fill(self, arg0)


    def Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL3":
        """Filled(unsigned long const & arg0) -> itkFixedArrayUL3"""
        return _itkFixedArrayPython.itkFixedArrayUL3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUL3 self) -> itkFixedArrayUL3
        __init__(itkFixedArrayUL3 self, unsigned long const * r) -> itkFixedArrayUL3
        __init__(itkFixedArrayUL3 self, unsigned long const & r) -> itkFixedArrayUL3
        __init__(itkFixedArrayUL3 self, itkFixedArrayUL3 arg0) -> itkFixedArrayUL3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL3

    def __getitem__(self, d: 'unsigned long') -> "unsigned long":
        """__getitem__(itkFixedArrayUL3 self, unsigned long d) -> unsigned long"""
        return _itkFixedArrayPython.itkFixedArrayUL3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long') -> "void":
        """__setitem__(itkFixedArrayUL3 self, unsigned long d, unsigned long v)"""
        return _itkFixedArrayPython.itkFixedArrayUL3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUL3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUL3___repr__(self)

itkFixedArrayUL3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3___eq__, None, itkFixedArrayUL3)
itkFixedArrayUL3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3___ne__, None, itkFixedArrayUL3)
itkFixedArrayUL3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3_SetElement, None, itkFixedArrayUL3)
itkFixedArrayUL3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3_GetElement, None, itkFixedArrayUL3)
itkFixedArrayUL3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3_GetDataPointer, None, itkFixedArrayUL3)
itkFixedArrayUL3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3_Size, None, itkFixedArrayUL3)
itkFixedArrayUL3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3_Fill, None, itkFixedArrayUL3)
itkFixedArrayUL3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3___getitem__, None, itkFixedArrayUL3)
itkFixedArrayUL3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3___setitem__, None, itkFixedArrayUL3)
itkFixedArrayUL3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL3___repr__, None, itkFixedArrayUL3)
itkFixedArrayUL3_swigregister = _itkFixedArrayPython.itkFixedArrayUL3_swigregister
itkFixedArrayUL3_swigregister(itkFixedArrayUL3)

def itkFixedArrayUL3_Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL3":
    """itkFixedArrayUL3_Filled(unsigned long const & arg0) -> itkFixedArrayUL3"""
    return _itkFixedArrayPython.itkFixedArrayUL3_Filled(arg0)

def itkFixedArrayUL3___len__() -> "unsigned int":
    """itkFixedArrayUL3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUL3___len__()

class itkFixedArrayUL4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUL4') -> "bool":
        """__eq__(itkFixedArrayUL4 self, itkFixedArrayUL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUL4') -> "bool":
        """__ne__(itkFixedArrayUL4 self, itkFixedArrayUL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long const &') -> "void":
        """
        SetElement(itkFixedArrayUL4 self, unsigned short index, unsigned long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUL4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long const &":
        """GetElement(itkFixedArrayUL4 self, unsigned short index) -> unsigned long const &"""
        return _itkFixedArrayPython.itkFixedArrayUL4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long const *":
        """
        GetDataPointer(itkFixedArrayUL4 self) -> unsigned long
        GetDataPointer(itkFixedArrayUL4 self) -> unsigned long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUL4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUL4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL4_Size(self)


    def Fill(self, arg0: 'unsigned long const &') -> "void":
        """Fill(itkFixedArrayUL4 self, unsigned long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUL4_Fill(self, arg0)


    def Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL4":
        """Filled(unsigned long const & arg0) -> itkFixedArrayUL4"""
        return _itkFixedArrayPython.itkFixedArrayUL4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUL4 self) -> itkFixedArrayUL4
        __init__(itkFixedArrayUL4 self, unsigned long const * r) -> itkFixedArrayUL4
        __init__(itkFixedArrayUL4 self, unsigned long const & r) -> itkFixedArrayUL4
        __init__(itkFixedArrayUL4 self, itkFixedArrayUL4 arg0) -> itkFixedArrayUL4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL4

    def __getitem__(self, d: 'unsigned long') -> "unsigned long":
        """__getitem__(itkFixedArrayUL4 self, unsigned long d) -> unsigned long"""
        return _itkFixedArrayPython.itkFixedArrayUL4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long') -> "void":
        """__setitem__(itkFixedArrayUL4 self, unsigned long d, unsigned long v)"""
        return _itkFixedArrayPython.itkFixedArrayUL4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUL4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUL4___repr__(self)

itkFixedArrayUL4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4___eq__, None, itkFixedArrayUL4)
itkFixedArrayUL4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4___ne__, None, itkFixedArrayUL4)
itkFixedArrayUL4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4_SetElement, None, itkFixedArrayUL4)
itkFixedArrayUL4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4_GetElement, None, itkFixedArrayUL4)
itkFixedArrayUL4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4_GetDataPointer, None, itkFixedArrayUL4)
itkFixedArrayUL4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4_Size, None, itkFixedArrayUL4)
itkFixedArrayUL4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4_Fill, None, itkFixedArrayUL4)
itkFixedArrayUL4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4___getitem__, None, itkFixedArrayUL4)
itkFixedArrayUL4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4___setitem__, None, itkFixedArrayUL4)
itkFixedArrayUL4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL4___repr__, None, itkFixedArrayUL4)
itkFixedArrayUL4_swigregister = _itkFixedArrayPython.itkFixedArrayUL4_swigregister
itkFixedArrayUL4_swigregister(itkFixedArrayUL4)

def itkFixedArrayUL4_Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL4":
    """itkFixedArrayUL4_Filled(unsigned long const & arg0) -> itkFixedArrayUL4"""
    return _itkFixedArrayPython.itkFixedArrayUL4_Filled(arg0)

def itkFixedArrayUL4___len__() -> "unsigned int":
    """itkFixedArrayUL4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUL4___len__()

class itkFixedArrayUL5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUL5') -> "bool":
        """__eq__(itkFixedArrayUL5 self, itkFixedArrayUL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUL5') -> "bool":
        """__ne__(itkFixedArrayUL5 self, itkFixedArrayUL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long const &') -> "void":
        """
        SetElement(itkFixedArrayUL5 self, unsigned short index, unsigned long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUL5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long const &":
        """GetElement(itkFixedArrayUL5 self, unsigned short index) -> unsigned long const &"""
        return _itkFixedArrayPython.itkFixedArrayUL5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long const *":
        """
        GetDataPointer(itkFixedArrayUL5 self) -> unsigned long
        GetDataPointer(itkFixedArrayUL5 self) -> unsigned long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUL5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUL5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL5_Size(self)


    def Fill(self, arg0: 'unsigned long const &') -> "void":
        """Fill(itkFixedArrayUL5 self, unsigned long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUL5_Fill(self, arg0)


    def Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL5":
        """Filled(unsigned long const & arg0) -> itkFixedArrayUL5"""
        return _itkFixedArrayPython.itkFixedArrayUL5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUL5 self) -> itkFixedArrayUL5
        __init__(itkFixedArrayUL5 self, unsigned long const * r) -> itkFixedArrayUL5
        __init__(itkFixedArrayUL5 self, unsigned long const & r) -> itkFixedArrayUL5
        __init__(itkFixedArrayUL5 self, itkFixedArrayUL5 arg0) -> itkFixedArrayUL5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL5

    def __getitem__(self, d: 'unsigned long') -> "unsigned long":
        """__getitem__(itkFixedArrayUL5 self, unsigned long d) -> unsigned long"""
        return _itkFixedArrayPython.itkFixedArrayUL5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long') -> "void":
        """__setitem__(itkFixedArrayUL5 self, unsigned long d, unsigned long v)"""
        return _itkFixedArrayPython.itkFixedArrayUL5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUL5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUL5___repr__(self)

itkFixedArrayUL5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5___eq__, None, itkFixedArrayUL5)
itkFixedArrayUL5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5___ne__, None, itkFixedArrayUL5)
itkFixedArrayUL5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5_SetElement, None, itkFixedArrayUL5)
itkFixedArrayUL5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5_GetElement, None, itkFixedArrayUL5)
itkFixedArrayUL5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5_GetDataPointer, None, itkFixedArrayUL5)
itkFixedArrayUL5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5_Size, None, itkFixedArrayUL5)
itkFixedArrayUL5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5_Fill, None, itkFixedArrayUL5)
itkFixedArrayUL5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5___getitem__, None, itkFixedArrayUL5)
itkFixedArrayUL5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5___setitem__, None, itkFixedArrayUL5)
itkFixedArrayUL5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL5___repr__, None, itkFixedArrayUL5)
itkFixedArrayUL5_swigregister = _itkFixedArrayPython.itkFixedArrayUL5_swigregister
itkFixedArrayUL5_swigregister(itkFixedArrayUL5)

def itkFixedArrayUL5_Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL5":
    """itkFixedArrayUL5_Filled(unsigned long const & arg0) -> itkFixedArrayUL5"""
    return _itkFixedArrayPython.itkFixedArrayUL5_Filled(arg0)

def itkFixedArrayUL5___len__() -> "unsigned int":
    """itkFixedArrayUL5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUL5___len__()

class itkFixedArrayUL6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUL6') -> "bool":
        """__eq__(itkFixedArrayUL6 self, itkFixedArrayUL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUL6') -> "bool":
        """__ne__(itkFixedArrayUL6 self, itkFixedArrayUL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUL6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long const &') -> "void":
        """
        SetElement(itkFixedArrayUL6 self, unsigned short index, unsigned long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUL6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long const &":
        """GetElement(itkFixedArrayUL6 self, unsigned short index) -> unsigned long const &"""
        return _itkFixedArrayPython.itkFixedArrayUL6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long const *":
        """
        GetDataPointer(itkFixedArrayUL6 self) -> unsigned long
        GetDataPointer(itkFixedArrayUL6 self) -> unsigned long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUL6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUL6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL6_Size(self)


    def Fill(self, arg0: 'unsigned long const &') -> "void":
        """Fill(itkFixedArrayUL6 self, unsigned long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUL6_Fill(self, arg0)


    def Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL6":
        """Filled(unsigned long const & arg0) -> itkFixedArrayUL6"""
        return _itkFixedArrayPython.itkFixedArrayUL6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUL6 self) -> itkFixedArrayUL6
        __init__(itkFixedArrayUL6 self, unsigned long const * r) -> itkFixedArrayUL6
        __init__(itkFixedArrayUL6 self, unsigned long const & r) -> itkFixedArrayUL6
        __init__(itkFixedArrayUL6 self, itkFixedArrayUL6 arg0) -> itkFixedArrayUL6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUL6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUL6

    def __getitem__(self, d: 'unsigned long') -> "unsigned long":
        """__getitem__(itkFixedArrayUL6 self, unsigned long d) -> unsigned long"""
        return _itkFixedArrayPython.itkFixedArrayUL6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long') -> "void":
        """__setitem__(itkFixedArrayUL6 self, unsigned long d, unsigned long v)"""
        return _itkFixedArrayPython.itkFixedArrayUL6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUL6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUL6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUL6___repr__(self)

itkFixedArrayUL6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6___eq__, None, itkFixedArrayUL6)
itkFixedArrayUL6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6___ne__, None, itkFixedArrayUL6)
itkFixedArrayUL6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6_SetElement, None, itkFixedArrayUL6)
itkFixedArrayUL6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6_GetElement, None, itkFixedArrayUL6)
itkFixedArrayUL6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6_GetDataPointer, None, itkFixedArrayUL6)
itkFixedArrayUL6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6_Size, None, itkFixedArrayUL6)
itkFixedArrayUL6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6_Fill, None, itkFixedArrayUL6)
itkFixedArrayUL6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6___getitem__, None, itkFixedArrayUL6)
itkFixedArrayUL6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6___setitem__, None, itkFixedArrayUL6)
itkFixedArrayUL6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUL6___repr__, None, itkFixedArrayUL6)
itkFixedArrayUL6_swigregister = _itkFixedArrayPython.itkFixedArrayUL6_swigregister
itkFixedArrayUL6_swigregister(itkFixedArrayUL6)

def itkFixedArrayUL6_Filled(arg0: 'unsigned long const &') -> "itkFixedArrayUL6":
    """itkFixedArrayUL6_Filled(unsigned long const & arg0) -> itkFixedArrayUL6"""
    return _itkFixedArrayPython.itkFixedArrayUL6_Filled(arg0)

def itkFixedArrayUL6___len__() -> "unsigned int":
    """itkFixedArrayUL6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUL6___len__()

class itkFixedArrayULL1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayULL1') -> "bool":
        """__eq__(itkFixedArrayULL1 self, itkFixedArrayULL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayULL1') -> "bool":
        """__ne__(itkFixedArrayULL1 self, itkFixedArrayULL1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long long const &') -> "void":
        """
        SetElement(itkFixedArrayULL1 self, unsigned short index, unsigned long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayULL1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long long const &":
        """GetElement(itkFixedArrayULL1 self, unsigned short index) -> unsigned long long const &"""
        return _itkFixedArrayPython.itkFixedArrayULL1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long long const *":
        """
        GetDataPointer(itkFixedArrayULL1 self) -> unsigned long long
        GetDataPointer(itkFixedArrayULL1 self) -> unsigned long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayULL1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayULL1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL1_Size(self)


    def Fill(self, arg0: 'unsigned long long const &') -> "void":
        """Fill(itkFixedArrayULL1 self, unsigned long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayULL1_Fill(self, arg0)


    def Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL1":
        """Filled(unsigned long long const & arg0) -> itkFixedArrayULL1"""
        return _itkFixedArrayPython.itkFixedArrayULL1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayULL1 self) -> itkFixedArrayULL1
        __init__(itkFixedArrayULL1 self, unsigned long long const * r) -> itkFixedArrayULL1
        __init__(itkFixedArrayULL1 self, unsigned long long const & r) -> itkFixedArrayULL1
        __init__(itkFixedArrayULL1 self, itkFixedArrayULL1 arg0) -> itkFixedArrayULL1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayULL1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL1

    def __getitem__(self, d: 'unsigned long') -> "unsigned long long":
        """__getitem__(itkFixedArrayULL1 self, unsigned long d) -> unsigned long long"""
        return _itkFixedArrayPython.itkFixedArrayULL1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long long') -> "void":
        """__setitem__(itkFixedArrayULL1 self, unsigned long d, unsigned long long v)"""
        return _itkFixedArrayPython.itkFixedArrayULL1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayULL1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayULL1___repr__(self)

itkFixedArrayULL1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1___eq__, None, itkFixedArrayULL1)
itkFixedArrayULL1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1___ne__, None, itkFixedArrayULL1)
itkFixedArrayULL1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1_SetElement, None, itkFixedArrayULL1)
itkFixedArrayULL1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1_GetElement, None, itkFixedArrayULL1)
itkFixedArrayULL1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1_GetDataPointer, None, itkFixedArrayULL1)
itkFixedArrayULL1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1_Size, None, itkFixedArrayULL1)
itkFixedArrayULL1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1_Fill, None, itkFixedArrayULL1)
itkFixedArrayULL1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1___getitem__, None, itkFixedArrayULL1)
itkFixedArrayULL1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1___setitem__, None, itkFixedArrayULL1)
itkFixedArrayULL1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL1___repr__, None, itkFixedArrayULL1)
itkFixedArrayULL1_swigregister = _itkFixedArrayPython.itkFixedArrayULL1_swigregister
itkFixedArrayULL1_swigregister(itkFixedArrayULL1)

def itkFixedArrayULL1_Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL1":
    """itkFixedArrayULL1_Filled(unsigned long long const & arg0) -> itkFixedArrayULL1"""
    return _itkFixedArrayPython.itkFixedArrayULL1_Filled(arg0)

def itkFixedArrayULL1___len__() -> "unsigned int":
    """itkFixedArrayULL1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayULL1___len__()

class itkFixedArrayULL2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayULL2') -> "bool":
        """__eq__(itkFixedArrayULL2 self, itkFixedArrayULL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayULL2') -> "bool":
        """__ne__(itkFixedArrayULL2 self, itkFixedArrayULL2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long long const &') -> "void":
        """
        SetElement(itkFixedArrayULL2 self, unsigned short index, unsigned long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayULL2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long long const &":
        """GetElement(itkFixedArrayULL2 self, unsigned short index) -> unsigned long long const &"""
        return _itkFixedArrayPython.itkFixedArrayULL2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long long const *":
        """
        GetDataPointer(itkFixedArrayULL2 self) -> unsigned long long
        GetDataPointer(itkFixedArrayULL2 self) -> unsigned long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayULL2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayULL2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL2_Size(self)


    def Fill(self, arg0: 'unsigned long long const &') -> "void":
        """Fill(itkFixedArrayULL2 self, unsigned long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayULL2_Fill(self, arg0)


    def Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL2":
        """Filled(unsigned long long const & arg0) -> itkFixedArrayULL2"""
        return _itkFixedArrayPython.itkFixedArrayULL2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayULL2 self) -> itkFixedArrayULL2
        __init__(itkFixedArrayULL2 self, unsigned long long const * r) -> itkFixedArrayULL2
        __init__(itkFixedArrayULL2 self, unsigned long long const & r) -> itkFixedArrayULL2
        __init__(itkFixedArrayULL2 self, itkFixedArrayULL2 arg0) -> itkFixedArrayULL2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayULL2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL2

    def __getitem__(self, d: 'unsigned long') -> "unsigned long long":
        """__getitem__(itkFixedArrayULL2 self, unsigned long d) -> unsigned long long"""
        return _itkFixedArrayPython.itkFixedArrayULL2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long long') -> "void":
        """__setitem__(itkFixedArrayULL2 self, unsigned long d, unsigned long long v)"""
        return _itkFixedArrayPython.itkFixedArrayULL2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayULL2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayULL2___repr__(self)

itkFixedArrayULL2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2___eq__, None, itkFixedArrayULL2)
itkFixedArrayULL2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2___ne__, None, itkFixedArrayULL2)
itkFixedArrayULL2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2_SetElement, None, itkFixedArrayULL2)
itkFixedArrayULL2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2_GetElement, None, itkFixedArrayULL2)
itkFixedArrayULL2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2_GetDataPointer, None, itkFixedArrayULL2)
itkFixedArrayULL2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2_Size, None, itkFixedArrayULL2)
itkFixedArrayULL2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2_Fill, None, itkFixedArrayULL2)
itkFixedArrayULL2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2___getitem__, None, itkFixedArrayULL2)
itkFixedArrayULL2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2___setitem__, None, itkFixedArrayULL2)
itkFixedArrayULL2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL2___repr__, None, itkFixedArrayULL2)
itkFixedArrayULL2_swigregister = _itkFixedArrayPython.itkFixedArrayULL2_swigregister
itkFixedArrayULL2_swigregister(itkFixedArrayULL2)

def itkFixedArrayULL2_Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL2":
    """itkFixedArrayULL2_Filled(unsigned long long const & arg0) -> itkFixedArrayULL2"""
    return _itkFixedArrayPython.itkFixedArrayULL2_Filled(arg0)

def itkFixedArrayULL2___len__() -> "unsigned int":
    """itkFixedArrayULL2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayULL2___len__()

class itkFixedArrayULL3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayULL3') -> "bool":
        """__eq__(itkFixedArrayULL3 self, itkFixedArrayULL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayULL3') -> "bool":
        """__ne__(itkFixedArrayULL3 self, itkFixedArrayULL3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long long const &') -> "void":
        """
        SetElement(itkFixedArrayULL3 self, unsigned short index, unsigned long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayULL3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long long const &":
        """GetElement(itkFixedArrayULL3 self, unsigned short index) -> unsigned long long const &"""
        return _itkFixedArrayPython.itkFixedArrayULL3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long long const *":
        """
        GetDataPointer(itkFixedArrayULL3 self) -> unsigned long long
        GetDataPointer(itkFixedArrayULL3 self) -> unsigned long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayULL3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayULL3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL3_Size(self)


    def Fill(self, arg0: 'unsigned long long const &') -> "void":
        """Fill(itkFixedArrayULL3 self, unsigned long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayULL3_Fill(self, arg0)


    def Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL3":
        """Filled(unsigned long long const & arg0) -> itkFixedArrayULL3"""
        return _itkFixedArrayPython.itkFixedArrayULL3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayULL3 self) -> itkFixedArrayULL3
        __init__(itkFixedArrayULL3 self, unsigned long long const * r) -> itkFixedArrayULL3
        __init__(itkFixedArrayULL3 self, unsigned long long const & r) -> itkFixedArrayULL3
        __init__(itkFixedArrayULL3 self, itkFixedArrayULL3 arg0) -> itkFixedArrayULL3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayULL3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL3

    def __getitem__(self, d: 'unsigned long') -> "unsigned long long":
        """__getitem__(itkFixedArrayULL3 self, unsigned long d) -> unsigned long long"""
        return _itkFixedArrayPython.itkFixedArrayULL3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long long') -> "void":
        """__setitem__(itkFixedArrayULL3 self, unsigned long d, unsigned long long v)"""
        return _itkFixedArrayPython.itkFixedArrayULL3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayULL3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayULL3___repr__(self)

itkFixedArrayULL3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3___eq__, None, itkFixedArrayULL3)
itkFixedArrayULL3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3___ne__, None, itkFixedArrayULL3)
itkFixedArrayULL3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3_SetElement, None, itkFixedArrayULL3)
itkFixedArrayULL3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3_GetElement, None, itkFixedArrayULL3)
itkFixedArrayULL3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3_GetDataPointer, None, itkFixedArrayULL3)
itkFixedArrayULL3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3_Size, None, itkFixedArrayULL3)
itkFixedArrayULL3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3_Fill, None, itkFixedArrayULL3)
itkFixedArrayULL3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3___getitem__, None, itkFixedArrayULL3)
itkFixedArrayULL3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3___setitem__, None, itkFixedArrayULL3)
itkFixedArrayULL3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL3___repr__, None, itkFixedArrayULL3)
itkFixedArrayULL3_swigregister = _itkFixedArrayPython.itkFixedArrayULL3_swigregister
itkFixedArrayULL3_swigregister(itkFixedArrayULL3)

def itkFixedArrayULL3_Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL3":
    """itkFixedArrayULL3_Filled(unsigned long long const & arg0) -> itkFixedArrayULL3"""
    return _itkFixedArrayPython.itkFixedArrayULL3_Filled(arg0)

def itkFixedArrayULL3___len__() -> "unsigned int":
    """itkFixedArrayULL3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayULL3___len__()

class itkFixedArrayULL4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayULL4') -> "bool":
        """__eq__(itkFixedArrayULL4 self, itkFixedArrayULL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayULL4') -> "bool":
        """__ne__(itkFixedArrayULL4 self, itkFixedArrayULL4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long long const &') -> "void":
        """
        SetElement(itkFixedArrayULL4 self, unsigned short index, unsigned long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayULL4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long long const &":
        """GetElement(itkFixedArrayULL4 self, unsigned short index) -> unsigned long long const &"""
        return _itkFixedArrayPython.itkFixedArrayULL4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long long const *":
        """
        GetDataPointer(itkFixedArrayULL4 self) -> unsigned long long
        GetDataPointer(itkFixedArrayULL4 self) -> unsigned long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayULL4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayULL4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL4_Size(self)


    def Fill(self, arg0: 'unsigned long long const &') -> "void":
        """Fill(itkFixedArrayULL4 self, unsigned long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayULL4_Fill(self, arg0)


    def Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL4":
        """Filled(unsigned long long const & arg0) -> itkFixedArrayULL4"""
        return _itkFixedArrayPython.itkFixedArrayULL4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayULL4 self) -> itkFixedArrayULL4
        __init__(itkFixedArrayULL4 self, unsigned long long const * r) -> itkFixedArrayULL4
        __init__(itkFixedArrayULL4 self, unsigned long long const & r) -> itkFixedArrayULL4
        __init__(itkFixedArrayULL4 self, itkFixedArrayULL4 arg0) -> itkFixedArrayULL4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayULL4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL4

    def __getitem__(self, d: 'unsigned long') -> "unsigned long long":
        """__getitem__(itkFixedArrayULL4 self, unsigned long d) -> unsigned long long"""
        return _itkFixedArrayPython.itkFixedArrayULL4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long long') -> "void":
        """__setitem__(itkFixedArrayULL4 self, unsigned long d, unsigned long long v)"""
        return _itkFixedArrayPython.itkFixedArrayULL4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayULL4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayULL4___repr__(self)

itkFixedArrayULL4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4___eq__, None, itkFixedArrayULL4)
itkFixedArrayULL4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4___ne__, None, itkFixedArrayULL4)
itkFixedArrayULL4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4_SetElement, None, itkFixedArrayULL4)
itkFixedArrayULL4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4_GetElement, None, itkFixedArrayULL4)
itkFixedArrayULL4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4_GetDataPointer, None, itkFixedArrayULL4)
itkFixedArrayULL4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4_Size, None, itkFixedArrayULL4)
itkFixedArrayULL4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4_Fill, None, itkFixedArrayULL4)
itkFixedArrayULL4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4___getitem__, None, itkFixedArrayULL4)
itkFixedArrayULL4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4___setitem__, None, itkFixedArrayULL4)
itkFixedArrayULL4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL4___repr__, None, itkFixedArrayULL4)
itkFixedArrayULL4_swigregister = _itkFixedArrayPython.itkFixedArrayULL4_swigregister
itkFixedArrayULL4_swigregister(itkFixedArrayULL4)

def itkFixedArrayULL4_Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL4":
    """itkFixedArrayULL4_Filled(unsigned long long const & arg0) -> itkFixedArrayULL4"""
    return _itkFixedArrayPython.itkFixedArrayULL4_Filled(arg0)

def itkFixedArrayULL4___len__() -> "unsigned int":
    """itkFixedArrayULL4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayULL4___len__()

class itkFixedArrayULL5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayULL5') -> "bool":
        """__eq__(itkFixedArrayULL5 self, itkFixedArrayULL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayULL5') -> "bool":
        """__ne__(itkFixedArrayULL5 self, itkFixedArrayULL5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long long const &') -> "void":
        """
        SetElement(itkFixedArrayULL5 self, unsigned short index, unsigned long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayULL5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long long const &":
        """GetElement(itkFixedArrayULL5 self, unsigned short index) -> unsigned long long const &"""
        return _itkFixedArrayPython.itkFixedArrayULL5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long long const *":
        """
        GetDataPointer(itkFixedArrayULL5 self) -> unsigned long long
        GetDataPointer(itkFixedArrayULL5 self) -> unsigned long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayULL5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayULL5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL5_Size(self)


    def Fill(self, arg0: 'unsigned long long const &') -> "void":
        """Fill(itkFixedArrayULL5 self, unsigned long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayULL5_Fill(self, arg0)


    def Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL5":
        """Filled(unsigned long long const & arg0) -> itkFixedArrayULL5"""
        return _itkFixedArrayPython.itkFixedArrayULL5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayULL5 self) -> itkFixedArrayULL5
        __init__(itkFixedArrayULL5 self, unsigned long long const * r) -> itkFixedArrayULL5
        __init__(itkFixedArrayULL5 self, unsigned long long const & r) -> itkFixedArrayULL5
        __init__(itkFixedArrayULL5 self, itkFixedArrayULL5 arg0) -> itkFixedArrayULL5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayULL5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL5

    def __getitem__(self, d: 'unsigned long') -> "unsigned long long":
        """__getitem__(itkFixedArrayULL5 self, unsigned long d) -> unsigned long long"""
        return _itkFixedArrayPython.itkFixedArrayULL5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long long') -> "void":
        """__setitem__(itkFixedArrayULL5 self, unsigned long d, unsigned long long v)"""
        return _itkFixedArrayPython.itkFixedArrayULL5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayULL5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayULL5___repr__(self)

itkFixedArrayULL5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5___eq__, None, itkFixedArrayULL5)
itkFixedArrayULL5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5___ne__, None, itkFixedArrayULL5)
itkFixedArrayULL5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5_SetElement, None, itkFixedArrayULL5)
itkFixedArrayULL5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5_GetElement, None, itkFixedArrayULL5)
itkFixedArrayULL5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5_GetDataPointer, None, itkFixedArrayULL5)
itkFixedArrayULL5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5_Size, None, itkFixedArrayULL5)
itkFixedArrayULL5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5_Fill, None, itkFixedArrayULL5)
itkFixedArrayULL5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5___getitem__, None, itkFixedArrayULL5)
itkFixedArrayULL5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5___setitem__, None, itkFixedArrayULL5)
itkFixedArrayULL5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL5___repr__, None, itkFixedArrayULL5)
itkFixedArrayULL5_swigregister = _itkFixedArrayPython.itkFixedArrayULL5_swigregister
itkFixedArrayULL5_swigregister(itkFixedArrayULL5)

def itkFixedArrayULL5_Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL5":
    """itkFixedArrayULL5_Filled(unsigned long long const & arg0) -> itkFixedArrayULL5"""
    return _itkFixedArrayPython.itkFixedArrayULL5_Filled(arg0)

def itkFixedArrayULL5___len__() -> "unsigned int":
    """itkFixedArrayULL5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayULL5___len__()

class itkFixedArrayULL6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayULL6') -> "bool":
        """__eq__(itkFixedArrayULL6 self, itkFixedArrayULL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayULL6') -> "bool":
        """__ne__(itkFixedArrayULL6 self, itkFixedArrayULL6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayULL6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned long long const &') -> "void":
        """
        SetElement(itkFixedArrayULL6 self, unsigned short index, unsigned long long const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayULL6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned long long const &":
        """GetElement(itkFixedArrayULL6 self, unsigned short index) -> unsigned long long const &"""
        return _itkFixedArrayPython.itkFixedArrayULL6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned long long const *":
        """
        GetDataPointer(itkFixedArrayULL6 self) -> unsigned long long
        GetDataPointer(itkFixedArrayULL6 self) -> unsigned long long const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayULL6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayULL6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL6_Size(self)


    def Fill(self, arg0: 'unsigned long long const &') -> "void":
        """Fill(itkFixedArrayULL6 self, unsigned long long const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayULL6_Fill(self, arg0)


    def Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL6":
        """Filled(unsigned long long const & arg0) -> itkFixedArrayULL6"""
        return _itkFixedArrayPython.itkFixedArrayULL6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayULL6 self) -> itkFixedArrayULL6
        __init__(itkFixedArrayULL6 self, unsigned long long const * r) -> itkFixedArrayULL6
        __init__(itkFixedArrayULL6 self, unsigned long long const & r) -> itkFixedArrayULL6
        __init__(itkFixedArrayULL6 self, itkFixedArrayULL6 arg0) -> itkFixedArrayULL6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayULL6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayULL6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayULL6

    def __getitem__(self, d: 'unsigned long') -> "unsigned long long":
        """__getitem__(itkFixedArrayULL6 self, unsigned long d) -> unsigned long long"""
        return _itkFixedArrayPython.itkFixedArrayULL6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned long long') -> "void":
        """__setitem__(itkFixedArrayULL6 self, unsigned long d, unsigned long long v)"""
        return _itkFixedArrayPython.itkFixedArrayULL6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayULL6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayULL6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayULL6___repr__(self)

itkFixedArrayULL6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6___eq__, None, itkFixedArrayULL6)
itkFixedArrayULL6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6___ne__, None, itkFixedArrayULL6)
itkFixedArrayULL6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6_SetElement, None, itkFixedArrayULL6)
itkFixedArrayULL6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6_GetElement, None, itkFixedArrayULL6)
itkFixedArrayULL6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6_GetDataPointer, None, itkFixedArrayULL6)
itkFixedArrayULL6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6_Size, None, itkFixedArrayULL6)
itkFixedArrayULL6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6_Fill, None, itkFixedArrayULL6)
itkFixedArrayULL6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6___getitem__, None, itkFixedArrayULL6)
itkFixedArrayULL6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6___setitem__, None, itkFixedArrayULL6)
itkFixedArrayULL6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayULL6___repr__, None, itkFixedArrayULL6)
itkFixedArrayULL6_swigregister = _itkFixedArrayPython.itkFixedArrayULL6_swigregister
itkFixedArrayULL6_swigregister(itkFixedArrayULL6)

def itkFixedArrayULL6_Filled(arg0: 'unsigned long long const &') -> "itkFixedArrayULL6":
    """itkFixedArrayULL6_Filled(unsigned long long const & arg0) -> itkFixedArrayULL6"""
    return _itkFixedArrayPython.itkFixedArrayULL6_Filled(arg0)

def itkFixedArrayULL6___len__() -> "unsigned int":
    """itkFixedArrayULL6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayULL6___len__()

class itkFixedArrayUS1(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUS1') -> "bool":
        """__eq__(itkFixedArrayUS1 self, itkFixedArrayUS1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS1___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUS1') -> "bool":
        """__ne__(itkFixedArrayUS1 self, itkFixedArrayUS1 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS1___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned short const &') -> "void":
        """
        SetElement(itkFixedArrayUS1 self, unsigned short index, unsigned short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUS1_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned short const &":
        """GetElement(itkFixedArrayUS1 self, unsigned short index) -> unsigned short const &"""
        return _itkFixedArrayPython.itkFixedArrayUS1_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned short const *":
        """
        GetDataPointer(itkFixedArrayUS1 self) -> unsigned short
        GetDataPointer(itkFixedArrayUS1 self) -> unsigned short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUS1_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUS1 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS1_Size(self)


    def Fill(self, arg0: 'unsigned short const &') -> "void":
        """Fill(itkFixedArrayUS1 self, unsigned short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUS1_Fill(self, arg0)


    def Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS1":
        """Filled(unsigned short const & arg0) -> itkFixedArrayUS1"""
        return _itkFixedArrayPython.itkFixedArrayUS1_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUS1 self) -> itkFixedArrayUS1
        __init__(itkFixedArrayUS1 self, unsigned short const * r) -> itkFixedArrayUS1
        __init__(itkFixedArrayUS1 self, unsigned short const & r) -> itkFixedArrayUS1
        __init__(itkFixedArrayUS1 self, itkFixedArrayUS1 arg0) -> itkFixedArrayUS1



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUS1_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS1(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS1

    def __getitem__(self, d: 'unsigned long') -> "unsigned short":
        """__getitem__(itkFixedArrayUS1 self, unsigned long d) -> unsigned short"""
        return _itkFixedArrayPython.itkFixedArrayUS1___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned short') -> "void":
        """__setitem__(itkFixedArrayUS1 self, unsigned long d, unsigned short v)"""
        return _itkFixedArrayPython.itkFixedArrayUS1___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUS1 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUS1___repr__(self)

itkFixedArrayUS1.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1___eq__, None, itkFixedArrayUS1)
itkFixedArrayUS1.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1___ne__, None, itkFixedArrayUS1)
itkFixedArrayUS1.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1_SetElement, None, itkFixedArrayUS1)
itkFixedArrayUS1.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1_GetElement, None, itkFixedArrayUS1)
itkFixedArrayUS1.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1_GetDataPointer, None, itkFixedArrayUS1)
itkFixedArrayUS1.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1_Size, None, itkFixedArrayUS1)
itkFixedArrayUS1.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1_Fill, None, itkFixedArrayUS1)
itkFixedArrayUS1.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1___getitem__, None, itkFixedArrayUS1)
itkFixedArrayUS1.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1___setitem__, None, itkFixedArrayUS1)
itkFixedArrayUS1.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS1___repr__, None, itkFixedArrayUS1)
itkFixedArrayUS1_swigregister = _itkFixedArrayPython.itkFixedArrayUS1_swigregister
itkFixedArrayUS1_swigregister(itkFixedArrayUS1)

def itkFixedArrayUS1_Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS1":
    """itkFixedArrayUS1_Filled(unsigned short const & arg0) -> itkFixedArrayUS1"""
    return _itkFixedArrayPython.itkFixedArrayUS1_Filled(arg0)

def itkFixedArrayUS1___len__() -> "unsigned int":
    """itkFixedArrayUS1___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUS1___len__()

class itkFixedArrayUS2(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUS2') -> "bool":
        """__eq__(itkFixedArrayUS2 self, itkFixedArrayUS2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS2___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUS2') -> "bool":
        """__ne__(itkFixedArrayUS2 self, itkFixedArrayUS2 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS2___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned short const &') -> "void":
        """
        SetElement(itkFixedArrayUS2 self, unsigned short index, unsigned short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUS2_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned short const &":
        """GetElement(itkFixedArrayUS2 self, unsigned short index) -> unsigned short const &"""
        return _itkFixedArrayPython.itkFixedArrayUS2_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned short const *":
        """
        GetDataPointer(itkFixedArrayUS2 self) -> unsigned short
        GetDataPointer(itkFixedArrayUS2 self) -> unsigned short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUS2_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUS2 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS2_Size(self)


    def Fill(self, arg0: 'unsigned short const &') -> "void":
        """Fill(itkFixedArrayUS2 self, unsigned short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUS2_Fill(self, arg0)


    def Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS2":
        """Filled(unsigned short const & arg0) -> itkFixedArrayUS2"""
        return _itkFixedArrayPython.itkFixedArrayUS2_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUS2 self) -> itkFixedArrayUS2
        __init__(itkFixedArrayUS2 self, unsigned short const * r) -> itkFixedArrayUS2
        __init__(itkFixedArrayUS2 self, unsigned short const & r) -> itkFixedArrayUS2
        __init__(itkFixedArrayUS2 self, itkFixedArrayUS2 arg0) -> itkFixedArrayUS2



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUS2_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS2(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS2

    def __getitem__(self, d: 'unsigned long') -> "unsigned short":
        """__getitem__(itkFixedArrayUS2 self, unsigned long d) -> unsigned short"""
        return _itkFixedArrayPython.itkFixedArrayUS2___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned short') -> "void":
        """__setitem__(itkFixedArrayUS2 self, unsigned long d, unsigned short v)"""
        return _itkFixedArrayPython.itkFixedArrayUS2___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUS2 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUS2___repr__(self)

itkFixedArrayUS2.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2___eq__, None, itkFixedArrayUS2)
itkFixedArrayUS2.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2___ne__, None, itkFixedArrayUS2)
itkFixedArrayUS2.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2_SetElement, None, itkFixedArrayUS2)
itkFixedArrayUS2.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2_GetElement, None, itkFixedArrayUS2)
itkFixedArrayUS2.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2_GetDataPointer, None, itkFixedArrayUS2)
itkFixedArrayUS2.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2_Size, None, itkFixedArrayUS2)
itkFixedArrayUS2.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2_Fill, None, itkFixedArrayUS2)
itkFixedArrayUS2.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2___getitem__, None, itkFixedArrayUS2)
itkFixedArrayUS2.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2___setitem__, None, itkFixedArrayUS2)
itkFixedArrayUS2.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS2___repr__, None, itkFixedArrayUS2)
itkFixedArrayUS2_swigregister = _itkFixedArrayPython.itkFixedArrayUS2_swigregister
itkFixedArrayUS2_swigregister(itkFixedArrayUS2)

def itkFixedArrayUS2_Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS2":
    """itkFixedArrayUS2_Filled(unsigned short const & arg0) -> itkFixedArrayUS2"""
    return _itkFixedArrayPython.itkFixedArrayUS2_Filled(arg0)

def itkFixedArrayUS2___len__() -> "unsigned int":
    """itkFixedArrayUS2___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUS2___len__()

class itkFixedArrayUS3(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUS3') -> "bool":
        """__eq__(itkFixedArrayUS3 self, itkFixedArrayUS3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS3___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUS3') -> "bool":
        """__ne__(itkFixedArrayUS3 self, itkFixedArrayUS3 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS3___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned short const &') -> "void":
        """
        SetElement(itkFixedArrayUS3 self, unsigned short index, unsigned short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUS3_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned short const &":
        """GetElement(itkFixedArrayUS3 self, unsigned short index) -> unsigned short const &"""
        return _itkFixedArrayPython.itkFixedArrayUS3_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned short const *":
        """
        GetDataPointer(itkFixedArrayUS3 self) -> unsigned short
        GetDataPointer(itkFixedArrayUS3 self) -> unsigned short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUS3_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUS3 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS3_Size(self)


    def Fill(self, arg0: 'unsigned short const &') -> "void":
        """Fill(itkFixedArrayUS3 self, unsigned short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUS3_Fill(self, arg0)


    def Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS3":
        """Filled(unsigned short const & arg0) -> itkFixedArrayUS3"""
        return _itkFixedArrayPython.itkFixedArrayUS3_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUS3 self) -> itkFixedArrayUS3
        __init__(itkFixedArrayUS3 self, unsigned short const * r) -> itkFixedArrayUS3
        __init__(itkFixedArrayUS3 self, unsigned short const & r) -> itkFixedArrayUS3
        __init__(itkFixedArrayUS3 self, itkFixedArrayUS3 arg0) -> itkFixedArrayUS3



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUS3_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS3(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS3

    def __getitem__(self, d: 'unsigned long') -> "unsigned short":
        """__getitem__(itkFixedArrayUS3 self, unsigned long d) -> unsigned short"""
        return _itkFixedArrayPython.itkFixedArrayUS3___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned short') -> "void":
        """__setitem__(itkFixedArrayUS3 self, unsigned long d, unsigned short v)"""
        return _itkFixedArrayPython.itkFixedArrayUS3___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS3___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUS3 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUS3___repr__(self)

itkFixedArrayUS3.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3___eq__, None, itkFixedArrayUS3)
itkFixedArrayUS3.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3___ne__, None, itkFixedArrayUS3)
itkFixedArrayUS3.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3_SetElement, None, itkFixedArrayUS3)
itkFixedArrayUS3.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3_GetElement, None, itkFixedArrayUS3)
itkFixedArrayUS3.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3_GetDataPointer, None, itkFixedArrayUS3)
itkFixedArrayUS3.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3_Size, None, itkFixedArrayUS3)
itkFixedArrayUS3.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3_Fill, None, itkFixedArrayUS3)
itkFixedArrayUS3.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3___getitem__, None, itkFixedArrayUS3)
itkFixedArrayUS3.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3___setitem__, None, itkFixedArrayUS3)
itkFixedArrayUS3.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS3___repr__, None, itkFixedArrayUS3)
itkFixedArrayUS3_swigregister = _itkFixedArrayPython.itkFixedArrayUS3_swigregister
itkFixedArrayUS3_swigregister(itkFixedArrayUS3)

def itkFixedArrayUS3_Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS3":
    """itkFixedArrayUS3_Filled(unsigned short const & arg0) -> itkFixedArrayUS3"""
    return _itkFixedArrayPython.itkFixedArrayUS3_Filled(arg0)

def itkFixedArrayUS3___len__() -> "unsigned int":
    """itkFixedArrayUS3___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUS3___len__()

class itkFixedArrayUS4(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUS4') -> "bool":
        """__eq__(itkFixedArrayUS4 self, itkFixedArrayUS4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS4___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUS4') -> "bool":
        """__ne__(itkFixedArrayUS4 self, itkFixedArrayUS4 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS4___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned short const &') -> "void":
        """
        SetElement(itkFixedArrayUS4 self, unsigned short index, unsigned short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUS4_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned short const &":
        """GetElement(itkFixedArrayUS4 self, unsigned short index) -> unsigned short const &"""
        return _itkFixedArrayPython.itkFixedArrayUS4_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned short const *":
        """
        GetDataPointer(itkFixedArrayUS4 self) -> unsigned short
        GetDataPointer(itkFixedArrayUS4 self) -> unsigned short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUS4_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUS4 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS4_Size(self)


    def Fill(self, arg0: 'unsigned short const &') -> "void":
        """Fill(itkFixedArrayUS4 self, unsigned short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUS4_Fill(self, arg0)


    def Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS4":
        """Filled(unsigned short const & arg0) -> itkFixedArrayUS4"""
        return _itkFixedArrayPython.itkFixedArrayUS4_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUS4 self) -> itkFixedArrayUS4
        __init__(itkFixedArrayUS4 self, unsigned short const * r) -> itkFixedArrayUS4
        __init__(itkFixedArrayUS4 self, unsigned short const & r) -> itkFixedArrayUS4
        __init__(itkFixedArrayUS4 self, itkFixedArrayUS4 arg0) -> itkFixedArrayUS4



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUS4_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS4(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS4

    def __getitem__(self, d: 'unsigned long') -> "unsigned short":
        """__getitem__(itkFixedArrayUS4 self, unsigned long d) -> unsigned short"""
        return _itkFixedArrayPython.itkFixedArrayUS4___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned short') -> "void":
        """__setitem__(itkFixedArrayUS4 self, unsigned long d, unsigned short v)"""
        return _itkFixedArrayPython.itkFixedArrayUS4___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS4___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUS4 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUS4___repr__(self)

itkFixedArrayUS4.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4___eq__, None, itkFixedArrayUS4)
itkFixedArrayUS4.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4___ne__, None, itkFixedArrayUS4)
itkFixedArrayUS4.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4_SetElement, None, itkFixedArrayUS4)
itkFixedArrayUS4.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4_GetElement, None, itkFixedArrayUS4)
itkFixedArrayUS4.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4_GetDataPointer, None, itkFixedArrayUS4)
itkFixedArrayUS4.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4_Size, None, itkFixedArrayUS4)
itkFixedArrayUS4.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4_Fill, None, itkFixedArrayUS4)
itkFixedArrayUS4.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4___getitem__, None, itkFixedArrayUS4)
itkFixedArrayUS4.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4___setitem__, None, itkFixedArrayUS4)
itkFixedArrayUS4.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS4___repr__, None, itkFixedArrayUS4)
itkFixedArrayUS4_swigregister = _itkFixedArrayPython.itkFixedArrayUS4_swigregister
itkFixedArrayUS4_swigregister(itkFixedArrayUS4)

def itkFixedArrayUS4_Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS4":
    """itkFixedArrayUS4_Filled(unsigned short const & arg0) -> itkFixedArrayUS4"""
    return _itkFixedArrayPython.itkFixedArrayUS4_Filled(arg0)

def itkFixedArrayUS4___len__() -> "unsigned int":
    """itkFixedArrayUS4___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUS4___len__()

class itkFixedArrayUS5(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUS5') -> "bool":
        """__eq__(itkFixedArrayUS5 self, itkFixedArrayUS5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS5___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUS5') -> "bool":
        """__ne__(itkFixedArrayUS5 self, itkFixedArrayUS5 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS5___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned short const &') -> "void":
        """
        SetElement(itkFixedArrayUS5 self, unsigned short index, unsigned short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUS5_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned short const &":
        """GetElement(itkFixedArrayUS5 self, unsigned short index) -> unsigned short const &"""
        return _itkFixedArrayPython.itkFixedArrayUS5_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned short const *":
        """
        GetDataPointer(itkFixedArrayUS5 self) -> unsigned short
        GetDataPointer(itkFixedArrayUS5 self) -> unsigned short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUS5_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUS5 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS5_Size(self)


    def Fill(self, arg0: 'unsigned short const &') -> "void":
        """Fill(itkFixedArrayUS5 self, unsigned short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUS5_Fill(self, arg0)


    def Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS5":
        """Filled(unsigned short const & arg0) -> itkFixedArrayUS5"""
        return _itkFixedArrayPython.itkFixedArrayUS5_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUS5 self) -> itkFixedArrayUS5
        __init__(itkFixedArrayUS5 self, unsigned short const * r) -> itkFixedArrayUS5
        __init__(itkFixedArrayUS5 self, unsigned short const & r) -> itkFixedArrayUS5
        __init__(itkFixedArrayUS5 self, itkFixedArrayUS5 arg0) -> itkFixedArrayUS5



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUS5_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS5(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS5

    def __getitem__(self, d: 'unsigned long') -> "unsigned short":
        """__getitem__(itkFixedArrayUS5 self, unsigned long d) -> unsigned short"""
        return _itkFixedArrayPython.itkFixedArrayUS5___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned short') -> "void":
        """__setitem__(itkFixedArrayUS5 self, unsigned long d, unsigned short v)"""
        return _itkFixedArrayPython.itkFixedArrayUS5___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS5___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUS5 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUS5___repr__(self)

itkFixedArrayUS5.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5___eq__, None, itkFixedArrayUS5)
itkFixedArrayUS5.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5___ne__, None, itkFixedArrayUS5)
itkFixedArrayUS5.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5_SetElement, None, itkFixedArrayUS5)
itkFixedArrayUS5.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5_GetElement, None, itkFixedArrayUS5)
itkFixedArrayUS5.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5_GetDataPointer, None, itkFixedArrayUS5)
itkFixedArrayUS5.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5_Size, None, itkFixedArrayUS5)
itkFixedArrayUS5.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5_Fill, None, itkFixedArrayUS5)
itkFixedArrayUS5.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5___getitem__, None, itkFixedArrayUS5)
itkFixedArrayUS5.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5___setitem__, None, itkFixedArrayUS5)
itkFixedArrayUS5.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS5___repr__, None, itkFixedArrayUS5)
itkFixedArrayUS5_swigregister = _itkFixedArrayPython.itkFixedArrayUS5_swigregister
itkFixedArrayUS5_swigregister(itkFixedArrayUS5)

def itkFixedArrayUS5_Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS5":
    """itkFixedArrayUS5_Filled(unsigned short const & arg0) -> itkFixedArrayUS5"""
    return _itkFixedArrayPython.itkFixedArrayUS5_Filled(arg0)

def itkFixedArrayUS5___len__() -> "unsigned int":
    """itkFixedArrayUS5___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUS5___len__()

class itkFixedArrayUS6(object):
    """


    Simulate a standard C array with copy semnatics.

    Simulates a standard C array, except that copy semantics are used
    instead of reference semantics. Also, arrays of different sizes cannot
    be assigned to one another, and size information is known for function
    returns.

    Parameters:
    -----------

    TValue:  Element type stored at each location in the array.

    VLength:  = Length of the array.

    The length of the array is fixed at compile time. If you wish to
    specify the length of the array at run-time, use the class itk::Array.
    If you wish to change to change the length of the array at run-time,
    you're best off using std::vector<>.

    Wiki Examples:

    All Examples

    C++ includes: itkFixedArray.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __eq__(self, r: 'itkFixedArrayUS6') -> "bool":
        """__eq__(itkFixedArrayUS6 self, itkFixedArrayUS6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS6___eq__(self, r)


    def __ne__(self, r: 'itkFixedArrayUS6') -> "bool":
        """__ne__(itkFixedArrayUS6 self, itkFixedArrayUS6 r) -> bool"""
        return _itkFixedArrayPython.itkFixedArrayUS6___ne__(self, r)


    def SetElement(self, index: 'unsigned short', value: 'unsigned short const &') -> "void":
        """
        SetElement(itkFixedArrayUS6 self, unsigned short index, unsigned short const & value)

        Set/Get element methods
        are more convenient in wrapping languages 
        """
        return _itkFixedArrayPython.itkFixedArrayUS6_SetElement(self, index, value)


    def GetElement(self, index: 'unsigned short') -> "unsigned short const &":
        """GetElement(itkFixedArrayUS6 self, unsigned short index) -> unsigned short const &"""
        return _itkFixedArrayPython.itkFixedArrayUS6_GetElement(self, index)


    def GetDataPointer(self, *args) -> "unsigned short const *":
        """
        GetDataPointer(itkFixedArrayUS6 self) -> unsigned short
        GetDataPointer(itkFixedArrayUS6 self) -> unsigned short const *

        Return a pointer to
        the data. 
        """
        return _itkFixedArrayPython.itkFixedArrayUS6_GetDataPointer(self, *args)


    def Size(self) -> "unsigned int":
        """Size(itkFixedArrayUS6 self) -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS6_Size(self)


    def Fill(self, arg0: 'unsigned short const &') -> "void":
        """Fill(itkFixedArrayUS6 self, unsigned short const & arg0)"""
        return _itkFixedArrayPython.itkFixedArrayUS6_Fill(self, arg0)


    def Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS6":
        """Filled(unsigned short const & arg0) -> itkFixedArrayUS6"""
        return _itkFixedArrayPython.itkFixedArrayUS6_Filled(arg0)

    Filled = staticmethod(Filled)

    def __init__(self, *args):
        """
        __init__(itkFixedArrayUS6 self) -> itkFixedArrayUS6
        __init__(itkFixedArrayUS6 self, unsigned short const * r) -> itkFixedArrayUS6
        __init__(itkFixedArrayUS6 self, unsigned short const & r) -> itkFixedArrayUS6
        __init__(itkFixedArrayUS6 self, itkFixedArrayUS6 arg0) -> itkFixedArrayUS6



        Simulate a standard C array with copy semnatics.

        Simulates a standard C array, except that copy semantics are used
        instead of reference semantics. Also, arrays of different sizes cannot
        be assigned to one another, and size information is known for function
        returns.

        Parameters:
        -----------

        TValue:  Element type stored at each location in the array.

        VLength:  = Length of the array.

        The length of the array is fixed at compile time. If you wish to
        specify the length of the array at run-time, use the class itk::Array.
        If you wish to change to change the length of the array at run-time,
        you're best off using std::vector<>.

        Wiki Examples:

        All Examples

        C++ includes: itkFixedArray.h 
        """
        _itkFixedArrayPython.itkFixedArrayUS6_swiginit(self, _itkFixedArrayPython.new_itkFixedArrayUS6(*args))
    __swig_destroy__ = _itkFixedArrayPython.delete_itkFixedArrayUS6

    def __getitem__(self, d: 'unsigned long') -> "unsigned short":
        """__getitem__(itkFixedArrayUS6 self, unsigned long d) -> unsigned short"""
        return _itkFixedArrayPython.itkFixedArrayUS6___getitem__(self, d)


    def __setitem__(self, d: 'unsigned long', v: 'unsigned short') -> "void":
        """__setitem__(itkFixedArrayUS6 self, unsigned long d, unsigned short v)"""
        return _itkFixedArrayPython.itkFixedArrayUS6___setitem__(self, d, v)


    def __len__() -> "unsigned int":
        """__len__() -> unsigned int"""
        return _itkFixedArrayPython.itkFixedArrayUS6___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self) -> "std::string":
        """__repr__(itkFixedArrayUS6 self) -> std::string"""
        return _itkFixedArrayPython.itkFixedArrayUS6___repr__(self)

itkFixedArrayUS6.__eq__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6___eq__, None, itkFixedArrayUS6)
itkFixedArrayUS6.__ne__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6___ne__, None, itkFixedArrayUS6)
itkFixedArrayUS6.SetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6_SetElement, None, itkFixedArrayUS6)
itkFixedArrayUS6.GetElement = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6_GetElement, None, itkFixedArrayUS6)
itkFixedArrayUS6.GetDataPointer = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6_GetDataPointer, None, itkFixedArrayUS6)
itkFixedArrayUS6.Size = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6_Size, None, itkFixedArrayUS6)
itkFixedArrayUS6.Fill = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6_Fill, None, itkFixedArrayUS6)
itkFixedArrayUS6.__getitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6___getitem__, None, itkFixedArrayUS6)
itkFixedArrayUS6.__setitem__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6___setitem__, None, itkFixedArrayUS6)
itkFixedArrayUS6.__repr__ = new_instancemethod(_itkFixedArrayPython.itkFixedArrayUS6___repr__, None, itkFixedArrayUS6)
itkFixedArrayUS6_swigregister = _itkFixedArrayPython.itkFixedArrayUS6_swigregister
itkFixedArrayUS6_swigregister(itkFixedArrayUS6)

def itkFixedArrayUS6_Filled(arg0: 'unsigned short const &') -> "itkFixedArrayUS6":
    """itkFixedArrayUS6_Filled(unsigned short const & arg0) -> itkFixedArrayUS6"""
    return _itkFixedArrayPython.itkFixedArrayUS6_Filled(arg0)

def itkFixedArrayUS6___len__() -> "unsigned int":
    """itkFixedArrayUS6___len__() -> unsigned int"""
    return _itkFixedArrayPython.itkFixedArrayUS6___len__()



