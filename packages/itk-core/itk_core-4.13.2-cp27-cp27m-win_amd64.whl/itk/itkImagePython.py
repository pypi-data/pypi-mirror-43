# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImagePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImagePython', [dirname(__file__)])
        except ImportError:
            import _itkImagePython
            return _itkImagePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImagePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImagePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImagePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython

def itkImageCVD43_New():
  return itkImageCVD43.New()


def itkImageCVD33_New():
  return itkImageCVD33.New()


def itkImageCVD23_New():
  return itkImageCVD23.New()


def itkImageCVD42_New():
  return itkImageCVD42.New()


def itkImageCVD32_New():
  return itkImageCVD32.New()


def itkImageCVD22_New():
  return itkImageCVD22.New()


def itkImageVF13_New():
  return itkImageVF13.New()


def itkImageVD44_New():
  return itkImageVD44.New()


def itkImageVD34_New():
  return itkImageVD34.New()


def itkImageVD24_New():
  return itkImageVD24.New()


def itkImageVF12_New():
  return itkImageVF12.New()


def itkImageSSRTD33_New():
  return itkImageSSRTD33.New()


def itkImageO33_New():
  return itkImageO33.New()


def itkImageFAF33_New():
  return itkImageFAF33.New()


def itkImageB3_New():
  return itkImageB3.New()


def itkImageVD43_New():
  return itkImageVD43.New()


def itkImageVD33_New():
  return itkImageVD33.New()


def itkImageVD23_New():
  return itkImageVD23.New()


def itkImageULL3_New():
  return itkImageULL3.New()


def itkImageUL3_New():
  return itkImageUL3.New()


def itkImageD3_New():
  return itkImageD3.New()


def itkImageCF3_New():
  return itkImageCF3.New()


def itkImageF3_New():
  return itkImageF3.New()


def itkImageUS3_New():
  return itkImageUS3.New()


def itkImageUC3_New():
  return itkImageUC3.New()


def itkImageSS3_New():
  return itkImageSS3.New()


def itkImageCVF43_New():
  return itkImageCVF43.New()


def itkImageCVF33_New():
  return itkImageCVF33.New()


def itkImageCVF23_New():
  return itkImageCVF23.New()


def itkImageVF43_New():
  return itkImageVF43.New()


def itkImageVF33_New():
  return itkImageVF33.New()


def itkImageVF23_New():
  return itkImageVF23.New()


def itkImageRGBAUC3_New():
  return itkImageRGBAUC3.New()


def itkImageRGBUC3_New():
  return itkImageRGBUC3.New()


def itkImageSSRTD22_New():
  return itkImageSSRTD22.New()


def itkImageO22_New():
  return itkImageO22.New()


def itkImageFAF22_New():
  return itkImageFAF22.New()


def itkImageB2_New():
  return itkImageB2.New()


def itkImageVD42_New():
  return itkImageVD42.New()


def itkImageVD32_New():
  return itkImageVD32.New()


def itkImageVD22_New():
  return itkImageVD22.New()


def itkImageULL2_New():
  return itkImageULL2.New()


def itkImageUL2_New():
  return itkImageUL2.New()


def itkImageD2_New():
  return itkImageD2.New()


def itkImageCF2_New():
  return itkImageCF2.New()


def itkImageF2_New():
  return itkImageF2.New()


def itkImageUS2_New():
  return itkImageUS2.New()


def itkImageUC2_New():
  return itkImageUC2.New()


def itkImageSS2_New():
  return itkImageSS2.New()


def itkImageCVF42_New():
  return itkImageCVF42.New()


def itkImageCVF32_New():
  return itkImageCVF32.New()


def itkImageCVF22_New():
  return itkImageCVF22.New()


def itkImageVF42_New():
  return itkImageVF42.New()


def itkImageVF32_New():
  return itkImageVF32.New()


def itkImageVF22_New():
  return itkImageVF22.New()


def itkImageRGBAUC2_New():
  return itkImageRGBAUC2.New()


def itkImageRGBUC2_New():
  return itkImageRGBUC2.New()


def itkImageBase4_New():
  return itkImageBase4.New()


def itkImageBase3_New():
  return itkImageBase3.New()


def itkImageBase2_New():
  return itkImageBase2.New()

class itkImageBase2(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkImageBase2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageBase2 self) -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2_Clone(self)


    def GetImageDimension():
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase2_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args):
        """
        SetOrigin(itkImageBase2 self, itkPointD2 _arg)
        SetOrigin(itkImageBase2 self, double const * origin)
        SetOrigin(itkImageBase2 self, float const * origin)
        """
        return _itkImagePython.itkImageBase2_SetOrigin(self, *args)


    def SetDirection(self, direction):
        """SetDirection(itkImageBase2 self, itkMatrixD22 direction)"""
        return _itkImagePython.itkImageBase2_SetDirection(self, direction)


    def GetDirection(self):
        """GetDirection(itkImageBase2 self) -> itkMatrixD22"""
        return _itkImagePython.itkImageBase2_GetDirection(self)


    def GetInverseDirection(self):
        """GetInverseDirection(itkImageBase2 self) -> itkMatrixD22"""
        return _itkImagePython.itkImageBase2_GetInverseDirection(self)


    def GetSpacing(self):
        """GetSpacing(itkImageBase2 self) -> itkVectorD2"""
        return _itkImagePython.itkImageBase2_GetSpacing(self)


    def GetOrigin(self):
        """GetOrigin(itkImageBase2 self) -> itkPointD2"""
        return _itkImagePython.itkImageBase2_GetOrigin(self)


    def Allocate(self, initialize=False):
        """
        Allocate(itkImageBase2 self, bool initialize=False)
        Allocate(itkImageBase2 self)
        """
        return _itkImagePython.itkImageBase2_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region):
        """SetLargestPossibleRegion(itkImageBase2 self, itkImageRegion2 region)"""
        return _itkImagePython.itkImageBase2_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self):
        """GetLargestPossibleRegion(itkImageBase2 self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region):
        """SetBufferedRegion(itkImageBase2 self, itkImageRegion2 region)"""
        return _itkImagePython.itkImageBase2_SetBufferedRegion(self, region)


    def GetBufferedRegion(self):
        """GetBufferedRegion(itkImageBase2 self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args):
        """
        SetRequestedRegion(itkImageBase2 self, itkImageRegion2 region)
        SetRequestedRegion(itkImageBase2 self, itkDataObject data)
        """
        return _itkImagePython.itkImageBase2_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self):
        """GetRequestedRegion(itkImageBase2 self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2_GetRequestedRegion(self)


    def SetRegions(self, *args):
        """
        SetRegions(itkImageBase2 self, itkImageRegion2 region)
        SetRegions(itkImageBase2 self, itkSize2 size)
        """
        return _itkImagePython.itkImageBase2_SetRegions(self, *args)


    def GetOffsetTable(self):
        """GetOffsetTable(itkImageBase2 self) -> long long const *"""
        return _itkImagePython.itkImageBase2_GetOffsetTable(self)


    def ComputeOffset(self, ind):
        """ComputeOffset(itkImageBase2 self, itkIndex2 ind) -> long long"""
        return _itkImagePython.itkImageBase2_ComputeOffset(self, ind)


    def ComputeIndex(self, offset):
        """ComputeIndex(itkImageBase2 self, long long offset) -> itkIndex2"""
        return _itkImagePython.itkImageBase2_ComputeIndex(self, offset)


    def SetSpacing(self, *args):
        """
        SetSpacing(itkImageBase2 self, itkVectorD2 spacing)
        SetSpacing(itkImageBase2 self, double const * spacing)
        SetSpacing(itkImageBase2 self, float const * spacing)
        """
        return _itkImagePython.itkImageBase2_SetSpacing(self, *args)


    def Graft(self, data):
        """Graft(itkImageBase2 self, itkImageBase2 data)"""
        return _itkImagePython.itkImageBase2_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self):
        """GetNumberOfComponentsPerPixel(itkImageBase2 self) -> unsigned int"""
        return _itkImagePython.itkImageBase2_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0):
        """SetNumberOfComponentsPerPixel(itkImageBase2 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase2_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageBase2"""
        return _itkImagePython.itkImageBase2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageBase2 self) -> itkImageBase2"""
        return _itkImagePython.itkImageBase2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageBase2

        Create a new object of the class itkImageBase2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def TransformPhysicalPointToIndex(self, point):
        """TransformPhysicalPointToIndex(itkImageBase2 self, itkPointD2 point) -> itkIndex2"""
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point):
        """TransformPhysicalPointToContinuousIndex(itkImageBase2 self, itkPointD2 point) -> itkContinuousIndexD2"""
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx):
        """TransformContinuousIndexToPhysicalPoint(itkImageBase2 self, itkContinuousIndexD2 & idx) -> itkPointD2"""
        return _itkImagePython.itkImageBase2_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx):
        """TransformIndexToPhysicalPoint(itkImageBase2 self, itkIndex2 idx) -> itkPointD2"""
        return _itkImagePython.itkImageBase2_TransformIndexToPhysicalPoint(self, idx)

itkImageBase2.Clone = new_instancemethod(_itkImagePython.itkImageBase2_Clone, None, itkImageBase2)
itkImageBase2.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase2_SetOrigin, None, itkImageBase2)
itkImageBase2.SetDirection = new_instancemethod(_itkImagePython.itkImageBase2_SetDirection, None, itkImageBase2)
itkImageBase2.GetDirection = new_instancemethod(_itkImagePython.itkImageBase2_GetDirection, None, itkImageBase2)
itkImageBase2.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase2_GetInverseDirection, None, itkImageBase2)
itkImageBase2.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase2_GetSpacing, None, itkImageBase2)
itkImageBase2.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase2_GetOrigin, None, itkImageBase2)
itkImageBase2.Allocate = new_instancemethod(_itkImagePython.itkImageBase2_Allocate, None, itkImageBase2)
itkImageBase2.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetLargestPossibleRegion, None, itkImageBase2)
itkImageBase2.GetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase2_GetLargestPossibleRegion, None, itkImageBase2)
itkImageBase2.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetBufferedRegion, None, itkImageBase2)
itkImageBase2.GetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase2_GetBufferedRegion, None, itkImageBase2)
itkImageBase2.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase2_SetRequestedRegion, None, itkImageBase2)
itkImageBase2.GetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase2_GetRequestedRegion, None, itkImageBase2)
itkImageBase2.SetRegions = new_instancemethod(_itkImagePython.itkImageBase2_SetRegions, None, itkImageBase2)
itkImageBase2.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase2_GetOffsetTable, None, itkImageBase2)
itkImageBase2.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase2_ComputeOffset, None, itkImageBase2)
itkImageBase2.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase2_ComputeIndex, None, itkImageBase2)
itkImageBase2.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase2_SetSpacing, None, itkImageBase2)
itkImageBase2.Graft = new_instancemethod(_itkImagePython.itkImageBase2_Graft, None, itkImageBase2)
itkImageBase2.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase2_GetNumberOfComponentsPerPixel, None, itkImageBase2)
itkImageBase2.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase2_SetNumberOfComponentsPerPixel, None, itkImageBase2)
itkImageBase2.GetPointer = new_instancemethod(_itkImagePython.itkImageBase2_GetPointer, None, itkImageBase2)
itkImageBase2.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase2_TransformPhysicalPointToIndex, None, itkImageBase2)
itkImageBase2.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase2_TransformPhysicalPointToContinuousIndex, None, itkImageBase2)
itkImageBase2.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase2_TransformContinuousIndexToPhysicalPoint, None, itkImageBase2)
itkImageBase2.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase2_TransformIndexToPhysicalPoint, None, itkImageBase2)
itkImageBase2_swigregister = _itkImagePython.itkImageBase2_swigregister
itkImageBase2_swigregister(itkImageBase2)

def itkImageBase2___New_orig__():
    """itkImageBase2___New_orig__() -> itkImageBase2_Pointer"""
    return _itkImagePython.itkImageBase2___New_orig__()

def itkImageBase2_GetImageDimension():
    """itkImageBase2_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase2_GetImageDimension()

def itkImageBase2_cast(obj):
    """itkImageBase2_cast(itkLightObject obj) -> itkImageBase2"""
    return _itkImagePython.itkImageBase2_cast(obj)

class itkImageBase3(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkImageBase3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageBase3 self) -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3_Clone(self)


    def GetImageDimension():
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase3_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args):
        """
        SetOrigin(itkImageBase3 self, itkPointD3 _arg)
        SetOrigin(itkImageBase3 self, double const * origin)
        SetOrigin(itkImageBase3 self, float const * origin)
        """
        return _itkImagePython.itkImageBase3_SetOrigin(self, *args)


    def SetDirection(self, direction):
        """SetDirection(itkImageBase3 self, itkMatrixD33 direction)"""
        return _itkImagePython.itkImageBase3_SetDirection(self, direction)


    def GetDirection(self):
        """GetDirection(itkImageBase3 self) -> itkMatrixD33"""
        return _itkImagePython.itkImageBase3_GetDirection(self)


    def GetInverseDirection(self):
        """GetInverseDirection(itkImageBase3 self) -> itkMatrixD33"""
        return _itkImagePython.itkImageBase3_GetInverseDirection(self)


    def GetSpacing(self):
        """GetSpacing(itkImageBase3 self) -> itkVectorD3"""
        return _itkImagePython.itkImageBase3_GetSpacing(self)


    def GetOrigin(self):
        """GetOrigin(itkImageBase3 self) -> itkPointD3"""
        return _itkImagePython.itkImageBase3_GetOrigin(self)


    def Allocate(self, initialize=False):
        """
        Allocate(itkImageBase3 self, bool initialize=False)
        Allocate(itkImageBase3 self)
        """
        return _itkImagePython.itkImageBase3_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region):
        """SetLargestPossibleRegion(itkImageBase3 self, itkImageRegion3 region)"""
        return _itkImagePython.itkImageBase3_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self):
        """GetLargestPossibleRegion(itkImageBase3 self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region):
        """SetBufferedRegion(itkImageBase3 self, itkImageRegion3 region)"""
        return _itkImagePython.itkImageBase3_SetBufferedRegion(self, region)


    def GetBufferedRegion(self):
        """GetBufferedRegion(itkImageBase3 self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args):
        """
        SetRequestedRegion(itkImageBase3 self, itkImageRegion3 region)
        SetRequestedRegion(itkImageBase3 self, itkDataObject data)
        """
        return _itkImagePython.itkImageBase3_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self):
        """GetRequestedRegion(itkImageBase3 self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3_GetRequestedRegion(self)


    def SetRegions(self, *args):
        """
        SetRegions(itkImageBase3 self, itkImageRegion3 region)
        SetRegions(itkImageBase3 self, itkSize3 size)
        """
        return _itkImagePython.itkImageBase3_SetRegions(self, *args)


    def GetOffsetTable(self):
        """GetOffsetTable(itkImageBase3 self) -> long long const *"""
        return _itkImagePython.itkImageBase3_GetOffsetTable(self)


    def ComputeOffset(self, ind):
        """ComputeOffset(itkImageBase3 self, itkIndex3 ind) -> long long"""
        return _itkImagePython.itkImageBase3_ComputeOffset(self, ind)


    def ComputeIndex(self, offset):
        """ComputeIndex(itkImageBase3 self, long long offset) -> itkIndex3"""
        return _itkImagePython.itkImageBase3_ComputeIndex(self, offset)


    def SetSpacing(self, *args):
        """
        SetSpacing(itkImageBase3 self, itkVectorD3 spacing)
        SetSpacing(itkImageBase3 self, double const * spacing)
        SetSpacing(itkImageBase3 self, float const * spacing)
        """
        return _itkImagePython.itkImageBase3_SetSpacing(self, *args)


    def Graft(self, data):
        """Graft(itkImageBase3 self, itkImageBase3 data)"""
        return _itkImagePython.itkImageBase3_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self):
        """GetNumberOfComponentsPerPixel(itkImageBase3 self) -> unsigned int"""
        return _itkImagePython.itkImageBase3_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0):
        """SetNumberOfComponentsPerPixel(itkImageBase3 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase3_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageBase3"""
        return _itkImagePython.itkImageBase3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageBase3 self) -> itkImageBase3"""
        return _itkImagePython.itkImageBase3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageBase3

        Create a new object of the class itkImageBase3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def TransformPhysicalPointToIndex(self, point):
        """TransformPhysicalPointToIndex(itkImageBase3 self, itkPointD3 point) -> itkIndex3"""
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point):
        """TransformPhysicalPointToContinuousIndex(itkImageBase3 self, itkPointD3 point) -> itkContinuousIndexD3"""
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx):
        """TransformContinuousIndexToPhysicalPoint(itkImageBase3 self, itkContinuousIndexD3 & idx) -> itkPointD3"""
        return _itkImagePython.itkImageBase3_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx):
        """TransformIndexToPhysicalPoint(itkImageBase3 self, itkIndex3 idx) -> itkPointD3"""
        return _itkImagePython.itkImageBase3_TransformIndexToPhysicalPoint(self, idx)

itkImageBase3.Clone = new_instancemethod(_itkImagePython.itkImageBase3_Clone, None, itkImageBase3)
itkImageBase3.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase3_SetOrigin, None, itkImageBase3)
itkImageBase3.SetDirection = new_instancemethod(_itkImagePython.itkImageBase3_SetDirection, None, itkImageBase3)
itkImageBase3.GetDirection = new_instancemethod(_itkImagePython.itkImageBase3_GetDirection, None, itkImageBase3)
itkImageBase3.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase3_GetInverseDirection, None, itkImageBase3)
itkImageBase3.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase3_GetSpacing, None, itkImageBase3)
itkImageBase3.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase3_GetOrigin, None, itkImageBase3)
itkImageBase3.Allocate = new_instancemethod(_itkImagePython.itkImageBase3_Allocate, None, itkImageBase3)
itkImageBase3.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetLargestPossibleRegion, None, itkImageBase3)
itkImageBase3.GetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase3_GetLargestPossibleRegion, None, itkImageBase3)
itkImageBase3.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetBufferedRegion, None, itkImageBase3)
itkImageBase3.GetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase3_GetBufferedRegion, None, itkImageBase3)
itkImageBase3.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase3_SetRequestedRegion, None, itkImageBase3)
itkImageBase3.GetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase3_GetRequestedRegion, None, itkImageBase3)
itkImageBase3.SetRegions = new_instancemethod(_itkImagePython.itkImageBase3_SetRegions, None, itkImageBase3)
itkImageBase3.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase3_GetOffsetTable, None, itkImageBase3)
itkImageBase3.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase3_ComputeOffset, None, itkImageBase3)
itkImageBase3.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase3_ComputeIndex, None, itkImageBase3)
itkImageBase3.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase3_SetSpacing, None, itkImageBase3)
itkImageBase3.Graft = new_instancemethod(_itkImagePython.itkImageBase3_Graft, None, itkImageBase3)
itkImageBase3.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase3_GetNumberOfComponentsPerPixel, None, itkImageBase3)
itkImageBase3.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase3_SetNumberOfComponentsPerPixel, None, itkImageBase3)
itkImageBase3.GetPointer = new_instancemethod(_itkImagePython.itkImageBase3_GetPointer, None, itkImageBase3)
itkImageBase3.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase3_TransformPhysicalPointToIndex, None, itkImageBase3)
itkImageBase3.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase3_TransformPhysicalPointToContinuousIndex, None, itkImageBase3)
itkImageBase3.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase3_TransformContinuousIndexToPhysicalPoint, None, itkImageBase3)
itkImageBase3.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase3_TransformIndexToPhysicalPoint, None, itkImageBase3)
itkImageBase3_swigregister = _itkImagePython.itkImageBase3_swigregister
itkImageBase3_swigregister(itkImageBase3)

def itkImageBase3___New_orig__():
    """itkImageBase3___New_orig__() -> itkImageBase3_Pointer"""
    return _itkImagePython.itkImageBase3___New_orig__()

def itkImageBase3_GetImageDimension():
    """itkImageBase3_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase3_GetImageDimension()

def itkImageBase3_cast(obj):
    """itkImageBase3_cast(itkLightObject obj) -> itkImageBase3"""
    return _itkImagePython.itkImageBase3_cast(obj)

class itkImageBase4(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkImageBase4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageBase4 self) -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4_Clone(self)


    def GetImageDimension():
        """GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase4_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args):
        """
        SetOrigin(itkImageBase4 self, itkPointD4 _arg)
        SetOrigin(itkImageBase4 self, double const * origin)
        SetOrigin(itkImageBase4 self, float const * origin)
        """
        return _itkImagePython.itkImageBase4_SetOrigin(self, *args)


    def SetDirection(self, direction):
        """SetDirection(itkImageBase4 self, itkMatrixD44 direction)"""
        return _itkImagePython.itkImageBase4_SetDirection(self, direction)


    def GetDirection(self):
        """GetDirection(itkImageBase4 self) -> itkMatrixD44"""
        return _itkImagePython.itkImageBase4_GetDirection(self)


    def GetInverseDirection(self):
        """GetInverseDirection(itkImageBase4 self) -> itkMatrixD44"""
        return _itkImagePython.itkImageBase4_GetInverseDirection(self)


    def GetSpacing(self):
        """GetSpacing(itkImageBase4 self) -> itkVectorD4"""
        return _itkImagePython.itkImageBase4_GetSpacing(self)


    def GetOrigin(self):
        """GetOrigin(itkImageBase4 self) -> itkPointD4"""
        return _itkImagePython.itkImageBase4_GetOrigin(self)


    def Allocate(self, initialize=False):
        """
        Allocate(itkImageBase4 self, bool initialize=False)
        Allocate(itkImageBase4 self)
        """
        return _itkImagePython.itkImageBase4_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region):
        """SetLargestPossibleRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)"""
        return _itkImagePython.itkImageBase4_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self):
        """GetLargestPossibleRegion(itkImageBase4 self) -> itk::ImageRegion< 4 > const &"""
        return _itkImagePython.itkImageBase4_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region):
        """SetBufferedRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)"""
        return _itkImagePython.itkImageBase4_SetBufferedRegion(self, region)


    def GetBufferedRegion(self):
        """GetBufferedRegion(itkImageBase4 self) -> itk::ImageRegion< 4 > const &"""
        return _itkImagePython.itkImageBase4_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args):
        """
        SetRequestedRegion(itkImageBase4 self, itk::ImageRegion< 4 > const & region)
        SetRequestedRegion(itkImageBase4 self, itkDataObject data)
        """
        return _itkImagePython.itkImageBase4_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self):
        """GetRequestedRegion(itkImageBase4 self) -> itk::ImageRegion< 4 > const &"""
        return _itkImagePython.itkImageBase4_GetRequestedRegion(self)


    def SetRegions(self, *args):
        """
        SetRegions(itkImageBase4 self, itk::ImageRegion< 4 > const & region)
        SetRegions(itkImageBase4 self, itkSize4 size)
        """
        return _itkImagePython.itkImageBase4_SetRegions(self, *args)


    def GetOffsetTable(self):
        """GetOffsetTable(itkImageBase4 self) -> long long const *"""
        return _itkImagePython.itkImageBase4_GetOffsetTable(self)


    def ComputeOffset(self, ind):
        """ComputeOffset(itkImageBase4 self, itkIndex4 ind) -> long long"""
        return _itkImagePython.itkImageBase4_ComputeOffset(self, ind)


    def ComputeIndex(self, offset):
        """ComputeIndex(itkImageBase4 self, long long offset) -> itkIndex4"""
        return _itkImagePython.itkImageBase4_ComputeIndex(self, offset)


    def SetSpacing(self, *args):
        """
        SetSpacing(itkImageBase4 self, itkVectorD4 spacing)
        SetSpacing(itkImageBase4 self, double const * spacing)
        SetSpacing(itkImageBase4 self, float const * spacing)
        """
        return _itkImagePython.itkImageBase4_SetSpacing(self, *args)


    def Graft(self, data):
        """Graft(itkImageBase4 self, itkImageBase4 data)"""
        return _itkImagePython.itkImageBase4_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self):
        """GetNumberOfComponentsPerPixel(itkImageBase4 self) -> unsigned int"""
        return _itkImagePython.itkImageBase4_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0):
        """SetNumberOfComponentsPerPixel(itkImageBase4 self, unsigned int arg0)"""
        return _itkImagePython.itkImageBase4_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImagePython.delete_itkImageBase4

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageBase4"""
        return _itkImagePython.itkImageBase4_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageBase4 self) -> itkImageBase4"""
        return _itkImagePython.itkImageBase4_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageBase4

        Create a new object of the class itkImageBase4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def TransformPhysicalPointToIndex(self, point):
        """TransformPhysicalPointToIndex(itkImageBase4 self, itkPointD4 point) -> itkIndex4"""
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point):
        """TransformPhysicalPointToContinuousIndex(itkImageBase4 self, itkPointD4 point) -> itkContinuousIndexD4"""
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx):
        """TransformContinuousIndexToPhysicalPoint(itkImageBase4 self, itkContinuousIndexD4 & idx) -> itkPointD4"""
        return _itkImagePython.itkImageBase4_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx):
        """TransformIndexToPhysicalPoint(itkImageBase4 self, itkIndex4 idx) -> itkPointD4"""
        return _itkImagePython.itkImageBase4_TransformIndexToPhysicalPoint(self, idx)

itkImageBase4.Clone = new_instancemethod(_itkImagePython.itkImageBase4_Clone, None, itkImageBase4)
itkImageBase4.SetOrigin = new_instancemethod(_itkImagePython.itkImageBase4_SetOrigin, None, itkImageBase4)
itkImageBase4.SetDirection = new_instancemethod(_itkImagePython.itkImageBase4_SetDirection, None, itkImageBase4)
itkImageBase4.GetDirection = new_instancemethod(_itkImagePython.itkImageBase4_GetDirection, None, itkImageBase4)
itkImageBase4.GetInverseDirection = new_instancemethod(_itkImagePython.itkImageBase4_GetInverseDirection, None, itkImageBase4)
itkImageBase4.GetSpacing = new_instancemethod(_itkImagePython.itkImageBase4_GetSpacing, None, itkImageBase4)
itkImageBase4.GetOrigin = new_instancemethod(_itkImagePython.itkImageBase4_GetOrigin, None, itkImageBase4)
itkImageBase4.Allocate = new_instancemethod(_itkImagePython.itkImageBase4_Allocate, None, itkImageBase4)
itkImageBase4.SetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetLargestPossibleRegion, None, itkImageBase4)
itkImageBase4.GetLargestPossibleRegion = new_instancemethod(_itkImagePython.itkImageBase4_GetLargestPossibleRegion, None, itkImageBase4)
itkImageBase4.SetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetBufferedRegion, None, itkImageBase4)
itkImageBase4.GetBufferedRegion = new_instancemethod(_itkImagePython.itkImageBase4_GetBufferedRegion, None, itkImageBase4)
itkImageBase4.SetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase4_SetRequestedRegion, None, itkImageBase4)
itkImageBase4.GetRequestedRegion = new_instancemethod(_itkImagePython.itkImageBase4_GetRequestedRegion, None, itkImageBase4)
itkImageBase4.SetRegions = new_instancemethod(_itkImagePython.itkImageBase4_SetRegions, None, itkImageBase4)
itkImageBase4.GetOffsetTable = new_instancemethod(_itkImagePython.itkImageBase4_GetOffsetTable, None, itkImageBase4)
itkImageBase4.ComputeOffset = new_instancemethod(_itkImagePython.itkImageBase4_ComputeOffset, None, itkImageBase4)
itkImageBase4.ComputeIndex = new_instancemethod(_itkImagePython.itkImageBase4_ComputeIndex, None, itkImageBase4)
itkImageBase4.SetSpacing = new_instancemethod(_itkImagePython.itkImageBase4_SetSpacing, None, itkImageBase4)
itkImageBase4.Graft = new_instancemethod(_itkImagePython.itkImageBase4_Graft, None, itkImageBase4)
itkImageBase4.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase4_GetNumberOfComponentsPerPixel, None, itkImageBase4)
itkImageBase4.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImagePython.itkImageBase4_SetNumberOfComponentsPerPixel, None, itkImageBase4)
itkImageBase4.GetPointer = new_instancemethod(_itkImagePython.itkImageBase4_GetPointer, None, itkImageBase4)
itkImageBase4.TransformPhysicalPointToIndex = new_instancemethod(_itkImagePython.itkImageBase4_TransformPhysicalPointToIndex, None, itkImageBase4)
itkImageBase4.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImagePython.itkImageBase4_TransformPhysicalPointToContinuousIndex, None, itkImageBase4)
itkImageBase4.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase4_TransformContinuousIndexToPhysicalPoint, None, itkImageBase4)
itkImageBase4.TransformIndexToPhysicalPoint = new_instancemethod(_itkImagePython.itkImageBase4_TransformIndexToPhysicalPoint, None, itkImageBase4)
itkImageBase4_swigregister = _itkImagePython.itkImageBase4_swigregister
itkImageBase4_swigregister(itkImageBase4)

def itkImageBase4___New_orig__():
    """itkImageBase4___New_orig__() -> itkImageBase4_Pointer"""
    return _itkImagePython.itkImageBase4___New_orig__()

def itkImageBase4_GetImageDimension():
    """itkImageBase4_GetImageDimension() -> unsigned int"""
    return _itkImagePython.itkImageBase4_GetImageDimension()

def itkImageBase4_cast(obj):
    """itkImageBase4_cast(itkLightObject obj) -> itkImageBase4"""
    return _itkImagePython.itkImageBase4_cast(obj)

class itkImageCF2(itkImageBase2):
    """Proxy of C++ itkImageCF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCF2 self) -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCF2 self, bool initializePixels=False)
        Allocate(itkImageCF2 self)
        """
        return _itkImagePython.itkImageCF2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCF2 self, stdcomplexF value)"""
        return _itkImagePython.itkImageCF2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCF2 self, itkIndex2 index, stdcomplexF value)"""
        return _itkImagePython.itkImageCF2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCF2 self, itkIndex2 index) -> stdcomplexF
        GetPixel(itkImageCF2 self, itkIndex2 index) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCF2 self) -> stdcomplexF
        GetBufferPointer(itkImageCF2 self) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCF2 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > >
        GetPixelContainer(itkImageCF2 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > > const *
        """
        return _itkImagePython.itkImageCF2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCF2 self, itk::ImportImageContainer< unsigned long long,std::complex< float > > * container)"""
        return _itkImagePython.itkImageCF2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCF2 self, itkImageCF2 data)"""
        return _itkImagePython.itkImageCF2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCF2 self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(itkImageCF2 self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkImagePython.itkImageCF2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > >
        GetNeighborhoodAccessor(itkImageCF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,2 > > const
        """
        return _itkImagePython.itkImageCF2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCF2"""
        return _itkImagePython.itkImageCF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCF2 self) -> itkImageCF2"""
        return _itkImagePython.itkImageCF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCF2

        Create a new object of the class itkImageCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCF2.Clone = new_instancemethod(_itkImagePython.itkImageCF2_Clone, None, itkImageCF2)
itkImageCF2.Allocate = new_instancemethod(_itkImagePython.itkImageCF2_Allocate, None, itkImageCF2)
itkImageCF2.FillBuffer = new_instancemethod(_itkImagePython.itkImageCF2_FillBuffer, None, itkImageCF2)
itkImageCF2.SetPixel = new_instancemethod(_itkImagePython.itkImageCF2_SetPixel, None, itkImageCF2)
itkImageCF2.GetPixel = new_instancemethod(_itkImagePython.itkImageCF2_GetPixel, None, itkImageCF2)
itkImageCF2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCF2_GetBufferPointer, None, itkImageCF2)
itkImageCF2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF2_GetPixelContainer, None, itkImageCF2)
itkImageCF2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF2_SetPixelContainer, None, itkImageCF2)
itkImageCF2.Graft = new_instancemethod(_itkImagePython.itkImageCF2_Graft, None, itkImageCF2)
itkImageCF2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCF2_GetPixelAccessor, None, itkImageCF2)
itkImageCF2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCF2_GetNeighborhoodAccessor, None, itkImageCF2)
itkImageCF2.GetPointer = new_instancemethod(_itkImagePython.itkImageCF2_GetPointer, None, itkImageCF2)
itkImageCF2_swigregister = _itkImagePython.itkImageCF2_swigregister
itkImageCF2_swigregister(itkImageCF2)

def itkImageCF2___New_orig__():
    """itkImageCF2___New_orig__() -> itkImageCF2_Pointer"""
    return _itkImagePython.itkImageCF2___New_orig__()

def itkImageCF2_cast(obj):
    """itkImageCF2_cast(itkLightObject obj) -> itkImageCF2"""
    return _itkImagePython.itkImageCF2_cast(obj)

class itkImageCF3(itkImageBase3):
    """Proxy of C++ itkImageCF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCF3 self) -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCF3 self, bool initializePixels=False)
        Allocate(itkImageCF3 self)
        """
        return _itkImagePython.itkImageCF3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCF3 self, stdcomplexF value)"""
        return _itkImagePython.itkImageCF3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCF3 self, itkIndex3 index, stdcomplexF value)"""
        return _itkImagePython.itkImageCF3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCF3 self, itkIndex3 index) -> stdcomplexF
        GetPixel(itkImageCF3 self, itkIndex3 index) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCF3 self) -> stdcomplexF
        GetBufferPointer(itkImageCF3 self) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCF3 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > >
        GetPixelContainer(itkImageCF3 self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > > const *
        """
        return _itkImagePython.itkImageCF3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCF3 self, itk::ImportImageContainer< unsigned long long,std::complex< float > > * container)"""
        return _itkImagePython.itkImageCF3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCF3 self, itkImageCF3 data)"""
        return _itkImagePython.itkImageCF3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCF3 self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(itkImageCF3 self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkImagePython.itkImageCF3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > >
        GetNeighborhoodAccessor(itkImageCF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > > const
        """
        return _itkImagePython.itkImageCF3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCF3"""
        return _itkImagePython.itkImageCF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCF3 self) -> itkImageCF3"""
        return _itkImagePython.itkImageCF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCF3

        Create a new object of the class itkImageCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCF3.Clone = new_instancemethod(_itkImagePython.itkImageCF3_Clone, None, itkImageCF3)
itkImageCF3.Allocate = new_instancemethod(_itkImagePython.itkImageCF3_Allocate, None, itkImageCF3)
itkImageCF3.FillBuffer = new_instancemethod(_itkImagePython.itkImageCF3_FillBuffer, None, itkImageCF3)
itkImageCF3.SetPixel = new_instancemethod(_itkImagePython.itkImageCF3_SetPixel, None, itkImageCF3)
itkImageCF3.GetPixel = new_instancemethod(_itkImagePython.itkImageCF3_GetPixel, None, itkImageCF3)
itkImageCF3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCF3_GetBufferPointer, None, itkImageCF3)
itkImageCF3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF3_GetPixelContainer, None, itkImageCF3)
itkImageCF3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCF3_SetPixelContainer, None, itkImageCF3)
itkImageCF3.Graft = new_instancemethod(_itkImagePython.itkImageCF3_Graft, None, itkImageCF3)
itkImageCF3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCF3_GetPixelAccessor, None, itkImageCF3)
itkImageCF3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCF3_GetNeighborhoodAccessor, None, itkImageCF3)
itkImageCF3.GetPointer = new_instancemethod(_itkImagePython.itkImageCF3_GetPointer, None, itkImageCF3)
itkImageCF3_swigregister = _itkImagePython.itkImageCF3_swigregister
itkImageCF3_swigregister(itkImageCF3)

def itkImageCF3___New_orig__():
    """itkImageCF3___New_orig__() -> itkImageCF3_Pointer"""
    return _itkImagePython.itkImageCF3___New_orig__()

def itkImageCF3_cast(obj):
    """itkImageCF3_cast(itkLightObject obj) -> itkImageCF3"""
    return _itkImagePython.itkImageCF3_cast(obj)

class itkImageCVD22(itkImageBase2):
    """Proxy of C++ itkImageCVD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVD22 self) -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVD22 self, bool initializePixels=False)
        Allocate(itkImageCVD22 self)
        """
        return _itkImagePython.itkImageCVD22_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVD22 self, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD22_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVD22 self, itkIndex2 index, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD22_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVD22 self, itkIndex2 index) -> itkCovariantVectorD2
        GetPixel(itkImageCVD22 self, itkIndex2 index) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVD22 self) -> itkCovariantVectorD2
        GetBufferPointer(itkImageCVD22 self) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > >
        GetPixelContainer(itkImageCVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *
        """
        return _itkImagePython.itkImageCVD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVD22 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > * container)"""
        return _itkImagePython.itkImageCVD22_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVD22 self, itkImageCVD22 data)"""
        return _itkImagePython.itkImageCVD22_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVD22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(itkImageCVD22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const
        """
        return _itkImagePython.itkImageCVD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,2 > > const
        """
        return _itkImagePython.itkImageCVD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD22

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVD22"""
        return _itkImagePython.itkImageCVD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVD22 self) -> itkImageCVD22"""
        return _itkImagePython.itkImageCVD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD22

        Create a new object of the class itkImageCVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD22.Clone = new_instancemethod(_itkImagePython.itkImageCVD22_Clone, None, itkImageCVD22)
itkImageCVD22.Allocate = new_instancemethod(_itkImagePython.itkImageCVD22_Allocate, None, itkImageCVD22)
itkImageCVD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD22_FillBuffer, None, itkImageCVD22)
itkImageCVD22.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD22_SetPixel, None, itkImageCVD22)
itkImageCVD22.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixel, None, itkImageCVD22)
itkImageCVD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD22_GetBufferPointer, None, itkImageCVD22)
itkImageCVD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixelContainer, None, itkImageCVD22)
itkImageCVD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD22_SetPixelContainer, None, itkImageCVD22)
itkImageCVD22.Graft = new_instancemethod(_itkImagePython.itkImageCVD22_Graft, None, itkImageCVD22)
itkImageCVD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD22_GetPixelAccessor, None, itkImageCVD22)
itkImageCVD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD22_GetNeighborhoodAccessor, None, itkImageCVD22)
itkImageCVD22.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD22_GetPointer, None, itkImageCVD22)
itkImageCVD22_swigregister = _itkImagePython.itkImageCVD22_swigregister
itkImageCVD22_swigregister(itkImageCVD22)

def itkImageCVD22___New_orig__():
    """itkImageCVD22___New_orig__() -> itkImageCVD22_Pointer"""
    return _itkImagePython.itkImageCVD22___New_orig__()

def itkImageCVD22_cast(obj):
    """itkImageCVD22_cast(itkLightObject obj) -> itkImageCVD22"""
    return _itkImagePython.itkImageCVD22_cast(obj)

class itkImageCVD23(itkImageBase3):
    """Proxy of C++ itkImageCVD23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVD23 self) -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVD23 self, bool initializePixels=False)
        Allocate(itkImageCVD23 self)
        """
        return _itkImagePython.itkImageCVD23_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVD23 self, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD23_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVD23 self, itkIndex3 index, itkCovariantVectorD2 value)"""
        return _itkImagePython.itkImageCVD23_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVD23 self, itkIndex3 index) -> itkCovariantVectorD2
        GetPixel(itkImageCVD23 self, itkIndex3 index) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD23_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVD23 self) -> itkCovariantVectorD2
        GetBufferPointer(itkImageCVD23 self) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > >
        GetPixelContainer(itkImageCVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *
        """
        return _itkImagePython.itkImageCVD23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVD23 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > * container)"""
        return _itkImagePython.itkImageCVD23_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVD23 self, itkImageCVD23 data)"""
        return _itkImagePython.itkImageCVD23_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVD23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(itkImageCVD23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const
        """
        return _itkImagePython.itkImageCVD23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > > const
        """
        return _itkImagePython.itkImageCVD23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD23

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVD23"""
        return _itkImagePython.itkImageCVD23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVD23 self) -> itkImageCVD23"""
        return _itkImagePython.itkImageCVD23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD23

        Create a new object of the class itkImageCVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD23.Clone = new_instancemethod(_itkImagePython.itkImageCVD23_Clone, None, itkImageCVD23)
itkImageCVD23.Allocate = new_instancemethod(_itkImagePython.itkImageCVD23_Allocate, None, itkImageCVD23)
itkImageCVD23.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD23_FillBuffer, None, itkImageCVD23)
itkImageCVD23.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD23_SetPixel, None, itkImageCVD23)
itkImageCVD23.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixel, None, itkImageCVD23)
itkImageCVD23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD23_GetBufferPointer, None, itkImageCVD23)
itkImageCVD23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixelContainer, None, itkImageCVD23)
itkImageCVD23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD23_SetPixelContainer, None, itkImageCVD23)
itkImageCVD23.Graft = new_instancemethod(_itkImagePython.itkImageCVD23_Graft, None, itkImageCVD23)
itkImageCVD23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD23_GetPixelAccessor, None, itkImageCVD23)
itkImageCVD23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD23_GetNeighborhoodAccessor, None, itkImageCVD23)
itkImageCVD23.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD23_GetPointer, None, itkImageCVD23)
itkImageCVD23_swigregister = _itkImagePython.itkImageCVD23_swigregister
itkImageCVD23_swigregister(itkImageCVD23)

def itkImageCVD23___New_orig__():
    """itkImageCVD23___New_orig__() -> itkImageCVD23_Pointer"""
    return _itkImagePython.itkImageCVD23___New_orig__()

def itkImageCVD23_cast(obj):
    """itkImageCVD23_cast(itkLightObject obj) -> itkImageCVD23"""
    return _itkImagePython.itkImageCVD23_cast(obj)

class itkImageCVD32(itkImageBase2):
    """Proxy of C++ itkImageCVD32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVD32 self) -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVD32 self, bool initializePixels=False)
        Allocate(itkImageCVD32 self)
        """
        return _itkImagePython.itkImageCVD32_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVD32 self, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD32_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVD32 self, itkIndex2 index, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD32_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVD32 self, itkIndex2 index) -> itkCovariantVectorD3
        GetPixel(itkImageCVD32 self, itkIndex2 index) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD32_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVD32 self) -> itkCovariantVectorD3
        GetBufferPointer(itkImageCVD32 self) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > >
        GetPixelContainer(itkImageCVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > const *
        """
        return _itkImagePython.itkImageCVD32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVD32 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > * container)"""
        return _itkImagePython.itkImageCVD32_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVD32 self, itkImageCVD32 data)"""
        return _itkImagePython.itkImageCVD32_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVD32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > >
        GetPixelAccessor(itkImageCVD32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const
        """
        return _itkImagePython.itkImageCVD32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,2 > > const
        """
        return _itkImagePython.itkImageCVD32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD32

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVD32"""
        return _itkImagePython.itkImageCVD32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVD32 self) -> itkImageCVD32"""
        return _itkImagePython.itkImageCVD32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD32

        Create a new object of the class itkImageCVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD32.Clone = new_instancemethod(_itkImagePython.itkImageCVD32_Clone, None, itkImageCVD32)
itkImageCVD32.Allocate = new_instancemethod(_itkImagePython.itkImageCVD32_Allocate, None, itkImageCVD32)
itkImageCVD32.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD32_FillBuffer, None, itkImageCVD32)
itkImageCVD32.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD32_SetPixel, None, itkImageCVD32)
itkImageCVD32.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixel, None, itkImageCVD32)
itkImageCVD32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD32_GetBufferPointer, None, itkImageCVD32)
itkImageCVD32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixelContainer, None, itkImageCVD32)
itkImageCVD32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD32_SetPixelContainer, None, itkImageCVD32)
itkImageCVD32.Graft = new_instancemethod(_itkImagePython.itkImageCVD32_Graft, None, itkImageCVD32)
itkImageCVD32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD32_GetPixelAccessor, None, itkImageCVD32)
itkImageCVD32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD32_GetNeighborhoodAccessor, None, itkImageCVD32)
itkImageCVD32.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD32_GetPointer, None, itkImageCVD32)
itkImageCVD32_swigregister = _itkImagePython.itkImageCVD32_swigregister
itkImageCVD32_swigregister(itkImageCVD32)

def itkImageCVD32___New_orig__():
    """itkImageCVD32___New_orig__() -> itkImageCVD32_Pointer"""
    return _itkImagePython.itkImageCVD32___New_orig__()

def itkImageCVD32_cast(obj):
    """itkImageCVD32_cast(itkLightObject obj) -> itkImageCVD32"""
    return _itkImagePython.itkImageCVD32_cast(obj)

class itkImageCVD33(itkImageBase3):
    """Proxy of C++ itkImageCVD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVD33 self) -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVD33 self, bool initializePixels=False)
        Allocate(itkImageCVD33 self)
        """
        return _itkImagePython.itkImageCVD33_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVD33 self, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD33_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVD33 self, itkIndex3 index, itkCovariantVectorD3 value)"""
        return _itkImagePython.itkImageCVD33_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVD33 self, itkIndex3 index) -> itkCovariantVectorD3
        GetPixel(itkImageCVD33 self, itkIndex3 index) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVD33 self) -> itkCovariantVectorD3
        GetBufferPointer(itkImageCVD33 self) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > >
        GetPixelContainer(itkImageCVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > const *
        """
        return _itkImagePython.itkImageCVD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVD33 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,3 > > * container)"""
        return _itkImagePython.itkImageCVD33_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVD33 self, itkImageCVD33 data)"""
        return _itkImagePython.itkImageCVD33_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVD33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > >
        GetPixelAccessor(itkImageCVD33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,3 > > const
        """
        return _itkImagePython.itkImageCVD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,3 >,3 > > const
        """
        return _itkImagePython.itkImageCVD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVD33"""
        return _itkImagePython.itkImageCVD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVD33 self) -> itkImageCVD33"""
        return _itkImagePython.itkImageCVD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD33

        Create a new object of the class itkImageCVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD33.Clone = new_instancemethod(_itkImagePython.itkImageCVD33_Clone, None, itkImageCVD33)
itkImageCVD33.Allocate = new_instancemethod(_itkImagePython.itkImageCVD33_Allocate, None, itkImageCVD33)
itkImageCVD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD33_FillBuffer, None, itkImageCVD33)
itkImageCVD33.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD33_SetPixel, None, itkImageCVD33)
itkImageCVD33.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixel, None, itkImageCVD33)
itkImageCVD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD33_GetBufferPointer, None, itkImageCVD33)
itkImageCVD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixelContainer, None, itkImageCVD33)
itkImageCVD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD33_SetPixelContainer, None, itkImageCVD33)
itkImageCVD33.Graft = new_instancemethod(_itkImagePython.itkImageCVD33_Graft, None, itkImageCVD33)
itkImageCVD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD33_GetPixelAccessor, None, itkImageCVD33)
itkImageCVD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD33_GetNeighborhoodAccessor, None, itkImageCVD33)
itkImageCVD33.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD33_GetPointer, None, itkImageCVD33)
itkImageCVD33_swigregister = _itkImagePython.itkImageCVD33_swigregister
itkImageCVD33_swigregister(itkImageCVD33)

def itkImageCVD33___New_orig__():
    """itkImageCVD33___New_orig__() -> itkImageCVD33_Pointer"""
    return _itkImagePython.itkImageCVD33___New_orig__()

def itkImageCVD33_cast(obj):
    """itkImageCVD33_cast(itkLightObject obj) -> itkImageCVD33"""
    return _itkImagePython.itkImageCVD33_cast(obj)

class itkImageCVD42(itkImageBase2):
    """Proxy of C++ itkImageCVD42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVD42 self) -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVD42 self, bool initializePixels=False)
        Allocate(itkImageCVD42 self)
        """
        return _itkImagePython.itkImageCVD42_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVD42 self, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD42_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVD42 self, itkIndex2 index, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD42_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVD42 self, itkIndex2 index) -> itkCovariantVectorD4
        GetPixel(itkImageCVD42 self, itkIndex2 index) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD42_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVD42 self) -> itkCovariantVectorD4
        GetBufferPointer(itkImageCVD42 self) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > >
        GetPixelContainer(itkImageCVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *
        """
        return _itkImagePython.itkImageCVD42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVD42 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > * container)"""
        return _itkImagePython.itkImageCVD42_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVD42 self, itkImageCVD42 data)"""
        return _itkImagePython.itkImageCVD42_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVD42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(itkImageCVD42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const
        """
        return _itkImagePython.itkImageCVD42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > >
        GetNeighborhoodAccessor(itkImageCVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,2 > > const
        """
        return _itkImagePython.itkImageCVD42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD42

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVD42"""
        return _itkImagePython.itkImageCVD42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVD42 self) -> itkImageCVD42"""
        return _itkImagePython.itkImageCVD42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD42

        Create a new object of the class itkImageCVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD42.Clone = new_instancemethod(_itkImagePython.itkImageCVD42_Clone, None, itkImageCVD42)
itkImageCVD42.Allocate = new_instancemethod(_itkImagePython.itkImageCVD42_Allocate, None, itkImageCVD42)
itkImageCVD42.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD42_FillBuffer, None, itkImageCVD42)
itkImageCVD42.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD42_SetPixel, None, itkImageCVD42)
itkImageCVD42.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixel, None, itkImageCVD42)
itkImageCVD42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD42_GetBufferPointer, None, itkImageCVD42)
itkImageCVD42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixelContainer, None, itkImageCVD42)
itkImageCVD42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD42_SetPixelContainer, None, itkImageCVD42)
itkImageCVD42.Graft = new_instancemethod(_itkImagePython.itkImageCVD42_Graft, None, itkImageCVD42)
itkImageCVD42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD42_GetPixelAccessor, None, itkImageCVD42)
itkImageCVD42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD42_GetNeighborhoodAccessor, None, itkImageCVD42)
itkImageCVD42.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD42_GetPointer, None, itkImageCVD42)
itkImageCVD42_swigregister = _itkImagePython.itkImageCVD42_swigregister
itkImageCVD42_swigregister(itkImageCVD42)

def itkImageCVD42___New_orig__():
    """itkImageCVD42___New_orig__() -> itkImageCVD42_Pointer"""
    return _itkImagePython.itkImageCVD42___New_orig__()

def itkImageCVD42_cast(obj):
    """itkImageCVD42_cast(itkLightObject obj) -> itkImageCVD42"""
    return _itkImagePython.itkImageCVD42_cast(obj)

class itkImageCVD43(itkImageBase3):
    """Proxy of C++ itkImageCVD43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVD43 self) -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVD43 self, bool initializePixels=False)
        Allocate(itkImageCVD43 self)
        """
        return _itkImagePython.itkImageCVD43_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVD43 self, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD43_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVD43 self, itkIndex3 index, itkCovariantVectorD4 value)"""
        return _itkImagePython.itkImageCVD43_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVD43 self, itkIndex3 index) -> itkCovariantVectorD4
        GetPixel(itkImageCVD43 self, itkIndex3 index) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD43_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVD43 self) -> itkCovariantVectorD4
        GetBufferPointer(itkImageCVD43 self) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > >
        GetPixelContainer(itkImageCVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *
        """
        return _itkImagePython.itkImageCVD43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVD43 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > * container)"""
        return _itkImagePython.itkImageCVD43_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVD43 self, itkImageCVD43 data)"""
        return _itkImagePython.itkImageCVD43_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVD43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(itkImageCVD43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const
        """
        return _itkImagePython.itkImageCVD43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > >
        GetNeighborhoodAccessor(itkImageCVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > > const
        """
        return _itkImagePython.itkImageCVD43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVD43

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVD43"""
        return _itkImagePython.itkImageCVD43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVD43 self) -> itkImageCVD43"""
        return _itkImagePython.itkImageCVD43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVD43

        Create a new object of the class itkImageCVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVD43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVD43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVD43.Clone = new_instancemethod(_itkImagePython.itkImageCVD43_Clone, None, itkImageCVD43)
itkImageCVD43.Allocate = new_instancemethod(_itkImagePython.itkImageCVD43_Allocate, None, itkImageCVD43)
itkImageCVD43.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVD43_FillBuffer, None, itkImageCVD43)
itkImageCVD43.SetPixel = new_instancemethod(_itkImagePython.itkImageCVD43_SetPixel, None, itkImageCVD43)
itkImageCVD43.GetPixel = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixel, None, itkImageCVD43)
itkImageCVD43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVD43_GetBufferPointer, None, itkImageCVD43)
itkImageCVD43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixelContainer, None, itkImageCVD43)
itkImageCVD43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVD43_SetPixelContainer, None, itkImageCVD43)
itkImageCVD43.Graft = new_instancemethod(_itkImagePython.itkImageCVD43_Graft, None, itkImageCVD43)
itkImageCVD43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVD43_GetPixelAccessor, None, itkImageCVD43)
itkImageCVD43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVD43_GetNeighborhoodAccessor, None, itkImageCVD43)
itkImageCVD43.GetPointer = new_instancemethod(_itkImagePython.itkImageCVD43_GetPointer, None, itkImageCVD43)
itkImageCVD43_swigregister = _itkImagePython.itkImageCVD43_swigregister
itkImageCVD43_swigregister(itkImageCVD43)

def itkImageCVD43___New_orig__():
    """itkImageCVD43___New_orig__() -> itkImageCVD43_Pointer"""
    return _itkImagePython.itkImageCVD43___New_orig__()

def itkImageCVD43_cast(obj):
    """itkImageCVD43_cast(itkLightObject obj) -> itkImageCVD43"""
    return _itkImagePython.itkImageCVD43_cast(obj)

class itkImageCVF22(itkImageBase2):
    """Proxy of C++ itkImageCVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVF22 self) -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVF22 self, bool initializePixels=False)
        Allocate(itkImageCVF22 self)
        """
        return _itkImagePython.itkImageCVF22_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVF22 self, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF22_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVF22 self, itkIndex2 index, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF22_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2
        GetPixel(itkImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVF22 self) -> itkCovariantVectorF2
        GetBufferPointer(itkImageCVF22 self) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > >
        GetPixelContainer(itkImageCVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImagePython.itkImageCVF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVF22 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > * container)"""
        return _itkImagePython.itkImageCVF22_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVF22 self, itkImageCVF22 data)"""
        return _itkImagePython.itkImageCVF22_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(itkImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImagePython.itkImageCVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,2 > > const
        """
        return _itkImagePython.itkImageCVF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVF22"""
        return _itkImagePython.itkImageCVF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVF22 self) -> itkImageCVF22"""
        return _itkImagePython.itkImageCVF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF22

        Create a new object of the class itkImageCVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF22.Clone = new_instancemethod(_itkImagePython.itkImageCVF22_Clone, None, itkImageCVF22)
itkImageCVF22.Allocate = new_instancemethod(_itkImagePython.itkImageCVF22_Allocate, None, itkImageCVF22)
itkImageCVF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF22_FillBuffer, None, itkImageCVF22)
itkImageCVF22.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF22_SetPixel, None, itkImageCVF22)
itkImageCVF22.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixel, None, itkImageCVF22)
itkImageCVF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF22_GetBufferPointer, None, itkImageCVF22)
itkImageCVF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixelContainer, None, itkImageCVF22)
itkImageCVF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF22_SetPixelContainer, None, itkImageCVF22)
itkImageCVF22.Graft = new_instancemethod(_itkImagePython.itkImageCVF22_Graft, None, itkImageCVF22)
itkImageCVF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF22_GetPixelAccessor, None, itkImageCVF22)
itkImageCVF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF22_GetNeighborhoodAccessor, None, itkImageCVF22)
itkImageCVF22.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF22_GetPointer, None, itkImageCVF22)
itkImageCVF22_swigregister = _itkImagePython.itkImageCVF22_swigregister
itkImageCVF22_swigregister(itkImageCVF22)

def itkImageCVF22___New_orig__():
    """itkImageCVF22___New_orig__() -> itkImageCVF22_Pointer"""
    return _itkImagePython.itkImageCVF22___New_orig__()

def itkImageCVF22_cast(obj):
    """itkImageCVF22_cast(itkLightObject obj) -> itkImageCVF22"""
    return _itkImagePython.itkImageCVF22_cast(obj)

class itkImageCVF23(itkImageBase3):
    """Proxy of C++ itkImageCVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVF23 self) -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVF23 self, bool initializePixels=False)
        Allocate(itkImageCVF23 self)
        """
        return _itkImagePython.itkImageCVF23_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVF23 self, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF23_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVF23 self, itkIndex3 index, itkCovariantVectorF2 value)"""
        return _itkImagePython.itkImageCVF23_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVF23 self, itkIndex3 index) -> itkCovariantVectorF2
        GetPixel(itkImageCVF23 self, itkIndex3 index) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF23_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVF23 self) -> itkCovariantVectorF2
        GetBufferPointer(itkImageCVF23 self) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > >
        GetPixelContainer(itkImageCVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImagePython.itkImageCVF23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVF23 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > * container)"""
        return _itkImagePython.itkImageCVF23_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVF23 self, itkImageCVF23 data)"""
        return _itkImagePython.itkImageCVF23_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVF23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(itkImageCVF23 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImagePython.itkImageCVF23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > > const
        """
        return _itkImagePython.itkImageCVF23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF23

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVF23"""
        return _itkImagePython.itkImageCVF23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVF23 self) -> itkImageCVF23"""
        return _itkImagePython.itkImageCVF23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF23

        Create a new object of the class itkImageCVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF23.Clone = new_instancemethod(_itkImagePython.itkImageCVF23_Clone, None, itkImageCVF23)
itkImageCVF23.Allocate = new_instancemethod(_itkImagePython.itkImageCVF23_Allocate, None, itkImageCVF23)
itkImageCVF23.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF23_FillBuffer, None, itkImageCVF23)
itkImageCVF23.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF23_SetPixel, None, itkImageCVF23)
itkImageCVF23.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixel, None, itkImageCVF23)
itkImageCVF23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF23_GetBufferPointer, None, itkImageCVF23)
itkImageCVF23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixelContainer, None, itkImageCVF23)
itkImageCVF23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF23_SetPixelContainer, None, itkImageCVF23)
itkImageCVF23.Graft = new_instancemethod(_itkImagePython.itkImageCVF23_Graft, None, itkImageCVF23)
itkImageCVF23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF23_GetPixelAccessor, None, itkImageCVF23)
itkImageCVF23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF23_GetNeighborhoodAccessor, None, itkImageCVF23)
itkImageCVF23.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF23_GetPointer, None, itkImageCVF23)
itkImageCVF23_swigregister = _itkImagePython.itkImageCVF23_swigregister
itkImageCVF23_swigregister(itkImageCVF23)

def itkImageCVF23___New_orig__():
    """itkImageCVF23___New_orig__() -> itkImageCVF23_Pointer"""
    return _itkImagePython.itkImageCVF23___New_orig__()

def itkImageCVF23_cast(obj):
    """itkImageCVF23_cast(itkLightObject obj) -> itkImageCVF23"""
    return _itkImagePython.itkImageCVF23_cast(obj)

class itkImageCVF32(itkImageBase2):
    """Proxy of C++ itkImageCVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVF32 self) -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVF32 self, bool initializePixels=False)
        Allocate(itkImageCVF32 self)
        """
        return _itkImagePython.itkImageCVF32_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVF32 self, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF32_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVF32 self, itkIndex2 index, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF32_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVF32 self, itkIndex2 index) -> itkCovariantVectorF3
        GetPixel(itkImageCVF32 self, itkIndex2 index) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF32_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVF32 self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF32 self) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > const *
        """
        return _itkImagePython.itkImageCVF32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVF32 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > * container)"""
        return _itkImagePython.itkImageCVF32_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVF32 self, itkImageCVF32 data)"""
        return _itkImagePython.itkImageCVF32_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVF32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF32 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const
        """
        return _itkImagePython.itkImageCVF32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,2 > > const
        """
        return _itkImagePython.itkImageCVF32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF32

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVF32"""
        return _itkImagePython.itkImageCVF32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVF32 self) -> itkImageCVF32"""
        return _itkImagePython.itkImageCVF32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF32

        Create a new object of the class itkImageCVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF32.Clone = new_instancemethod(_itkImagePython.itkImageCVF32_Clone, None, itkImageCVF32)
itkImageCVF32.Allocate = new_instancemethod(_itkImagePython.itkImageCVF32_Allocate, None, itkImageCVF32)
itkImageCVF32.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF32_FillBuffer, None, itkImageCVF32)
itkImageCVF32.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF32_SetPixel, None, itkImageCVF32)
itkImageCVF32.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixel, None, itkImageCVF32)
itkImageCVF32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF32_GetBufferPointer, None, itkImageCVF32)
itkImageCVF32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixelContainer, None, itkImageCVF32)
itkImageCVF32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF32_SetPixelContainer, None, itkImageCVF32)
itkImageCVF32.Graft = new_instancemethod(_itkImagePython.itkImageCVF32_Graft, None, itkImageCVF32)
itkImageCVF32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF32_GetPixelAccessor, None, itkImageCVF32)
itkImageCVF32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF32_GetNeighborhoodAccessor, None, itkImageCVF32)
itkImageCVF32.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF32_GetPointer, None, itkImageCVF32)
itkImageCVF32_swigregister = _itkImagePython.itkImageCVF32_swigregister
itkImageCVF32_swigregister(itkImageCVF32)

def itkImageCVF32___New_orig__():
    """itkImageCVF32___New_orig__() -> itkImageCVF32_Pointer"""
    return _itkImagePython.itkImageCVF32___New_orig__()

def itkImageCVF32_cast(obj):
    """itkImageCVF32_cast(itkLightObject obj) -> itkImageCVF32"""
    return _itkImagePython.itkImageCVF32_cast(obj)

class itkImageCVF33(itkImageBase3):
    """Proxy of C++ itkImageCVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVF33 self) -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVF33 self, bool initializePixels=False)
        Allocate(itkImageCVF33 self)
        """
        return _itkImagePython.itkImageCVF33_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVF33 self, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF33_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVF33 self, itkIndex3 index, itkCovariantVectorF3 value)"""
        return _itkImagePython.itkImageCVF33_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3
        GetPixel(itkImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVF33 self) -> itkCovariantVectorF3
        GetBufferPointer(itkImageCVF33 self) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkImageCVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > const *
        """
        return _itkImagePython.itkImageCVF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVF33 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,3 > > * container)"""
        return _itkImagePython.itkImageCVF33_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVF33 self, itkImageCVF33 data)"""
        return _itkImagePython.itkImageCVF33_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const
        """
        return _itkImagePython.itkImageCVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,3 >,3 > > const
        """
        return _itkImagePython.itkImageCVF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVF33"""
        return _itkImagePython.itkImageCVF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVF33 self) -> itkImageCVF33"""
        return _itkImagePython.itkImageCVF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF33

        Create a new object of the class itkImageCVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF33.Clone = new_instancemethod(_itkImagePython.itkImageCVF33_Clone, None, itkImageCVF33)
itkImageCVF33.Allocate = new_instancemethod(_itkImagePython.itkImageCVF33_Allocate, None, itkImageCVF33)
itkImageCVF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF33_FillBuffer, None, itkImageCVF33)
itkImageCVF33.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF33_SetPixel, None, itkImageCVF33)
itkImageCVF33.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixel, None, itkImageCVF33)
itkImageCVF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF33_GetBufferPointer, None, itkImageCVF33)
itkImageCVF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixelContainer, None, itkImageCVF33)
itkImageCVF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF33_SetPixelContainer, None, itkImageCVF33)
itkImageCVF33.Graft = new_instancemethod(_itkImagePython.itkImageCVF33_Graft, None, itkImageCVF33)
itkImageCVF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF33_GetPixelAccessor, None, itkImageCVF33)
itkImageCVF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF33_GetNeighborhoodAccessor, None, itkImageCVF33)
itkImageCVF33.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF33_GetPointer, None, itkImageCVF33)
itkImageCVF33_swigregister = _itkImagePython.itkImageCVF33_swigregister
itkImageCVF33_swigregister(itkImageCVF33)

def itkImageCVF33___New_orig__():
    """itkImageCVF33___New_orig__() -> itkImageCVF33_Pointer"""
    return _itkImagePython.itkImageCVF33___New_orig__()

def itkImageCVF33_cast(obj):
    """itkImageCVF33_cast(itkLightObject obj) -> itkImageCVF33"""
    return _itkImagePython.itkImageCVF33_cast(obj)

class itkImageCVF42(itkImageBase2):
    """Proxy of C++ itkImageCVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVF42 self) -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVF42 self, bool initializePixels=False)
        Allocate(itkImageCVF42 self)
        """
        return _itkImagePython.itkImageCVF42_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVF42 self, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF42_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVF42 self, itkIndex2 index, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF42_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVF42 self, itkIndex2 index) -> itkCovariantVectorF4
        GetPixel(itkImageCVF42 self, itkIndex2 index) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF42_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVF42 self) -> itkCovariantVectorF4
        GetBufferPointer(itkImageCVF42 self) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > >
        GetPixelContainer(itkImageCVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImagePython.itkImageCVF42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVF42 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > * container)"""
        return _itkImagePython.itkImageCVF42_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVF42 self, itkImageCVF42 data)"""
        return _itkImagePython.itkImageCVF42_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVF42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(itkImageCVF42 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImagePython.itkImageCVF42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > >
        GetNeighborhoodAccessor(itkImageCVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,2 > > const
        """
        return _itkImagePython.itkImageCVF42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF42

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVF42"""
        return _itkImagePython.itkImageCVF42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVF42 self) -> itkImageCVF42"""
        return _itkImagePython.itkImageCVF42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF42

        Create a new object of the class itkImageCVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF42.Clone = new_instancemethod(_itkImagePython.itkImageCVF42_Clone, None, itkImageCVF42)
itkImageCVF42.Allocate = new_instancemethod(_itkImagePython.itkImageCVF42_Allocate, None, itkImageCVF42)
itkImageCVF42.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF42_FillBuffer, None, itkImageCVF42)
itkImageCVF42.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF42_SetPixel, None, itkImageCVF42)
itkImageCVF42.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixel, None, itkImageCVF42)
itkImageCVF42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF42_GetBufferPointer, None, itkImageCVF42)
itkImageCVF42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixelContainer, None, itkImageCVF42)
itkImageCVF42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF42_SetPixelContainer, None, itkImageCVF42)
itkImageCVF42.Graft = new_instancemethod(_itkImagePython.itkImageCVF42_Graft, None, itkImageCVF42)
itkImageCVF42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF42_GetPixelAccessor, None, itkImageCVF42)
itkImageCVF42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF42_GetNeighborhoodAccessor, None, itkImageCVF42)
itkImageCVF42.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF42_GetPointer, None, itkImageCVF42)
itkImageCVF42_swigregister = _itkImagePython.itkImageCVF42_swigregister
itkImageCVF42_swigregister(itkImageCVF42)

def itkImageCVF42___New_orig__():
    """itkImageCVF42___New_orig__() -> itkImageCVF42_Pointer"""
    return _itkImagePython.itkImageCVF42___New_orig__()

def itkImageCVF42_cast(obj):
    """itkImageCVF42_cast(itkLightObject obj) -> itkImageCVF42"""
    return _itkImagePython.itkImageCVF42_cast(obj)

class itkImageCVF43(itkImageBase3):
    """Proxy of C++ itkImageCVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCVF43 self) -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCVF43 self, bool initializePixels=False)
        Allocate(itkImageCVF43 self)
        """
        return _itkImagePython.itkImageCVF43_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCVF43 self, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF43_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCVF43 self, itkIndex3 index, itkCovariantVectorF4 value)"""
        return _itkImagePython.itkImageCVF43_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCVF43 self, itkIndex3 index) -> itkCovariantVectorF4
        GetPixel(itkImageCVF43 self, itkIndex3 index) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF43_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCVF43 self) -> itkCovariantVectorF4
        GetBufferPointer(itkImageCVF43 self) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > >
        GetPixelContainer(itkImageCVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImagePython.itkImageCVF43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCVF43 self, itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > * container)"""
        return _itkImagePython.itkImageCVF43_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageCVF43 self, itkImageCVF43 data)"""
        return _itkImagePython.itkImageCVF43_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCVF43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(itkImageCVF43 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImagePython.itkImageCVF43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > >
        GetNeighborhoodAccessor(itkImageCVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > > const
        """
        return _itkImagePython.itkImageCVF43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageCVF43

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCVF43"""
        return _itkImagePython.itkImageCVF43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageCVF43 self) -> itkImageCVF43"""
        return _itkImagePython.itkImageCVF43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageCVF43

        Create a new object of the class itkImageCVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCVF43.Clone = new_instancemethod(_itkImagePython.itkImageCVF43_Clone, None, itkImageCVF43)
itkImageCVF43.Allocate = new_instancemethod(_itkImagePython.itkImageCVF43_Allocate, None, itkImageCVF43)
itkImageCVF43.FillBuffer = new_instancemethod(_itkImagePython.itkImageCVF43_FillBuffer, None, itkImageCVF43)
itkImageCVF43.SetPixel = new_instancemethod(_itkImagePython.itkImageCVF43_SetPixel, None, itkImageCVF43)
itkImageCVF43.GetPixel = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixel, None, itkImageCVF43)
itkImageCVF43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageCVF43_GetBufferPointer, None, itkImageCVF43)
itkImageCVF43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixelContainer, None, itkImageCVF43)
itkImageCVF43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageCVF43_SetPixelContainer, None, itkImageCVF43)
itkImageCVF43.Graft = new_instancemethod(_itkImagePython.itkImageCVF43_Graft, None, itkImageCVF43)
itkImageCVF43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageCVF43_GetPixelAccessor, None, itkImageCVF43)
itkImageCVF43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageCVF43_GetNeighborhoodAccessor, None, itkImageCVF43)
itkImageCVF43.GetPointer = new_instancemethod(_itkImagePython.itkImageCVF43_GetPointer, None, itkImageCVF43)
itkImageCVF43_swigregister = _itkImagePython.itkImageCVF43_swigregister
itkImageCVF43_swigregister(itkImageCVF43)

def itkImageCVF43___New_orig__():
    """itkImageCVF43___New_orig__() -> itkImageCVF43_Pointer"""
    return _itkImagePython.itkImageCVF43___New_orig__()

def itkImageCVF43_cast(obj):
    """itkImageCVF43_cast(itkLightObject obj) -> itkImageCVF43"""
    return _itkImagePython.itkImageCVF43_cast(obj)

class itkImageD2(itkImageBase2):
    """Proxy of C++ itkImageD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageD2 self) -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageD2 self, bool initializePixels=False)
        Allocate(itkImageD2 self)
        """
        return _itkImagePython.itkImageD2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageD2 self, double const & value)"""
        return _itkImagePython.itkImageD2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageD2 self, itkIndex2 index, double const & value)"""
        return _itkImagePython.itkImageD2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageD2 self, itkIndex2 index) -> double const
        GetPixel(itkImageD2 self, itkIndex2 index) -> double &
        """
        return _itkImagePython.itkImageD2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageD2 self) -> double
        GetBufferPointer(itkImageD2 self) -> double const *
        """
        return _itkImagePython.itkImageD2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageD2 self) -> itk::ImportImageContainer< unsigned long long,double >
        GetPixelContainer(itkImageD2 self) -> itk::ImportImageContainer< unsigned long long,double > const *
        """
        return _itkImagePython.itkImageD2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageD2 self, itk::ImportImageContainer< unsigned long long,double > * container)"""
        return _itkImagePython.itkImageD2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageD2 self, itkImageD2 data)"""
        return _itkImagePython.itkImageD2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageD2 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkImageD2 self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImagePython.itkImageD2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > >
        GetNeighborhoodAccessor(itkImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,2 > > const
        """
        return _itkImagePython.itkImageD2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageD2"""
        return _itkImagePython.itkImageD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageD2 self) -> itkImageD2"""
        return _itkImagePython.itkImageD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageD2

        Create a new object of the class itkImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageD2.Clone = new_instancemethod(_itkImagePython.itkImageD2_Clone, None, itkImageD2)
itkImageD2.Allocate = new_instancemethod(_itkImagePython.itkImageD2_Allocate, None, itkImageD2)
itkImageD2.FillBuffer = new_instancemethod(_itkImagePython.itkImageD2_FillBuffer, None, itkImageD2)
itkImageD2.SetPixel = new_instancemethod(_itkImagePython.itkImageD2_SetPixel, None, itkImageD2)
itkImageD2.GetPixel = new_instancemethod(_itkImagePython.itkImageD2_GetPixel, None, itkImageD2)
itkImageD2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageD2_GetBufferPointer, None, itkImageD2)
itkImageD2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageD2_GetPixelContainer, None, itkImageD2)
itkImageD2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageD2_SetPixelContainer, None, itkImageD2)
itkImageD2.Graft = new_instancemethod(_itkImagePython.itkImageD2_Graft, None, itkImageD2)
itkImageD2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageD2_GetPixelAccessor, None, itkImageD2)
itkImageD2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageD2_GetNeighborhoodAccessor, None, itkImageD2)
itkImageD2.GetPointer = new_instancemethod(_itkImagePython.itkImageD2_GetPointer, None, itkImageD2)
itkImageD2_swigregister = _itkImagePython.itkImageD2_swigregister
itkImageD2_swigregister(itkImageD2)

def itkImageD2___New_orig__():
    """itkImageD2___New_orig__() -> itkImageD2_Pointer"""
    return _itkImagePython.itkImageD2___New_orig__()

def itkImageD2_cast(obj):
    """itkImageD2_cast(itkLightObject obj) -> itkImageD2"""
    return _itkImagePython.itkImageD2_cast(obj)

class itkImageD3(itkImageBase3):
    """Proxy of C++ itkImageD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageD3 self) -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageD3 self, bool initializePixels=False)
        Allocate(itkImageD3 self)
        """
        return _itkImagePython.itkImageD3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageD3 self, double const & value)"""
        return _itkImagePython.itkImageD3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageD3 self, itkIndex3 index, double const & value)"""
        return _itkImagePython.itkImageD3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageD3 self, itkIndex3 index) -> double const
        GetPixel(itkImageD3 self, itkIndex3 index) -> double &
        """
        return _itkImagePython.itkImageD3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageD3 self) -> double
        GetBufferPointer(itkImageD3 self) -> double const *
        """
        return _itkImagePython.itkImageD3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageD3 self) -> itk::ImportImageContainer< unsigned long long,double >
        GetPixelContainer(itkImageD3 self) -> itk::ImportImageContainer< unsigned long long,double > const *
        """
        return _itkImagePython.itkImageD3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageD3 self, itk::ImportImageContainer< unsigned long long,double > * container)"""
        return _itkImagePython.itkImageD3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageD3 self, itkImageD3 data)"""
        return _itkImagePython.itkImageD3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageD3 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkImageD3 self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImagePython.itkImageD3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > >
        GetNeighborhoodAccessor(itkImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const
        """
        return _itkImagePython.itkImageD3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageD3"""
        return _itkImagePython.itkImageD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageD3 self) -> itkImageD3"""
        return _itkImagePython.itkImageD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageD3

        Create a new object of the class itkImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageD3.Clone = new_instancemethod(_itkImagePython.itkImageD3_Clone, None, itkImageD3)
itkImageD3.Allocate = new_instancemethod(_itkImagePython.itkImageD3_Allocate, None, itkImageD3)
itkImageD3.FillBuffer = new_instancemethod(_itkImagePython.itkImageD3_FillBuffer, None, itkImageD3)
itkImageD3.SetPixel = new_instancemethod(_itkImagePython.itkImageD3_SetPixel, None, itkImageD3)
itkImageD3.GetPixel = new_instancemethod(_itkImagePython.itkImageD3_GetPixel, None, itkImageD3)
itkImageD3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageD3_GetBufferPointer, None, itkImageD3)
itkImageD3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageD3_GetPixelContainer, None, itkImageD3)
itkImageD3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageD3_SetPixelContainer, None, itkImageD3)
itkImageD3.Graft = new_instancemethod(_itkImagePython.itkImageD3_Graft, None, itkImageD3)
itkImageD3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageD3_GetPixelAccessor, None, itkImageD3)
itkImageD3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageD3_GetNeighborhoodAccessor, None, itkImageD3)
itkImageD3.GetPointer = new_instancemethod(_itkImagePython.itkImageD3_GetPointer, None, itkImageD3)
itkImageD3_swigregister = _itkImagePython.itkImageD3_swigregister
itkImageD3_swigregister(itkImageD3)

def itkImageD3___New_orig__():
    """itkImageD3___New_orig__() -> itkImageD3_Pointer"""
    return _itkImagePython.itkImageD3___New_orig__()

def itkImageD3_cast(obj):
    """itkImageD3_cast(itkLightObject obj) -> itkImageD3"""
    return _itkImagePython.itkImageD3_cast(obj)

class itkImageF2(itkImageBase2):
    """Proxy of C++ itkImageF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageF2 self) -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageF2 self, bool initializePixels=False)
        Allocate(itkImageF2 self)
        """
        return _itkImagePython.itkImageF2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageF2 self, float const & value)"""
        return _itkImagePython.itkImageF2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageF2 self, itkIndex2 index, float const & value)"""
        return _itkImagePython.itkImageF2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageF2 self, itkIndex2 index) -> float const
        GetPixel(itkImageF2 self, itkIndex2 index) -> float &
        """
        return _itkImagePython.itkImageF2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageF2 self) -> float
        GetBufferPointer(itkImageF2 self) -> float const *
        """
        return _itkImagePython.itkImageF2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageF2 self) -> itk::ImportImageContainer< unsigned long long,float >
        GetPixelContainer(itkImageF2 self) -> itk::ImportImageContainer< unsigned long long,float > const *
        """
        return _itkImagePython.itkImageF2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageF2 self, itk::ImportImageContainer< unsigned long long,float > * container)"""
        return _itkImagePython.itkImageF2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageF2 self, itkImageF2 data)"""
        return _itkImagePython.itkImageF2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageF2 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF2 self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImagePython.itkImageF2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > >
        GetNeighborhoodAccessor(itkImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,2 > > const
        """
        return _itkImagePython.itkImageF2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageF2"""
        return _itkImagePython.itkImageF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageF2 self) -> itkImageF2"""
        return _itkImagePython.itkImageF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageF2

        Create a new object of the class itkImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF2.Clone = new_instancemethod(_itkImagePython.itkImageF2_Clone, None, itkImageF2)
itkImageF2.Allocate = new_instancemethod(_itkImagePython.itkImageF2_Allocate, None, itkImageF2)
itkImageF2.FillBuffer = new_instancemethod(_itkImagePython.itkImageF2_FillBuffer, None, itkImageF2)
itkImageF2.SetPixel = new_instancemethod(_itkImagePython.itkImageF2_SetPixel, None, itkImageF2)
itkImageF2.GetPixel = new_instancemethod(_itkImagePython.itkImageF2_GetPixel, None, itkImageF2)
itkImageF2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageF2_GetBufferPointer, None, itkImageF2)
itkImageF2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageF2_GetPixelContainer, None, itkImageF2)
itkImageF2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageF2_SetPixelContainer, None, itkImageF2)
itkImageF2.Graft = new_instancemethod(_itkImagePython.itkImageF2_Graft, None, itkImageF2)
itkImageF2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageF2_GetPixelAccessor, None, itkImageF2)
itkImageF2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageF2_GetNeighborhoodAccessor, None, itkImageF2)
itkImageF2.GetPointer = new_instancemethod(_itkImagePython.itkImageF2_GetPointer, None, itkImageF2)
itkImageF2_swigregister = _itkImagePython.itkImageF2_swigregister
itkImageF2_swigregister(itkImageF2)

def itkImageF2___New_orig__():
    """itkImageF2___New_orig__() -> itkImageF2_Pointer"""
    return _itkImagePython.itkImageF2___New_orig__()

def itkImageF2_cast(obj):
    """itkImageF2_cast(itkLightObject obj) -> itkImageF2"""
    return _itkImagePython.itkImageF2_cast(obj)

class itkImageF3(itkImageBase3):
    """Proxy of C++ itkImageF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageF3 self) -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageF3 self, bool initializePixels=False)
        Allocate(itkImageF3 self)
        """
        return _itkImagePython.itkImageF3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageF3 self, float const & value)"""
        return _itkImagePython.itkImageF3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageF3 self, itkIndex3 index, float const & value)"""
        return _itkImagePython.itkImageF3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageF3 self, itkIndex3 index) -> float const
        GetPixel(itkImageF3 self, itkIndex3 index) -> float &
        """
        return _itkImagePython.itkImageF3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageF3 self) -> float
        GetBufferPointer(itkImageF3 self) -> float const *
        """
        return _itkImagePython.itkImageF3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageF3 self) -> itk::ImportImageContainer< unsigned long long,float >
        GetPixelContainer(itkImageF3 self) -> itk::ImportImageContainer< unsigned long long,float > const *
        """
        return _itkImagePython.itkImageF3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageF3 self, itk::ImportImageContainer< unsigned long long,float > * container)"""
        return _itkImagePython.itkImageF3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageF3 self, itkImageF3 data)"""
        return _itkImagePython.itkImageF3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageF3 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkImageF3 self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImagePython.itkImageF3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > >
        GetNeighborhoodAccessor(itkImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const
        """
        return _itkImagePython.itkImageF3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageF3"""
        return _itkImagePython.itkImageF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageF3 self) -> itkImageF3"""
        return _itkImagePython.itkImageF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageF3

        Create a new object of the class itkImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageF3.Clone = new_instancemethod(_itkImagePython.itkImageF3_Clone, None, itkImageF3)
itkImageF3.Allocate = new_instancemethod(_itkImagePython.itkImageF3_Allocate, None, itkImageF3)
itkImageF3.FillBuffer = new_instancemethod(_itkImagePython.itkImageF3_FillBuffer, None, itkImageF3)
itkImageF3.SetPixel = new_instancemethod(_itkImagePython.itkImageF3_SetPixel, None, itkImageF3)
itkImageF3.GetPixel = new_instancemethod(_itkImagePython.itkImageF3_GetPixel, None, itkImageF3)
itkImageF3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageF3_GetBufferPointer, None, itkImageF3)
itkImageF3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageF3_GetPixelContainer, None, itkImageF3)
itkImageF3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageF3_SetPixelContainer, None, itkImageF3)
itkImageF3.Graft = new_instancemethod(_itkImagePython.itkImageF3_Graft, None, itkImageF3)
itkImageF3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageF3_GetPixelAccessor, None, itkImageF3)
itkImageF3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageF3_GetNeighborhoodAccessor, None, itkImageF3)
itkImageF3.GetPointer = new_instancemethod(_itkImagePython.itkImageF3_GetPointer, None, itkImageF3)
itkImageF3_swigregister = _itkImagePython.itkImageF3_swigregister
itkImageF3_swigregister(itkImageF3)

def itkImageF3___New_orig__():
    """itkImageF3___New_orig__() -> itkImageF3_Pointer"""
    return _itkImagePython.itkImageF3___New_orig__()

def itkImageF3_cast(obj):
    """itkImageF3_cast(itkLightObject obj) -> itkImageF3"""
    return _itkImagePython.itkImageF3_cast(obj)

class itkImageFAF22(itkImageBase2):
    """Proxy of C++ itkImageFAF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageFAF22 self) -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageFAF22 self, bool initializePixels=False)
        Allocate(itkImageFAF22 self)
        """
        return _itkImagePython.itkImageFAF22_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageFAF22 self, itkFixedArrayF2 value)"""
        return _itkImagePython.itkImageFAF22_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageFAF22 self, itkIndex2 index, itkFixedArrayF2 value)"""
        return _itkImagePython.itkImageFAF22_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageFAF22 self, itkIndex2 index) -> itkFixedArrayF2
        GetPixel(itkImageFAF22 self, itkIndex2 index) -> itkFixedArrayF2
        """
        return _itkImagePython.itkImageFAF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageFAF22 self) -> itkFixedArrayF2
        GetBufferPointer(itkImageFAF22 self) -> itkFixedArrayF2
        """
        return _itkImagePython.itkImageFAF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageFAF22 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > >
        GetPixelContainer(itkImageFAF22 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > const *
        """
        return _itkImagePython.itkImageFAF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageFAF22 self, itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > * container)"""
        return _itkImagePython.itkImageFAF22_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageFAF22 self, itkImageFAF22 data)"""
        return _itkImagePython.itkImageFAF22_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageFAF22 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > >
        GetPixelAccessor(itkImageFAF22 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > > const
        """
        return _itkImagePython.itkImageFAF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageFAF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageFAF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 >,2 > > const
        """
        return _itkImagePython.itkImageFAF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageFAF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFAF22"""
        return _itkImagePython.itkImageFAF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageFAF22 self) -> itkImageFAF22"""
        return _itkImagePython.itkImageFAF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageFAF22

        Create a new object of the class itkImageFAF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFAF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFAF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFAF22.Clone = new_instancemethod(_itkImagePython.itkImageFAF22_Clone, None, itkImageFAF22)
itkImageFAF22.Allocate = new_instancemethod(_itkImagePython.itkImageFAF22_Allocate, None, itkImageFAF22)
itkImageFAF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageFAF22_FillBuffer, None, itkImageFAF22)
itkImageFAF22.SetPixel = new_instancemethod(_itkImagePython.itkImageFAF22_SetPixel, None, itkImageFAF22)
itkImageFAF22.GetPixel = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixel, None, itkImageFAF22)
itkImageFAF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageFAF22_GetBufferPointer, None, itkImageFAF22)
itkImageFAF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixelContainer, None, itkImageFAF22)
itkImageFAF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF22_SetPixelContainer, None, itkImageFAF22)
itkImageFAF22.Graft = new_instancemethod(_itkImagePython.itkImageFAF22_Graft, None, itkImageFAF22)
itkImageFAF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageFAF22_GetPixelAccessor, None, itkImageFAF22)
itkImageFAF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageFAF22_GetNeighborhoodAccessor, None, itkImageFAF22)
itkImageFAF22.GetPointer = new_instancemethod(_itkImagePython.itkImageFAF22_GetPointer, None, itkImageFAF22)
itkImageFAF22_swigregister = _itkImagePython.itkImageFAF22_swigregister
itkImageFAF22_swigregister(itkImageFAF22)

def itkImageFAF22___New_orig__():
    """itkImageFAF22___New_orig__() -> itkImageFAF22_Pointer"""
    return _itkImagePython.itkImageFAF22___New_orig__()

def itkImageFAF22_cast(obj):
    """itkImageFAF22_cast(itkLightObject obj) -> itkImageFAF22"""
    return _itkImagePython.itkImageFAF22_cast(obj)

class itkImageFAF33(itkImageBase3):
    """Proxy of C++ itkImageFAF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageFAF33 self) -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageFAF33 self, bool initializePixels=False)
        Allocate(itkImageFAF33 self)
        """
        return _itkImagePython.itkImageFAF33_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageFAF33 self, itkFixedArrayF3 value)"""
        return _itkImagePython.itkImageFAF33_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageFAF33 self, itkIndex3 index, itkFixedArrayF3 value)"""
        return _itkImagePython.itkImageFAF33_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageFAF33 self, itkIndex3 index) -> itkFixedArrayF3
        GetPixel(itkImageFAF33 self, itkIndex3 index) -> itkFixedArrayF3
        """
        return _itkImagePython.itkImageFAF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageFAF33 self) -> itkFixedArrayF3
        GetBufferPointer(itkImageFAF33 self) -> itkFixedArrayF3
        """
        return _itkImagePython.itkImageFAF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageFAF33 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > >
        GetPixelContainer(itkImageFAF33 self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > > const *
        """
        return _itkImagePython.itkImageFAF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageFAF33 self, itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,3 > > * container)"""
        return _itkImagePython.itkImageFAF33_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageFAF33 self, itkImageFAF33 data)"""
        return _itkImagePython.itkImageFAF33_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageFAF33 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,3 > >
        GetPixelAccessor(itkImageFAF33 self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,3 > > const
        """
        return _itkImagePython.itkImageFAF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageFAF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageFAF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,3 >,3 > > const
        """
        return _itkImagePython.itkImageFAF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageFAF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFAF33"""
        return _itkImagePython.itkImageFAF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageFAF33 self) -> itkImageFAF33"""
        return _itkImagePython.itkImageFAF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageFAF33

        Create a new object of the class itkImageFAF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFAF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFAF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFAF33.Clone = new_instancemethod(_itkImagePython.itkImageFAF33_Clone, None, itkImageFAF33)
itkImageFAF33.Allocate = new_instancemethod(_itkImagePython.itkImageFAF33_Allocate, None, itkImageFAF33)
itkImageFAF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageFAF33_FillBuffer, None, itkImageFAF33)
itkImageFAF33.SetPixel = new_instancemethod(_itkImagePython.itkImageFAF33_SetPixel, None, itkImageFAF33)
itkImageFAF33.GetPixel = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixel, None, itkImageFAF33)
itkImageFAF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageFAF33_GetBufferPointer, None, itkImageFAF33)
itkImageFAF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixelContainer, None, itkImageFAF33)
itkImageFAF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageFAF33_SetPixelContainer, None, itkImageFAF33)
itkImageFAF33.Graft = new_instancemethod(_itkImagePython.itkImageFAF33_Graft, None, itkImageFAF33)
itkImageFAF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageFAF33_GetPixelAccessor, None, itkImageFAF33)
itkImageFAF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageFAF33_GetNeighborhoodAccessor, None, itkImageFAF33)
itkImageFAF33.GetPointer = new_instancemethod(_itkImagePython.itkImageFAF33_GetPointer, None, itkImageFAF33)
itkImageFAF33_swigregister = _itkImagePython.itkImageFAF33_swigregister
itkImageFAF33_swigregister(itkImageFAF33)

def itkImageFAF33___New_orig__():
    """itkImageFAF33___New_orig__() -> itkImageFAF33_Pointer"""
    return _itkImagePython.itkImageFAF33___New_orig__()

def itkImageFAF33_cast(obj):
    """itkImageFAF33_cast(itkLightObject obj) -> itkImageFAF33"""
    return _itkImagePython.itkImageFAF33_cast(obj)

class itkImageO22(itkImageBase2):
    """Proxy of C++ itkImageO22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageO22 self) -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageO22 self, bool initializePixels=False)
        Allocate(itkImageO22 self)
        """
        return _itkImagePython.itkImageO22_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageO22 self, itkOffset2 value)"""
        return _itkImagePython.itkImageO22_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageO22 self, itkIndex2 index, itkOffset2 value)"""
        return _itkImagePython.itkImageO22_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageO22 self, itkIndex2 index) -> itkOffset2
        GetPixel(itkImageO22 self, itkIndex2 index) -> itkOffset2
        """
        return _itkImagePython.itkImageO22_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageO22 self) -> itkOffset2
        GetBufferPointer(itkImageO22 self) -> itkOffset2
        """
        return _itkImagePython.itkImageO22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageO22 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > >
        GetPixelContainer(itkImageO22 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > > const *
        """
        return _itkImagePython.itkImageO22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageO22 self, itk::ImportImageContainer< unsigned long long,itk::Offset< 2 > > * container)"""
        return _itkImagePython.itkImageO22_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageO22 self, itkImageO22 data)"""
        return _itkImagePython.itkImageO22_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageO22 self) -> itk::DefaultPixelAccessor< itk::Offset< 2 > >
        GetPixelAccessor(itkImageO22 self) -> itk::DefaultPixelAccessor< itk::Offset< 2 > > const
        """
        return _itkImagePython.itkImageO22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageO22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > >
        GetNeighborhoodAccessor(itkImageO22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2 >,2 > > const
        """
        return _itkImagePython.itkImageO22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageO22

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageO22"""
        return _itkImagePython.itkImageO22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageO22 self) -> itkImageO22"""
        return _itkImagePython.itkImageO22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageO22

        Create a new object of the class itkImageO22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageO22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageO22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageO22.Clone = new_instancemethod(_itkImagePython.itkImageO22_Clone, None, itkImageO22)
itkImageO22.Allocate = new_instancemethod(_itkImagePython.itkImageO22_Allocate, None, itkImageO22)
itkImageO22.FillBuffer = new_instancemethod(_itkImagePython.itkImageO22_FillBuffer, None, itkImageO22)
itkImageO22.SetPixel = new_instancemethod(_itkImagePython.itkImageO22_SetPixel, None, itkImageO22)
itkImageO22.GetPixel = new_instancemethod(_itkImagePython.itkImageO22_GetPixel, None, itkImageO22)
itkImageO22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageO22_GetBufferPointer, None, itkImageO22)
itkImageO22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageO22_GetPixelContainer, None, itkImageO22)
itkImageO22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageO22_SetPixelContainer, None, itkImageO22)
itkImageO22.Graft = new_instancemethod(_itkImagePython.itkImageO22_Graft, None, itkImageO22)
itkImageO22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageO22_GetPixelAccessor, None, itkImageO22)
itkImageO22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageO22_GetNeighborhoodAccessor, None, itkImageO22)
itkImageO22.GetPointer = new_instancemethod(_itkImagePython.itkImageO22_GetPointer, None, itkImageO22)
itkImageO22_swigregister = _itkImagePython.itkImageO22_swigregister
itkImageO22_swigregister(itkImageO22)

def itkImageO22___New_orig__():
    """itkImageO22___New_orig__() -> itkImageO22_Pointer"""
    return _itkImagePython.itkImageO22___New_orig__()

def itkImageO22_cast(obj):
    """itkImageO22_cast(itkLightObject obj) -> itkImageO22"""
    return _itkImagePython.itkImageO22_cast(obj)

class itkImageO33(itkImageBase3):
    """Proxy of C++ itkImageO33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageO33 self) -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageO33 self, bool initializePixels=False)
        Allocate(itkImageO33 self)
        """
        return _itkImagePython.itkImageO33_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageO33 self, itkOffset3 value)"""
        return _itkImagePython.itkImageO33_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageO33 self, itkIndex3 index, itkOffset3 value)"""
        return _itkImagePython.itkImageO33_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageO33 self, itkIndex3 index) -> itkOffset3
        GetPixel(itkImageO33 self, itkIndex3 index) -> itkOffset3
        """
        return _itkImagePython.itkImageO33_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageO33 self) -> itkOffset3
        GetBufferPointer(itkImageO33 self) -> itkOffset3
        """
        return _itkImagePython.itkImageO33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageO33 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > >
        GetPixelContainer(itkImageO33 self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > const *
        """
        return _itkImagePython.itkImageO33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageO33 self, itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > * container)"""
        return _itkImagePython.itkImageO33_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageO33 self, itkImageO33 data)"""
        return _itkImagePython.itkImageO33_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageO33 self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > >
        GetPixelAccessor(itkImageO33 self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > > const
        """
        return _itkImagePython.itkImageO33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageO33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > >
        GetNeighborhoodAccessor(itkImageO33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > > const
        """
        return _itkImagePython.itkImageO33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageO33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageO33"""
        return _itkImagePython.itkImageO33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageO33 self) -> itkImageO33"""
        return _itkImagePython.itkImageO33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageO33

        Create a new object of the class itkImageO33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageO33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageO33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageO33.Clone = new_instancemethod(_itkImagePython.itkImageO33_Clone, None, itkImageO33)
itkImageO33.Allocate = new_instancemethod(_itkImagePython.itkImageO33_Allocate, None, itkImageO33)
itkImageO33.FillBuffer = new_instancemethod(_itkImagePython.itkImageO33_FillBuffer, None, itkImageO33)
itkImageO33.SetPixel = new_instancemethod(_itkImagePython.itkImageO33_SetPixel, None, itkImageO33)
itkImageO33.GetPixel = new_instancemethod(_itkImagePython.itkImageO33_GetPixel, None, itkImageO33)
itkImageO33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageO33_GetBufferPointer, None, itkImageO33)
itkImageO33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageO33_GetPixelContainer, None, itkImageO33)
itkImageO33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageO33_SetPixelContainer, None, itkImageO33)
itkImageO33.Graft = new_instancemethod(_itkImagePython.itkImageO33_Graft, None, itkImageO33)
itkImageO33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageO33_GetPixelAccessor, None, itkImageO33)
itkImageO33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageO33_GetNeighborhoodAccessor, None, itkImageO33)
itkImageO33.GetPointer = new_instancemethod(_itkImagePython.itkImageO33_GetPointer, None, itkImageO33)
itkImageO33_swigregister = _itkImagePython.itkImageO33_swigregister
itkImageO33_swigregister(itkImageO33)

def itkImageO33___New_orig__():
    """itkImageO33___New_orig__() -> itkImageO33_Pointer"""
    return _itkImagePython.itkImageO33___New_orig__()

def itkImageO33_cast(obj):
    """itkImageO33_cast(itkLightObject obj) -> itkImageO33"""
    return _itkImagePython.itkImageO33_cast(obj)

class itkImageRGBAUC2(itkImageBase2):
    """Proxy of C++ itkImageRGBAUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageRGBAUC2 self) -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageRGBAUC2 self, bool initializePixels=False)
        Allocate(itkImageRGBAUC2 self)
        """
        return _itkImagePython.itkImageRGBAUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageRGBAUC2 self, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageRGBAUC2 self, itkIndex2 index, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageRGBAUC2 self, itkIndex2 index) -> itkRGBAPixelUC
        GetPixel(itkImageRGBAUC2 self, itkIndex2 index) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageRGBAUC2 self) -> itkRGBAPixelUC
        GetBufferPointer(itkImageRGBAUC2 self) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageRGBAUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(itkImageRGBAUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageRGBAUC2 self, itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBAUC2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageRGBAUC2 self, itkImageRGBAUC2 data)"""
        return _itkImagePython.itkImageRGBAUC2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageRGBAUC2 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBAUC2 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageRGBAUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > >
        GetNeighborhoodAccessor(itkImageRGBAUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,2 > > const
        """
        return _itkImagePython.itkImageRGBAUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageRGBAUC2"""
        return _itkImagePython.itkImageRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageRGBAUC2 self) -> itkImageRGBAUC2"""
        return _itkImagePython.itkImageRGBAUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBAUC2

        Create a new object of the class itkImageRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBAUC2.Clone = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Clone, None, itkImageRGBAUC2)
itkImageRGBAUC2.Allocate = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Allocate, None, itkImageRGBAUC2)
itkImageRGBAUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_FillBuffer, None, itkImageRGBAUC2)
itkImageRGBAUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC2_SetPixel, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixel, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetBufferPointer, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixelContainer, None, itkImageRGBAUC2)
itkImageRGBAUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_SetPixelContainer, None, itkImageRGBAUC2)
itkImageRGBAUC2.Graft = new_instancemethod(_itkImagePython.itkImageRGBAUC2_Graft, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPixelAccessor, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetNeighborhoodAccessor, None, itkImageRGBAUC2)
itkImageRGBAUC2.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC2_GetPointer, None, itkImageRGBAUC2)
itkImageRGBAUC2_swigregister = _itkImagePython.itkImageRGBAUC2_swigregister
itkImageRGBAUC2_swigregister(itkImageRGBAUC2)

def itkImageRGBAUC2___New_orig__():
    """itkImageRGBAUC2___New_orig__() -> itkImageRGBAUC2_Pointer"""
    return _itkImagePython.itkImageRGBAUC2___New_orig__()

def itkImageRGBAUC2_cast(obj):
    """itkImageRGBAUC2_cast(itkLightObject obj) -> itkImageRGBAUC2"""
    return _itkImagePython.itkImageRGBAUC2_cast(obj)

class itkImageRGBAUC3(itkImageBase3):
    """Proxy of C++ itkImageRGBAUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageRGBAUC3 self) -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageRGBAUC3 self, bool initializePixels=False)
        Allocate(itkImageRGBAUC3 self)
        """
        return _itkImagePython.itkImageRGBAUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageRGBAUC3 self, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageRGBAUC3 self, itkIndex3 index, itkRGBAPixelUC value)"""
        return _itkImagePython.itkImageRGBAUC3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageRGBAUC3 self, itkIndex3 index) -> itkRGBAPixelUC
        GetPixel(itkImageRGBAUC3 self, itkIndex3 index) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageRGBAUC3 self) -> itkRGBAPixelUC
        GetBufferPointer(itkImageRGBAUC3 self) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageRGBAUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(itkImageRGBAUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageRGBAUC3 self, itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBAUC3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageRGBAUC3 self, itkImageRGBAUC3 data)"""
        return _itkImagePython.itkImageRGBAUC3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageRGBAUC3 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBAUC3 self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageRGBAUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(itkImageRGBAUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > > const
        """
        return _itkImagePython.itkImageRGBAUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageRGBAUC3"""
        return _itkImagePython.itkImageRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageRGBAUC3 self) -> itkImageRGBAUC3"""
        return _itkImagePython.itkImageRGBAUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBAUC3

        Create a new object of the class itkImageRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBAUC3.Clone = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Clone, None, itkImageRGBAUC3)
itkImageRGBAUC3.Allocate = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Allocate, None, itkImageRGBAUC3)
itkImageRGBAUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_FillBuffer, None, itkImageRGBAUC3)
itkImageRGBAUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC3_SetPixel, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixel, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetBufferPointer, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixelContainer, None, itkImageRGBAUC3)
itkImageRGBAUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_SetPixelContainer, None, itkImageRGBAUC3)
itkImageRGBAUC3.Graft = new_instancemethod(_itkImagePython.itkImageRGBAUC3_Graft, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPixelAccessor, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetNeighborhoodAccessor, None, itkImageRGBAUC3)
itkImageRGBAUC3.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBAUC3_GetPointer, None, itkImageRGBAUC3)
itkImageRGBAUC3_swigregister = _itkImagePython.itkImageRGBAUC3_swigregister
itkImageRGBAUC3_swigregister(itkImageRGBAUC3)

def itkImageRGBAUC3___New_orig__():
    """itkImageRGBAUC3___New_orig__() -> itkImageRGBAUC3_Pointer"""
    return _itkImagePython.itkImageRGBAUC3___New_orig__()

def itkImageRGBAUC3_cast(obj):
    """itkImageRGBAUC3_cast(itkLightObject obj) -> itkImageRGBAUC3"""
    return _itkImagePython.itkImageRGBAUC3_cast(obj)

class itkImageRGBUC2(itkImageBase2):
    """Proxy of C++ itkImageRGBUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageRGBUC2 self) -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageRGBUC2 self, bool initializePixels=False)
        Allocate(itkImageRGBUC2 self)
        """
        return _itkImagePython.itkImageRGBUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageRGBUC2 self, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageRGBUC2 self, itkIndex2 index, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageRGBUC2 self, itkIndex2 index) -> itkRGBPixelUC
        GetPixel(itkImageRGBUC2 self, itkIndex2 index) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageRGBUC2 self) -> itkRGBPixelUC
        GetBufferPointer(itkImageRGBUC2 self) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageRGBUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(itkImageRGBUC2 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageRGBUC2 self, itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBUC2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageRGBUC2 self, itkImageRGBUC2 data)"""
        return _itkImagePython.itkImageRGBUC2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageRGBUC2 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBUC2 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageRGBUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > >
        GetNeighborhoodAccessor(itkImageRGBUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,2 > > const
        """
        return _itkImagePython.itkImageRGBUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageRGBUC2"""
        return _itkImagePython.itkImageRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageRGBUC2 self) -> itkImageRGBUC2"""
        return _itkImagePython.itkImageRGBUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBUC2

        Create a new object of the class itkImageRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBUC2.Clone = new_instancemethod(_itkImagePython.itkImageRGBUC2_Clone, None, itkImageRGBUC2)
itkImageRGBUC2.Allocate = new_instancemethod(_itkImagePython.itkImageRGBUC2_Allocate, None, itkImageRGBUC2)
itkImageRGBUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBUC2_FillBuffer, None, itkImageRGBUC2)
itkImageRGBUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC2_SetPixel, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixel, None, itkImageRGBUC2)
itkImageRGBUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetBufferPointer, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixelContainer, None, itkImageRGBUC2)
itkImageRGBUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC2_SetPixelContainer, None, itkImageRGBUC2)
itkImageRGBUC2.Graft = new_instancemethod(_itkImagePython.itkImageRGBUC2_Graft, None, itkImageRGBUC2)
itkImageRGBUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPixelAccessor, None, itkImageRGBUC2)
itkImageRGBUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetNeighborhoodAccessor, None, itkImageRGBUC2)
itkImageRGBUC2.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBUC2_GetPointer, None, itkImageRGBUC2)
itkImageRGBUC2_swigregister = _itkImagePython.itkImageRGBUC2_swigregister
itkImageRGBUC2_swigregister(itkImageRGBUC2)

def itkImageRGBUC2___New_orig__():
    """itkImageRGBUC2___New_orig__() -> itkImageRGBUC2_Pointer"""
    return _itkImagePython.itkImageRGBUC2___New_orig__()

def itkImageRGBUC2_cast(obj):
    """itkImageRGBUC2_cast(itkLightObject obj) -> itkImageRGBUC2"""
    return _itkImagePython.itkImageRGBUC2_cast(obj)

class itkImageRGBUC3(itkImageBase3):
    """Proxy of C++ itkImageRGBUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageRGBUC3 self) -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageRGBUC3 self, bool initializePixels=False)
        Allocate(itkImageRGBUC3 self)
        """
        return _itkImagePython.itkImageRGBUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageRGBUC3 self, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageRGBUC3 self, itkIndex3 index, itkRGBPixelUC value)"""
        return _itkImagePython.itkImageRGBUC3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageRGBUC3 self, itkIndex3 index) -> itkRGBPixelUC
        GetPixel(itkImageRGBUC3 self, itkIndex3 index) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageRGBUC3 self) -> itkRGBPixelUC
        GetBufferPointer(itkImageRGBUC3 self) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageRGBUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(itkImageRGBUC3 self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageRGBUC3 self, itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > * container)"""
        return _itkImagePython.itkImageRGBUC3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageRGBUC3 self, itkImageRGBUC3 data)"""
        return _itkImagePython.itkImageRGBUC3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageRGBUC3 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(itkImageRGBUC3 self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageRGBUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(itkImageRGBUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > > const
        """
        return _itkImagePython.itkImageRGBUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageRGBUC3"""
        return _itkImagePython.itkImageRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageRGBUC3 self) -> itkImageRGBUC3"""
        return _itkImagePython.itkImageRGBUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageRGBUC3

        Create a new object of the class itkImageRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageRGBUC3.Clone = new_instancemethod(_itkImagePython.itkImageRGBUC3_Clone, None, itkImageRGBUC3)
itkImageRGBUC3.Allocate = new_instancemethod(_itkImagePython.itkImageRGBUC3_Allocate, None, itkImageRGBUC3)
itkImageRGBUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageRGBUC3_FillBuffer, None, itkImageRGBUC3)
itkImageRGBUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC3_SetPixel, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixel, None, itkImageRGBUC3)
itkImageRGBUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetBufferPointer, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixelContainer, None, itkImageRGBUC3)
itkImageRGBUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageRGBUC3_SetPixelContainer, None, itkImageRGBUC3)
itkImageRGBUC3.Graft = new_instancemethod(_itkImagePython.itkImageRGBUC3_Graft, None, itkImageRGBUC3)
itkImageRGBUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPixelAccessor, None, itkImageRGBUC3)
itkImageRGBUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetNeighborhoodAccessor, None, itkImageRGBUC3)
itkImageRGBUC3.GetPointer = new_instancemethod(_itkImagePython.itkImageRGBUC3_GetPointer, None, itkImageRGBUC3)
itkImageRGBUC3_swigregister = _itkImagePython.itkImageRGBUC3_swigregister
itkImageRGBUC3_swigregister(itkImageRGBUC3)

def itkImageRGBUC3___New_orig__():
    """itkImageRGBUC3___New_orig__() -> itkImageRGBUC3_Pointer"""
    return _itkImagePython.itkImageRGBUC3___New_orig__()

def itkImageRGBUC3_cast(obj):
    """itkImageRGBUC3_cast(itkLightObject obj) -> itkImageRGBUC3"""
    return _itkImagePython.itkImageRGBUC3_cast(obj)

class itkImageSS2(itkImageBase2):
    """Proxy of C++ itkImageSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSS2 self) -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageSS2 self, bool initializePixels=False)
        Allocate(itkImageSS2 self)
        """
        return _itkImagePython.itkImageSS2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageSS2 self, short const & value)"""
        return _itkImagePython.itkImageSS2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageSS2 self, itkIndex2 index, short const & value)"""
        return _itkImagePython.itkImageSS2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageSS2 self, itkIndex2 index) -> short const
        GetPixel(itkImageSS2 self, itkIndex2 index) -> short &
        """
        return _itkImagePython.itkImageSS2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageSS2 self) -> short
        GetBufferPointer(itkImageSS2 self) -> short const *
        """
        return _itkImagePython.itkImageSS2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageSS2 self) -> itk::ImportImageContainer< unsigned long long,short >
        GetPixelContainer(itkImageSS2 self) -> itk::ImportImageContainer< unsigned long long,short > const *
        """
        return _itkImagePython.itkImageSS2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageSS2 self, itk::ImportImageContainer< unsigned long long,short > * container)"""
        return _itkImagePython.itkImageSS2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageSS2 self, itkImageSS2 data)"""
        return _itkImagePython.itkImageSS2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageSS2 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkImageSS2 self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkImagePython.itkImageSS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > >
        GetNeighborhoodAccessor(itkImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,2 > > const
        """
        return _itkImagePython.itkImageSS2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSS2"""
        return _itkImagePython.itkImageSS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSS2 self) -> itkImageSS2"""
        return _itkImagePython.itkImageSS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSS2

        Create a new object of the class itkImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSS2.Clone = new_instancemethod(_itkImagePython.itkImageSS2_Clone, None, itkImageSS2)
itkImageSS2.Allocate = new_instancemethod(_itkImagePython.itkImageSS2_Allocate, None, itkImageSS2)
itkImageSS2.FillBuffer = new_instancemethod(_itkImagePython.itkImageSS2_FillBuffer, None, itkImageSS2)
itkImageSS2.SetPixel = new_instancemethod(_itkImagePython.itkImageSS2_SetPixel, None, itkImageSS2)
itkImageSS2.GetPixel = new_instancemethod(_itkImagePython.itkImageSS2_GetPixel, None, itkImageSS2)
itkImageSS2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSS2_GetBufferPointer, None, itkImageSS2)
itkImageSS2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS2_GetPixelContainer, None, itkImageSS2)
itkImageSS2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS2_SetPixelContainer, None, itkImageSS2)
itkImageSS2.Graft = new_instancemethod(_itkImagePython.itkImageSS2_Graft, None, itkImageSS2)
itkImageSS2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSS2_GetPixelAccessor, None, itkImageSS2)
itkImageSS2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSS2_GetNeighborhoodAccessor, None, itkImageSS2)
itkImageSS2.GetPointer = new_instancemethod(_itkImagePython.itkImageSS2_GetPointer, None, itkImageSS2)
itkImageSS2_swigregister = _itkImagePython.itkImageSS2_swigregister
itkImageSS2_swigregister(itkImageSS2)

def itkImageSS2___New_orig__():
    """itkImageSS2___New_orig__() -> itkImageSS2_Pointer"""
    return _itkImagePython.itkImageSS2___New_orig__()

def itkImageSS2_cast(obj):
    """itkImageSS2_cast(itkLightObject obj) -> itkImageSS2"""
    return _itkImagePython.itkImageSS2_cast(obj)

class itkImageSS3(itkImageBase3):
    """Proxy of C++ itkImageSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSS3 self) -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageSS3 self, bool initializePixels=False)
        Allocate(itkImageSS3 self)
        """
        return _itkImagePython.itkImageSS3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageSS3 self, short const & value)"""
        return _itkImagePython.itkImageSS3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageSS3 self, itkIndex3 index, short const & value)"""
        return _itkImagePython.itkImageSS3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageSS3 self, itkIndex3 index) -> short const
        GetPixel(itkImageSS3 self, itkIndex3 index) -> short &
        """
        return _itkImagePython.itkImageSS3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageSS3 self) -> short
        GetBufferPointer(itkImageSS3 self) -> short const *
        """
        return _itkImagePython.itkImageSS3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageSS3 self) -> itk::ImportImageContainer< unsigned long long,short >
        GetPixelContainer(itkImageSS3 self) -> itk::ImportImageContainer< unsigned long long,short > const *
        """
        return _itkImagePython.itkImageSS3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageSS3 self, itk::ImportImageContainer< unsigned long long,short > * container)"""
        return _itkImagePython.itkImageSS3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageSS3 self, itkImageSS3 data)"""
        return _itkImagePython.itkImageSS3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageSS3 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkImageSS3 self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkImagePython.itkImageSS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > >
        GetNeighborhoodAccessor(itkImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > > const
        """
        return _itkImagePython.itkImageSS3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSS3"""
        return _itkImagePython.itkImageSS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSS3 self) -> itkImageSS3"""
        return _itkImagePython.itkImageSS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSS3

        Create a new object of the class itkImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSS3.Clone = new_instancemethod(_itkImagePython.itkImageSS3_Clone, None, itkImageSS3)
itkImageSS3.Allocate = new_instancemethod(_itkImagePython.itkImageSS3_Allocate, None, itkImageSS3)
itkImageSS3.FillBuffer = new_instancemethod(_itkImagePython.itkImageSS3_FillBuffer, None, itkImageSS3)
itkImageSS3.SetPixel = new_instancemethod(_itkImagePython.itkImageSS3_SetPixel, None, itkImageSS3)
itkImageSS3.GetPixel = new_instancemethod(_itkImagePython.itkImageSS3_GetPixel, None, itkImageSS3)
itkImageSS3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSS3_GetBufferPointer, None, itkImageSS3)
itkImageSS3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS3_GetPixelContainer, None, itkImageSS3)
itkImageSS3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSS3_SetPixelContainer, None, itkImageSS3)
itkImageSS3.Graft = new_instancemethod(_itkImagePython.itkImageSS3_Graft, None, itkImageSS3)
itkImageSS3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSS3_GetPixelAccessor, None, itkImageSS3)
itkImageSS3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSS3_GetNeighborhoodAccessor, None, itkImageSS3)
itkImageSS3.GetPointer = new_instancemethod(_itkImagePython.itkImageSS3_GetPointer, None, itkImageSS3)
itkImageSS3_swigregister = _itkImagePython.itkImageSS3_swigregister
itkImageSS3_swigregister(itkImageSS3)

def itkImageSS3___New_orig__():
    """itkImageSS3___New_orig__() -> itkImageSS3_Pointer"""
    return _itkImagePython.itkImageSS3___New_orig__()

def itkImageSS3_cast(obj):
    """itkImageSS3_cast(itkLightObject obj) -> itkImageSS3"""
    return _itkImagePython.itkImageSS3_cast(obj)

class itkImageSSRTD22(itkImageBase2):
    """Proxy of C++ itkImageSSRTD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSSRTD22 self) -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageSSRTD22 self, bool initializePixels=False)
        Allocate(itkImageSSRTD22 self)
        """
        return _itkImagePython.itkImageSSRTD22_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageSSRTD22 self, itkSymmetricSecondRankTensorD2 value)"""
        return _itkImagePython.itkImageSSRTD22_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageSSRTD22 self, itkIndex2 index, itkSymmetricSecondRankTensorD2 value)"""
        return _itkImagePython.itkImageSSRTD22_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageSSRTD22 self, itkIndex2 index) -> itkSymmetricSecondRankTensorD2
        GetPixel(itkImageSSRTD22 self, itkIndex2 index) -> itkSymmetricSecondRankTensorD2
        """
        return _itkImagePython.itkImageSSRTD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageSSRTD22 self) -> itkSymmetricSecondRankTensorD2
        GetBufferPointer(itkImageSSRTD22 self) -> itkSymmetricSecondRankTensorD2
        """
        return _itkImagePython.itkImageSSRTD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageSSRTD22 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelContainer(itkImageSSRTD22 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > const *
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageSSRTD22 self, itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > * container)"""
        return _itkImagePython.itkImageSSRTD22_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageSSRTD22 self, itkImageSSRTD22 data)"""
        return _itkImagePython.itkImageSSRTD22_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageSSRTD22 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelAccessor(itkImageSSRTD22 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > > const
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageSSRTD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageSSRTD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 >,2 > > const
        """
        return _itkImagePython.itkImageSSRTD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD22

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSSRTD22"""
        return _itkImagePython.itkImageSSRTD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSSRTD22 self) -> itkImageSSRTD22"""
        return _itkImagePython.itkImageSSRTD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSSRTD22

        Create a new object of the class itkImageSSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSSRTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSSRTD22.Clone = new_instancemethod(_itkImagePython.itkImageSSRTD22_Clone, None, itkImageSSRTD22)
itkImageSSRTD22.Allocate = new_instancemethod(_itkImagePython.itkImageSSRTD22_Allocate, None, itkImageSSRTD22)
itkImageSSRTD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageSSRTD22_FillBuffer, None, itkImageSSRTD22)
itkImageSSRTD22.SetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD22_SetPixel, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixel, None, itkImageSSRTD22)
itkImageSSRTD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetBufferPointer, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixelContainer, None, itkImageSSRTD22)
itkImageSSRTD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD22_SetPixelContainer, None, itkImageSSRTD22)
itkImageSSRTD22.Graft = new_instancemethod(_itkImagePython.itkImageSSRTD22_Graft, None, itkImageSSRTD22)
itkImageSSRTD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPixelAccessor, None, itkImageSSRTD22)
itkImageSSRTD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetNeighborhoodAccessor, None, itkImageSSRTD22)
itkImageSSRTD22.GetPointer = new_instancemethod(_itkImagePython.itkImageSSRTD22_GetPointer, None, itkImageSSRTD22)
itkImageSSRTD22_swigregister = _itkImagePython.itkImageSSRTD22_swigregister
itkImageSSRTD22_swigregister(itkImageSSRTD22)

def itkImageSSRTD22___New_orig__():
    """itkImageSSRTD22___New_orig__() -> itkImageSSRTD22_Pointer"""
    return _itkImagePython.itkImageSSRTD22___New_orig__()

def itkImageSSRTD22_cast(obj):
    """itkImageSSRTD22_cast(itkLightObject obj) -> itkImageSSRTD22"""
    return _itkImagePython.itkImageSSRTD22_cast(obj)

class itkImageSSRTD33(itkImageBase3):
    """Proxy of C++ itkImageSSRTD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSSRTD33 self) -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageSSRTD33 self, bool initializePixels=False)
        Allocate(itkImageSSRTD33 self)
        """
        return _itkImagePython.itkImageSSRTD33_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageSSRTD33 self, itkSymmetricSecondRankTensorD3 value)"""
        return _itkImagePython.itkImageSSRTD33_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageSSRTD33 self, itkIndex3 index, itkSymmetricSecondRankTensorD3 value)"""
        return _itkImagePython.itkImageSSRTD33_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageSSRTD33 self, itkIndex3 index) -> itkSymmetricSecondRankTensorD3
        GetPixel(itkImageSSRTD33 self, itkIndex3 index) -> itkSymmetricSecondRankTensorD3
        """
        return _itkImagePython.itkImageSSRTD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageSSRTD33 self) -> itkSymmetricSecondRankTensorD3
        GetBufferPointer(itkImageSSRTD33 self) -> itkSymmetricSecondRankTensorD3
        """
        return _itkImagePython.itkImageSSRTD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageSSRTD33 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > >
        GetPixelContainer(itkImageSSRTD33 self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > > const *
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageSSRTD33 self, itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,3 > > * container)"""
        return _itkImagePython.itkImageSSRTD33_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageSSRTD33 self, itkImageSSRTD33 data)"""
        return _itkImagePython.itkImageSSRTD33_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageSSRTD33 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > >
        GetPixelAccessor(itkImageSSRTD33 self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,3 > > const
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageSSRTD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageSSRTD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,3 >,3 > > const
        """
        return _itkImagePython.itkImageSSRTD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSSRTD33"""
        return _itkImagePython.itkImageSSRTD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSSRTD33 self) -> itkImageSSRTD33"""
        return _itkImagePython.itkImageSSRTD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSSRTD33

        Create a new object of the class itkImageSSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSSRTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSSRTD33.Clone = new_instancemethod(_itkImagePython.itkImageSSRTD33_Clone, None, itkImageSSRTD33)
itkImageSSRTD33.Allocate = new_instancemethod(_itkImagePython.itkImageSSRTD33_Allocate, None, itkImageSSRTD33)
itkImageSSRTD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageSSRTD33_FillBuffer, None, itkImageSSRTD33)
itkImageSSRTD33.SetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD33_SetPixel, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixel = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixel, None, itkImageSSRTD33)
itkImageSSRTD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetBufferPointer, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixelContainer, None, itkImageSSRTD33)
itkImageSSRTD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageSSRTD33_SetPixelContainer, None, itkImageSSRTD33)
itkImageSSRTD33.Graft = new_instancemethod(_itkImagePython.itkImageSSRTD33_Graft, None, itkImageSSRTD33)
itkImageSSRTD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPixelAccessor, None, itkImageSSRTD33)
itkImageSSRTD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetNeighborhoodAccessor, None, itkImageSSRTD33)
itkImageSSRTD33.GetPointer = new_instancemethod(_itkImagePython.itkImageSSRTD33_GetPointer, None, itkImageSSRTD33)
itkImageSSRTD33_swigregister = _itkImagePython.itkImageSSRTD33_swigregister
itkImageSSRTD33_swigregister(itkImageSSRTD33)

def itkImageSSRTD33___New_orig__():
    """itkImageSSRTD33___New_orig__() -> itkImageSSRTD33_Pointer"""
    return _itkImagePython.itkImageSSRTD33___New_orig__()

def itkImageSSRTD33_cast(obj):
    """itkImageSSRTD33_cast(itkLightObject obj) -> itkImageSSRTD33"""
    return _itkImagePython.itkImageSSRTD33_cast(obj)

class itkImageUC2(itkImageBase2):
    """Proxy of C++ itkImageUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageUC2 self) -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageUC2 self, bool initializePixels=False)
        Allocate(itkImageUC2 self)
        """
        return _itkImagePython.itkImageUC2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageUC2 self, unsigned char const & value)"""
        return _itkImagePython.itkImageUC2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageUC2 self, itkIndex2 index, unsigned char const & value)"""
        return _itkImagePython.itkImageUC2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageUC2 self, itkIndex2 index) -> unsigned char const
        GetPixel(itkImageUC2 self, itkIndex2 index) -> unsigned char &
        """
        return _itkImagePython.itkImageUC2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageUC2 self) -> unsigned char
        GetBufferPointer(itkImageUC2 self) -> unsigned char const *
        """
        return _itkImagePython.itkImageUC2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageUC2 self) -> itk::ImportImageContainer< unsigned long long,unsigned char >
        GetPixelContainer(itkImageUC2 self) -> itk::ImportImageContainer< unsigned long long,unsigned char > const *
        """
        return _itkImagePython.itkImageUC2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageUC2 self, itk::ImportImageContainer< unsigned long long,unsigned char > * container)"""
        return _itkImagePython.itkImageUC2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageUC2 self, itkImageUC2 data)"""
        return _itkImagePython.itkImageUC2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImagePython.itkImageUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > >
        GetNeighborhoodAccessor(itkImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,2 > > const
        """
        return _itkImagePython.itkImageUC2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageUC2"""
        return _itkImagePython.itkImageUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageUC2 self) -> itkImageUC2"""
        return _itkImagePython.itkImageUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUC2

        Create a new object of the class itkImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUC2.Clone = new_instancemethod(_itkImagePython.itkImageUC2_Clone, None, itkImageUC2)
itkImageUC2.Allocate = new_instancemethod(_itkImagePython.itkImageUC2_Allocate, None, itkImageUC2)
itkImageUC2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUC2_FillBuffer, None, itkImageUC2)
itkImageUC2.SetPixel = new_instancemethod(_itkImagePython.itkImageUC2_SetPixel, None, itkImageUC2)
itkImageUC2.GetPixel = new_instancemethod(_itkImagePython.itkImageUC2_GetPixel, None, itkImageUC2)
itkImageUC2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUC2_GetBufferPointer, None, itkImageUC2)
itkImageUC2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC2_GetPixelContainer, None, itkImageUC2)
itkImageUC2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC2_SetPixelContainer, None, itkImageUC2)
itkImageUC2.Graft = new_instancemethod(_itkImagePython.itkImageUC2_Graft, None, itkImageUC2)
itkImageUC2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUC2_GetPixelAccessor, None, itkImageUC2)
itkImageUC2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUC2_GetNeighborhoodAccessor, None, itkImageUC2)
itkImageUC2.GetPointer = new_instancemethod(_itkImagePython.itkImageUC2_GetPointer, None, itkImageUC2)
itkImageUC2_swigregister = _itkImagePython.itkImageUC2_swigregister
itkImageUC2_swigregister(itkImageUC2)

def itkImageUC2___New_orig__():
    """itkImageUC2___New_orig__() -> itkImageUC2_Pointer"""
    return _itkImagePython.itkImageUC2___New_orig__()

def itkImageUC2_cast(obj):
    """itkImageUC2_cast(itkLightObject obj) -> itkImageUC2"""
    return _itkImagePython.itkImageUC2_cast(obj)

class itkImageUC3(itkImageBase3):
    """Proxy of C++ itkImageUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageUC3 self) -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageUC3 self, bool initializePixels=False)
        Allocate(itkImageUC3 self)
        """
        return _itkImagePython.itkImageUC3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageUC3 self, unsigned char const & value)"""
        return _itkImagePython.itkImageUC3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageUC3 self, itkIndex3 index, unsigned char const & value)"""
        return _itkImagePython.itkImageUC3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageUC3 self, itkIndex3 index) -> unsigned char const
        GetPixel(itkImageUC3 self, itkIndex3 index) -> unsigned char &
        """
        return _itkImagePython.itkImageUC3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageUC3 self) -> unsigned char
        GetBufferPointer(itkImageUC3 self) -> unsigned char const *
        """
        return _itkImagePython.itkImageUC3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageUC3 self) -> itk::ImportImageContainer< unsigned long long,unsigned char >
        GetPixelContainer(itkImageUC3 self) -> itk::ImportImageContainer< unsigned long long,unsigned char > const *
        """
        return _itkImagePython.itkImageUC3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageUC3 self, itk::ImportImageContainer< unsigned long long,unsigned char > * container)"""
        return _itkImagePython.itkImageUC3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageUC3 self, itkImageUC3 data)"""
        return _itkImagePython.itkImageUC3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImagePython.itkImageUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > >
        GetNeighborhoodAccessor(itkImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > > const
        """
        return _itkImagePython.itkImageUC3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageUC3"""
        return _itkImagePython.itkImageUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageUC3 self) -> itkImageUC3"""
        return _itkImagePython.itkImageUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUC3

        Create a new object of the class itkImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUC3.Clone = new_instancemethod(_itkImagePython.itkImageUC3_Clone, None, itkImageUC3)
itkImageUC3.Allocate = new_instancemethod(_itkImagePython.itkImageUC3_Allocate, None, itkImageUC3)
itkImageUC3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUC3_FillBuffer, None, itkImageUC3)
itkImageUC3.SetPixel = new_instancemethod(_itkImagePython.itkImageUC3_SetPixel, None, itkImageUC3)
itkImageUC3.GetPixel = new_instancemethod(_itkImagePython.itkImageUC3_GetPixel, None, itkImageUC3)
itkImageUC3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUC3_GetBufferPointer, None, itkImageUC3)
itkImageUC3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC3_GetPixelContainer, None, itkImageUC3)
itkImageUC3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUC3_SetPixelContainer, None, itkImageUC3)
itkImageUC3.Graft = new_instancemethod(_itkImagePython.itkImageUC3_Graft, None, itkImageUC3)
itkImageUC3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUC3_GetPixelAccessor, None, itkImageUC3)
itkImageUC3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUC3_GetNeighborhoodAccessor, None, itkImageUC3)
itkImageUC3.GetPointer = new_instancemethod(_itkImagePython.itkImageUC3_GetPointer, None, itkImageUC3)
itkImageUC3_swigregister = _itkImagePython.itkImageUC3_swigregister
itkImageUC3_swigregister(itkImageUC3)

def itkImageUC3___New_orig__():
    """itkImageUC3___New_orig__() -> itkImageUC3_Pointer"""
    return _itkImagePython.itkImageUC3___New_orig__()

def itkImageUC3_cast(obj):
    """itkImageUC3_cast(itkLightObject obj) -> itkImageUC3"""
    return _itkImagePython.itkImageUC3_cast(obj)

class itkImageUL2(itkImageBase2):
    """Proxy of C++ itkImageUL2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageUL2 self) -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageUL2 self, bool initializePixels=False)
        Allocate(itkImageUL2 self)
        """
        return _itkImagePython.itkImageUL2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageUL2 self, unsigned long const & value)"""
        return _itkImagePython.itkImageUL2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageUL2 self, itkIndex2 index, unsigned long const & value)"""
        return _itkImagePython.itkImageUL2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageUL2 self, itkIndex2 index) -> unsigned long const
        GetPixel(itkImageUL2 self, itkIndex2 index) -> unsigned long &
        """
        return _itkImagePython.itkImageUL2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageUL2 self) -> unsigned long
        GetBufferPointer(itkImageUL2 self) -> unsigned long const *
        """
        return _itkImagePython.itkImageUL2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageUL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long >
        GetPixelContainer(itkImageUL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long > const *
        """
        return _itkImagePython.itkImageUL2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageUL2 self, itk::ImportImageContainer< unsigned long long,unsigned long > * container)"""
        return _itkImagePython.itkImageUL2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageUL2 self, itkImageUL2 data)"""
        return _itkImagePython.itkImageUL2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkImagePython.itkImageUL2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > >
        GetNeighborhoodAccessor(itkImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,2 > > const
        """
        return _itkImagePython.itkImageUL2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageUL2"""
        return _itkImagePython.itkImageUL2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageUL2 self) -> itkImageUL2"""
        return _itkImagePython.itkImageUL2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUL2

        Create a new object of the class itkImageUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUL2.Clone = new_instancemethod(_itkImagePython.itkImageUL2_Clone, None, itkImageUL2)
itkImageUL2.Allocate = new_instancemethod(_itkImagePython.itkImageUL2_Allocate, None, itkImageUL2)
itkImageUL2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUL2_FillBuffer, None, itkImageUL2)
itkImageUL2.SetPixel = new_instancemethod(_itkImagePython.itkImageUL2_SetPixel, None, itkImageUL2)
itkImageUL2.GetPixel = new_instancemethod(_itkImagePython.itkImageUL2_GetPixel, None, itkImageUL2)
itkImageUL2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUL2_GetBufferPointer, None, itkImageUL2)
itkImageUL2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL2_GetPixelContainer, None, itkImageUL2)
itkImageUL2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL2_SetPixelContainer, None, itkImageUL2)
itkImageUL2.Graft = new_instancemethod(_itkImagePython.itkImageUL2_Graft, None, itkImageUL2)
itkImageUL2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUL2_GetPixelAccessor, None, itkImageUL2)
itkImageUL2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUL2_GetNeighborhoodAccessor, None, itkImageUL2)
itkImageUL2.GetPointer = new_instancemethod(_itkImagePython.itkImageUL2_GetPointer, None, itkImageUL2)
itkImageUL2_swigregister = _itkImagePython.itkImageUL2_swigregister
itkImageUL2_swigregister(itkImageUL2)

def itkImageUL2___New_orig__():
    """itkImageUL2___New_orig__() -> itkImageUL2_Pointer"""
    return _itkImagePython.itkImageUL2___New_orig__()

def itkImageUL2_cast(obj):
    """itkImageUL2_cast(itkLightObject obj) -> itkImageUL2"""
    return _itkImagePython.itkImageUL2_cast(obj)

class itkImageUL3(itkImageBase3):
    """Proxy of C++ itkImageUL3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageUL3 self) -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageUL3 self, bool initializePixels=False)
        Allocate(itkImageUL3 self)
        """
        return _itkImagePython.itkImageUL3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageUL3 self, unsigned long const & value)"""
        return _itkImagePython.itkImageUL3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageUL3 self, itkIndex3 index, unsigned long const & value)"""
        return _itkImagePython.itkImageUL3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageUL3 self, itkIndex3 index) -> unsigned long const
        GetPixel(itkImageUL3 self, itkIndex3 index) -> unsigned long &
        """
        return _itkImagePython.itkImageUL3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageUL3 self) -> unsigned long
        GetBufferPointer(itkImageUL3 self) -> unsigned long const *
        """
        return _itkImagePython.itkImageUL3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageUL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long >
        GetPixelContainer(itkImageUL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long > const *
        """
        return _itkImagePython.itkImageUL3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageUL3 self, itk::ImportImageContainer< unsigned long long,unsigned long > * container)"""
        return _itkImagePython.itkImageUL3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageUL3 self, itkImageUL3 data)"""
        return _itkImagePython.itkImageUL3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkImagePython.itkImageUL3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > >
        GetNeighborhoodAccessor(itkImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > > const
        """
        return _itkImagePython.itkImageUL3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageUL3"""
        return _itkImagePython.itkImageUL3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageUL3 self) -> itkImageUL3"""
        return _itkImagePython.itkImageUL3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUL3

        Create a new object of the class itkImageUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUL3.Clone = new_instancemethod(_itkImagePython.itkImageUL3_Clone, None, itkImageUL3)
itkImageUL3.Allocate = new_instancemethod(_itkImagePython.itkImageUL3_Allocate, None, itkImageUL3)
itkImageUL3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUL3_FillBuffer, None, itkImageUL3)
itkImageUL3.SetPixel = new_instancemethod(_itkImagePython.itkImageUL3_SetPixel, None, itkImageUL3)
itkImageUL3.GetPixel = new_instancemethod(_itkImagePython.itkImageUL3_GetPixel, None, itkImageUL3)
itkImageUL3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUL3_GetBufferPointer, None, itkImageUL3)
itkImageUL3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL3_GetPixelContainer, None, itkImageUL3)
itkImageUL3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUL3_SetPixelContainer, None, itkImageUL3)
itkImageUL3.Graft = new_instancemethod(_itkImagePython.itkImageUL3_Graft, None, itkImageUL3)
itkImageUL3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUL3_GetPixelAccessor, None, itkImageUL3)
itkImageUL3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUL3_GetNeighborhoodAccessor, None, itkImageUL3)
itkImageUL3.GetPointer = new_instancemethod(_itkImagePython.itkImageUL3_GetPointer, None, itkImageUL3)
itkImageUL3_swigregister = _itkImagePython.itkImageUL3_swigregister
itkImageUL3_swigregister(itkImageUL3)

def itkImageUL3___New_orig__():
    """itkImageUL3___New_orig__() -> itkImageUL3_Pointer"""
    return _itkImagePython.itkImageUL3___New_orig__()

def itkImageUL3_cast(obj):
    """itkImageUL3_cast(itkLightObject obj) -> itkImageUL3"""
    return _itkImagePython.itkImageUL3_cast(obj)

class itkImageULL2(itkImageBase2):
    """Proxy of C++ itkImageULL2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageULL2 self) -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageULL2 self, bool initializePixels=False)
        Allocate(itkImageULL2 self)
        """
        return _itkImagePython.itkImageULL2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageULL2 self, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageULL2 self, itkIndex2 index, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageULL2 self, itkIndex2 index) -> unsigned long long const
        GetPixel(itkImageULL2 self, itkIndex2 index) -> unsigned long long &
        """
        return _itkImagePython.itkImageULL2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageULL2 self) -> unsigned long long
        GetBufferPointer(itkImageULL2 self) -> unsigned long long const *
        """
        return _itkImagePython.itkImageULL2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageULL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long >
        GetPixelContainer(itkImageULL2 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long > const *
        """
        return _itkImagePython.itkImageULL2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageULL2 self, itk::ImportImageContainer< unsigned long long,unsigned long long > * container)"""
        return _itkImagePython.itkImageULL2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageULL2 self, itkImageULL2 data)"""
        return _itkImagePython.itkImageULL2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageULL2 self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(itkImageULL2 self) -> itk::DefaultPixelAccessor< unsigned long long > const
        """
        return _itkImagePython.itkImageULL2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageULL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > >
        GetNeighborhoodAccessor(itkImageULL2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,2 > > const
        """
        return _itkImagePython.itkImageULL2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageULL2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageULL2"""
        return _itkImagePython.itkImageULL2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageULL2 self) -> itkImageULL2"""
        return _itkImagePython.itkImageULL2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageULL2

        Create a new object of the class itkImageULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageULL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageULL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageULL2.Clone = new_instancemethod(_itkImagePython.itkImageULL2_Clone, None, itkImageULL2)
itkImageULL2.Allocate = new_instancemethod(_itkImagePython.itkImageULL2_Allocate, None, itkImageULL2)
itkImageULL2.FillBuffer = new_instancemethod(_itkImagePython.itkImageULL2_FillBuffer, None, itkImageULL2)
itkImageULL2.SetPixel = new_instancemethod(_itkImagePython.itkImageULL2_SetPixel, None, itkImageULL2)
itkImageULL2.GetPixel = new_instancemethod(_itkImagePython.itkImageULL2_GetPixel, None, itkImageULL2)
itkImageULL2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageULL2_GetBufferPointer, None, itkImageULL2)
itkImageULL2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL2_GetPixelContainer, None, itkImageULL2)
itkImageULL2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL2_SetPixelContainer, None, itkImageULL2)
itkImageULL2.Graft = new_instancemethod(_itkImagePython.itkImageULL2_Graft, None, itkImageULL2)
itkImageULL2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageULL2_GetPixelAccessor, None, itkImageULL2)
itkImageULL2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageULL2_GetNeighborhoodAccessor, None, itkImageULL2)
itkImageULL2.GetPointer = new_instancemethod(_itkImagePython.itkImageULL2_GetPointer, None, itkImageULL2)
itkImageULL2_swigregister = _itkImagePython.itkImageULL2_swigregister
itkImageULL2_swigregister(itkImageULL2)

def itkImageULL2___New_orig__():
    """itkImageULL2___New_orig__() -> itkImageULL2_Pointer"""
    return _itkImagePython.itkImageULL2___New_orig__()

def itkImageULL2_cast(obj):
    """itkImageULL2_cast(itkLightObject obj) -> itkImageULL2"""
    return _itkImagePython.itkImageULL2_cast(obj)

class itkImageULL3(itkImageBase3):
    """Proxy of C++ itkImageULL3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageULL3 self) -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageULL3 self, bool initializePixels=False)
        Allocate(itkImageULL3 self)
        """
        return _itkImagePython.itkImageULL3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageULL3 self, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageULL3 self, itkIndex3 index, unsigned long long const & value)"""
        return _itkImagePython.itkImageULL3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageULL3 self, itkIndex3 index) -> unsigned long long const
        GetPixel(itkImageULL3 self, itkIndex3 index) -> unsigned long long &
        """
        return _itkImagePython.itkImageULL3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageULL3 self) -> unsigned long long
        GetBufferPointer(itkImageULL3 self) -> unsigned long long const *
        """
        return _itkImagePython.itkImageULL3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageULL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long >
        GetPixelContainer(itkImageULL3 self) -> itk::ImportImageContainer< unsigned long long,unsigned long long > const *
        """
        return _itkImagePython.itkImageULL3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageULL3 self, itk::ImportImageContainer< unsigned long long,unsigned long long > * container)"""
        return _itkImagePython.itkImageULL3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageULL3 self, itkImageULL3 data)"""
        return _itkImagePython.itkImageULL3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageULL3 self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(itkImageULL3 self) -> itk::DefaultPixelAccessor< unsigned long long > const
        """
        return _itkImagePython.itkImageULL3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageULL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > >
        GetNeighborhoodAccessor(itkImageULL3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > > const
        """
        return _itkImagePython.itkImageULL3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageULL3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageULL3"""
        return _itkImagePython.itkImageULL3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageULL3 self) -> itkImageULL3"""
        return _itkImagePython.itkImageULL3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageULL3

        Create a new object of the class itkImageULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageULL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageULL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageULL3.Clone = new_instancemethod(_itkImagePython.itkImageULL3_Clone, None, itkImageULL3)
itkImageULL3.Allocate = new_instancemethod(_itkImagePython.itkImageULL3_Allocate, None, itkImageULL3)
itkImageULL3.FillBuffer = new_instancemethod(_itkImagePython.itkImageULL3_FillBuffer, None, itkImageULL3)
itkImageULL3.SetPixel = new_instancemethod(_itkImagePython.itkImageULL3_SetPixel, None, itkImageULL3)
itkImageULL3.GetPixel = new_instancemethod(_itkImagePython.itkImageULL3_GetPixel, None, itkImageULL3)
itkImageULL3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageULL3_GetBufferPointer, None, itkImageULL3)
itkImageULL3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL3_GetPixelContainer, None, itkImageULL3)
itkImageULL3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageULL3_SetPixelContainer, None, itkImageULL3)
itkImageULL3.Graft = new_instancemethod(_itkImagePython.itkImageULL3_Graft, None, itkImageULL3)
itkImageULL3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageULL3_GetPixelAccessor, None, itkImageULL3)
itkImageULL3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageULL3_GetNeighborhoodAccessor, None, itkImageULL3)
itkImageULL3.GetPointer = new_instancemethod(_itkImagePython.itkImageULL3_GetPointer, None, itkImageULL3)
itkImageULL3_swigregister = _itkImagePython.itkImageULL3_swigregister
itkImageULL3_swigregister(itkImageULL3)

def itkImageULL3___New_orig__():
    """itkImageULL3___New_orig__() -> itkImageULL3_Pointer"""
    return _itkImagePython.itkImageULL3___New_orig__()

def itkImageULL3_cast(obj):
    """itkImageULL3_cast(itkLightObject obj) -> itkImageULL3"""
    return _itkImagePython.itkImageULL3_cast(obj)

class itkImageUS2(itkImageBase2):
    """Proxy of C++ itkImageUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageUS2 self) -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageUS2 self, bool initializePixels=False)
        Allocate(itkImageUS2 self)
        """
        return _itkImagePython.itkImageUS2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageUS2 self, unsigned short const & value)"""
        return _itkImagePython.itkImageUS2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageUS2 self, itkIndex2 index, unsigned short const & value)"""
        return _itkImagePython.itkImageUS2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageUS2 self, itkIndex2 index) -> unsigned short const
        GetPixel(itkImageUS2 self, itkIndex2 index) -> unsigned short &
        """
        return _itkImagePython.itkImageUS2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageUS2 self) -> unsigned short
        GetBufferPointer(itkImageUS2 self) -> unsigned short const *
        """
        return _itkImagePython.itkImageUS2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageUS2 self) -> itk::ImportImageContainer< unsigned long long,unsigned short >
        GetPixelContainer(itkImageUS2 self) -> itk::ImportImageContainer< unsigned long long,unsigned short > const *
        """
        return _itkImagePython.itkImageUS2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageUS2 self, itk::ImportImageContainer< unsigned long long,unsigned short > * container)"""
        return _itkImagePython.itkImageUS2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageUS2 self, itkImageUS2 data)"""
        return _itkImagePython.itkImageUS2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImagePython.itkImageUS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > >
        GetNeighborhoodAccessor(itkImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,2 > > const
        """
        return _itkImagePython.itkImageUS2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageUS2"""
        return _itkImagePython.itkImageUS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageUS2 self) -> itkImageUS2"""
        return _itkImagePython.itkImageUS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUS2

        Create a new object of the class itkImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUS2.Clone = new_instancemethod(_itkImagePython.itkImageUS2_Clone, None, itkImageUS2)
itkImageUS2.Allocate = new_instancemethod(_itkImagePython.itkImageUS2_Allocate, None, itkImageUS2)
itkImageUS2.FillBuffer = new_instancemethod(_itkImagePython.itkImageUS2_FillBuffer, None, itkImageUS2)
itkImageUS2.SetPixel = new_instancemethod(_itkImagePython.itkImageUS2_SetPixel, None, itkImageUS2)
itkImageUS2.GetPixel = new_instancemethod(_itkImagePython.itkImageUS2_GetPixel, None, itkImageUS2)
itkImageUS2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUS2_GetBufferPointer, None, itkImageUS2)
itkImageUS2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS2_GetPixelContainer, None, itkImageUS2)
itkImageUS2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS2_SetPixelContainer, None, itkImageUS2)
itkImageUS2.Graft = new_instancemethod(_itkImagePython.itkImageUS2_Graft, None, itkImageUS2)
itkImageUS2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUS2_GetPixelAccessor, None, itkImageUS2)
itkImageUS2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUS2_GetNeighborhoodAccessor, None, itkImageUS2)
itkImageUS2.GetPointer = new_instancemethod(_itkImagePython.itkImageUS2_GetPointer, None, itkImageUS2)
itkImageUS2_swigregister = _itkImagePython.itkImageUS2_swigregister
itkImageUS2_swigregister(itkImageUS2)

def itkImageUS2___New_orig__():
    """itkImageUS2___New_orig__() -> itkImageUS2_Pointer"""
    return _itkImagePython.itkImageUS2___New_orig__()

def itkImageUS2_cast(obj):
    """itkImageUS2_cast(itkLightObject obj) -> itkImageUS2"""
    return _itkImagePython.itkImageUS2_cast(obj)

class itkImageUS3(itkImageBase3):
    """Proxy of C++ itkImageUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageUS3 self) -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageUS3 self, bool initializePixels=False)
        Allocate(itkImageUS3 self)
        """
        return _itkImagePython.itkImageUS3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageUS3 self, unsigned short const & value)"""
        return _itkImagePython.itkImageUS3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageUS3 self, itkIndex3 index, unsigned short const & value)"""
        return _itkImagePython.itkImageUS3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageUS3 self, itkIndex3 index) -> unsigned short const
        GetPixel(itkImageUS3 self, itkIndex3 index) -> unsigned short &
        """
        return _itkImagePython.itkImageUS3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageUS3 self) -> unsigned short
        GetBufferPointer(itkImageUS3 self) -> unsigned short const *
        """
        return _itkImagePython.itkImageUS3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageUS3 self) -> itk::ImportImageContainer< unsigned long long,unsigned short >
        GetPixelContainer(itkImageUS3 self) -> itk::ImportImageContainer< unsigned long long,unsigned short > const *
        """
        return _itkImagePython.itkImageUS3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageUS3 self, itk::ImportImageContainer< unsigned long long,unsigned short > * container)"""
        return _itkImagePython.itkImageUS3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageUS3 self, itkImageUS3 data)"""
        return _itkImagePython.itkImageUS3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImagePython.itkImageUS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > >
        GetNeighborhoodAccessor(itkImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > > const
        """
        return _itkImagePython.itkImageUS3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageUS3"""
        return _itkImagePython.itkImageUS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageUS3 self) -> itkImageUS3"""
        return _itkImagePython.itkImageUS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageUS3

        Create a new object of the class itkImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageUS3.Clone = new_instancemethod(_itkImagePython.itkImageUS3_Clone, None, itkImageUS3)
itkImageUS3.Allocate = new_instancemethod(_itkImagePython.itkImageUS3_Allocate, None, itkImageUS3)
itkImageUS3.FillBuffer = new_instancemethod(_itkImagePython.itkImageUS3_FillBuffer, None, itkImageUS3)
itkImageUS3.SetPixel = new_instancemethod(_itkImagePython.itkImageUS3_SetPixel, None, itkImageUS3)
itkImageUS3.GetPixel = new_instancemethod(_itkImagePython.itkImageUS3_GetPixel, None, itkImageUS3)
itkImageUS3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageUS3_GetBufferPointer, None, itkImageUS3)
itkImageUS3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS3_GetPixelContainer, None, itkImageUS3)
itkImageUS3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageUS3_SetPixelContainer, None, itkImageUS3)
itkImageUS3.Graft = new_instancemethod(_itkImagePython.itkImageUS3_Graft, None, itkImageUS3)
itkImageUS3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageUS3_GetPixelAccessor, None, itkImageUS3)
itkImageUS3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageUS3_GetNeighborhoodAccessor, None, itkImageUS3)
itkImageUS3.GetPointer = new_instancemethod(_itkImagePython.itkImageUS3_GetPointer, None, itkImageUS3)
itkImageUS3_swigregister = _itkImagePython.itkImageUS3_swigregister
itkImageUS3_swigregister(itkImageUS3)

def itkImageUS3___New_orig__():
    """itkImageUS3___New_orig__() -> itkImageUS3_Pointer"""
    return _itkImagePython.itkImageUS3___New_orig__()

def itkImageUS3_cast(obj):
    """itkImageUS3_cast(itkLightObject obj) -> itkImageUS3"""
    return _itkImagePython.itkImageUS3_cast(obj)

class itkImageVD22(itkImageBase2):
    """Proxy of C++ itkImageVD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD22 self) -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD22 self, bool initializePixels=False)
        Allocate(itkImageVD22 self)
        """
        return _itkImagePython.itkImageVD22_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD22 self, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD22_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD22 self, itkIndex2 index, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD22_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD22 self, itkIndex2 index) -> itkVectorD2
        GetPixel(itkImageVD22 self, itkIndex2 index) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD22_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD22 self) -> itkVectorD2
        GetBufferPointer(itkImageVD22 self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD22 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > * container)"""
        return _itkImagePython.itkImageVD22_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD22 self, itkImageVD22 data)"""
        return _itkImagePython.itkImageVD22_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD22 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD22 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > >
        GetNeighborhoodAccessor(itkImageVD22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,2 > > const
        """
        return _itkImagePython.itkImageVD22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD22

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD22"""
        return _itkImagePython.itkImageVD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD22 self) -> itkImageVD22"""
        return _itkImagePython.itkImageVD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD22

        Create a new object of the class itkImageVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD22.Clone = new_instancemethod(_itkImagePython.itkImageVD22_Clone, None, itkImageVD22)
itkImageVD22.Allocate = new_instancemethod(_itkImagePython.itkImageVD22_Allocate, None, itkImageVD22)
itkImageVD22.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD22_FillBuffer, None, itkImageVD22)
itkImageVD22.SetPixel = new_instancemethod(_itkImagePython.itkImageVD22_SetPixel, None, itkImageVD22)
itkImageVD22.GetPixel = new_instancemethod(_itkImagePython.itkImageVD22_GetPixel, None, itkImageVD22)
itkImageVD22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD22_GetBufferPointer, None, itkImageVD22)
itkImageVD22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD22_GetPixelContainer, None, itkImageVD22)
itkImageVD22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD22_SetPixelContainer, None, itkImageVD22)
itkImageVD22.Graft = new_instancemethod(_itkImagePython.itkImageVD22_Graft, None, itkImageVD22)
itkImageVD22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD22_GetPixelAccessor, None, itkImageVD22)
itkImageVD22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD22_GetNeighborhoodAccessor, None, itkImageVD22)
itkImageVD22.GetPointer = new_instancemethod(_itkImagePython.itkImageVD22_GetPointer, None, itkImageVD22)
itkImageVD22_swigregister = _itkImagePython.itkImageVD22_swigregister
itkImageVD22_swigregister(itkImageVD22)

def itkImageVD22___New_orig__():
    """itkImageVD22___New_orig__() -> itkImageVD22_Pointer"""
    return _itkImagePython.itkImageVD22___New_orig__()

def itkImageVD22_cast(obj):
    """itkImageVD22_cast(itkLightObject obj) -> itkImageVD22"""
    return _itkImagePython.itkImageVD22_cast(obj)

class itkImageVD23(itkImageBase3):
    """Proxy of C++ itkImageVD23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD23 self) -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD23 self, bool initializePixels=False)
        Allocate(itkImageVD23 self)
        """
        return _itkImagePython.itkImageVD23_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD23 self, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD23_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD23 self, itkIndex3 index, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD23_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD23 self, itkIndex3 index) -> itkVectorD2
        GetPixel(itkImageVD23 self, itkIndex3 index) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD23_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD23 self) -> itkVectorD2
        GetBufferPointer(itkImageVD23 self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD23 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > * container)"""
        return _itkImagePython.itkImageVD23_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD23 self, itkImageVD23 data)"""
        return _itkImagePython.itkImageVD23_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD23 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD23 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > >
        GetNeighborhoodAccessor(itkImageVD23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > > const
        """
        return _itkImagePython.itkImageVD23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD23

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD23"""
        return _itkImagePython.itkImageVD23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD23 self) -> itkImageVD23"""
        return _itkImagePython.itkImageVD23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD23

        Create a new object of the class itkImageVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD23.Clone = new_instancemethod(_itkImagePython.itkImageVD23_Clone, None, itkImageVD23)
itkImageVD23.Allocate = new_instancemethod(_itkImagePython.itkImageVD23_Allocate, None, itkImageVD23)
itkImageVD23.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD23_FillBuffer, None, itkImageVD23)
itkImageVD23.SetPixel = new_instancemethod(_itkImagePython.itkImageVD23_SetPixel, None, itkImageVD23)
itkImageVD23.GetPixel = new_instancemethod(_itkImagePython.itkImageVD23_GetPixel, None, itkImageVD23)
itkImageVD23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD23_GetBufferPointer, None, itkImageVD23)
itkImageVD23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD23_GetPixelContainer, None, itkImageVD23)
itkImageVD23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD23_SetPixelContainer, None, itkImageVD23)
itkImageVD23.Graft = new_instancemethod(_itkImagePython.itkImageVD23_Graft, None, itkImageVD23)
itkImageVD23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD23_GetPixelAccessor, None, itkImageVD23)
itkImageVD23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD23_GetNeighborhoodAccessor, None, itkImageVD23)
itkImageVD23.GetPointer = new_instancemethod(_itkImagePython.itkImageVD23_GetPointer, None, itkImageVD23)
itkImageVD23_swigregister = _itkImagePython.itkImageVD23_swigregister
itkImageVD23_swigregister(itkImageVD23)

def itkImageVD23___New_orig__():
    """itkImageVD23___New_orig__() -> itkImageVD23_Pointer"""
    return _itkImagePython.itkImageVD23___New_orig__()

def itkImageVD23_cast(obj):
    """itkImageVD23_cast(itkLightObject obj) -> itkImageVD23"""
    return _itkImagePython.itkImageVD23_cast(obj)

class itkImageVD24(itkImageBase4):
    """Proxy of C++ itkImageVD24 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD24 self) -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD24 self, bool initializePixels=False)
        Allocate(itkImageVD24 self)
        """
        return _itkImagePython.itkImageVD24_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD24 self, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD24_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD24 self, itkIndex4 index, itkVectorD2 value)"""
        return _itkImagePython.itkImageVD24_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD24 self, itkIndex4 index) -> itkVectorD2
        GetPixel(itkImageVD24 self, itkIndex4 index) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD24_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD24 self) -> itkVectorD2
        GetBufferPointer(itkImageVD24 self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD24_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD24 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(itkImageVD24 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD24_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD24 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > * container)"""
        return _itkImagePython.itkImageVD24_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD24 self, itkImageVD24 data)"""
        return _itkImagePython.itkImageVD24_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD24 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(itkImageVD24 self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD24_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD24 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > >
        GetNeighborhoodAccessor(itkImageVD24 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > > const
        """
        return _itkImagePython.itkImageVD24_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD24

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD24"""
        return _itkImagePython.itkImageVD24_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD24 self) -> itkImageVD24"""
        return _itkImagePython.itkImageVD24_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD24

        Create a new object of the class itkImageVD24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD24.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD24.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD24.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD24.Clone = new_instancemethod(_itkImagePython.itkImageVD24_Clone, None, itkImageVD24)
itkImageVD24.Allocate = new_instancemethod(_itkImagePython.itkImageVD24_Allocate, None, itkImageVD24)
itkImageVD24.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD24_FillBuffer, None, itkImageVD24)
itkImageVD24.SetPixel = new_instancemethod(_itkImagePython.itkImageVD24_SetPixel, None, itkImageVD24)
itkImageVD24.GetPixel = new_instancemethod(_itkImagePython.itkImageVD24_GetPixel, None, itkImageVD24)
itkImageVD24.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD24_GetBufferPointer, None, itkImageVD24)
itkImageVD24.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD24_GetPixelContainer, None, itkImageVD24)
itkImageVD24.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD24_SetPixelContainer, None, itkImageVD24)
itkImageVD24.Graft = new_instancemethod(_itkImagePython.itkImageVD24_Graft, None, itkImageVD24)
itkImageVD24.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD24_GetPixelAccessor, None, itkImageVD24)
itkImageVD24.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD24_GetNeighborhoodAccessor, None, itkImageVD24)
itkImageVD24.GetPointer = new_instancemethod(_itkImagePython.itkImageVD24_GetPointer, None, itkImageVD24)
itkImageVD24_swigregister = _itkImagePython.itkImageVD24_swigregister
itkImageVD24_swigregister(itkImageVD24)

def itkImageVD24___New_orig__():
    """itkImageVD24___New_orig__() -> itkImageVD24_Pointer"""
    return _itkImagePython.itkImageVD24___New_orig__()

def itkImageVD24_cast(obj):
    """itkImageVD24_cast(itkLightObject obj) -> itkImageVD24"""
    return _itkImagePython.itkImageVD24_cast(obj)

class itkImageVD32(itkImageBase2):
    """Proxy of C++ itkImageVD32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD32 self) -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD32 self, bool initializePixels=False)
        Allocate(itkImageVD32 self)
        """
        return _itkImagePython.itkImageVD32_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD32 self, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD32_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD32 self, itkIndex2 index, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD32_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD32 self, itkIndex2 index) -> itkVectorD3
        GetPixel(itkImageVD32 self, itkIndex2 index) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD32_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD32 self) -> itkVectorD3
        GetBufferPointer(itkImageVD32 self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *
        """
        return _itkImagePython.itkImageVD32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD32 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > * container)"""
        return _itkImagePython.itkImageVD32_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD32 self, itkImageVD32 data)"""
        return _itkImagePython.itkImageVD32_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD32 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD32 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const
        """
        return _itkImagePython.itkImageVD32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > >
        GetNeighborhoodAccessor(itkImageVD32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,2 > > const
        """
        return _itkImagePython.itkImageVD32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD32

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD32"""
        return _itkImagePython.itkImageVD32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD32 self) -> itkImageVD32"""
        return _itkImagePython.itkImageVD32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD32

        Create a new object of the class itkImageVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD32.Clone = new_instancemethod(_itkImagePython.itkImageVD32_Clone, None, itkImageVD32)
itkImageVD32.Allocate = new_instancemethod(_itkImagePython.itkImageVD32_Allocate, None, itkImageVD32)
itkImageVD32.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD32_FillBuffer, None, itkImageVD32)
itkImageVD32.SetPixel = new_instancemethod(_itkImagePython.itkImageVD32_SetPixel, None, itkImageVD32)
itkImageVD32.GetPixel = new_instancemethod(_itkImagePython.itkImageVD32_GetPixel, None, itkImageVD32)
itkImageVD32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD32_GetBufferPointer, None, itkImageVD32)
itkImageVD32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD32_GetPixelContainer, None, itkImageVD32)
itkImageVD32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD32_SetPixelContainer, None, itkImageVD32)
itkImageVD32.Graft = new_instancemethod(_itkImagePython.itkImageVD32_Graft, None, itkImageVD32)
itkImageVD32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD32_GetPixelAccessor, None, itkImageVD32)
itkImageVD32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD32_GetNeighborhoodAccessor, None, itkImageVD32)
itkImageVD32.GetPointer = new_instancemethod(_itkImagePython.itkImageVD32_GetPointer, None, itkImageVD32)
itkImageVD32_swigregister = _itkImagePython.itkImageVD32_swigregister
itkImageVD32_swigregister(itkImageVD32)

def itkImageVD32___New_orig__():
    """itkImageVD32___New_orig__() -> itkImageVD32_Pointer"""
    return _itkImagePython.itkImageVD32___New_orig__()

def itkImageVD32_cast(obj):
    """itkImageVD32_cast(itkLightObject obj) -> itkImageVD32"""
    return _itkImagePython.itkImageVD32_cast(obj)

class itkImageVD33(itkImageBase3):
    """Proxy of C++ itkImageVD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD33 self) -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD33 self, bool initializePixels=False)
        Allocate(itkImageVD33 self)
        """
        return _itkImagePython.itkImageVD33_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD33 self, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD33_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD33 self, itkIndex3 index, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD33_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD33 self, itkIndex3 index) -> itkVectorD3
        GetPixel(itkImageVD33 self, itkIndex3 index) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD33_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD33 self) -> itkVectorD3
        GetBufferPointer(itkImageVD33 self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *
        """
        return _itkImagePython.itkImageVD33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD33 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > * container)"""
        return _itkImagePython.itkImageVD33_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD33 self, itkImageVD33 data)"""
        return _itkImagePython.itkImageVD33_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD33 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD33 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const
        """
        return _itkImagePython.itkImageVD33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > >
        GetNeighborhoodAccessor(itkImageVD33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,3 > > const
        """
        return _itkImagePython.itkImageVD33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD33"""
        return _itkImagePython.itkImageVD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD33 self) -> itkImageVD33"""
        return _itkImagePython.itkImageVD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD33

        Create a new object of the class itkImageVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD33.Clone = new_instancemethod(_itkImagePython.itkImageVD33_Clone, None, itkImageVD33)
itkImageVD33.Allocate = new_instancemethod(_itkImagePython.itkImageVD33_Allocate, None, itkImageVD33)
itkImageVD33.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD33_FillBuffer, None, itkImageVD33)
itkImageVD33.SetPixel = new_instancemethod(_itkImagePython.itkImageVD33_SetPixel, None, itkImageVD33)
itkImageVD33.GetPixel = new_instancemethod(_itkImagePython.itkImageVD33_GetPixel, None, itkImageVD33)
itkImageVD33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD33_GetBufferPointer, None, itkImageVD33)
itkImageVD33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD33_GetPixelContainer, None, itkImageVD33)
itkImageVD33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD33_SetPixelContainer, None, itkImageVD33)
itkImageVD33.Graft = new_instancemethod(_itkImagePython.itkImageVD33_Graft, None, itkImageVD33)
itkImageVD33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD33_GetPixelAccessor, None, itkImageVD33)
itkImageVD33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD33_GetNeighborhoodAccessor, None, itkImageVD33)
itkImageVD33.GetPointer = new_instancemethod(_itkImagePython.itkImageVD33_GetPointer, None, itkImageVD33)
itkImageVD33_swigregister = _itkImagePython.itkImageVD33_swigregister
itkImageVD33_swigregister(itkImageVD33)

def itkImageVD33___New_orig__():
    """itkImageVD33___New_orig__() -> itkImageVD33_Pointer"""
    return _itkImagePython.itkImageVD33___New_orig__()

def itkImageVD33_cast(obj):
    """itkImageVD33_cast(itkLightObject obj) -> itkImageVD33"""
    return _itkImagePython.itkImageVD33_cast(obj)

class itkImageVD34(itkImageBase4):
    """Proxy of C++ itkImageVD34 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD34 self) -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD34 self, bool initializePixels=False)
        Allocate(itkImageVD34 self)
        """
        return _itkImagePython.itkImageVD34_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD34 self, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD34_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD34 self, itkIndex4 index, itkVectorD3 value)"""
        return _itkImagePython.itkImageVD34_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD34 self, itkIndex4 index) -> itkVectorD3
        GetPixel(itkImageVD34 self, itkIndex4 index) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD34_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD34 self) -> itkVectorD3
        GetBufferPointer(itkImageVD34 self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD34_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD34 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > >
        GetPixelContainer(itkImageVD34 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > const *
        """
        return _itkImagePython.itkImageVD34_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD34 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,3 > > * container)"""
        return _itkImagePython.itkImageVD34_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD34 self, itkImageVD34 data)"""
        return _itkImagePython.itkImageVD34_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD34 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > >
        GetPixelAccessor(itkImageVD34 self) -> itk::DefaultPixelAccessor< itk::Vector< double,3 > > const
        """
        return _itkImagePython.itkImageVD34_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > >
        GetNeighborhoodAccessor(itkImageVD34 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,3 >,4 > > const
        """
        return _itkImagePython.itkImageVD34_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD34

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD34"""
        return _itkImagePython.itkImageVD34_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD34 self) -> itkImageVD34"""
        return _itkImagePython.itkImageVD34_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD34

        Create a new object of the class itkImageVD34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD34.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD34.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD34.Clone = new_instancemethod(_itkImagePython.itkImageVD34_Clone, None, itkImageVD34)
itkImageVD34.Allocate = new_instancemethod(_itkImagePython.itkImageVD34_Allocate, None, itkImageVD34)
itkImageVD34.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD34_FillBuffer, None, itkImageVD34)
itkImageVD34.SetPixel = new_instancemethod(_itkImagePython.itkImageVD34_SetPixel, None, itkImageVD34)
itkImageVD34.GetPixel = new_instancemethod(_itkImagePython.itkImageVD34_GetPixel, None, itkImageVD34)
itkImageVD34.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD34_GetBufferPointer, None, itkImageVD34)
itkImageVD34.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD34_GetPixelContainer, None, itkImageVD34)
itkImageVD34.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD34_SetPixelContainer, None, itkImageVD34)
itkImageVD34.Graft = new_instancemethod(_itkImagePython.itkImageVD34_Graft, None, itkImageVD34)
itkImageVD34.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD34_GetPixelAccessor, None, itkImageVD34)
itkImageVD34.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD34_GetNeighborhoodAccessor, None, itkImageVD34)
itkImageVD34.GetPointer = new_instancemethod(_itkImagePython.itkImageVD34_GetPointer, None, itkImageVD34)
itkImageVD34_swigregister = _itkImagePython.itkImageVD34_swigregister
itkImageVD34_swigregister(itkImageVD34)

def itkImageVD34___New_orig__():
    """itkImageVD34___New_orig__() -> itkImageVD34_Pointer"""
    return _itkImagePython.itkImageVD34___New_orig__()

def itkImageVD34_cast(obj):
    """itkImageVD34_cast(itkLightObject obj) -> itkImageVD34"""
    return _itkImagePython.itkImageVD34_cast(obj)

class itkImageVD42(itkImageBase2):
    """Proxy of C++ itkImageVD42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD42 self) -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD42 self, bool initializePixels=False)
        Allocate(itkImageVD42 self)
        """
        return _itkImagePython.itkImageVD42_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD42 self, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD42_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD42 self, itkIndex2 index, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD42_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD42 self, itkIndex2 index) -> itkVectorD4
        GetPixel(itkImageVD42 self, itkIndex2 index) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD42_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD42 self) -> itkVectorD4
        GetBufferPointer(itkImageVD42 self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD42 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > * container)"""
        return _itkImagePython.itkImageVD42_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD42 self, itkImageVD42 data)"""
        return _itkImagePython.itkImageVD42_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD42 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD42 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > >
        GetNeighborhoodAccessor(itkImageVD42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,2 > > const
        """
        return _itkImagePython.itkImageVD42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD42

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD42"""
        return _itkImagePython.itkImageVD42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD42 self) -> itkImageVD42"""
        return _itkImagePython.itkImageVD42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD42

        Create a new object of the class itkImageVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD42.Clone = new_instancemethod(_itkImagePython.itkImageVD42_Clone, None, itkImageVD42)
itkImageVD42.Allocate = new_instancemethod(_itkImagePython.itkImageVD42_Allocate, None, itkImageVD42)
itkImageVD42.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD42_FillBuffer, None, itkImageVD42)
itkImageVD42.SetPixel = new_instancemethod(_itkImagePython.itkImageVD42_SetPixel, None, itkImageVD42)
itkImageVD42.GetPixel = new_instancemethod(_itkImagePython.itkImageVD42_GetPixel, None, itkImageVD42)
itkImageVD42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD42_GetBufferPointer, None, itkImageVD42)
itkImageVD42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD42_GetPixelContainer, None, itkImageVD42)
itkImageVD42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD42_SetPixelContainer, None, itkImageVD42)
itkImageVD42.Graft = new_instancemethod(_itkImagePython.itkImageVD42_Graft, None, itkImageVD42)
itkImageVD42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD42_GetPixelAccessor, None, itkImageVD42)
itkImageVD42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD42_GetNeighborhoodAccessor, None, itkImageVD42)
itkImageVD42.GetPointer = new_instancemethod(_itkImagePython.itkImageVD42_GetPointer, None, itkImageVD42)
itkImageVD42_swigregister = _itkImagePython.itkImageVD42_swigregister
itkImageVD42_swigregister(itkImageVD42)

def itkImageVD42___New_orig__():
    """itkImageVD42___New_orig__() -> itkImageVD42_Pointer"""
    return _itkImagePython.itkImageVD42___New_orig__()

def itkImageVD42_cast(obj):
    """itkImageVD42_cast(itkLightObject obj) -> itkImageVD42"""
    return _itkImagePython.itkImageVD42_cast(obj)

class itkImageVD43(itkImageBase3):
    """Proxy of C++ itkImageVD43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD43 self) -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD43 self, bool initializePixels=False)
        Allocate(itkImageVD43 self)
        """
        return _itkImagePython.itkImageVD43_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD43 self, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD43_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD43 self, itkIndex3 index, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD43_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD43 self, itkIndex3 index) -> itkVectorD4
        GetPixel(itkImageVD43 self, itkIndex3 index) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD43_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD43 self) -> itkVectorD4
        GetBufferPointer(itkImageVD43 self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD43 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > * container)"""
        return _itkImagePython.itkImageVD43_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD43 self, itkImageVD43 data)"""
        return _itkImagePython.itkImageVD43_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD43 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD43 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > >
        GetNeighborhoodAccessor(itkImageVD43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > > const
        """
        return _itkImagePython.itkImageVD43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD43

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD43"""
        return _itkImagePython.itkImageVD43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD43 self) -> itkImageVD43"""
        return _itkImagePython.itkImageVD43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD43

        Create a new object of the class itkImageVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD43.Clone = new_instancemethod(_itkImagePython.itkImageVD43_Clone, None, itkImageVD43)
itkImageVD43.Allocate = new_instancemethod(_itkImagePython.itkImageVD43_Allocate, None, itkImageVD43)
itkImageVD43.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD43_FillBuffer, None, itkImageVD43)
itkImageVD43.SetPixel = new_instancemethod(_itkImagePython.itkImageVD43_SetPixel, None, itkImageVD43)
itkImageVD43.GetPixel = new_instancemethod(_itkImagePython.itkImageVD43_GetPixel, None, itkImageVD43)
itkImageVD43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD43_GetBufferPointer, None, itkImageVD43)
itkImageVD43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD43_GetPixelContainer, None, itkImageVD43)
itkImageVD43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD43_SetPixelContainer, None, itkImageVD43)
itkImageVD43.Graft = new_instancemethod(_itkImagePython.itkImageVD43_Graft, None, itkImageVD43)
itkImageVD43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD43_GetPixelAccessor, None, itkImageVD43)
itkImageVD43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD43_GetNeighborhoodAccessor, None, itkImageVD43)
itkImageVD43.GetPointer = new_instancemethod(_itkImagePython.itkImageVD43_GetPointer, None, itkImageVD43)
itkImageVD43_swigregister = _itkImagePython.itkImageVD43_swigregister
itkImageVD43_swigregister(itkImageVD43)

def itkImageVD43___New_orig__():
    """itkImageVD43___New_orig__() -> itkImageVD43_Pointer"""
    return _itkImagePython.itkImageVD43___New_orig__()

def itkImageVD43_cast(obj):
    """itkImageVD43_cast(itkLightObject obj) -> itkImageVD43"""
    return _itkImagePython.itkImageVD43_cast(obj)

class itkImageVD44(itkImageBase4):
    """Proxy of C++ itkImageVD44 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVD44 self) -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVD44 self, bool initializePixels=False)
        Allocate(itkImageVD44 self)
        """
        return _itkImagePython.itkImageVD44_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVD44 self, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD44_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVD44 self, itkIndex4 index, itkVectorD4 value)"""
        return _itkImagePython.itkImageVD44_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVD44 self, itkIndex4 index) -> itkVectorD4
        GetPixel(itkImageVD44 self, itkIndex4 index) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD44_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVD44 self) -> itkVectorD4
        GetBufferPointer(itkImageVD44 self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD44_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVD44 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(itkImageVD44 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD44_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVD44 self, itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > * container)"""
        return _itkImagePython.itkImageVD44_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVD44 self, itkImageVD44 data)"""
        return _itkImagePython.itkImageVD44_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVD44 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(itkImageVD44 self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD44_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVD44 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > >
        GetNeighborhoodAccessor(itkImageVD44 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > > const
        """
        return _itkImagePython.itkImageVD44_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVD44

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVD44"""
        return _itkImagePython.itkImageVD44_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVD44 self) -> itkImageVD44"""
        return _itkImagePython.itkImageVD44_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVD44

        Create a new object of the class itkImageVD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD44.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVD44.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVD44.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVD44.Clone = new_instancemethod(_itkImagePython.itkImageVD44_Clone, None, itkImageVD44)
itkImageVD44.Allocate = new_instancemethod(_itkImagePython.itkImageVD44_Allocate, None, itkImageVD44)
itkImageVD44.FillBuffer = new_instancemethod(_itkImagePython.itkImageVD44_FillBuffer, None, itkImageVD44)
itkImageVD44.SetPixel = new_instancemethod(_itkImagePython.itkImageVD44_SetPixel, None, itkImageVD44)
itkImageVD44.GetPixel = new_instancemethod(_itkImagePython.itkImageVD44_GetPixel, None, itkImageVD44)
itkImageVD44.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVD44_GetBufferPointer, None, itkImageVD44)
itkImageVD44.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD44_GetPixelContainer, None, itkImageVD44)
itkImageVD44.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVD44_SetPixelContainer, None, itkImageVD44)
itkImageVD44.Graft = new_instancemethod(_itkImagePython.itkImageVD44_Graft, None, itkImageVD44)
itkImageVD44.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVD44_GetPixelAccessor, None, itkImageVD44)
itkImageVD44.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVD44_GetNeighborhoodAccessor, None, itkImageVD44)
itkImageVD44.GetPointer = new_instancemethod(_itkImagePython.itkImageVD44_GetPointer, None, itkImageVD44)
itkImageVD44_swigregister = _itkImagePython.itkImageVD44_swigregister
itkImageVD44_swigregister(itkImageVD44)

def itkImageVD44___New_orig__():
    """itkImageVD44___New_orig__() -> itkImageVD44_Pointer"""
    return _itkImagePython.itkImageVD44___New_orig__()

def itkImageVD44_cast(obj):
    """itkImageVD44_cast(itkLightObject obj) -> itkImageVD44"""
    return _itkImagePython.itkImageVD44_cast(obj)

class itkImageVF12(itkImageBase2):
    """Proxy of C++ itkImageVF12 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF12 self) -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF12 self, bool initializePixels=False)
        Allocate(itkImageVF12 self)
        """
        return _itkImagePython.itkImageVF12_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF12 self, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF12_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF12 self, itkIndex2 index, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF12_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF12 self, itkIndex2 index) -> itkVectorF1
        GetPixel(itkImageVF12 self, itkIndex2 index) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF12_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF12 self) -> itkVectorF1
        GetBufferPointer(itkImageVF12 self) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF12_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF12 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > >
        GetPixelContainer(itkImageVF12 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *
        """
        return _itkImagePython.itkImageVF12_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF12 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > * container)"""
        return _itkImagePython.itkImageVF12_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF12 self, itkImageVF12 data)"""
        return _itkImagePython.itkImageVF12_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF12 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(itkImageVF12 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const
        """
        return _itkImagePython.itkImageVF12_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF12 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > >
        GetNeighborhoodAccessor(itkImageVF12 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,2 > > const
        """
        return _itkImagePython.itkImageVF12_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF12

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF12"""
        return _itkImagePython.itkImageVF12_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF12 self) -> itkImageVF12"""
        return _itkImagePython.itkImageVF12_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF12

        Create a new object of the class itkImageVF12 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF12.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF12.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF12.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF12.Clone = new_instancemethod(_itkImagePython.itkImageVF12_Clone, None, itkImageVF12)
itkImageVF12.Allocate = new_instancemethod(_itkImagePython.itkImageVF12_Allocate, None, itkImageVF12)
itkImageVF12.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF12_FillBuffer, None, itkImageVF12)
itkImageVF12.SetPixel = new_instancemethod(_itkImagePython.itkImageVF12_SetPixel, None, itkImageVF12)
itkImageVF12.GetPixel = new_instancemethod(_itkImagePython.itkImageVF12_GetPixel, None, itkImageVF12)
itkImageVF12.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF12_GetBufferPointer, None, itkImageVF12)
itkImageVF12.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF12_GetPixelContainer, None, itkImageVF12)
itkImageVF12.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF12_SetPixelContainer, None, itkImageVF12)
itkImageVF12.Graft = new_instancemethod(_itkImagePython.itkImageVF12_Graft, None, itkImageVF12)
itkImageVF12.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF12_GetPixelAccessor, None, itkImageVF12)
itkImageVF12.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF12_GetNeighborhoodAccessor, None, itkImageVF12)
itkImageVF12.GetPointer = new_instancemethod(_itkImagePython.itkImageVF12_GetPointer, None, itkImageVF12)
itkImageVF12_swigregister = _itkImagePython.itkImageVF12_swigregister
itkImageVF12_swigregister(itkImageVF12)

def itkImageVF12___New_orig__():
    """itkImageVF12___New_orig__() -> itkImageVF12_Pointer"""
    return _itkImagePython.itkImageVF12___New_orig__()

def itkImageVF12_cast(obj):
    """itkImageVF12_cast(itkLightObject obj) -> itkImageVF12"""
    return _itkImagePython.itkImageVF12_cast(obj)

class itkImageVF13(itkImageBase3):
    """Proxy of C++ itkImageVF13 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF13 self) -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF13 self, bool initializePixels=False)
        Allocate(itkImageVF13 self)
        """
        return _itkImagePython.itkImageVF13_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF13 self, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF13_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF13 self, itkIndex3 index, itkVectorF1 value)"""
        return _itkImagePython.itkImageVF13_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF13 self, itkIndex3 index) -> itkVectorF1
        GetPixel(itkImageVF13 self, itkIndex3 index) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF13_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF13 self) -> itkVectorF1
        GetBufferPointer(itkImageVF13 self) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF13_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF13 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > >
        GetPixelContainer(itkImageVF13 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *
        """
        return _itkImagePython.itkImageVF13_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF13 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > * container)"""
        return _itkImagePython.itkImageVF13_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF13 self, itkImageVF13 data)"""
        return _itkImagePython.itkImageVF13_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF13 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(itkImageVF13 self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const
        """
        return _itkImagePython.itkImageVF13_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF13 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > >
        GetNeighborhoodAccessor(itkImageVF13 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > > const
        """
        return _itkImagePython.itkImageVF13_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF13

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF13"""
        return _itkImagePython.itkImageVF13_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF13 self) -> itkImageVF13"""
        return _itkImagePython.itkImageVF13_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF13

        Create a new object of the class itkImageVF13 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF13.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF13.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF13.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF13.Clone = new_instancemethod(_itkImagePython.itkImageVF13_Clone, None, itkImageVF13)
itkImageVF13.Allocate = new_instancemethod(_itkImagePython.itkImageVF13_Allocate, None, itkImageVF13)
itkImageVF13.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF13_FillBuffer, None, itkImageVF13)
itkImageVF13.SetPixel = new_instancemethod(_itkImagePython.itkImageVF13_SetPixel, None, itkImageVF13)
itkImageVF13.GetPixel = new_instancemethod(_itkImagePython.itkImageVF13_GetPixel, None, itkImageVF13)
itkImageVF13.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF13_GetBufferPointer, None, itkImageVF13)
itkImageVF13.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF13_GetPixelContainer, None, itkImageVF13)
itkImageVF13.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF13_SetPixelContainer, None, itkImageVF13)
itkImageVF13.Graft = new_instancemethod(_itkImagePython.itkImageVF13_Graft, None, itkImageVF13)
itkImageVF13.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF13_GetPixelAccessor, None, itkImageVF13)
itkImageVF13.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF13_GetNeighborhoodAccessor, None, itkImageVF13)
itkImageVF13.GetPointer = new_instancemethod(_itkImagePython.itkImageVF13_GetPointer, None, itkImageVF13)
itkImageVF13_swigregister = _itkImagePython.itkImageVF13_swigregister
itkImageVF13_swigregister(itkImageVF13)

def itkImageVF13___New_orig__():
    """itkImageVF13___New_orig__() -> itkImageVF13_Pointer"""
    return _itkImagePython.itkImageVF13___New_orig__()

def itkImageVF13_cast(obj):
    """itkImageVF13_cast(itkLightObject obj) -> itkImageVF13"""
    return _itkImagePython.itkImageVF13_cast(obj)

class itkImageVF22(itkImageBase2):
    """Proxy of C++ itkImageVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF22 self) -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF22 self, bool initializePixels=False)
        Allocate(itkImageVF22 self)
        """
        return _itkImagePython.itkImageVF22_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF22 self, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF22_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF22 self, itkIndex2 index, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF22_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF22 self, itkIndex2 index) -> itkVectorF2
        GetPixel(itkImageVF22 self, itkIndex2 index) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF22 self) -> itkVectorF2
        GetBufferPointer(itkImageVF22 self) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > >
        GetPixelContainer(itkImageVF22 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *
        """
        return _itkImagePython.itkImageVF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF22 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > * container)"""
        return _itkImagePython.itkImageVF22_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF22 self, itkImageVF22 data)"""
        return _itkImagePython.itkImageVF22_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(itkImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkImagePython.itkImageVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,2 > > const
        """
        return _itkImagePython.itkImageVF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF22"""
        return _itkImagePython.itkImageVF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF22 self) -> itkImageVF22"""
        return _itkImagePython.itkImageVF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF22

        Create a new object of the class itkImageVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF22.Clone = new_instancemethod(_itkImagePython.itkImageVF22_Clone, None, itkImageVF22)
itkImageVF22.Allocate = new_instancemethod(_itkImagePython.itkImageVF22_Allocate, None, itkImageVF22)
itkImageVF22.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF22_FillBuffer, None, itkImageVF22)
itkImageVF22.SetPixel = new_instancemethod(_itkImagePython.itkImageVF22_SetPixel, None, itkImageVF22)
itkImageVF22.GetPixel = new_instancemethod(_itkImagePython.itkImageVF22_GetPixel, None, itkImageVF22)
itkImageVF22.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF22_GetBufferPointer, None, itkImageVF22)
itkImageVF22.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF22_GetPixelContainer, None, itkImageVF22)
itkImageVF22.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF22_SetPixelContainer, None, itkImageVF22)
itkImageVF22.Graft = new_instancemethod(_itkImagePython.itkImageVF22_Graft, None, itkImageVF22)
itkImageVF22.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF22_GetPixelAccessor, None, itkImageVF22)
itkImageVF22.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF22_GetNeighborhoodAccessor, None, itkImageVF22)
itkImageVF22.GetPointer = new_instancemethod(_itkImagePython.itkImageVF22_GetPointer, None, itkImageVF22)
itkImageVF22_swigregister = _itkImagePython.itkImageVF22_swigregister
itkImageVF22_swigregister(itkImageVF22)

def itkImageVF22___New_orig__():
    """itkImageVF22___New_orig__() -> itkImageVF22_Pointer"""
    return _itkImagePython.itkImageVF22___New_orig__()

def itkImageVF22_cast(obj):
    """itkImageVF22_cast(itkLightObject obj) -> itkImageVF22"""
    return _itkImagePython.itkImageVF22_cast(obj)

class itkImageVF23(itkImageBase3):
    """Proxy of C++ itkImageVF23 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF23 self) -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF23 self, bool initializePixels=False)
        Allocate(itkImageVF23 self)
        """
        return _itkImagePython.itkImageVF23_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF23 self, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF23_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF23 self, itkIndex3 index, itkVectorF2 value)"""
        return _itkImagePython.itkImageVF23_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF23 self, itkIndex3 index) -> itkVectorF2
        GetPixel(itkImageVF23 self, itkIndex3 index) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF23_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF23 self) -> itkVectorF2
        GetBufferPointer(itkImageVF23 self) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF23_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > >
        GetPixelContainer(itkImageVF23 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *
        """
        return _itkImagePython.itkImageVF23_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF23 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > * container)"""
        return _itkImagePython.itkImageVF23_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF23 self, itkImageVF23 data)"""
        return _itkImagePython.itkImageVF23_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF23 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(itkImageVF23 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkImagePython.itkImageVF23_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > >
        GetNeighborhoodAccessor(itkImageVF23 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > > const
        """
        return _itkImagePython.itkImageVF23_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF23

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF23"""
        return _itkImagePython.itkImageVF23_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF23 self) -> itkImageVF23"""
        return _itkImagePython.itkImageVF23_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF23

        Create a new object of the class itkImageVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF23.Clone = new_instancemethod(_itkImagePython.itkImageVF23_Clone, None, itkImageVF23)
itkImageVF23.Allocate = new_instancemethod(_itkImagePython.itkImageVF23_Allocate, None, itkImageVF23)
itkImageVF23.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF23_FillBuffer, None, itkImageVF23)
itkImageVF23.SetPixel = new_instancemethod(_itkImagePython.itkImageVF23_SetPixel, None, itkImageVF23)
itkImageVF23.GetPixel = new_instancemethod(_itkImagePython.itkImageVF23_GetPixel, None, itkImageVF23)
itkImageVF23.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF23_GetBufferPointer, None, itkImageVF23)
itkImageVF23.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF23_GetPixelContainer, None, itkImageVF23)
itkImageVF23.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF23_SetPixelContainer, None, itkImageVF23)
itkImageVF23.Graft = new_instancemethod(_itkImagePython.itkImageVF23_Graft, None, itkImageVF23)
itkImageVF23.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF23_GetPixelAccessor, None, itkImageVF23)
itkImageVF23.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF23_GetNeighborhoodAccessor, None, itkImageVF23)
itkImageVF23.GetPointer = new_instancemethod(_itkImagePython.itkImageVF23_GetPointer, None, itkImageVF23)
itkImageVF23_swigregister = _itkImagePython.itkImageVF23_swigregister
itkImageVF23_swigregister(itkImageVF23)

def itkImageVF23___New_orig__():
    """itkImageVF23___New_orig__() -> itkImageVF23_Pointer"""
    return _itkImagePython.itkImageVF23___New_orig__()

def itkImageVF23_cast(obj):
    """itkImageVF23_cast(itkLightObject obj) -> itkImageVF23"""
    return _itkImagePython.itkImageVF23_cast(obj)

class itkImageVF32(itkImageBase2):
    """Proxy of C++ itkImageVF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF32 self) -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF32 self, bool initializePixels=False)
        Allocate(itkImageVF32 self)
        """
        return _itkImagePython.itkImageVF32_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF32 self, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF32_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF32 self, itkIndex2 index, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF32_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF32 self, itkIndex2 index) -> itkVectorF3
        GetPixel(itkImageVF32 self, itkIndex2 index) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF32_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF32 self) -> itkVectorF3
        GetBufferPointer(itkImageVF32 self) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF32_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > >
        GetPixelContainer(itkImageVF32 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > const *
        """
        return _itkImagePython.itkImageVF32_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF32 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > * container)"""
        return _itkImagePython.itkImageVF32_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF32 self, itkImageVF32 data)"""
        return _itkImagePython.itkImageVF32_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF32 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkImageVF32 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const
        """
        return _itkImagePython.itkImageVF32_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > >
        GetNeighborhoodAccessor(itkImageVF32 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,2 > > const
        """
        return _itkImagePython.itkImageVF32_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF32

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF32"""
        return _itkImagePython.itkImageVF32_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF32 self) -> itkImageVF32"""
        return _itkImagePython.itkImageVF32_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF32

        Create a new object of the class itkImageVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF32.Clone = new_instancemethod(_itkImagePython.itkImageVF32_Clone, None, itkImageVF32)
itkImageVF32.Allocate = new_instancemethod(_itkImagePython.itkImageVF32_Allocate, None, itkImageVF32)
itkImageVF32.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF32_FillBuffer, None, itkImageVF32)
itkImageVF32.SetPixel = new_instancemethod(_itkImagePython.itkImageVF32_SetPixel, None, itkImageVF32)
itkImageVF32.GetPixel = new_instancemethod(_itkImagePython.itkImageVF32_GetPixel, None, itkImageVF32)
itkImageVF32.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF32_GetBufferPointer, None, itkImageVF32)
itkImageVF32.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF32_GetPixelContainer, None, itkImageVF32)
itkImageVF32.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF32_SetPixelContainer, None, itkImageVF32)
itkImageVF32.Graft = new_instancemethod(_itkImagePython.itkImageVF32_Graft, None, itkImageVF32)
itkImageVF32.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF32_GetPixelAccessor, None, itkImageVF32)
itkImageVF32.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF32_GetNeighborhoodAccessor, None, itkImageVF32)
itkImageVF32.GetPointer = new_instancemethod(_itkImagePython.itkImageVF32_GetPointer, None, itkImageVF32)
itkImageVF32_swigregister = _itkImagePython.itkImageVF32_swigregister
itkImageVF32_swigregister(itkImageVF32)

def itkImageVF32___New_orig__():
    """itkImageVF32___New_orig__() -> itkImageVF32_Pointer"""
    return _itkImagePython.itkImageVF32___New_orig__()

def itkImageVF32_cast(obj):
    """itkImageVF32_cast(itkLightObject obj) -> itkImageVF32"""
    return _itkImagePython.itkImageVF32_cast(obj)

class itkImageVF33(itkImageBase3):
    """Proxy of C++ itkImageVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF33 self) -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF33 self, bool initializePixels=False)
        Allocate(itkImageVF33 self)
        """
        return _itkImagePython.itkImageVF33_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF33 self, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF33_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF33 self, itkIndex3 index, itkVectorF3 value)"""
        return _itkImagePython.itkImageVF33_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF33 self, itkIndex3 index) -> itkVectorF3
        GetPixel(itkImageVF33 self, itkIndex3 index) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF33 self) -> itkVectorF3
        GetBufferPointer(itkImageVF33 self) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > >
        GetPixelContainer(itkImageVF33 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > const *
        """
        return _itkImagePython.itkImageVF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF33 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,3 > > * container)"""
        return _itkImagePython.itkImageVF33_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF33 self, itkImageVF33 data)"""
        return _itkImagePython.itkImageVF33_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const
        """
        return _itkImagePython.itkImageVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,3 >,3 > > const
        """
        return _itkImagePython.itkImageVF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF33"""
        return _itkImagePython.itkImageVF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF33 self) -> itkImageVF33"""
        return _itkImagePython.itkImageVF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF33

        Create a new object of the class itkImageVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF33.Clone = new_instancemethod(_itkImagePython.itkImageVF33_Clone, None, itkImageVF33)
itkImageVF33.Allocate = new_instancemethod(_itkImagePython.itkImageVF33_Allocate, None, itkImageVF33)
itkImageVF33.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF33_FillBuffer, None, itkImageVF33)
itkImageVF33.SetPixel = new_instancemethod(_itkImagePython.itkImageVF33_SetPixel, None, itkImageVF33)
itkImageVF33.GetPixel = new_instancemethod(_itkImagePython.itkImageVF33_GetPixel, None, itkImageVF33)
itkImageVF33.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF33_GetBufferPointer, None, itkImageVF33)
itkImageVF33.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF33_GetPixelContainer, None, itkImageVF33)
itkImageVF33.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF33_SetPixelContainer, None, itkImageVF33)
itkImageVF33.Graft = new_instancemethod(_itkImagePython.itkImageVF33_Graft, None, itkImageVF33)
itkImageVF33.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF33_GetPixelAccessor, None, itkImageVF33)
itkImageVF33.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF33_GetNeighborhoodAccessor, None, itkImageVF33)
itkImageVF33.GetPointer = new_instancemethod(_itkImagePython.itkImageVF33_GetPointer, None, itkImageVF33)
itkImageVF33_swigregister = _itkImagePython.itkImageVF33_swigregister
itkImageVF33_swigregister(itkImageVF33)

def itkImageVF33___New_orig__():
    """itkImageVF33___New_orig__() -> itkImageVF33_Pointer"""
    return _itkImagePython.itkImageVF33___New_orig__()

def itkImageVF33_cast(obj):
    """itkImageVF33_cast(itkLightObject obj) -> itkImageVF33"""
    return _itkImagePython.itkImageVF33_cast(obj)

class itkImageVF42(itkImageBase2):
    """Proxy of C++ itkImageVF42 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF42 self) -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF42 self, bool initializePixels=False)
        Allocate(itkImageVF42 self)
        """
        return _itkImagePython.itkImageVF42_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF42 self, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF42_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF42 self, itkIndex2 index, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF42_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF42 self, itkIndex2 index) -> itkVectorF4
        GetPixel(itkImageVF42 self, itkIndex2 index) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF42_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF42 self) -> itkVectorF4
        GetBufferPointer(itkImageVF42 self) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF42_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > >
        GetPixelContainer(itkImageVF42 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *
        """
        return _itkImagePython.itkImageVF42_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF42 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > * container)"""
        return _itkImagePython.itkImageVF42_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF42 self, itkImageVF42 data)"""
        return _itkImagePython.itkImageVF42_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF42 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(itkImageVF42 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkImagePython.itkImageVF42_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > >
        GetNeighborhoodAccessor(itkImageVF42 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,2 > > const
        """
        return _itkImagePython.itkImageVF42_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF42

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF42"""
        return _itkImagePython.itkImageVF42_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF42 self) -> itkImageVF42"""
        return _itkImagePython.itkImageVF42_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF42

        Create a new object of the class itkImageVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF42.Clone = new_instancemethod(_itkImagePython.itkImageVF42_Clone, None, itkImageVF42)
itkImageVF42.Allocate = new_instancemethod(_itkImagePython.itkImageVF42_Allocate, None, itkImageVF42)
itkImageVF42.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF42_FillBuffer, None, itkImageVF42)
itkImageVF42.SetPixel = new_instancemethod(_itkImagePython.itkImageVF42_SetPixel, None, itkImageVF42)
itkImageVF42.GetPixel = new_instancemethod(_itkImagePython.itkImageVF42_GetPixel, None, itkImageVF42)
itkImageVF42.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF42_GetBufferPointer, None, itkImageVF42)
itkImageVF42.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF42_GetPixelContainer, None, itkImageVF42)
itkImageVF42.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF42_SetPixelContainer, None, itkImageVF42)
itkImageVF42.Graft = new_instancemethod(_itkImagePython.itkImageVF42_Graft, None, itkImageVF42)
itkImageVF42.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF42_GetPixelAccessor, None, itkImageVF42)
itkImageVF42.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF42_GetNeighborhoodAccessor, None, itkImageVF42)
itkImageVF42.GetPointer = new_instancemethod(_itkImagePython.itkImageVF42_GetPointer, None, itkImageVF42)
itkImageVF42_swigregister = _itkImagePython.itkImageVF42_swigregister
itkImageVF42_swigregister(itkImageVF42)

def itkImageVF42___New_orig__():
    """itkImageVF42___New_orig__() -> itkImageVF42_Pointer"""
    return _itkImagePython.itkImageVF42___New_orig__()

def itkImageVF42_cast(obj):
    """itkImageVF42_cast(itkLightObject obj) -> itkImageVF42"""
    return _itkImagePython.itkImageVF42_cast(obj)

class itkImageVF43(itkImageBase3):
    """Proxy of C++ itkImageVF43 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF43 self) -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF43 self, bool initializePixels=False)
        Allocate(itkImageVF43 self)
        """
        return _itkImagePython.itkImageVF43_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF43 self, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF43_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF43 self, itkIndex3 index, itkVectorF4 value)"""
        return _itkImagePython.itkImageVF43_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF43 self, itkIndex3 index) -> itkVectorF4
        GetPixel(itkImageVF43 self, itkIndex3 index) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF43_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF43 self) -> itkVectorF4
        GetBufferPointer(itkImageVF43 self) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF43_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > >
        GetPixelContainer(itkImageVF43 self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *
        """
        return _itkImagePython.itkImageVF43_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF43 self, itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > * container)"""
        return _itkImagePython.itkImageVF43_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageVF43 self, itkImageVF43 data)"""
        return _itkImagePython.itkImageVF43_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF43 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(itkImageVF43 self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkImagePython.itkImageVF43_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > >
        GetNeighborhoodAccessor(itkImageVF43 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > > const
        """
        return _itkImagePython.itkImageVF43_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageVF43

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF43"""
        return _itkImagePython.itkImageVF43_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageVF43 self) -> itkImageVF43"""
        return _itkImagePython.itkImageVF43_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageVF43

        Create a new object of the class itkImageVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF43.Clone = new_instancemethod(_itkImagePython.itkImageVF43_Clone, None, itkImageVF43)
itkImageVF43.Allocate = new_instancemethod(_itkImagePython.itkImageVF43_Allocate, None, itkImageVF43)
itkImageVF43.FillBuffer = new_instancemethod(_itkImagePython.itkImageVF43_FillBuffer, None, itkImageVF43)
itkImageVF43.SetPixel = new_instancemethod(_itkImagePython.itkImageVF43_SetPixel, None, itkImageVF43)
itkImageVF43.GetPixel = new_instancemethod(_itkImagePython.itkImageVF43_GetPixel, None, itkImageVF43)
itkImageVF43.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageVF43_GetBufferPointer, None, itkImageVF43)
itkImageVF43.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF43_GetPixelContainer, None, itkImageVF43)
itkImageVF43.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageVF43_SetPixelContainer, None, itkImageVF43)
itkImageVF43.Graft = new_instancemethod(_itkImagePython.itkImageVF43_Graft, None, itkImageVF43)
itkImageVF43.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageVF43_GetPixelAccessor, None, itkImageVF43)
itkImageVF43.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageVF43_GetNeighborhoodAccessor, None, itkImageVF43)
itkImageVF43.GetPointer = new_instancemethod(_itkImagePython.itkImageVF43_GetPointer, None, itkImageVF43)
itkImageVF43_swigregister = _itkImagePython.itkImageVF43_swigregister
itkImageVF43_swigregister(itkImageVF43)

def itkImageVF43___New_orig__():
    """itkImageVF43___New_orig__() -> itkImageVF43_Pointer"""
    return _itkImagePython.itkImageVF43___New_orig__()

def itkImageVF43_cast(obj):
    """itkImageVF43_cast(itkLightObject obj) -> itkImageVF43"""
    return _itkImagePython.itkImageVF43_cast(obj)

class itkImageB2(itkImageBase2):
    """Proxy of C++ itkImageB2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageB2 self) -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageB2 self, bool initializePixels=False)
        Allocate(itkImageB2 self)
        """
        return _itkImagePython.itkImageB2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageB2 self, bool const & value)"""
        return _itkImagePython.itkImageB2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageB2 self, itkIndex2 index, bool const & value)"""
        return _itkImagePython.itkImageB2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageB2 self, itkIndex2 index) -> bool const
        GetPixel(itkImageB2 self, itkIndex2 index) -> bool &
        """
        return _itkImagePython.itkImageB2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageB2 self) -> bool
        GetBufferPointer(itkImageB2 self) -> bool const *
        """
        return _itkImagePython.itkImageB2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageB2 self) -> itk::ImportImageContainer< unsigned long long,bool >
        GetPixelContainer(itkImageB2 self) -> itk::ImportImageContainer< unsigned long long,bool > const *
        """
        return _itkImagePython.itkImageB2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageB2 self, itk::ImportImageContainer< unsigned long long,bool > * container)"""
        return _itkImagePython.itkImageB2_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageB2 self, itkImageB2 data)"""
        return _itkImagePython.itkImageB2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageB2 self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(itkImageB2 self) -> itk::DefaultPixelAccessor< bool > const
        """
        return _itkImagePython.itkImageB2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageB2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > >
        GetNeighborhoodAccessor(itkImageB2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,2 > > const
        """
        return _itkImagePython.itkImageB2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageB2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageB2"""
        return _itkImagePython.itkImageB2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageB2 self) -> itkImageB2"""
        return _itkImagePython.itkImageB2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageB2

        Create a new object of the class itkImageB2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageB2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageB2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageB2.Clone = new_instancemethod(_itkImagePython.itkImageB2_Clone, None, itkImageB2)
itkImageB2.Allocate = new_instancemethod(_itkImagePython.itkImageB2_Allocate, None, itkImageB2)
itkImageB2.FillBuffer = new_instancemethod(_itkImagePython.itkImageB2_FillBuffer, None, itkImageB2)
itkImageB2.SetPixel = new_instancemethod(_itkImagePython.itkImageB2_SetPixel, None, itkImageB2)
itkImageB2.GetPixel = new_instancemethod(_itkImagePython.itkImageB2_GetPixel, None, itkImageB2)
itkImageB2.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageB2_GetBufferPointer, None, itkImageB2)
itkImageB2.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageB2_GetPixelContainer, None, itkImageB2)
itkImageB2.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageB2_SetPixelContainer, None, itkImageB2)
itkImageB2.Graft = new_instancemethod(_itkImagePython.itkImageB2_Graft, None, itkImageB2)
itkImageB2.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageB2_GetPixelAccessor, None, itkImageB2)
itkImageB2.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageB2_GetNeighborhoodAccessor, None, itkImageB2)
itkImageB2.GetPointer = new_instancemethod(_itkImagePython.itkImageB2_GetPointer, None, itkImageB2)
itkImageB2_swigregister = _itkImagePython.itkImageB2_swigregister
itkImageB2_swigregister(itkImageB2)

def itkImageB2___New_orig__():
    """itkImageB2___New_orig__() -> itkImageB2_Pointer"""
    return _itkImagePython.itkImageB2___New_orig__()

def itkImageB2_cast(obj):
    """itkImageB2_cast(itkLightObject obj) -> itkImageB2"""
    return _itkImagePython.itkImageB2_cast(obj)

class itkImageB3(itkImageBase3):
    """Proxy of C++ itkImageB3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageB3 self) -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageB3 self, bool initializePixels=False)
        Allocate(itkImageB3 self)
        """
        return _itkImagePython.itkImageB3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageB3 self, bool const & value)"""
        return _itkImagePython.itkImageB3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageB3 self, itkIndex3 index, bool const & value)"""
        return _itkImagePython.itkImageB3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageB3 self, itkIndex3 index) -> bool const
        GetPixel(itkImageB3 self, itkIndex3 index) -> bool &
        """
        return _itkImagePython.itkImageB3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageB3 self) -> bool
        GetBufferPointer(itkImageB3 self) -> bool const *
        """
        return _itkImagePython.itkImageB3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageB3 self) -> itk::ImportImageContainer< unsigned long long,bool >
        GetPixelContainer(itkImageB3 self) -> itk::ImportImageContainer< unsigned long long,bool > const *
        """
        return _itkImagePython.itkImageB3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageB3 self, itk::ImportImageContainer< unsigned long long,bool > * container)"""
        return _itkImagePython.itkImageB3_SetPixelContainer(self, container)


    def Graft(self, data):
        """Graft(itkImageB3 self, itkImageB3 data)"""
        return _itkImagePython.itkImageB3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageB3 self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(itkImageB3 self) -> itk::DefaultPixelAccessor< bool > const
        """
        return _itkImagePython.itkImageB3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageB3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > >
        GetNeighborhoodAccessor(itkImageB3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > > const
        """
        return _itkImagePython.itkImageB3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkImagePython.delete_itkImageB3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageB3"""
        return _itkImagePython.itkImageB3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageB3 self) -> itkImageB3"""
        return _itkImagePython.itkImageB3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageB3

        Create a new object of the class itkImageB3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageB3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageB3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageB3.Clone = new_instancemethod(_itkImagePython.itkImageB3_Clone, None, itkImageB3)
itkImageB3.Allocate = new_instancemethod(_itkImagePython.itkImageB3_Allocate, None, itkImageB3)
itkImageB3.FillBuffer = new_instancemethod(_itkImagePython.itkImageB3_FillBuffer, None, itkImageB3)
itkImageB3.SetPixel = new_instancemethod(_itkImagePython.itkImageB3_SetPixel, None, itkImageB3)
itkImageB3.GetPixel = new_instancemethod(_itkImagePython.itkImageB3_GetPixel, None, itkImageB3)
itkImageB3.GetBufferPointer = new_instancemethod(_itkImagePython.itkImageB3_GetBufferPointer, None, itkImageB3)
itkImageB3.GetPixelContainer = new_instancemethod(_itkImagePython.itkImageB3_GetPixelContainer, None, itkImageB3)
itkImageB3.SetPixelContainer = new_instancemethod(_itkImagePython.itkImageB3_SetPixelContainer, None, itkImageB3)
itkImageB3.Graft = new_instancemethod(_itkImagePython.itkImageB3_Graft, None, itkImageB3)
itkImageB3.GetPixelAccessor = new_instancemethod(_itkImagePython.itkImageB3_GetPixelAccessor, None, itkImageB3)
itkImageB3.GetNeighborhoodAccessor = new_instancemethod(_itkImagePython.itkImageB3_GetNeighborhoodAccessor, None, itkImageB3)
itkImageB3.GetPointer = new_instancemethod(_itkImagePython.itkImageB3_GetPointer, None, itkImageB3)
itkImageB3_swigregister = _itkImagePython.itkImageB3_swigregister
itkImageB3_swigregister(itkImageB3)

def itkImageB3___New_orig__():
    """itkImageB3___New_orig__() -> itkImageB3_Pointer"""
    return _itkImagePython.itkImageB3___New_orig__()

def itkImageB3_cast(obj):
    """itkImageB3_cast(itkLightObject obj) -> itkImageB3"""
    return _itkImagePython.itkImageB3_cast(obj)



