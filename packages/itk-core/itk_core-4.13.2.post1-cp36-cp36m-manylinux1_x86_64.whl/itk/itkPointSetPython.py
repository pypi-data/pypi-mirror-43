# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPointSetPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPointSetPython', [dirname(__file__)])
        except ImportError:
            import _itkPointSetPython
            return _itkPointSetPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPointSetPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPointSetPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPointSetPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import itkPointPython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkCovariantVectorPython
import ITKCommonBasePython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkMapContainerPython

def itkPointSetD3DTD33DFD_New():
  return itkPointSetD3DTD33DFD.New()


def itkPointSetD3STD33DFD_New():
  return itkPointSetD3STD33DFD.New()


def itkPointSetD2DTD22DFD_New():
  return itkPointSetD2DTD22DFD.New()


def itkPointSetD2STD22DFD_New():
  return itkPointSetD2STD22DFD.New()


def itkPointSetMD33STMD3333FFMD33_New():
  return itkPointSetMD33STMD3333FFMD33.New()


def itkPointSetMD22STMD2222FFMD22_New():
  return itkPointSetMD22STMD2222FFMD22.New()


def itkPointSetUI3DSMUI33FFUI_New():
  return itkPointSetUI3DSMUI33FFUI.New()


def itkPointSetPD33STD33DD_New():
  return itkPointSetPD33STD33DD.New()


def itkPointSetUI2DSMUI22FFUI_New():
  return itkPointSetUI2DSMUI22FFUI.New()


def itkPointSetPD22STD22DD_New():
  return itkPointSetPD22STD22DD.New()


def itkPointSetD3DTD33DD_New():
  return itkPointSetD3DTD33DD.New()


def itkPointSetD3STD33DD_New():
  return itkPointSetD3STD33DD.New()


def itkPointSetD3STD33_New():
  return itkPointSetD3STD33.New()


def itkPointSetF3DTF33FF_New():
  return itkPointSetF3DTF33FF.New()


def itkPointSetF3STF33FF_New():
  return itkPointSetF3STF33FF.New()


def itkPointSetF3STF33_New():
  return itkPointSetF3STF33.New()


def itkPointSetD2DTD22DD_New():
  return itkPointSetD2DTD22DD.New()


def itkPointSetD2STD22DD_New():
  return itkPointSetD2STD22DD.New()


def itkPointSetD2STD22_New():
  return itkPointSetD2STD22.New()


def itkPointSetF2DTF22FF_New():
  return itkPointSetF2DTF22FF.New()


def itkPointSetF2STF22FF_New():
  return itkPointSetF2STF22FF.New()


def itkPointSetF2STF22_New():
  return itkPointSetF2STF22.New()

class itkPointSetD2DTD22DD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD2DTD22DD_Pointer":
        """__New_orig__() -> itkPointSetD2DTD22DD_Pointer"""
        return _itkPointSetPython.itkPointSetD2DTD22DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD2DTD22DD_Pointer":
        """Clone(itkPointSetD2DTD22DD self) -> itkPointSetD2DTD22DD_Pointer"""
        return _itkPointSetPython.itkPointSetD2DTD22DD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD2DTD22DD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD2DTD22DD') -> "void":
        """
        PassStructure(itkPointSetD2DTD22DD self, itkPointSetD2DTD22DD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD2DTD22DD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULPD2') -> "void":
        """
        SetPoints(itkPointSetD2DTD22DD self, itkMapContainerULPD2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULPD2 const *":
        """
        GetPoints(itkPointSetD2DTD22DD self) -> itkMapContainerULPD2
        GetPoints(itkPointSetD2DTD22DD self) -> itkMapContainerULPD2
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "void":
        """
        SetPoint(itkPointSetD2DTD22DD self, unsigned long arg0, itkPointD2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD2":
        """
        GetPoint(itkPointSetD2DTD22DD self, unsigned long arg0, itkPointD2 arg1) -> bool
        GetPoint(itkPointSetD2DTD22DD self, unsigned long arg0) -> itkPointD2
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD2DTD22DD self, itkMapContainerULD arg0)
        SetPointData(itkPointSetD2DTD22DD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD2DTD22DD self) -> itkMapContainerULD
        GetPointData(itkPointSetD2DTD22DD self) -> itkMapContainerULD
        GetPointData(itkPointSetD2DTD22DD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD2DTD22DD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD2DTD22DD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD2DTD22DD self) -> long"""
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD2DTD22DD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD2DTD22DD self) -> long"""
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD2DTD22DD

    def cast(obj: 'itkLightObject') -> "itkPointSetD2DTD22DD *":
        """cast(itkLightObject obj) -> itkPointSetD2DTD22DD"""
        return _itkPointSetPython.itkPointSetD2DTD22DD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD2DTD22DD *":
        """GetPointer(itkPointSetD2DTD22DD self) -> itkPointSetD2DTD22DD"""
        return _itkPointSetPython.itkPointSetD2DTD22DD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD2DTD22DD

        Create a new object of the class itkPointSetD2DTD22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2DTD22DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD2DTD22DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD2DTD22DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD2DTD22DD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_Clone, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetMaximumNumberOfRegions, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_PassStructure, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetNumberOfPoints, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_SetPoints, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetPoints, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_SetPoint, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetPoint, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_SetPointData, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetPointData, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_SetRequestedRegion, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetRequestedRegion, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_SetBufferedRegion, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetBufferedRegion, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DD_GetPointer, None, itkPointSetD2DTD22DD)
itkPointSetD2DTD22DD_swigregister = _itkPointSetPython.itkPointSetD2DTD22DD_swigregister
itkPointSetD2DTD22DD_swigregister(itkPointSetD2DTD22DD)

def itkPointSetD2DTD22DD___New_orig__() -> "itkPointSetD2DTD22DD_Pointer":
    """itkPointSetD2DTD22DD___New_orig__() -> itkPointSetD2DTD22DD_Pointer"""
    return _itkPointSetPython.itkPointSetD2DTD22DD___New_orig__()

def itkPointSetD2DTD22DD_cast(obj: 'itkLightObject') -> "itkPointSetD2DTD22DD *":
    """itkPointSetD2DTD22DD_cast(itkLightObject obj) -> itkPointSetD2DTD22DD"""
    return _itkPointSetPython.itkPointSetD2DTD22DD_cast(obj)

class itkPointSetD2DTD22DFD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD2DTD22DFD_Pointer":
        """__New_orig__() -> itkPointSetD2DTD22DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD2DTD22DFD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD2DTD22DFD_Pointer":
        """Clone(itkPointSetD2DTD22DFD self) -> itkPointSetD2DTD22DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD2DTD22DFD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD2DTD22DFD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD2DTD22DFD') -> "void":
        """
        PassStructure(itkPointSetD2DTD22DFD self, itkPointSetD2DTD22DFD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD2DTD22DFD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULPD2') -> "void":
        """
        SetPoints(itkPointSetD2DTD22DFD self, itkMapContainerULPD2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULPD2 const *":
        """
        GetPoints(itkPointSetD2DTD22DFD self) -> itkMapContainerULPD2
        GetPoints(itkPointSetD2DTD22DFD self) -> itkMapContainerULPD2
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "void":
        """
        SetPoint(itkPointSetD2DTD22DFD self, unsigned long arg0, itkPointD2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD2":
        """
        GetPoint(itkPointSetD2DTD22DFD self, unsigned long arg0, itkPointD2 arg1) -> bool
        GetPoint(itkPointSetD2DTD22DFD self, unsigned long arg0) -> itkPointD2
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD2DTD22DFD self, itkMapContainerULD arg0)
        SetPointData(itkPointSetD2DTD22DFD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD2DTD22DFD self) -> itkMapContainerULD
        GetPointData(itkPointSetD2DTD22DFD self) -> itkMapContainerULD
        GetPointData(itkPointSetD2DTD22DFD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD2DTD22DFD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD2DTD22DFD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD2DTD22DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD2DTD22DFD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD2DTD22DFD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD2DTD22DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD2DTD22DFD

    def cast(obj: 'itkLightObject') -> "itkPointSetD2DTD22DFD *":
        """cast(itkLightObject obj) -> itkPointSetD2DTD22DFD"""
        return _itkPointSetPython.itkPointSetD2DTD22DFD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD2DTD22DFD *":
        """GetPointer(itkPointSetD2DTD22DFD self) -> itkPointSetD2DTD22DFD"""
        return _itkPointSetPython.itkPointSetD2DTD22DFD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD2DTD22DFD

        Create a new object of the class itkPointSetD2DTD22DFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2DTD22DFD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD2DTD22DFD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD2DTD22DFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD2DTD22DFD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_Clone, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetMaximumNumberOfRegions, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_PassStructure, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetNumberOfPoints, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_SetPoints, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetPoints, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_SetPoint, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetPoint, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_SetPointData, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetPointData, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_SetRequestedRegion, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetRequestedRegion, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_SetBufferedRegion, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetBufferedRegion, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD2DTD22DFD_GetPointer, None, itkPointSetD2DTD22DFD)
itkPointSetD2DTD22DFD_swigregister = _itkPointSetPython.itkPointSetD2DTD22DFD_swigregister
itkPointSetD2DTD22DFD_swigregister(itkPointSetD2DTD22DFD)

def itkPointSetD2DTD22DFD___New_orig__() -> "itkPointSetD2DTD22DFD_Pointer":
    """itkPointSetD2DTD22DFD___New_orig__() -> itkPointSetD2DTD22DFD_Pointer"""
    return _itkPointSetPython.itkPointSetD2DTD22DFD___New_orig__()

def itkPointSetD2DTD22DFD_cast(obj: 'itkLightObject') -> "itkPointSetD2DTD22DFD *":
    """itkPointSetD2DTD22DFD_cast(itkLightObject obj) -> itkPointSetD2DTD22DFD"""
    return _itkPointSetPython.itkPointSetD2DTD22DFD_cast(obj)

class itkPointSetD2STD22(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD2STD22_Pointer":
        """__New_orig__() -> itkPointSetD2STD22_Pointer"""
        return _itkPointSetPython.itkPointSetD2STD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD2STD22_Pointer":
        """Clone(itkPointSetD2STD22 self) -> itkPointSetD2STD22_Pointer"""
        return _itkPointSetPython.itkPointSetD2STD22_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD2STD22 self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD2STD22_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD2STD22') -> "void":
        """
        PassStructure(itkPointSetD2STD22 self, itkPointSetD2STD22 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD2STD22_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD2STD22 self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD2STD22_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF2') -> "void":
        """
        SetPoints(itkPointSetD2STD22 self, itkVectorContainerULPF2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD2STD22_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF2 const *":
        """
        GetPoints(itkPointSetD2STD22 self) -> itkVectorContainerULPF2
        GetPoints(itkPointSetD2STD22 self) -> itkVectorContainerULPF2
        """
        return _itkPointSetPython.itkPointSetD2STD22_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        SetPoint(itkPointSetD2STD22 self, unsigned long arg0, itkPointF2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2STD22_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF2":
        """
        GetPoint(itkPointSetD2STD22 self, unsigned long arg0, itkPointF2 arg1) -> bool
        GetPoint(itkPointSetD2STD22 self, unsigned long arg0) -> itkPointF2
        """
        return _itkPointSetPython.itkPointSetD2STD22_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD2STD22 self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetD2STD22 self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2STD22_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD2STD22 self) -> itkVectorContainerULD
        GetPointData(itkPointSetD2STD22 self) -> itkVectorContainerULD
        GetPointData(itkPointSetD2STD22 self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD2STD22_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD2STD22 self, itkDataObject data)
        SetRequestedRegion(itkPointSetD2STD22 self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD2STD22_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD2STD22 self) -> long"""
        return _itkPointSetPython.itkPointSetD2STD22_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD2STD22 self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD2STD22_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD2STD22 self) -> long"""
        return _itkPointSetPython.itkPointSetD2STD22_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD2STD22

    def cast(obj: 'itkLightObject') -> "itkPointSetD2STD22 *":
        """cast(itkLightObject obj) -> itkPointSetD2STD22"""
        return _itkPointSetPython.itkPointSetD2STD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD2STD22 *":
        """GetPointer(itkPointSetD2STD22 self) -> itkPointSetD2STD22"""
        return _itkPointSetPython.itkPointSetD2STD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD2STD22

        Create a new object of the class itkPointSetD2STD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2STD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD2STD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD2STD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD2STD22.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_Clone, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetMaximumNumberOfRegions, None, itkPointSetD2STD22)
itkPointSetD2STD22.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_PassStructure, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetNumberOfPoints, None, itkPointSetD2STD22)
itkPointSetD2STD22.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_SetPoints, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetPoints, None, itkPointSetD2STD22)
itkPointSetD2STD22.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_SetPoint, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetPoint, None, itkPointSetD2STD22)
itkPointSetD2STD22.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_SetPointData, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetPointData, None, itkPointSetD2STD22)
itkPointSetD2STD22.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_SetRequestedRegion, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetRequestedRegion, None, itkPointSetD2STD22)
itkPointSetD2STD22.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_SetBufferedRegion, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetBufferedRegion, None, itkPointSetD2STD22)
itkPointSetD2STD22.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22_GetPointer, None, itkPointSetD2STD22)
itkPointSetD2STD22_swigregister = _itkPointSetPython.itkPointSetD2STD22_swigregister
itkPointSetD2STD22_swigregister(itkPointSetD2STD22)

def itkPointSetD2STD22___New_orig__() -> "itkPointSetD2STD22_Pointer":
    """itkPointSetD2STD22___New_orig__() -> itkPointSetD2STD22_Pointer"""
    return _itkPointSetPython.itkPointSetD2STD22___New_orig__()

def itkPointSetD2STD22_cast(obj: 'itkLightObject') -> "itkPointSetD2STD22 *":
    """itkPointSetD2STD22_cast(itkLightObject obj) -> itkPointSetD2STD22"""
    return _itkPointSetPython.itkPointSetD2STD22_cast(obj)

class itkPointSetD2STD22DD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD2STD22DD_Pointer":
        """__New_orig__() -> itkPointSetD2STD22DD_Pointer"""
        return _itkPointSetPython.itkPointSetD2STD22DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD2STD22DD_Pointer":
        """Clone(itkPointSetD2STD22DD self) -> itkPointSetD2STD22DD_Pointer"""
        return _itkPointSetPython.itkPointSetD2STD22DD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD2STD22DD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD2STD22DD') -> "void":
        """
        PassStructure(itkPointSetD2STD22DD self, itkPointSetD2STD22DD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD2STD22DD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD2STD22DD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD2') -> "void":
        """
        SetPoints(itkPointSetD2STD22DD self, itkVectorContainerULPD2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPD2 const *":
        """
        GetPoints(itkPointSetD2STD22DD self) -> itkVectorContainerULPD2
        GetPoints(itkPointSetD2STD22DD self) -> itkVectorContainerULPD2
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "void":
        """
        SetPoint(itkPointSetD2STD22DD self, unsigned long arg0, itkPointD2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD2":
        """
        GetPoint(itkPointSetD2STD22DD self, unsigned long arg0, itkPointD2 arg1) -> bool
        GetPoint(itkPointSetD2STD22DD self, unsigned long arg0) -> itkPointD2
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD2STD22DD self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetD2STD22DD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD2STD22DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD2STD22DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD2STD22DD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD2STD22DD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD2STD22DD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD2STD22DD self) -> long"""
        return _itkPointSetPython.itkPointSetD2STD22DD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD2STD22DD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD2STD22DD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD2STD22DD self) -> long"""
        return _itkPointSetPython.itkPointSetD2STD22DD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD2STD22DD

    def cast(obj: 'itkLightObject') -> "itkPointSetD2STD22DD *":
        """cast(itkLightObject obj) -> itkPointSetD2STD22DD"""
        return _itkPointSetPython.itkPointSetD2STD22DD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD2STD22DD *":
        """GetPointer(itkPointSetD2STD22DD self) -> itkPointSetD2STD22DD"""
        return _itkPointSetPython.itkPointSetD2STD22DD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD2STD22DD

        Create a new object of the class itkPointSetD2STD22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2STD22DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD2STD22DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD2STD22DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD2STD22DD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_Clone, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetMaximumNumberOfRegions, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_PassStructure, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetNumberOfPoints, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_SetPoints, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetPoints, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_SetPoint, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetPoint, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_SetPointData, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetPointData, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_SetRequestedRegion, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetRequestedRegion, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_SetBufferedRegion, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetBufferedRegion, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DD_GetPointer, None, itkPointSetD2STD22DD)
itkPointSetD2STD22DD_swigregister = _itkPointSetPython.itkPointSetD2STD22DD_swigregister
itkPointSetD2STD22DD_swigregister(itkPointSetD2STD22DD)

def itkPointSetD2STD22DD___New_orig__() -> "itkPointSetD2STD22DD_Pointer":
    """itkPointSetD2STD22DD___New_orig__() -> itkPointSetD2STD22DD_Pointer"""
    return _itkPointSetPython.itkPointSetD2STD22DD___New_orig__()

def itkPointSetD2STD22DD_cast(obj: 'itkLightObject') -> "itkPointSetD2STD22DD *":
    """itkPointSetD2STD22DD_cast(itkLightObject obj) -> itkPointSetD2STD22DD"""
    return _itkPointSetPython.itkPointSetD2STD22DD_cast(obj)

class itkPointSetD2STD22DFD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD2STD22DFD_Pointer":
        """__New_orig__() -> itkPointSetD2STD22DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD2STD22DFD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD2STD22DFD_Pointer":
        """Clone(itkPointSetD2STD22DFD self) -> itkPointSetD2STD22DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD2STD22DFD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD2STD22DFD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD2STD22DFD') -> "void":
        """
        PassStructure(itkPointSetD2STD22DFD self, itkPointSetD2STD22DFD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD2STD22DFD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD2') -> "void":
        """
        SetPoints(itkPointSetD2STD22DFD self, itkVectorContainerULPD2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPD2 const *":
        """
        GetPoints(itkPointSetD2STD22DFD self) -> itkVectorContainerULPD2
        GetPoints(itkPointSetD2STD22DFD self) -> itkVectorContainerULPD2
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "void":
        """
        SetPoint(itkPointSetD2STD22DFD self, unsigned long arg0, itkPointD2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD2":
        """
        GetPoint(itkPointSetD2STD22DFD self, unsigned long arg0, itkPointD2 arg1) -> bool
        GetPoint(itkPointSetD2STD22DFD self, unsigned long arg0) -> itkPointD2
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD2STD22DFD self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetD2STD22DFD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD2STD22DFD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD2STD22DFD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD2STD22DFD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD2STD22DFD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD2STD22DFD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD2STD22DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD2STD22DFD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD2STD22DFD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD2STD22DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD2STD22DFD

    def cast(obj: 'itkLightObject') -> "itkPointSetD2STD22DFD *":
        """cast(itkLightObject obj) -> itkPointSetD2STD22DFD"""
        return _itkPointSetPython.itkPointSetD2STD22DFD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD2STD22DFD *":
        """GetPointer(itkPointSetD2STD22DFD self) -> itkPointSetD2STD22DFD"""
        return _itkPointSetPython.itkPointSetD2STD22DFD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD2STD22DFD

        Create a new object of the class itkPointSetD2STD22DFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2STD22DFD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD2STD22DFD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD2STD22DFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD2STD22DFD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_Clone, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetMaximumNumberOfRegions, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_PassStructure, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetNumberOfPoints, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_SetPoints, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetPoints, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_SetPoint, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetPoint, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_SetPointData, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetPointData, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_SetRequestedRegion, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetRequestedRegion, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_SetBufferedRegion, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetBufferedRegion, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD2STD22DFD_GetPointer, None, itkPointSetD2STD22DFD)
itkPointSetD2STD22DFD_swigregister = _itkPointSetPython.itkPointSetD2STD22DFD_swigregister
itkPointSetD2STD22DFD_swigregister(itkPointSetD2STD22DFD)

def itkPointSetD2STD22DFD___New_orig__() -> "itkPointSetD2STD22DFD_Pointer":
    """itkPointSetD2STD22DFD___New_orig__() -> itkPointSetD2STD22DFD_Pointer"""
    return _itkPointSetPython.itkPointSetD2STD22DFD___New_orig__()

def itkPointSetD2STD22DFD_cast(obj: 'itkLightObject') -> "itkPointSetD2STD22DFD *":
    """itkPointSetD2STD22DFD_cast(itkLightObject obj) -> itkPointSetD2STD22DFD"""
    return _itkPointSetPython.itkPointSetD2STD22DFD_cast(obj)

class itkPointSetD3DTD33DD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD3DTD33DD_Pointer":
        """__New_orig__() -> itkPointSetD3DTD33DD_Pointer"""
        return _itkPointSetPython.itkPointSetD3DTD33DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD3DTD33DD_Pointer":
        """Clone(itkPointSetD3DTD33DD self) -> itkPointSetD3DTD33DD_Pointer"""
        return _itkPointSetPython.itkPointSetD3DTD33DD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD3DTD33DD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD3DTD33DD') -> "void":
        """
        PassStructure(itkPointSetD3DTD33DD self, itkPointSetD3DTD33DD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD3DTD33DD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULPD3') -> "void":
        """
        SetPoints(itkPointSetD3DTD33DD self, itkMapContainerULPD3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULPD3 const *":
        """
        GetPoints(itkPointSetD3DTD33DD self) -> itkMapContainerULPD3
        GetPoints(itkPointSetD3DTD33DD self) -> itkMapContainerULPD3
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "void":
        """
        SetPoint(itkPointSetD3DTD33DD self, unsigned long arg0, itkPointD3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD3":
        """
        GetPoint(itkPointSetD3DTD33DD self, unsigned long arg0, itkPointD3 arg1) -> bool
        GetPoint(itkPointSetD3DTD33DD self, unsigned long arg0) -> itkPointD3
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD3DTD33DD self, itkMapContainerULD arg0)
        SetPointData(itkPointSetD3DTD33DD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD3DTD33DD self) -> itkMapContainerULD
        GetPointData(itkPointSetD3DTD33DD self) -> itkMapContainerULD
        GetPointData(itkPointSetD3DTD33DD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD3DTD33DD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD3DTD33DD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD3DTD33DD self) -> long"""
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD3DTD33DD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD3DTD33DD self) -> long"""
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD3DTD33DD

    def cast(obj: 'itkLightObject') -> "itkPointSetD3DTD33DD *":
        """cast(itkLightObject obj) -> itkPointSetD3DTD33DD"""
        return _itkPointSetPython.itkPointSetD3DTD33DD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD3DTD33DD *":
        """GetPointer(itkPointSetD3DTD33DD self) -> itkPointSetD3DTD33DD"""
        return _itkPointSetPython.itkPointSetD3DTD33DD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD3DTD33DD

        Create a new object of the class itkPointSetD3DTD33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3DTD33DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3DTD33DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3DTD33DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD3DTD33DD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_Clone, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetMaximumNumberOfRegions, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_PassStructure, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetNumberOfPoints, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_SetPoints, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetPoints, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_SetPoint, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetPoint, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_SetPointData, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetPointData, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_SetRequestedRegion, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetRequestedRegion, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_SetBufferedRegion, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetBufferedRegion, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DD_GetPointer, None, itkPointSetD3DTD33DD)
itkPointSetD3DTD33DD_swigregister = _itkPointSetPython.itkPointSetD3DTD33DD_swigregister
itkPointSetD3DTD33DD_swigregister(itkPointSetD3DTD33DD)

def itkPointSetD3DTD33DD___New_orig__() -> "itkPointSetD3DTD33DD_Pointer":
    """itkPointSetD3DTD33DD___New_orig__() -> itkPointSetD3DTD33DD_Pointer"""
    return _itkPointSetPython.itkPointSetD3DTD33DD___New_orig__()

def itkPointSetD3DTD33DD_cast(obj: 'itkLightObject') -> "itkPointSetD3DTD33DD *":
    """itkPointSetD3DTD33DD_cast(itkLightObject obj) -> itkPointSetD3DTD33DD"""
    return _itkPointSetPython.itkPointSetD3DTD33DD_cast(obj)

class itkPointSetD3DTD33DFD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD3DTD33DFD_Pointer":
        """__New_orig__() -> itkPointSetD3DTD33DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD3DTD33DFD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD3DTD33DFD_Pointer":
        """Clone(itkPointSetD3DTD33DFD self) -> itkPointSetD3DTD33DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD3DTD33DFD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD3DTD33DFD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD3DTD33DFD') -> "void":
        """
        PassStructure(itkPointSetD3DTD33DFD self, itkPointSetD3DTD33DFD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD3DTD33DFD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULPD3') -> "void":
        """
        SetPoints(itkPointSetD3DTD33DFD self, itkMapContainerULPD3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULPD3 const *":
        """
        GetPoints(itkPointSetD3DTD33DFD self) -> itkMapContainerULPD3
        GetPoints(itkPointSetD3DTD33DFD self) -> itkMapContainerULPD3
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "void":
        """
        SetPoint(itkPointSetD3DTD33DFD self, unsigned long arg0, itkPointD3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD3":
        """
        GetPoint(itkPointSetD3DTD33DFD self, unsigned long arg0, itkPointD3 arg1) -> bool
        GetPoint(itkPointSetD3DTD33DFD self, unsigned long arg0) -> itkPointD3
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD3DTD33DFD self, itkMapContainerULD arg0)
        SetPointData(itkPointSetD3DTD33DFD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD3DTD33DFD self) -> itkMapContainerULD
        GetPointData(itkPointSetD3DTD33DFD self) -> itkMapContainerULD
        GetPointData(itkPointSetD3DTD33DFD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD3DTD33DFD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD3DTD33DFD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD3DTD33DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD3DTD33DFD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD3DTD33DFD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD3DTD33DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD3DTD33DFD

    def cast(obj: 'itkLightObject') -> "itkPointSetD3DTD33DFD *":
        """cast(itkLightObject obj) -> itkPointSetD3DTD33DFD"""
        return _itkPointSetPython.itkPointSetD3DTD33DFD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD3DTD33DFD *":
        """GetPointer(itkPointSetD3DTD33DFD self) -> itkPointSetD3DTD33DFD"""
        return _itkPointSetPython.itkPointSetD3DTD33DFD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD3DTD33DFD

        Create a new object of the class itkPointSetD3DTD33DFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3DTD33DFD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3DTD33DFD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3DTD33DFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD3DTD33DFD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_Clone, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetMaximumNumberOfRegions, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_PassStructure, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetNumberOfPoints, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_SetPoints, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetPoints, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_SetPoint, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetPoint, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_SetPointData, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetPointData, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_SetRequestedRegion, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetRequestedRegion, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_SetBufferedRegion, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetBufferedRegion, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD3DTD33DFD_GetPointer, None, itkPointSetD3DTD33DFD)
itkPointSetD3DTD33DFD_swigregister = _itkPointSetPython.itkPointSetD3DTD33DFD_swigregister
itkPointSetD3DTD33DFD_swigregister(itkPointSetD3DTD33DFD)

def itkPointSetD3DTD33DFD___New_orig__() -> "itkPointSetD3DTD33DFD_Pointer":
    """itkPointSetD3DTD33DFD___New_orig__() -> itkPointSetD3DTD33DFD_Pointer"""
    return _itkPointSetPython.itkPointSetD3DTD33DFD___New_orig__()

def itkPointSetD3DTD33DFD_cast(obj: 'itkLightObject') -> "itkPointSetD3DTD33DFD *":
    """itkPointSetD3DTD33DFD_cast(itkLightObject obj) -> itkPointSetD3DTD33DFD"""
    return _itkPointSetPython.itkPointSetD3DTD33DFD_cast(obj)

class itkPointSetD3STD33(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD3STD33_Pointer":
        """__New_orig__() -> itkPointSetD3STD33_Pointer"""
        return _itkPointSetPython.itkPointSetD3STD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD3STD33_Pointer":
        """Clone(itkPointSetD3STD33 self) -> itkPointSetD3STD33_Pointer"""
        return _itkPointSetPython.itkPointSetD3STD33_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD3STD33 self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD3STD33_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD3STD33') -> "void":
        """
        PassStructure(itkPointSetD3STD33 self, itkPointSetD3STD33 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD3STD33_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD3STD33 self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD3STD33_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetD3STD33 self, itkVectorContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD3STD33_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF3 const *":
        """
        GetPoints(itkPointSetD3STD33 self) -> itkVectorContainerULPF3
        GetPoints(itkPointSetD3STD33 self) -> itkVectorContainerULPF3
        """
        return _itkPointSetPython.itkPointSetD3STD33_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetD3STD33 self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3STD33_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetD3STD33 self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetD3STD33 self, unsigned long arg0) -> itkPointF3
        """
        return _itkPointSetPython.itkPointSetD3STD33_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD3STD33 self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetD3STD33 self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3STD33_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD3STD33 self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3STD33 self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3STD33 self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD3STD33_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD3STD33 self, itkDataObject data)
        SetRequestedRegion(itkPointSetD3STD33 self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD3STD33_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD3STD33 self) -> long"""
        return _itkPointSetPython.itkPointSetD3STD33_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD3STD33 self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD3STD33_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD3STD33 self) -> long"""
        return _itkPointSetPython.itkPointSetD3STD33_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD3STD33

    def cast(obj: 'itkLightObject') -> "itkPointSetD3STD33 *":
        """cast(itkLightObject obj) -> itkPointSetD3STD33"""
        return _itkPointSetPython.itkPointSetD3STD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD3STD33 *":
        """GetPointer(itkPointSetD3STD33 self) -> itkPointSetD3STD33"""
        return _itkPointSetPython.itkPointSetD3STD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD3STD33

        Create a new object of the class itkPointSetD3STD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3STD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3STD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3STD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD3STD33.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_Clone, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetMaximumNumberOfRegions, None, itkPointSetD3STD33)
itkPointSetD3STD33.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_PassStructure, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetNumberOfPoints, None, itkPointSetD3STD33)
itkPointSetD3STD33.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_SetPoints, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetPoints, None, itkPointSetD3STD33)
itkPointSetD3STD33.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_SetPoint, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetPoint, None, itkPointSetD3STD33)
itkPointSetD3STD33.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_SetPointData, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetPointData, None, itkPointSetD3STD33)
itkPointSetD3STD33.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_SetRequestedRegion, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetRequestedRegion, None, itkPointSetD3STD33)
itkPointSetD3STD33.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_SetBufferedRegion, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetBufferedRegion, None, itkPointSetD3STD33)
itkPointSetD3STD33.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33_GetPointer, None, itkPointSetD3STD33)
itkPointSetD3STD33_swigregister = _itkPointSetPython.itkPointSetD3STD33_swigregister
itkPointSetD3STD33_swigregister(itkPointSetD3STD33)

def itkPointSetD3STD33___New_orig__() -> "itkPointSetD3STD33_Pointer":
    """itkPointSetD3STD33___New_orig__() -> itkPointSetD3STD33_Pointer"""
    return _itkPointSetPython.itkPointSetD3STD33___New_orig__()

def itkPointSetD3STD33_cast(obj: 'itkLightObject') -> "itkPointSetD3STD33 *":
    """itkPointSetD3STD33_cast(itkLightObject obj) -> itkPointSetD3STD33"""
    return _itkPointSetPython.itkPointSetD3STD33_cast(obj)

class itkPointSetD3STD33DD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD3STD33DD_Pointer":
        """__New_orig__() -> itkPointSetD3STD33DD_Pointer"""
        return _itkPointSetPython.itkPointSetD3STD33DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD3STD33DD_Pointer":
        """Clone(itkPointSetD3STD33DD self) -> itkPointSetD3STD33DD_Pointer"""
        return _itkPointSetPython.itkPointSetD3STD33DD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD3STD33DD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD3STD33DD') -> "void":
        """
        PassStructure(itkPointSetD3STD33DD self, itkPointSetD3STD33DD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD3STD33DD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD3STD33DD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD3') -> "void":
        """
        SetPoints(itkPointSetD3STD33DD self, itkVectorContainerULPD3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPD3 const *":
        """
        GetPoints(itkPointSetD3STD33DD self) -> itkVectorContainerULPD3
        GetPoints(itkPointSetD3STD33DD self) -> itkVectorContainerULPD3
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "void":
        """
        SetPoint(itkPointSetD3STD33DD self, unsigned long arg0, itkPointD3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD3":
        """
        GetPoint(itkPointSetD3STD33DD self, unsigned long arg0, itkPointD3 arg1) -> bool
        GetPoint(itkPointSetD3STD33DD self, unsigned long arg0) -> itkPointD3
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD3STD33DD self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetD3STD33DD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD3STD33DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3STD33DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3STD33DD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD3STD33DD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD3STD33DD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD3STD33DD self) -> long"""
        return _itkPointSetPython.itkPointSetD3STD33DD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD3STD33DD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD3STD33DD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD3STD33DD self) -> long"""
        return _itkPointSetPython.itkPointSetD3STD33DD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD3STD33DD

    def cast(obj: 'itkLightObject') -> "itkPointSetD3STD33DD *":
        """cast(itkLightObject obj) -> itkPointSetD3STD33DD"""
        return _itkPointSetPython.itkPointSetD3STD33DD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD3STD33DD *":
        """GetPointer(itkPointSetD3STD33DD self) -> itkPointSetD3STD33DD"""
        return _itkPointSetPython.itkPointSetD3STD33DD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD3STD33DD

        Create a new object of the class itkPointSetD3STD33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3STD33DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3STD33DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3STD33DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD3STD33DD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_Clone, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetMaximumNumberOfRegions, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_PassStructure, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetNumberOfPoints, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_SetPoints, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetPoints, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_SetPoint, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetPoint, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_SetPointData, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetPointData, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_SetRequestedRegion, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetRequestedRegion, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_SetBufferedRegion, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetBufferedRegion, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DD_GetPointer, None, itkPointSetD3STD33DD)
itkPointSetD3STD33DD_swigregister = _itkPointSetPython.itkPointSetD3STD33DD_swigregister
itkPointSetD3STD33DD_swigregister(itkPointSetD3STD33DD)

def itkPointSetD3STD33DD___New_orig__() -> "itkPointSetD3STD33DD_Pointer":
    """itkPointSetD3STD33DD___New_orig__() -> itkPointSetD3STD33DD_Pointer"""
    return _itkPointSetPython.itkPointSetD3STD33DD___New_orig__()

def itkPointSetD3STD33DD_cast(obj: 'itkLightObject') -> "itkPointSetD3STD33DD *":
    """itkPointSetD3STD33DD_cast(itkLightObject obj) -> itkPointSetD3STD33DD"""
    return _itkPointSetPython.itkPointSetD3STD33DD_cast(obj)

class itkPointSetD3STD33DFD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetD3STD33DFD_Pointer":
        """__New_orig__() -> itkPointSetD3STD33DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD3STD33DFD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetD3STD33DFD_Pointer":
        """Clone(itkPointSetD3STD33DFD self) -> itkPointSetD3STD33DFD_Pointer"""
        return _itkPointSetPython.itkPointSetD3STD33DFD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetD3STD33DFD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetD3STD33DFD') -> "void":
        """
        PassStructure(itkPointSetD3STD33DFD self, itkPointSetD3STD33DFD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetD3STD33DFD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD3') -> "void":
        """
        SetPoints(itkPointSetD3STD33DFD self, itkVectorContainerULPD3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPD3 const *":
        """
        GetPoints(itkPointSetD3STD33DFD self) -> itkVectorContainerULPD3
        GetPoints(itkPointSetD3STD33DFD self) -> itkVectorContainerULPD3
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "void":
        """
        SetPoint(itkPointSetD3STD33DFD self, unsigned long arg0, itkPointD3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD3":
        """
        GetPoint(itkPointSetD3STD33DFD self, unsigned long arg0, itkPointD3 arg1) -> bool
        GetPoint(itkPointSetD3STD33DFD self, unsigned long arg0) -> itkPointD3
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetD3STD33DFD self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetD3STD33DFD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetD3STD33DFD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3STD33DFD self) -> itkVectorContainerULD
        GetPointData(itkPointSetD3STD33DFD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetD3STD33DFD self, itkDataObject data)
        SetRequestedRegion(itkPointSetD3STD33DFD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetD3STD33DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetD3STD33DFD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetD3STD33DFD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetD3STD33DFD self) -> long"""
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD3STD33DFD

    def cast(obj: 'itkLightObject') -> "itkPointSetD3STD33DFD *":
        """cast(itkLightObject obj) -> itkPointSetD3STD33DFD"""
        return _itkPointSetPython.itkPointSetD3STD33DFD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetD3STD33DFD *":
        """GetPointer(itkPointSetD3STD33DFD self) -> itkPointSetD3STD33DFD"""
        return _itkPointSetPython.itkPointSetD3STD33DFD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetD3STD33DFD

        Create a new object of the class itkPointSetD3STD33DFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3STD33DFD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3STD33DFD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3STD33DFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetD3STD33DFD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_Clone, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetMaximumNumberOfRegions, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_PassStructure, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetNumberOfPoints, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_SetPoints, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetPoints, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_SetPoint, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetPoint, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_SetPointData, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetPointData, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_SetRequestedRegion, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetRequestedRegion, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_SetBufferedRegion, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetBufferedRegion, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetD3STD33DFD_GetPointer, None, itkPointSetD3STD33DFD)
itkPointSetD3STD33DFD_swigregister = _itkPointSetPython.itkPointSetD3STD33DFD_swigregister
itkPointSetD3STD33DFD_swigregister(itkPointSetD3STD33DFD)

def itkPointSetD3STD33DFD___New_orig__() -> "itkPointSetD3STD33DFD_Pointer":
    """itkPointSetD3STD33DFD___New_orig__() -> itkPointSetD3STD33DFD_Pointer"""
    return _itkPointSetPython.itkPointSetD3STD33DFD___New_orig__()

def itkPointSetD3STD33DFD_cast(obj: 'itkLightObject') -> "itkPointSetD3STD33DFD *":
    """itkPointSetD3STD33DFD_cast(itkLightObject obj) -> itkPointSetD3STD33DFD"""
    return _itkPointSetPython.itkPointSetD3STD33DFD_cast(obj)

class itkPointSetF2DTF22FF(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetF2DTF22FF_Pointer":
        """__New_orig__() -> itkPointSetF2DTF22FF_Pointer"""
        return _itkPointSetPython.itkPointSetF2DTF22FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetF2DTF22FF_Pointer":
        """Clone(itkPointSetF2DTF22FF self) -> itkPointSetF2DTF22FF_Pointer"""
        return _itkPointSetPython.itkPointSetF2DTF22FF_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetF2DTF22FF self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetF2DTF22FF') -> "void":
        """
        PassStructure(itkPointSetF2DTF22FF self, itkPointSetF2DTF22FF inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetF2DTF22FF self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULPF2') -> "void":
        """
        SetPoints(itkPointSetF2DTF22FF self, itkMapContainerULPF2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULPF2 const *":
        """
        GetPoints(itkPointSetF2DTF22FF self) -> itkMapContainerULPF2
        GetPoints(itkPointSetF2DTF22FF self) -> itkMapContainerULPF2
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        SetPoint(itkPointSetF2DTF22FF self, unsigned long arg0, itkPointF2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF2":
        """
        GetPoint(itkPointSetF2DTF22FF self, unsigned long arg0, itkPointF2 arg1) -> bool
        GetPoint(itkPointSetF2DTF22FF self, unsigned long arg0) -> itkPointF2
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetF2DTF22FF self, itkMapContainerULF arg0)
        SetPointData(itkPointSetF2DTF22FF self, unsigned long arg0, float arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetF2DTF22FF self) -> itkMapContainerULF
        GetPointData(itkPointSetF2DTF22FF self) -> itkMapContainerULF
        GetPointData(itkPointSetF2DTF22FF self, unsigned long arg0, float * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetF2DTF22FF self, itkDataObject data)
        SetRequestedRegion(itkPointSetF2DTF22FF self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetF2DTF22FF self) -> long"""
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetF2DTF22FF self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetF2DTF22FF_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetF2DTF22FF self) -> long"""
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF2DTF22FF

    def cast(obj: 'itkLightObject') -> "itkPointSetF2DTF22FF *":
        """cast(itkLightObject obj) -> itkPointSetF2DTF22FF"""
        return _itkPointSetPython.itkPointSetF2DTF22FF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetF2DTF22FF *":
        """GetPointer(itkPointSetF2DTF22FF self) -> itkPointSetF2DTF22FF"""
        return _itkPointSetPython.itkPointSetF2DTF22FF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetF2DTF22FF

        Create a new object of the class itkPointSetF2DTF22FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF2DTF22FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF2DTF22FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF2DTF22FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetF2DTF22FF.Clone = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_Clone, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetMaximumNumberOfRegions, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_PassStructure, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetNumberOfPoints, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_SetPoints, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetPoints, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_SetPoint, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetPoint, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_SetPointData, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetPointData, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_SetRequestedRegion, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetRequestedRegion, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_SetBufferedRegion, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetBufferedRegion, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetF2DTF22FF_GetPointer, None, itkPointSetF2DTF22FF)
itkPointSetF2DTF22FF_swigregister = _itkPointSetPython.itkPointSetF2DTF22FF_swigregister
itkPointSetF2DTF22FF_swigregister(itkPointSetF2DTF22FF)

def itkPointSetF2DTF22FF___New_orig__() -> "itkPointSetF2DTF22FF_Pointer":
    """itkPointSetF2DTF22FF___New_orig__() -> itkPointSetF2DTF22FF_Pointer"""
    return _itkPointSetPython.itkPointSetF2DTF22FF___New_orig__()

def itkPointSetF2DTF22FF_cast(obj: 'itkLightObject') -> "itkPointSetF2DTF22FF *":
    """itkPointSetF2DTF22FF_cast(itkLightObject obj) -> itkPointSetF2DTF22FF"""
    return _itkPointSetPython.itkPointSetF2DTF22FF_cast(obj)

class itkPointSetF2STF22(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetF2STF22_Pointer":
        """__New_orig__() -> itkPointSetF2STF22_Pointer"""
        return _itkPointSetPython.itkPointSetF2STF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetF2STF22_Pointer":
        """Clone(itkPointSetF2STF22 self) -> itkPointSetF2STF22_Pointer"""
        return _itkPointSetPython.itkPointSetF2STF22_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetF2STF22 self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetF2STF22_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetF2STF22') -> "void":
        """
        PassStructure(itkPointSetF2STF22 self, itkPointSetF2STF22 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetF2STF22_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetF2STF22 self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetF2STF22_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF2') -> "void":
        """
        SetPoints(itkPointSetF2STF22 self, itkVectorContainerULPF2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetF2STF22_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF2 const *":
        """
        GetPoints(itkPointSetF2STF22 self) -> itkVectorContainerULPF2
        GetPoints(itkPointSetF2STF22 self) -> itkVectorContainerULPF2
        """
        return _itkPointSetPython.itkPointSetF2STF22_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        SetPoint(itkPointSetF2STF22 self, unsigned long arg0, itkPointF2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF2STF22_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF2":
        """
        GetPoint(itkPointSetF2STF22 self, unsigned long arg0, itkPointF2 arg1) -> bool
        GetPoint(itkPointSetF2STF22 self, unsigned long arg0) -> itkPointF2
        """
        return _itkPointSetPython.itkPointSetF2STF22_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetF2STF22 self, itkVectorContainerULF arg0)
        SetPointData(itkPointSetF2STF22 self, unsigned long arg0, float arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF2STF22_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetF2STF22 self) -> itkVectorContainerULF
        GetPointData(itkPointSetF2STF22 self) -> itkVectorContainerULF
        GetPointData(itkPointSetF2STF22 self, unsigned long arg0, float * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetF2STF22_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetF2STF22 self, itkDataObject data)
        SetRequestedRegion(itkPointSetF2STF22 self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetF2STF22_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetF2STF22 self) -> long"""
        return _itkPointSetPython.itkPointSetF2STF22_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetF2STF22 self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetF2STF22_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetF2STF22 self) -> long"""
        return _itkPointSetPython.itkPointSetF2STF22_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF2STF22

    def cast(obj: 'itkLightObject') -> "itkPointSetF2STF22 *":
        """cast(itkLightObject obj) -> itkPointSetF2STF22"""
        return _itkPointSetPython.itkPointSetF2STF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetF2STF22 *":
        """GetPointer(itkPointSetF2STF22 self) -> itkPointSetF2STF22"""
        return _itkPointSetPython.itkPointSetF2STF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetF2STF22

        Create a new object of the class itkPointSetF2STF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF2STF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF2STF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF2STF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetF2STF22.Clone = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_Clone, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetMaximumNumberOfRegions, None, itkPointSetF2STF22)
itkPointSetF2STF22.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_PassStructure, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetNumberOfPoints, None, itkPointSetF2STF22)
itkPointSetF2STF22.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_SetPoints, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetPoints, None, itkPointSetF2STF22)
itkPointSetF2STF22.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_SetPoint, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetPoint, None, itkPointSetF2STF22)
itkPointSetF2STF22.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_SetPointData, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetPointData, None, itkPointSetF2STF22)
itkPointSetF2STF22.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_SetRequestedRegion, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetRequestedRegion, None, itkPointSetF2STF22)
itkPointSetF2STF22.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_SetBufferedRegion, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetBufferedRegion, None, itkPointSetF2STF22)
itkPointSetF2STF22.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22_GetPointer, None, itkPointSetF2STF22)
itkPointSetF2STF22_swigregister = _itkPointSetPython.itkPointSetF2STF22_swigregister
itkPointSetF2STF22_swigregister(itkPointSetF2STF22)

def itkPointSetF2STF22___New_orig__() -> "itkPointSetF2STF22_Pointer":
    """itkPointSetF2STF22___New_orig__() -> itkPointSetF2STF22_Pointer"""
    return _itkPointSetPython.itkPointSetF2STF22___New_orig__()

def itkPointSetF2STF22_cast(obj: 'itkLightObject') -> "itkPointSetF2STF22 *":
    """itkPointSetF2STF22_cast(itkLightObject obj) -> itkPointSetF2STF22"""
    return _itkPointSetPython.itkPointSetF2STF22_cast(obj)

class itkPointSetF2STF22FF(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetF2STF22_Pointer":
        """__New_orig__() -> itkPointSetF2STF22_Pointer"""
        return _itkPointSetPython.itkPointSetF2STF22FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetF2STF22_Pointer":
        """Clone(itkPointSetF2STF22FF self) -> itkPointSetF2STF22_Pointer"""
        return _itkPointSetPython.itkPointSetF2STF22FF_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetF2STF22FF self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetF2STF22') -> "void":
        """
        PassStructure(itkPointSetF2STF22FF self, itkPointSetF2STF22 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetF2STF22FF self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetF2STF22FF_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF2') -> "void":
        """
        SetPoints(itkPointSetF2STF22FF self, itkVectorContainerULPF2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF2 const *":
        """
        GetPoints(itkPointSetF2STF22FF self) -> itkVectorContainerULPF2
        GetPoints(itkPointSetF2STF22FF self) -> itkVectorContainerULPF2
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        SetPoint(itkPointSetF2STF22FF self, unsigned long arg0, itkPointF2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF2":
        """
        GetPoint(itkPointSetF2STF22FF self, unsigned long arg0, itkPointF2 arg1) -> bool
        GetPoint(itkPointSetF2STF22FF self, unsigned long arg0) -> itkPointF2
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetF2STF22FF self, itkVectorContainerULF arg0)
        SetPointData(itkPointSetF2STF22FF self, unsigned long arg0, float arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetF2STF22FF self) -> itkVectorContainerULF
        GetPointData(itkPointSetF2STF22FF self) -> itkVectorContainerULF
        GetPointData(itkPointSetF2STF22FF self, unsigned long arg0, float * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetF2STF22FF self, itkDataObject data)
        SetRequestedRegion(itkPointSetF2STF22FF self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetF2STF22FF self) -> long"""
        return _itkPointSetPython.itkPointSetF2STF22FF_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetF2STF22FF self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetF2STF22FF_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetF2STF22FF self) -> long"""
        return _itkPointSetPython.itkPointSetF2STF22FF_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF2STF22FF

    def cast(obj: 'itkLightObject') -> "itkPointSetF2STF22FF *":
        """cast(itkLightObject obj) -> itkPointSetF2STF22FF"""
        return _itkPointSetPython.itkPointSetF2STF22FF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetF2STF22FF *":
        """GetPointer(itkPointSetF2STF22FF self) -> itkPointSetF2STF22FF"""
        return _itkPointSetPython.itkPointSetF2STF22FF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetF2STF22FF

        Create a new object of the class itkPointSetF2STF22FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF2STF22FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF2STF22FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF2STF22FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetF2STF22FF.Clone = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_Clone, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetMaximumNumberOfRegions, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_PassStructure, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetNumberOfPoints, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_SetPoints, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetPoints, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_SetPoint, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetPoint, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_SetPointData, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetPointData, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_SetRequestedRegion, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetRequestedRegion, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_SetBufferedRegion, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetBufferedRegion, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetF2STF22FF_GetPointer, None, itkPointSetF2STF22FF)
itkPointSetF2STF22FF_swigregister = _itkPointSetPython.itkPointSetF2STF22FF_swigregister
itkPointSetF2STF22FF_swigregister(itkPointSetF2STF22FF)

def itkPointSetF2STF22FF___New_orig__() -> "itkPointSetF2STF22_Pointer":
    """itkPointSetF2STF22FF___New_orig__() -> itkPointSetF2STF22_Pointer"""
    return _itkPointSetPython.itkPointSetF2STF22FF___New_orig__()

def itkPointSetF2STF22FF_cast(obj: 'itkLightObject') -> "itkPointSetF2STF22FF *":
    """itkPointSetF2STF22FF_cast(itkLightObject obj) -> itkPointSetF2STF22FF"""
    return _itkPointSetPython.itkPointSetF2STF22FF_cast(obj)

class itkPointSetF3DTF33FF(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetF3DTF33FF_Pointer":
        """__New_orig__() -> itkPointSetF3DTF33FF_Pointer"""
        return _itkPointSetPython.itkPointSetF3DTF33FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetF3DTF33FF_Pointer":
        """Clone(itkPointSetF3DTF33FF self) -> itkPointSetF3DTF33FF_Pointer"""
        return _itkPointSetPython.itkPointSetF3DTF33FF_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetF3DTF33FF self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetF3DTF33FF') -> "void":
        """
        PassStructure(itkPointSetF3DTF33FF self, itkPointSetF3DTF33FF inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetF3DTF33FF self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkMapContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetF3DTF33FF self, itkMapContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkMapContainerULPF3 const *":
        """
        GetPoints(itkPointSetF3DTF33FF self) -> itkMapContainerULPF3
        GetPoints(itkPointSetF3DTF33FF self) -> itkMapContainerULPF3
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetF3DTF33FF self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetF3DTF33FF self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetF3DTF33FF self, unsigned long arg0) -> itkPointF3
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetF3DTF33FF self, itkMapContainerULF arg0)
        SetPointData(itkPointSetF3DTF33FF self, unsigned long arg0, float arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetF3DTF33FF self) -> itkMapContainerULF
        GetPointData(itkPointSetF3DTF33FF self) -> itkMapContainerULF
        GetPointData(itkPointSetF3DTF33FF self, unsigned long arg0, float * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetF3DTF33FF self, itkDataObject data)
        SetRequestedRegion(itkPointSetF3DTF33FF self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetF3DTF33FF self) -> long"""
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetF3DTF33FF self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetF3DTF33FF_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetF3DTF33FF self) -> long"""
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF3DTF33FF

    def cast(obj: 'itkLightObject') -> "itkPointSetF3DTF33FF *":
        """cast(itkLightObject obj) -> itkPointSetF3DTF33FF"""
        return _itkPointSetPython.itkPointSetF3DTF33FF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetF3DTF33FF *":
        """GetPointer(itkPointSetF3DTF33FF self) -> itkPointSetF3DTF33FF"""
        return _itkPointSetPython.itkPointSetF3DTF33FF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetF3DTF33FF

        Create a new object of the class itkPointSetF3DTF33FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF3DTF33FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF3DTF33FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF3DTF33FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetF3DTF33FF.Clone = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_Clone, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetMaximumNumberOfRegions, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_PassStructure, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetNumberOfPoints, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_SetPoints, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetPoints, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_SetPoint, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetPoint, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_SetPointData, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetPointData, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_SetRequestedRegion, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetRequestedRegion, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_SetBufferedRegion, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetBufferedRegion, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetF3DTF33FF_GetPointer, None, itkPointSetF3DTF33FF)
itkPointSetF3DTF33FF_swigregister = _itkPointSetPython.itkPointSetF3DTF33FF_swigregister
itkPointSetF3DTF33FF_swigregister(itkPointSetF3DTF33FF)

def itkPointSetF3DTF33FF___New_orig__() -> "itkPointSetF3DTF33FF_Pointer":
    """itkPointSetF3DTF33FF___New_orig__() -> itkPointSetF3DTF33FF_Pointer"""
    return _itkPointSetPython.itkPointSetF3DTF33FF___New_orig__()

def itkPointSetF3DTF33FF_cast(obj: 'itkLightObject') -> "itkPointSetF3DTF33FF *":
    """itkPointSetF3DTF33FF_cast(itkLightObject obj) -> itkPointSetF3DTF33FF"""
    return _itkPointSetPython.itkPointSetF3DTF33FF_cast(obj)

class itkPointSetF3STF33(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetF3STF33_Pointer":
        """__New_orig__() -> itkPointSetF3STF33_Pointer"""
        return _itkPointSetPython.itkPointSetF3STF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetF3STF33_Pointer":
        """Clone(itkPointSetF3STF33 self) -> itkPointSetF3STF33_Pointer"""
        return _itkPointSetPython.itkPointSetF3STF33_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetF3STF33 self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetF3STF33_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetF3STF33') -> "void":
        """
        PassStructure(itkPointSetF3STF33 self, itkPointSetF3STF33 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetF3STF33_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetF3STF33 self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetF3STF33_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetF3STF33 self, itkVectorContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetF3STF33_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF3 const *":
        """
        GetPoints(itkPointSetF3STF33 self) -> itkVectorContainerULPF3
        GetPoints(itkPointSetF3STF33 self) -> itkVectorContainerULPF3
        """
        return _itkPointSetPython.itkPointSetF3STF33_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetF3STF33 self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF3STF33_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetF3STF33 self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetF3STF33 self, unsigned long arg0) -> itkPointF3
        """
        return _itkPointSetPython.itkPointSetF3STF33_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetF3STF33 self, itkVectorContainerULF arg0)
        SetPointData(itkPointSetF3STF33 self, unsigned long arg0, float arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF3STF33_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetF3STF33 self) -> itkVectorContainerULF
        GetPointData(itkPointSetF3STF33 self) -> itkVectorContainerULF
        GetPointData(itkPointSetF3STF33 self, unsigned long arg0, float * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetF3STF33_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetF3STF33 self, itkDataObject data)
        SetRequestedRegion(itkPointSetF3STF33 self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetF3STF33_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetF3STF33 self) -> long"""
        return _itkPointSetPython.itkPointSetF3STF33_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetF3STF33 self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetF3STF33_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetF3STF33 self) -> long"""
        return _itkPointSetPython.itkPointSetF3STF33_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF3STF33

    def cast(obj: 'itkLightObject') -> "itkPointSetF3STF33 *":
        """cast(itkLightObject obj) -> itkPointSetF3STF33"""
        return _itkPointSetPython.itkPointSetF3STF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetF3STF33 *":
        """GetPointer(itkPointSetF3STF33 self) -> itkPointSetF3STF33"""
        return _itkPointSetPython.itkPointSetF3STF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetF3STF33

        Create a new object of the class itkPointSetF3STF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF3STF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF3STF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF3STF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetF3STF33.Clone = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_Clone, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetMaximumNumberOfRegions, None, itkPointSetF3STF33)
itkPointSetF3STF33.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_PassStructure, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetNumberOfPoints, None, itkPointSetF3STF33)
itkPointSetF3STF33.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_SetPoints, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetPoints, None, itkPointSetF3STF33)
itkPointSetF3STF33.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_SetPoint, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetPoint, None, itkPointSetF3STF33)
itkPointSetF3STF33.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_SetPointData, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetPointData, None, itkPointSetF3STF33)
itkPointSetF3STF33.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_SetRequestedRegion, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetRequestedRegion, None, itkPointSetF3STF33)
itkPointSetF3STF33.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_SetBufferedRegion, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetBufferedRegion, None, itkPointSetF3STF33)
itkPointSetF3STF33.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33_GetPointer, None, itkPointSetF3STF33)
itkPointSetF3STF33_swigregister = _itkPointSetPython.itkPointSetF3STF33_swigregister
itkPointSetF3STF33_swigregister(itkPointSetF3STF33)

def itkPointSetF3STF33___New_orig__() -> "itkPointSetF3STF33_Pointer":
    """itkPointSetF3STF33___New_orig__() -> itkPointSetF3STF33_Pointer"""
    return _itkPointSetPython.itkPointSetF3STF33___New_orig__()

def itkPointSetF3STF33_cast(obj: 'itkLightObject') -> "itkPointSetF3STF33 *":
    """itkPointSetF3STF33_cast(itkLightObject obj) -> itkPointSetF3STF33"""
    return _itkPointSetPython.itkPointSetF3STF33_cast(obj)

class itkPointSetF3STF33FF(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetF3STF33_Pointer":
        """__New_orig__() -> itkPointSetF3STF33_Pointer"""
        return _itkPointSetPython.itkPointSetF3STF33FF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetF3STF33_Pointer":
        """Clone(itkPointSetF3STF33FF self) -> itkPointSetF3STF33_Pointer"""
        return _itkPointSetPython.itkPointSetF3STF33FF_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetF3STF33FF self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetF3STF33') -> "void":
        """
        PassStructure(itkPointSetF3STF33FF self, itkPointSetF3STF33 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetF3STF33FF self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetF3STF33FF_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetF3STF33FF self, itkVectorContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF3 const *":
        """
        GetPoints(itkPointSetF3STF33FF self) -> itkVectorContainerULPF3
        GetPoints(itkPointSetF3STF33FF self) -> itkVectorContainerULPF3
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetF3STF33FF self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetF3STF33FF self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetF3STF33FF self, unsigned long arg0) -> itkPointF3
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetF3STF33FF self, itkVectorContainerULF arg0)
        SetPointData(itkPointSetF3STF33FF self, unsigned long arg0, float arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetF3STF33FF self) -> itkVectorContainerULF
        GetPointData(itkPointSetF3STF33FF self) -> itkVectorContainerULF
        GetPointData(itkPointSetF3STF33FF self, unsigned long arg0, float * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetF3STF33FF self, itkDataObject data)
        SetRequestedRegion(itkPointSetF3STF33FF self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetF3STF33FF self) -> long"""
        return _itkPointSetPython.itkPointSetF3STF33FF_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetF3STF33FF self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetF3STF33FF_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetF3STF33FF self) -> long"""
        return _itkPointSetPython.itkPointSetF3STF33FF_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF3STF33FF

    def cast(obj: 'itkLightObject') -> "itkPointSetF3STF33FF *":
        """cast(itkLightObject obj) -> itkPointSetF3STF33FF"""
        return _itkPointSetPython.itkPointSetF3STF33FF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetF3STF33FF *":
        """GetPointer(itkPointSetF3STF33FF self) -> itkPointSetF3STF33FF"""
        return _itkPointSetPython.itkPointSetF3STF33FF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetF3STF33FF

        Create a new object of the class itkPointSetF3STF33FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF3STF33FF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF3STF33FF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF3STF33FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetF3STF33FF.Clone = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_Clone, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetMaximumNumberOfRegions, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_PassStructure, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetNumberOfPoints, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_SetPoints, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetPoints, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_SetPoint, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetPoint, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_SetPointData, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetPointData, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_SetRequestedRegion, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetRequestedRegion, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_SetBufferedRegion, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetBufferedRegion, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetF3STF33FF_GetPointer, None, itkPointSetF3STF33FF)
itkPointSetF3STF33FF_swigregister = _itkPointSetPython.itkPointSetF3STF33FF_swigregister
itkPointSetF3STF33FF_swigregister(itkPointSetF3STF33FF)

def itkPointSetF3STF33FF___New_orig__() -> "itkPointSetF3STF33_Pointer":
    """itkPointSetF3STF33FF___New_orig__() -> itkPointSetF3STF33_Pointer"""
    return _itkPointSetPython.itkPointSetF3STF33FF___New_orig__()

def itkPointSetF3STF33FF_cast(obj: 'itkLightObject') -> "itkPointSetF3STF33FF *":
    """itkPointSetF3STF33FF_cast(itkLightObject obj) -> itkPointSetF3STF33FF"""
    return _itkPointSetPython.itkPointSetF3STF33FF_cast(obj)

class itkPointSetMD22STMD2222FFMD22(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetMD22STMD2222FFMD22_Pointer":
        """__New_orig__() -> itkPointSetMD22STMD2222FFMD22_Pointer"""
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetMD22STMD2222FFMD22_Pointer":
        """Clone(itkPointSetMD22STMD2222FFMD22 self) -> itkPointSetMD22STMD2222FFMD22_Pointer"""
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetMD22STMD2222FFMD22 self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetMD22STMD2222FFMD22') -> "void":
        """
        PassStructure(itkPointSetMD22STMD2222FFMD22 self, itkPointSetMD22STMD2222FFMD22 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetMD22STMD2222FFMD22 self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF2') -> "void":
        """
        SetPoints(itkPointSetMD22STMD2222FFMD22 self, itkVectorContainerULPF2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF2 const *":
        """
        GetPoints(itkPointSetMD22STMD2222FFMD22 self) -> itkVectorContainerULPF2
        GetPoints(itkPointSetMD22STMD2222FFMD22 self) -> itkVectorContainerULPF2
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        SetPoint(itkPointSetMD22STMD2222FFMD22 self, unsigned long arg0, itkPointF2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF2":
        """
        GetPoint(itkPointSetMD22STMD2222FFMD22 self, unsigned long arg0, itkPointF2 arg1) -> bool
        GetPoint(itkPointSetMD22STMD2222FFMD22 self, unsigned long arg0) -> itkPointF2
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetMD22STMD2222FFMD22 self, itkVectorContainerULMD22 arg0)
        SetPointData(itkPointSetMD22STMD2222FFMD22 self, unsigned long arg0, itkMatrixD22 arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetMD22STMD2222FFMD22 self) -> itkVectorContainerULMD22
        GetPointData(itkPointSetMD22STMD2222FFMD22 self) -> itkVectorContainerULMD22
        GetPointData(itkPointSetMD22STMD2222FFMD22 self, unsigned long arg0, itkMatrixD22 arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetMD22STMD2222FFMD22 self, itkDataObject data)
        SetRequestedRegion(itkPointSetMD22STMD2222FFMD22 self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetMD22STMD2222FFMD22 self) -> long"""
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetMD22STMD2222FFMD22 self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetMD22STMD2222FFMD22 self) -> long"""
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetMD22STMD2222FFMD22

    def cast(obj: 'itkLightObject') -> "itkPointSetMD22STMD2222FFMD22 *":
        """cast(itkLightObject obj) -> itkPointSetMD22STMD2222FFMD22"""
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetMD22STMD2222FFMD22 *":
        """GetPointer(itkPointSetMD22STMD2222FFMD22 self) -> itkPointSetMD22STMD2222FFMD22"""
        return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetMD22STMD2222FFMD22

        Create a new object of the class itkPointSetMD22STMD2222FFMD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetMD22STMD2222FFMD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetMD22STMD2222FFMD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetMD22STMD2222FFMD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetMD22STMD2222FFMD22.Clone = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_Clone, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetMaximumNumberOfRegions, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_PassStructure, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetNumberOfPoints, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetPoints, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPoints, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetPoint, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPoint, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetPointData, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPointData, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetRequestedRegion, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetRequestedRegion, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_SetBufferedRegion, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetBufferedRegion, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetMD22STMD2222FFMD22_GetPointer, None, itkPointSetMD22STMD2222FFMD22)
itkPointSetMD22STMD2222FFMD22_swigregister = _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_swigregister
itkPointSetMD22STMD2222FFMD22_swigregister(itkPointSetMD22STMD2222FFMD22)

def itkPointSetMD22STMD2222FFMD22___New_orig__() -> "itkPointSetMD22STMD2222FFMD22_Pointer":
    """itkPointSetMD22STMD2222FFMD22___New_orig__() -> itkPointSetMD22STMD2222FFMD22_Pointer"""
    return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22___New_orig__()

def itkPointSetMD22STMD2222FFMD22_cast(obj: 'itkLightObject') -> "itkPointSetMD22STMD2222FFMD22 *":
    """itkPointSetMD22STMD2222FFMD22_cast(itkLightObject obj) -> itkPointSetMD22STMD2222FFMD22"""
    return _itkPointSetPython.itkPointSetMD22STMD2222FFMD22_cast(obj)

class itkPointSetMD33STMD3333FFMD33(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetMD33STMD3333FFMD33_Pointer":
        """__New_orig__() -> itkPointSetMD33STMD3333FFMD33_Pointer"""
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetMD33STMD3333FFMD33_Pointer":
        """Clone(itkPointSetMD33STMD3333FFMD33 self) -> itkPointSetMD33STMD3333FFMD33_Pointer"""
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetMD33STMD3333FFMD33 self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetMD33STMD3333FFMD33') -> "void":
        """
        PassStructure(itkPointSetMD33STMD3333FFMD33 self, itkPointSetMD33STMD3333FFMD33 inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetMD33STMD3333FFMD33 self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetMD33STMD3333FFMD33 self, itkVectorContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF3 const *":
        """
        GetPoints(itkPointSetMD33STMD3333FFMD33 self) -> itkVectorContainerULPF3
        GetPoints(itkPointSetMD33STMD3333FFMD33 self) -> itkVectorContainerULPF3
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetMD33STMD3333FFMD33 self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetMD33STMD3333FFMD33 self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetMD33STMD3333FFMD33 self, unsigned long arg0) -> itkPointF3
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetMD33STMD3333FFMD33 self, itkVectorContainerULMD33 arg0)
        SetPointData(itkPointSetMD33STMD3333FFMD33 self, unsigned long arg0, itkMatrixD33 arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetMD33STMD3333FFMD33 self) -> itkVectorContainerULMD33
        GetPointData(itkPointSetMD33STMD3333FFMD33 self) -> itkVectorContainerULMD33
        GetPointData(itkPointSetMD33STMD3333FFMD33 self, unsigned long arg0, itkMatrixD33 arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetMD33STMD3333FFMD33 self, itkDataObject data)
        SetRequestedRegion(itkPointSetMD33STMD3333FFMD33 self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetMD33STMD3333FFMD33 self) -> long"""
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetMD33STMD3333FFMD33 self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetMD33STMD3333FFMD33 self) -> long"""
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetMD33STMD3333FFMD33

    def cast(obj: 'itkLightObject') -> "itkPointSetMD33STMD3333FFMD33 *":
        """cast(itkLightObject obj) -> itkPointSetMD33STMD3333FFMD33"""
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetMD33STMD3333FFMD33 *":
        """GetPointer(itkPointSetMD33STMD3333FFMD33 self) -> itkPointSetMD33STMD3333FFMD33"""
        return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetMD33STMD3333FFMD33

        Create a new object of the class itkPointSetMD33STMD3333FFMD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetMD33STMD3333FFMD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetMD33STMD3333FFMD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetMD33STMD3333FFMD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetMD33STMD3333FFMD33.Clone = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_Clone, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetMaximumNumberOfRegions, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_PassStructure, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetNumberOfPoints, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetPoints, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPoints, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetPoint, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPoint, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetPointData, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPointData, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetRequestedRegion, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetRequestedRegion, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_SetBufferedRegion, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetBufferedRegion, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetMD33STMD3333FFMD33_GetPointer, None, itkPointSetMD33STMD3333FFMD33)
itkPointSetMD33STMD3333FFMD33_swigregister = _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_swigregister
itkPointSetMD33STMD3333FFMD33_swigregister(itkPointSetMD33STMD3333FFMD33)

def itkPointSetMD33STMD3333FFMD33___New_orig__() -> "itkPointSetMD33STMD3333FFMD33_Pointer":
    """itkPointSetMD33STMD3333FFMD33___New_orig__() -> itkPointSetMD33STMD3333FFMD33_Pointer"""
    return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33___New_orig__()

def itkPointSetMD33STMD3333FFMD33_cast(obj: 'itkLightObject') -> "itkPointSetMD33STMD3333FFMD33 *":
    """itkPointSetMD33STMD3333FFMD33_cast(itkLightObject obj) -> itkPointSetMD33STMD3333FFMD33"""
    return _itkPointSetPython.itkPointSetMD33STMD3333FFMD33_cast(obj)

class itkPointSetPD22STD22DD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetPD22STD22DD_Pointer":
        """__New_orig__() -> itkPointSetPD22STD22DD_Pointer"""
        return _itkPointSetPython.itkPointSetPD22STD22DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetPD22STD22DD_Pointer":
        """Clone(itkPointSetPD22STD22DD self) -> itkPointSetPD22STD22DD_Pointer"""
        return _itkPointSetPython.itkPointSetPD22STD22DD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetPD22STD22DD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetPD22STD22DD') -> "void":
        """
        PassStructure(itkPointSetPD22STD22DD self, itkPointSetPD22STD22DD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetPD22STD22DD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD2') -> "void":
        """
        SetPoints(itkPointSetPD22STD22DD self, itkVectorContainerULPD2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPD2 const *":
        """
        GetPoints(itkPointSetPD22STD22DD self) -> itkVectorContainerULPD2
        GetPoints(itkPointSetPD22STD22DD self) -> itkVectorContainerULPD2
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD2') -> "void":
        """
        SetPoint(itkPointSetPD22STD22DD self, unsigned long arg0, itkPointD2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD2":
        """
        GetPoint(itkPointSetPD22STD22DD self, unsigned long arg0, itkPointD2 arg1) -> bool
        GetPoint(itkPointSetPD22STD22DD self, unsigned long arg0) -> itkPointD2
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetPD22STD22DD self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetPD22STD22DD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetPD22STD22DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetPD22STD22DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetPD22STD22DD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetPD22STD22DD self, itkDataObject data)
        SetRequestedRegion(itkPointSetPD22STD22DD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetPD22STD22DD self) -> long"""
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetPD22STD22DD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetPD22STD22DD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetPD22STD22DD self) -> long"""
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetPD22STD22DD

    def cast(obj: 'itkLightObject') -> "itkPointSetPD22STD22DD *":
        """cast(itkLightObject obj) -> itkPointSetPD22STD22DD"""
        return _itkPointSetPython.itkPointSetPD22STD22DD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetPD22STD22DD *":
        """GetPointer(itkPointSetPD22STD22DD self) -> itkPointSetPD22STD22DD"""
        return _itkPointSetPython.itkPointSetPD22STD22DD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetPD22STD22DD

        Create a new object of the class itkPointSetPD22STD22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetPD22STD22DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetPD22STD22DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetPD22STD22DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetPD22STD22DD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_Clone, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetMaximumNumberOfRegions, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_PassStructure, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetNumberOfPoints, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_SetPoints, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetPoints, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_SetPoint, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetPoint, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_SetPointData, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetPointData, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_SetRequestedRegion, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetRequestedRegion, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_SetBufferedRegion, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetBufferedRegion, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetPD22STD22DD_GetPointer, None, itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD_swigregister = _itkPointSetPython.itkPointSetPD22STD22DD_swigregister
itkPointSetPD22STD22DD_swigregister(itkPointSetPD22STD22DD)

def itkPointSetPD22STD22DD___New_orig__() -> "itkPointSetPD22STD22DD_Pointer":
    """itkPointSetPD22STD22DD___New_orig__() -> itkPointSetPD22STD22DD_Pointer"""
    return _itkPointSetPython.itkPointSetPD22STD22DD___New_orig__()

def itkPointSetPD22STD22DD_cast(obj: 'itkLightObject') -> "itkPointSetPD22STD22DD *":
    """itkPointSetPD22STD22DD_cast(itkLightObject obj) -> itkPointSetPD22STD22DD"""
    return _itkPointSetPython.itkPointSetPD22STD22DD_cast(obj)

class itkPointSetPD33STD33DD(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetPD33STD33DD_Pointer":
        """__New_orig__() -> itkPointSetPD33STD33DD_Pointer"""
        return _itkPointSetPython.itkPointSetPD33STD33DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetPD33STD33DD_Pointer":
        """Clone(itkPointSetPD33STD33DD self) -> itkPointSetPD33STD33DD_Pointer"""
        return _itkPointSetPython.itkPointSetPD33STD33DD_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetPD33STD33DD self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetPD33STD33DD') -> "void":
        """
        PassStructure(itkPointSetPD33STD33DD self, itkPointSetPD33STD33DD inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetPD33STD33DD self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPD3') -> "void":
        """
        SetPoints(itkPointSetPD33STD33DD self, itkVectorContainerULPD3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPD3 const *":
        """
        GetPoints(itkPointSetPD33STD33DD self) -> itkVectorContainerULPD3
        GetPoints(itkPointSetPD33STD33DD self) -> itkVectorContainerULPD3
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointD3') -> "void":
        """
        SetPoint(itkPointSetPD33STD33DD self, unsigned long arg0, itkPointD3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointD3":
        """
        GetPoint(itkPointSetPD33STD33DD self, unsigned long arg0, itkPointD3 arg1) -> bool
        GetPoint(itkPointSetPD33STD33DD self, unsigned long arg0) -> itkPointD3
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetPD33STD33DD self, itkVectorContainerULD arg0)
        SetPointData(itkPointSetPD33STD33DD self, unsigned long arg0, double arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetPD33STD33DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetPD33STD33DD self) -> itkVectorContainerULD
        GetPointData(itkPointSetPD33STD33DD self, unsigned long arg0, double * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetPD33STD33DD self, itkDataObject data)
        SetRequestedRegion(itkPointSetPD33STD33DD self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetPD33STD33DD self) -> long"""
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetPD33STD33DD self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetPD33STD33DD_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetPD33STD33DD self) -> long"""
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetPD33STD33DD

    def cast(obj: 'itkLightObject') -> "itkPointSetPD33STD33DD *":
        """cast(itkLightObject obj) -> itkPointSetPD33STD33DD"""
        return _itkPointSetPython.itkPointSetPD33STD33DD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetPD33STD33DD *":
        """GetPointer(itkPointSetPD33STD33DD self) -> itkPointSetPD33STD33DD"""
        return _itkPointSetPython.itkPointSetPD33STD33DD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetPD33STD33DD

        Create a new object of the class itkPointSetPD33STD33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetPD33STD33DD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetPD33STD33DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetPD33STD33DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetPD33STD33DD.Clone = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_Clone, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetMaximumNumberOfRegions, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_PassStructure, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetNumberOfPoints, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_SetPoints, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetPoints, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_SetPoint, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetPoint, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_SetPointData, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetPointData, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_SetRequestedRegion, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetRequestedRegion, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_SetBufferedRegion, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetBufferedRegion, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetPD33STD33DD_GetPointer, None, itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD_swigregister = _itkPointSetPython.itkPointSetPD33STD33DD_swigregister
itkPointSetPD33STD33DD_swigregister(itkPointSetPD33STD33DD)

def itkPointSetPD33STD33DD___New_orig__() -> "itkPointSetPD33STD33DD_Pointer":
    """itkPointSetPD33STD33DD___New_orig__() -> itkPointSetPD33STD33DD_Pointer"""
    return _itkPointSetPython.itkPointSetPD33STD33DD___New_orig__()

def itkPointSetPD33STD33DD_cast(obj: 'itkLightObject') -> "itkPointSetPD33STD33DD *":
    """itkPointSetPD33STD33DD_cast(itkLightObject obj) -> itkPointSetPD33STD33DD"""
    return _itkPointSetPython.itkPointSetPD33STD33DD_cast(obj)

class itkPointSetUI2DSMUI22FFUI(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetUI2DSMUI22FFUI_Pointer":
        """__New_orig__() -> itkPointSetUI2DSMUI22FFUI_Pointer"""
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetUI2DSMUI22FFUI_Pointer":
        """Clone(itkPointSetUI2DSMUI22FFUI self) -> itkPointSetUI2DSMUI22FFUI_Pointer"""
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetUI2DSMUI22FFUI self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetUI2DSMUI22FFUI') -> "void":
        """
        PassStructure(itkPointSetUI2DSMUI22FFUI self, itkPointSetUI2DSMUI22FFUI inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetUI2DSMUI22FFUI self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF2') -> "void":
        """
        SetPoints(itkPointSetUI2DSMUI22FFUI self, itkVectorContainerULPF2 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF2 const *":
        """
        GetPoints(itkPointSetUI2DSMUI22FFUI self) -> itkVectorContainerULPF2
        GetPoints(itkPointSetUI2DSMUI22FFUI self) -> itkVectorContainerULPF2
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF2') -> "void":
        """
        SetPoint(itkPointSetUI2DSMUI22FFUI self, unsigned long arg0, itkPointF2 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF2":
        """
        GetPoint(itkPointSetUI2DSMUI22FFUI self, unsigned long arg0, itkPointF2 arg1) -> bool
        GetPoint(itkPointSetUI2DSMUI22FFUI self, unsigned long arg0) -> itkPointF2
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetUI2DSMUI22FFUI self, itkVectorContainerULUI arg0)
        SetPointData(itkPointSetUI2DSMUI22FFUI self, unsigned long arg0, unsigned int arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetUI2DSMUI22FFUI self) -> itkVectorContainerULUI
        GetPointData(itkPointSetUI2DSMUI22FFUI self) -> itkVectorContainerULUI
        GetPointData(itkPointSetUI2DSMUI22FFUI self, unsigned long arg0, unsigned int * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetUI2DSMUI22FFUI self, itkDataObject data)
        SetRequestedRegion(itkPointSetUI2DSMUI22FFUI self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetUI2DSMUI22FFUI self) -> long"""
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetUI2DSMUI22FFUI self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetUI2DSMUI22FFUI self) -> long"""
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUI2DSMUI22FFUI

    def cast(obj: 'itkLightObject') -> "itkPointSetUI2DSMUI22FFUI *":
        """cast(itkLightObject obj) -> itkPointSetUI2DSMUI22FFUI"""
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetUI2DSMUI22FFUI *":
        """GetPointer(itkPointSetUI2DSMUI22FFUI self) -> itkPointSetUI2DSMUI22FFUI"""
        return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetUI2DSMUI22FFUI

        Create a new object of the class itkPointSetUI2DSMUI22FFUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUI2DSMUI22FFUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetUI2DSMUI22FFUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetUI2DSMUI22FFUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetUI2DSMUI22FFUI.Clone = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_Clone, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetMaximumNumberOfRegions, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_PassStructure, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetNumberOfPoints, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoints, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoints, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoint, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoint, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPointData, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPointData, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetRequestedRegion, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetRequestedRegion, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetBufferedRegion, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetBufferedRegion, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPointer, None, itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI_swigregister = _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_swigregister
itkPointSetUI2DSMUI22FFUI_swigregister(itkPointSetUI2DSMUI22FFUI)

def itkPointSetUI2DSMUI22FFUI___New_orig__() -> "itkPointSetUI2DSMUI22FFUI_Pointer":
    """itkPointSetUI2DSMUI22FFUI___New_orig__() -> itkPointSetUI2DSMUI22FFUI_Pointer"""
    return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI___New_orig__()

def itkPointSetUI2DSMUI22FFUI_cast(obj: 'itkLightObject') -> "itkPointSetUI2DSMUI22FFUI *":
    """itkPointSetUI2DSMUI22FFUI_cast(itkLightObject obj) -> itkPointSetUI2DSMUI22FFUI"""
    return _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_cast(obj)

class itkPointSetUI3DSMUI33FFUI(ITKCommonBasePython.itkDataObject):
    """


    A superclass of the N-dimensional mesh structure; supports point
    (geometric coordinate and attribute) definition.

    PointSet is a superclass of the N-dimensional mesh structure
    (itk::Mesh). It provides the portion of the mesh definition for
    geometric coordinates (and associated attribute or pixel information).
    The defined API provides operations on points but does not tie down
    the underlying implementation and storage. A "MeshTraits" structure
    is used to define the container and identifier to access the points.
    See DefaultStaticMeshTraits for the set of type definitions needed.
    All types that are defined in the "MeshTraits" structure will have
    duplicate typedefs in the resulting mesh itself.

    PointSet has two template parameters. The first is the pixel type, or
    the type of data stored (optionally) with the points. The second is
    the "MeshTraits" structure controlling type information
    characterizing the point set. Most users will be happy with the
    defaults, and will not have to worry about this second argument.

    Template parameters for PointSet:

    TPixelType = The type stored as data for the point.

    TMeshTraits = Type information structure for the point set.

    Wiki Examples:

    All Examples

    C++ includes: itkPointSet.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPointSetUI3DSMUI33FFUI_Pointer":
        """__New_orig__() -> itkPointSetUI3DSMUI33FFUI_Pointer"""
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPointSetUI3DSMUI33FFUI_Pointer":
        """Clone(itkPointSetUI3DSMUI33FFUI self) -> itkPointSetUI3DSMUI33FFUI_Pointer"""
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_Clone(self)


    def GetMaximumNumberOfRegions(self) -> "long":
        """
        GetMaximumNumberOfRegions(itkPointSetUI3DSMUI33FFUI self) -> long

        Get the
        maximum number of regions that this data can be separated into. 
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetMaximumNumberOfRegions(self)


    def PassStructure(self, inputPointSet: 'itkPointSetUI3DSMUI33FFUI') -> "void":
        """
        PassStructure(itkPointSetUI3DSMUI33FFUI self, itkPointSetUI3DSMUI33FFUI inputPointSet)

        PointSet-level
        operation interface. 
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_PassStructure(self, inputPointSet)


    def GetNumberOfPoints(self) -> "unsigned long":
        """GetNumberOfPoints(itkPointSetUI3DSMUI33FFUI self) -> unsigned long"""
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetNumberOfPoints(self)


    def SetPoints(self, arg0: 'itkVectorContainerULPF3') -> "void":
        """
        SetPoints(itkPointSetUI3DSMUI33FFUI self, itkVectorContainerULPF3 arg0)

        Define Set/Get access
        routines for each internal container. Methods also exist to add
        points, cells, etc. one at a time rather than through an entire
        container. 
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoints(self, arg0)


    def GetPoints(self, *args) -> "itkVectorContainerULPF3 const *":
        """
        GetPoints(itkPointSetUI3DSMUI33FFUI self) -> itkVectorContainerULPF3
        GetPoints(itkPointSetUI3DSMUI33FFUI self) -> itkVectorContainerULPF3
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoints(self, *args)


    def SetPoint(self, arg0: 'unsigned long', arg1: 'itkPointF3') -> "void":
        """
        SetPoint(itkPointSetUI3DSMUI33FFUI self, unsigned long arg0, itkPointF3 arg1)

        Access routines to fill
        the Points container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoint(self, arg0, arg1)


    def GetPoint(self, *args) -> "itkPointF3":
        """
        GetPoint(itkPointSetUI3DSMUI33FFUI self, unsigned long arg0, itkPointF3 arg1) -> bool
        GetPoint(itkPointSetUI3DSMUI33FFUI self, unsigned long arg0) -> itkPointF3
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoint(self, *args)


    def SetPointData(self, *args) -> "void":
        """
        SetPointData(itkPointSetUI3DSMUI33FFUI self, itkVectorContainerULUI arg0)
        SetPointData(itkPointSetUI3DSMUI33FFUI self, unsigned long arg0, unsigned int arg1)

        Access routines to
        fill the PointData container, and get information from it. 
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPointData(self, *args)


    def GetPointData(self, *args) -> "bool":
        """
        GetPointData(itkPointSetUI3DSMUI33FFUI self) -> itkVectorContainerULUI
        GetPointData(itkPointSetUI3DSMUI33FFUI self) -> itkVectorContainerULUI
        GetPointData(itkPointSetUI3DSMUI33FFUI self, unsigned long arg0, unsigned int * arg1) -> bool
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPointData(self, *args)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkPointSetUI3DSMUI33FFUI self, itkDataObject data)
        SetRequestedRegion(itkPointSetUI3DSMUI33FFUI self, long const & region)

        Set/Get the
        Requested region 
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "long":
        """GetRequestedRegion(itkPointSetUI3DSMUI33FFUI self) -> long"""
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetRequestedRegion(self)


    def SetBufferedRegion(self, region: 'long const &') -> "void":
        """
        SetBufferedRegion(itkPointSetUI3DSMUI33FFUI self, long const & region)

        Set/Get the
        Buffered region 
        """
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "long":
        """GetBufferedRegion(itkPointSetUI3DSMUI33FFUI self) -> long"""
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetBufferedRegion(self)

    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUI3DSMUI33FFUI

    def cast(obj: 'itkLightObject') -> "itkPointSetUI3DSMUI33FFUI *":
        """cast(itkLightObject obj) -> itkPointSetUI3DSMUI33FFUI"""
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkPointSetUI3DSMUI33FFUI *":
        """GetPointer(itkPointSetUI3DSMUI33FFUI self) -> itkPointSetUI3DSMUI33FFUI"""
        return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkPointSetUI3DSMUI33FFUI

        Create a new object of the class itkPointSetUI3DSMUI33FFUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUI3DSMUI33FFUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetUI3DSMUI33FFUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetUI3DSMUI33FFUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPointSetUI3DSMUI33FFUI.Clone = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_Clone, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetMaximumNumberOfRegions = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetMaximumNumberOfRegions, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.PassStructure = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_PassStructure, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetNumberOfPoints = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetNumberOfPoints, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.SetPoints = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoints, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetPoints = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoints, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.SetPoint = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoint, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetPoint = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoint, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.SetPointData = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPointData, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetPointData = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPointData, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.SetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetRequestedRegion, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetRequestedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetRequestedRegion, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.SetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetBufferedRegion, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetBufferedRegion = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetBufferedRegion, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI.GetPointer = new_instancemethod(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPointer, None, itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI_swigregister = _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_swigregister
itkPointSetUI3DSMUI33FFUI_swigregister(itkPointSetUI3DSMUI33FFUI)

def itkPointSetUI3DSMUI33FFUI___New_orig__() -> "itkPointSetUI3DSMUI33FFUI_Pointer":
    """itkPointSetUI3DSMUI33FFUI___New_orig__() -> itkPointSetUI3DSMUI33FFUI_Pointer"""
    return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI___New_orig__()

def itkPointSetUI3DSMUI33FFUI_cast(obj: 'itkLightObject') -> "itkPointSetUI3DSMUI33FFUI *":
    """itkPointSetUI3DSMUI33FFUI_cast(itkLightObject obj) -> itkPointSetUI3DSMUI33FFUI"""
    return _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_cast(obj)



