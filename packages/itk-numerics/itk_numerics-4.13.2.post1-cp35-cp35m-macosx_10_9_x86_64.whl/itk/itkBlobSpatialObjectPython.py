# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBlobSpatialObjectPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBlobSpatialObjectPython', [dirname(__file__)])
        except ImportError:
            import _itkBlobSpatialObjectPython
            return _itkBlobSpatialObjectPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBlobSpatialObjectPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBlobSpatialObjectPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBlobSpatialObjectPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSpatialObjectPointPython
import itkRGBAPixelPython
import itkFixedArrayPython
import pyBasePython
import ITKCommonBasePython
import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkVectorPython
import itkPointBasedSpatialObjectPython
import itkSpatialObjectBasePython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkScalableAffineTransformPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkOptimizerParametersPython
import itkArrayPython
import itkVariableLengthVectorPython
import itkArray2DPython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkAffineGeometryFramePython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkImageRegionPython
import itkSpatialObjectPropertyPython

def itkBlobSpatialObject3_New():
  return itkBlobSpatialObject3.New()


def itkBlobSpatialObject2_New():
  return itkBlobSpatialObject2.New()

class itkBlobSpatialObject2(itkPointBasedSpatialObjectPython.itkPointBasedSpatialObject2):
    """


    Spatial object representing a potentially amorphous object.

    The BlobSpatialObject is a discretized representation of a "blob",
    which can be taken to be an arbitrary, possibly amorphous shape. The
    representation is a list of the points (voxel centers) contained in
    the object. This can be thought of as an alternate way to represent a
    binary image.

    See:   SpatialObjectPoint Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SpatialObjects/BlobSpatialObject
    Blob

    C++ includes: itkBlobSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlobSpatialObject2_Pointer":
        """__New_orig__() -> itkBlobSpatialObject2_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlobSpatialObject2_Pointer":
        """Clone(itkBlobSpatialObject2 self) -> itkBlobSpatialObject2_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_Clone(self)


    def GetPoints(self, *args) -> "std::vector< itkSpatialObjectPoint2,std::allocator< itkSpatialObjectPoint2 > > const &":
        """
        GetPoints(itkBlobSpatialObject2 self) -> vectoritkSpatialObjectPoint2
        GetPoints(itkBlobSpatialObject2 self) -> vectoritkSpatialObjectPoint2

        Returns a reference to
        the list of the Blob points. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_GetPoints(self, *args)


    def SetPoints(self, newPoints: 'vectoritkSpatialObjectPoint2') -> "void":
        """
        SetPoints(itkBlobSpatialObject2 self, vectoritkSpatialObjectPoint2 newPoints)

        Set the list of Blob
        points. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_SetPoints(self, newPoints)


    def GetPoint(self, *args) -> "itkSpatialObjectPoint2 *":
        """
        GetPoint(itkBlobSpatialObject2 self, unsigned long id) -> itkSpatialObjectPoint2
        GetPoint(itkBlobSpatialObject2 self, unsigned long id) -> itkSpatialObjectPoint2

        Return a point in the list
        given the index 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_GetPoint(self, *args)


    def IsEvaluableAt(self, point: 'itkPointD2', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        IsEvaluableAt(itkBlobSpatialObject2 self, itkPointD2 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkBlobSpatialObject2 self, itkPointD2 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkBlobSpatialObject2 self, itkPointD2 point) -> bool

        Returns true if the
        Blob is evaluable at the requested point, false otherwise. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point: 'itkPointD2', value: 'double &', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        ValueAt(itkBlobSpatialObject2 self, itkPointD2 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkBlobSpatialObject2 self, itkPointD2 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkBlobSpatialObject2 self, itkPointD2 point, double & value) -> bool

        Returns the value of the
        Blob at that point. Currently this function returns a binary value,
        but it might want to return a degree of membership in case of fuzzy
        Blobs. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args) -> "bool":
        """
        IsInside(itkBlobSpatialObject2 self, itkPointD2 point, unsigned int depth, char * name) -> bool
        IsInside(itkBlobSpatialObject2 self, itkPointD2 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_IsInside(self, *args)

    __swig_destroy__ = _itkBlobSpatialObjectPython.delete_itkBlobSpatialObject2

    def cast(obj: 'itkLightObject') -> "itkBlobSpatialObject2 *":
        """cast(itkLightObject obj) -> itkBlobSpatialObject2"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkBlobSpatialObject2 *":
        """GetPointer(itkBlobSpatialObject2 self) -> itkBlobSpatialObject2"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkBlobSpatialObject2

        Create a new object of the class itkBlobSpatialObject2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlobSpatialObject2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlobSpatialObject2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlobSpatialObject2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlobSpatialObject2.Clone = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_Clone, None, itkBlobSpatialObject2)
itkBlobSpatialObject2.GetPoints = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_GetPoints, None, itkBlobSpatialObject2)
itkBlobSpatialObject2.SetPoints = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_SetPoints, None, itkBlobSpatialObject2)
itkBlobSpatialObject2.GetPoint = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_GetPoint, None, itkBlobSpatialObject2)
itkBlobSpatialObject2.IsEvaluableAt = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_IsEvaluableAt, None, itkBlobSpatialObject2)
itkBlobSpatialObject2.ValueAt = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_ValueAt, None, itkBlobSpatialObject2)
itkBlobSpatialObject2.IsInside = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_IsInside, None, itkBlobSpatialObject2)
itkBlobSpatialObject2.GetPointer = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject2_GetPointer, None, itkBlobSpatialObject2)
itkBlobSpatialObject2_swigregister = _itkBlobSpatialObjectPython.itkBlobSpatialObject2_swigregister
itkBlobSpatialObject2_swigregister(itkBlobSpatialObject2)

def itkBlobSpatialObject2___New_orig__() -> "itkBlobSpatialObject2_Pointer":
    """itkBlobSpatialObject2___New_orig__() -> itkBlobSpatialObject2_Pointer"""
    return _itkBlobSpatialObjectPython.itkBlobSpatialObject2___New_orig__()

def itkBlobSpatialObject2_cast(obj: 'itkLightObject') -> "itkBlobSpatialObject2 *":
    """itkBlobSpatialObject2_cast(itkLightObject obj) -> itkBlobSpatialObject2"""
    return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_cast(obj)

class itkBlobSpatialObject3(itkPointBasedSpatialObjectPython.itkPointBasedSpatialObject3):
    """


    Spatial object representing a potentially amorphous object.

    The BlobSpatialObject is a discretized representation of a "blob",
    which can be taken to be an arbitrary, possibly amorphous shape. The
    representation is a list of the points (voxel centers) contained in
    the object. This can be thought of as an alternate way to represent a
    binary image.

    See:   SpatialObjectPoint Wiki Examples:  All Examples

    https://www.itk.org/Wiki/ITK/Examples/SpatialObjects/BlobSpatialObject
    Blob

    C++ includes: itkBlobSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBlobSpatialObject3_Pointer":
        """__New_orig__() -> itkBlobSpatialObject3_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBlobSpatialObject3_Pointer":
        """Clone(itkBlobSpatialObject3 self) -> itkBlobSpatialObject3_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_Clone(self)


    def GetPoints(self, *args) -> "std::vector< itkSpatialObjectPoint3,std::allocator< itkSpatialObjectPoint3 > > const &":
        """
        GetPoints(itkBlobSpatialObject3 self) -> vectoritkSpatialObjectPoint3
        GetPoints(itkBlobSpatialObject3 self) -> vectoritkSpatialObjectPoint3

        Returns a reference to
        the list of the Blob points. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_GetPoints(self, *args)


    def SetPoints(self, newPoints: 'vectoritkSpatialObjectPoint3') -> "void":
        """
        SetPoints(itkBlobSpatialObject3 self, vectoritkSpatialObjectPoint3 newPoints)

        Set the list of Blob
        points. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_SetPoints(self, newPoints)


    def GetPoint(self, *args) -> "itkSpatialObjectPoint3 *":
        """
        GetPoint(itkBlobSpatialObject3 self, unsigned long id) -> itkSpatialObjectPoint3
        GetPoint(itkBlobSpatialObject3 self, unsigned long id) -> itkSpatialObjectPoint3

        Return a point in the list
        given the index 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_GetPoint(self, *args)


    def IsEvaluableAt(self, point: 'itkPointD3', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        IsEvaluableAt(itkBlobSpatialObject3 self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkBlobSpatialObject3 self, itkPointD3 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkBlobSpatialObject3 self, itkPointD3 point) -> bool

        Returns true if the
        Blob is evaluable at the requested point, false otherwise. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point: 'itkPointD3', value: 'double &', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        ValueAt(itkBlobSpatialObject3 self, itkPointD3 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkBlobSpatialObject3 self, itkPointD3 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkBlobSpatialObject3 self, itkPointD3 point, double & value) -> bool

        Returns the value of the
        Blob at that point. Currently this function returns a binary value,
        but it might want to return a degree of membership in case of fuzzy
        Blobs. 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args) -> "bool":
        """
        IsInside(itkBlobSpatialObject3 self, itkPointD3 point, unsigned int depth, char * name) -> bool
        IsInside(itkBlobSpatialObject3 self, itkPointD3 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_IsInside(self, *args)

    __swig_destroy__ = _itkBlobSpatialObjectPython.delete_itkBlobSpatialObject3

    def cast(obj: 'itkLightObject') -> "itkBlobSpatialObject3 *":
        """cast(itkLightObject obj) -> itkBlobSpatialObject3"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkBlobSpatialObject3 *":
        """GetPointer(itkBlobSpatialObject3 self) -> itkBlobSpatialObject3"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkBlobSpatialObject3

        Create a new object of the class itkBlobSpatialObject3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlobSpatialObject3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBlobSpatialObject3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBlobSpatialObject3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBlobSpatialObject3.Clone = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_Clone, None, itkBlobSpatialObject3)
itkBlobSpatialObject3.GetPoints = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_GetPoints, None, itkBlobSpatialObject3)
itkBlobSpatialObject3.SetPoints = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_SetPoints, None, itkBlobSpatialObject3)
itkBlobSpatialObject3.GetPoint = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_GetPoint, None, itkBlobSpatialObject3)
itkBlobSpatialObject3.IsEvaluableAt = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_IsEvaluableAt, None, itkBlobSpatialObject3)
itkBlobSpatialObject3.ValueAt = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_ValueAt, None, itkBlobSpatialObject3)
itkBlobSpatialObject3.IsInside = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_IsInside, None, itkBlobSpatialObject3)
itkBlobSpatialObject3.GetPointer = new_instancemethod(_itkBlobSpatialObjectPython.itkBlobSpatialObject3_GetPointer, None, itkBlobSpatialObject3)
itkBlobSpatialObject3_swigregister = _itkBlobSpatialObjectPython.itkBlobSpatialObject3_swigregister
itkBlobSpatialObject3_swigregister(itkBlobSpatialObject3)

def itkBlobSpatialObject3___New_orig__() -> "itkBlobSpatialObject3_Pointer":
    """itkBlobSpatialObject3___New_orig__() -> itkBlobSpatialObject3_Pointer"""
    return _itkBlobSpatialObjectPython.itkBlobSpatialObject3___New_orig__()

def itkBlobSpatialObject3_cast(obj: 'itkLightObject') -> "itkBlobSpatialObject3 *":
    """itkBlobSpatialObject3_cast(itkLightObject obj) -> itkBlobSpatialObject3"""
    return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_cast(obj)



