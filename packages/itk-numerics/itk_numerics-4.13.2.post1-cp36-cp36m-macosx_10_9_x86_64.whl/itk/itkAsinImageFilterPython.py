# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAsinImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAsinImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAsinImageFilterPython
            return _itkAsinImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAsinImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAsinImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAsinImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import itkImagePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkMatrixPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourceCommonPython
import itkImageToImageFilterBPython

def itkAsinImageFilterIF3IF3_New():
  return itkAsinImageFilterIF3IF3.New()


def itkAsinImageFilterIF3IF3_Superclass_New():
  return itkAsinImageFilterIF3IF3_Superclass.New()


def itkAsinImageFilterIF2IF2_New():
  return itkAsinImageFilterIF2IF2.New()


def itkAsinImageFilterIF2IF2_Superclass_New():
  return itkAsinImageFilterIF2IF2_Superclass.New()


def itkAsinImageFilterIUS3IUS3_New():
  return itkAsinImageFilterIUS3IUS3.New()


def itkAsinImageFilterIUS3IUS3_Superclass_New():
  return itkAsinImageFilterIUS3IUS3_Superclass.New()


def itkAsinImageFilterIUS2IUS2_New():
  return itkAsinImageFilterIUS2IUS2.New()


def itkAsinImageFilterIUS2IUS2_Superclass_New():
  return itkAsinImageFilterIUS2IUS2_Superclass.New()


def itkAsinImageFilterIUC3IUC3_New():
  return itkAsinImageFilterIUC3IUC3.New()


def itkAsinImageFilterIUC3IUC3_Superclass_New():
  return itkAsinImageFilterIUC3IUC3_Superclass.New()


def itkAsinImageFilterIUC2IUC2_New():
  return itkAsinImageFilterIUC2IUC2.New()


def itkAsinImageFilterIUC2IUC2_Superclass_New():
  return itkAsinImageFilterIUC2IUC2_Superclass.New()


def itkAsinImageFilterISS3ISS3_New():
  return itkAsinImageFilterISS3ISS3.New()


def itkAsinImageFilterISS3ISS3_Superclass_New():
  return itkAsinImageFilterISS3ISS3_Superclass.New()


def itkAsinImageFilterISS2ISS2_New():
  return itkAsinImageFilterISS2ISS2.New()


def itkAsinImageFilterISS2ISS2_Superclass_New():
  return itkAsinImageFilterISS2ISS2_Superclass.New()

class itkAsinImageFilterIF2IF2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """Proxy of C++ itkAsinImageFilterIF2IF2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIF2IF2_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterIF2IF2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIF2IF2_Superclass_Pointer":
        """Clone(itkAsinImageFilterIF2IF2_Superclass self) -> itkAsinImageFilterIF2IF2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< float,float > const &":
        """
        GetFunctor(itkAsinImageFilterIF2IF2_Superclass self) -> itk::Functor::Asin< float,float >
        GetFunctor(itkAsinImageFilterIF2IF2_Superclass self) -> itk::Functor::Asin< float,float > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< float,float > const &') -> "void":
        """SetFunctor(itkAsinImageFilterIF2IF2_Superclass self, itk::Functor::Asin< float,float > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF2IF2_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF2IF2_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIF2IF2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIF2IF2_Superclass *":
        """GetPointer(itkAsinImageFilterIF2IF2_Superclass self) -> itkAsinImageFilterIF2IF2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF2IF2_Superclass

        Create a new object of the class itkAsinImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF2IF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF2IF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIF2IF2_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_Clone, None, itkAsinImageFilterIF2IF2_Superclass)
itkAsinImageFilterIF2IF2_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_GetFunctor, None, itkAsinImageFilterIF2IF2_Superclass)
itkAsinImageFilterIF2IF2_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_SetFunctor, None, itkAsinImageFilterIF2IF2_Superclass)
itkAsinImageFilterIF2IF2_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_GetPointer, None, itkAsinImageFilterIF2IF2_Superclass)
itkAsinImageFilterIF2IF2_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_swigregister
itkAsinImageFilterIF2IF2_Superclass_swigregister(itkAsinImageFilterIF2IF2_Superclass)

def itkAsinImageFilterIF2IF2_Superclass___New_orig__() -> "itkAsinImageFilterIF2IF2_Superclass_Pointer":
    """itkAsinImageFilterIF2IF2_Superclass___New_orig__() -> itkAsinImageFilterIF2IF2_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass___New_orig__()

def itkAsinImageFilterIF2IF2_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF2IF2_Superclass *":
    """itkAsinImageFilterIF2IF2_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterIF2IF2_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Superclass_cast(obj)

class itkAsinImageFilterIF3IF3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ itkAsinImageFilterIF3IF3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIF3IF3_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterIF3IF3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIF3IF3_Superclass_Pointer":
        """Clone(itkAsinImageFilterIF3IF3_Superclass self) -> itkAsinImageFilterIF3IF3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< float,float > const &":
        """
        GetFunctor(itkAsinImageFilterIF3IF3_Superclass self) -> itk::Functor::Asin< float,float >
        GetFunctor(itkAsinImageFilterIF3IF3_Superclass self) -> itk::Functor::Asin< float,float > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< float,float > const &') -> "void":
        """SetFunctor(itkAsinImageFilterIF3IF3_Superclass self, itk::Functor::Asin< float,float > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF3IF3_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF3IF3_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIF3IF3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIF3IF3_Superclass *":
        """GetPointer(itkAsinImageFilterIF3IF3_Superclass self) -> itkAsinImageFilterIF3IF3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF3IF3_Superclass

        Create a new object of the class itkAsinImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF3IF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF3IF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIF3IF3_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_Clone, None, itkAsinImageFilterIF3IF3_Superclass)
itkAsinImageFilterIF3IF3_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_GetFunctor, None, itkAsinImageFilterIF3IF3_Superclass)
itkAsinImageFilterIF3IF3_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_SetFunctor, None, itkAsinImageFilterIF3IF3_Superclass)
itkAsinImageFilterIF3IF3_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_GetPointer, None, itkAsinImageFilterIF3IF3_Superclass)
itkAsinImageFilterIF3IF3_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_swigregister
itkAsinImageFilterIF3IF3_Superclass_swigregister(itkAsinImageFilterIF3IF3_Superclass)

def itkAsinImageFilterIF3IF3_Superclass___New_orig__() -> "itkAsinImageFilterIF3IF3_Superclass_Pointer":
    """itkAsinImageFilterIF3IF3_Superclass___New_orig__() -> itkAsinImageFilterIF3IF3_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass___New_orig__()

def itkAsinImageFilterIF3IF3_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF3IF3_Superclass *":
    """itkAsinImageFilterIF3IF3_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterIF3IF3_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Superclass_cast(obj)

class itkAsinImageFilterISS2ISS2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    """Proxy of C++ itkAsinImageFilterISS2ISS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterISS2ISS2_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterISS2ISS2_Superclass_Pointer":
        """Clone(itkAsinImageFilterISS2ISS2_Superclass self) -> itkAsinImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< short,short > const &":
        """
        GetFunctor(itkAsinImageFilterISS2ISS2_Superclass self) -> itk::Functor::Asin< short,short >
        GetFunctor(itkAsinImageFilterISS2ISS2_Superclass self) -> itk::Functor::Asin< short,short > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< short,short > const &') -> "void":
        """SetFunctor(itkAsinImageFilterISS2ISS2_Superclass self, itk::Functor::Asin< short,short > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS2ISS2_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS2ISS2_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterISS2ISS2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterISS2ISS2_Superclass *":
        """GetPointer(itkAsinImageFilterISS2ISS2_Superclass self) -> itkAsinImageFilterISS2ISS2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS2ISS2_Superclass

        Create a new object of the class itkAsinImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS2ISS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS2ISS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterISS2ISS2_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_Clone, None, itkAsinImageFilterISS2ISS2_Superclass)
itkAsinImageFilterISS2ISS2_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_GetFunctor, None, itkAsinImageFilterISS2ISS2_Superclass)
itkAsinImageFilterISS2ISS2_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_SetFunctor, None, itkAsinImageFilterISS2ISS2_Superclass)
itkAsinImageFilterISS2ISS2_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_GetPointer, None, itkAsinImageFilterISS2ISS2_Superclass)
itkAsinImageFilterISS2ISS2_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_swigregister
itkAsinImageFilterISS2ISS2_Superclass_swigregister(itkAsinImageFilterISS2ISS2_Superclass)

def itkAsinImageFilterISS2ISS2_Superclass___New_orig__() -> "itkAsinImageFilterISS2ISS2_Superclass_Pointer":
    """itkAsinImageFilterISS2ISS2_Superclass___New_orig__() -> itkAsinImageFilterISS2ISS2_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass___New_orig__()

def itkAsinImageFilterISS2ISS2_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS2ISS2_Superclass *":
    """itkAsinImageFilterISS2ISS2_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterISS2ISS2_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Superclass_cast(obj)

class itkAsinImageFilterISS3ISS3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    """Proxy of C++ itkAsinImageFilterISS3ISS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterISS3ISS3_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterISS3ISS3_Superclass_Pointer":
        """Clone(itkAsinImageFilterISS3ISS3_Superclass self) -> itkAsinImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< short,short > const &":
        """
        GetFunctor(itkAsinImageFilterISS3ISS3_Superclass self) -> itk::Functor::Asin< short,short >
        GetFunctor(itkAsinImageFilterISS3ISS3_Superclass self) -> itk::Functor::Asin< short,short > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< short,short > const &') -> "void":
        """SetFunctor(itkAsinImageFilterISS3ISS3_Superclass self, itk::Functor::Asin< short,short > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS3ISS3_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS3ISS3_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterISS3ISS3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterISS3ISS3_Superclass *":
        """GetPointer(itkAsinImageFilterISS3ISS3_Superclass self) -> itkAsinImageFilterISS3ISS3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS3ISS3_Superclass

        Create a new object of the class itkAsinImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS3ISS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS3ISS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterISS3ISS3_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_Clone, None, itkAsinImageFilterISS3ISS3_Superclass)
itkAsinImageFilterISS3ISS3_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_GetFunctor, None, itkAsinImageFilterISS3ISS3_Superclass)
itkAsinImageFilterISS3ISS3_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_SetFunctor, None, itkAsinImageFilterISS3ISS3_Superclass)
itkAsinImageFilterISS3ISS3_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_GetPointer, None, itkAsinImageFilterISS3ISS3_Superclass)
itkAsinImageFilterISS3ISS3_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_swigregister
itkAsinImageFilterISS3ISS3_Superclass_swigregister(itkAsinImageFilterISS3ISS3_Superclass)

def itkAsinImageFilterISS3ISS3_Superclass___New_orig__() -> "itkAsinImageFilterISS3ISS3_Superclass_Pointer":
    """itkAsinImageFilterISS3ISS3_Superclass___New_orig__() -> itkAsinImageFilterISS3ISS3_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass___New_orig__()

def itkAsinImageFilterISS3ISS3_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS3ISS3_Superclass *":
    """itkAsinImageFilterISS3ISS3_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterISS3ISS3_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Superclass_cast(obj)

class itkAsinImageFilterIUC2IUC2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    """Proxy of C++ itkAsinImageFilterIUC2IUC2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUC2IUC2_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUC2IUC2_Superclass_Pointer":
        """Clone(itkAsinImageFilterIUC2IUC2_Superclass self) -> itkAsinImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< unsigned char,unsigned char > const &":
        """
        GetFunctor(itkAsinImageFilterIUC2IUC2_Superclass self) -> itk::Functor::Asin< unsigned char,unsigned char >
        GetFunctor(itkAsinImageFilterIUC2IUC2_Superclass self) -> itk::Functor::Asin< unsigned char,unsigned char > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< unsigned char,unsigned char > const &') -> "void":
        """SetFunctor(itkAsinImageFilterIUC2IUC2_Superclass self, itk::Functor::Asin< unsigned char,unsigned char > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC2IUC2_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC2IUC2_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUC2IUC2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUC2IUC2_Superclass *":
        """GetPointer(itkAsinImageFilterIUC2IUC2_Superclass self) -> itkAsinImageFilterIUC2IUC2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkAsinImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC2IUC2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUC2IUC2_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_Clone, None, itkAsinImageFilterIUC2IUC2_Superclass)
itkAsinImageFilterIUC2IUC2_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_GetFunctor, None, itkAsinImageFilterIUC2IUC2_Superclass)
itkAsinImageFilterIUC2IUC2_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_SetFunctor, None, itkAsinImageFilterIUC2IUC2_Superclass)
itkAsinImageFilterIUC2IUC2_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_GetPointer, None, itkAsinImageFilterIUC2IUC2_Superclass)
itkAsinImageFilterIUC2IUC2_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_swigregister
itkAsinImageFilterIUC2IUC2_Superclass_swigregister(itkAsinImageFilterIUC2IUC2_Superclass)

def itkAsinImageFilterIUC2IUC2_Superclass___New_orig__() -> "itkAsinImageFilterIUC2IUC2_Superclass_Pointer":
    """itkAsinImageFilterIUC2IUC2_Superclass___New_orig__() -> itkAsinImageFilterIUC2IUC2_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass___New_orig__()

def itkAsinImageFilterIUC2IUC2_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC2IUC2_Superclass *":
    """itkAsinImageFilterIUC2IUC2_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterIUC2IUC2_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Superclass_cast(obj)

class itkAsinImageFilterIUC3IUC3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    """Proxy of C++ itkAsinImageFilterIUC3IUC3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUC3IUC3_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUC3IUC3_Superclass_Pointer":
        """Clone(itkAsinImageFilterIUC3IUC3_Superclass self) -> itkAsinImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< unsigned char,unsigned char > const &":
        """
        GetFunctor(itkAsinImageFilterIUC3IUC3_Superclass self) -> itk::Functor::Asin< unsigned char,unsigned char >
        GetFunctor(itkAsinImageFilterIUC3IUC3_Superclass self) -> itk::Functor::Asin< unsigned char,unsigned char > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< unsigned char,unsigned char > const &') -> "void":
        """SetFunctor(itkAsinImageFilterIUC3IUC3_Superclass self, itk::Functor::Asin< unsigned char,unsigned char > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC3IUC3_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC3IUC3_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUC3IUC3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUC3IUC3_Superclass *":
        """GetPointer(itkAsinImageFilterIUC3IUC3_Superclass self) -> itkAsinImageFilterIUC3IUC3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkAsinImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC3IUC3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUC3IUC3_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_Clone, None, itkAsinImageFilterIUC3IUC3_Superclass)
itkAsinImageFilterIUC3IUC3_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_GetFunctor, None, itkAsinImageFilterIUC3IUC3_Superclass)
itkAsinImageFilterIUC3IUC3_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_SetFunctor, None, itkAsinImageFilterIUC3IUC3_Superclass)
itkAsinImageFilterIUC3IUC3_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_GetPointer, None, itkAsinImageFilterIUC3IUC3_Superclass)
itkAsinImageFilterIUC3IUC3_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_swigregister
itkAsinImageFilterIUC3IUC3_Superclass_swigregister(itkAsinImageFilterIUC3IUC3_Superclass)

def itkAsinImageFilterIUC3IUC3_Superclass___New_orig__() -> "itkAsinImageFilterIUC3IUC3_Superclass_Pointer":
    """itkAsinImageFilterIUC3IUC3_Superclass___New_orig__() -> itkAsinImageFilterIUC3IUC3_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass___New_orig__()

def itkAsinImageFilterIUC3IUC3_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC3IUC3_Superclass *":
    """itkAsinImageFilterIUC3IUC3_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterIUC3IUC3_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Superclass_cast(obj)

class itkAsinImageFilterIUS2IUS2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    """Proxy of C++ itkAsinImageFilterIUS2IUS2_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUS2IUS2_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUS2IUS2_Superclass_Pointer":
        """Clone(itkAsinImageFilterIUS2IUS2_Superclass self) -> itkAsinImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< unsigned short,unsigned short > const &":
        """
        GetFunctor(itkAsinImageFilterIUS2IUS2_Superclass self) -> itk::Functor::Asin< unsigned short,unsigned short >
        GetFunctor(itkAsinImageFilterIUS2IUS2_Superclass self) -> itk::Functor::Asin< unsigned short,unsigned short > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< unsigned short,unsigned short > const &') -> "void":
        """SetFunctor(itkAsinImageFilterIUS2IUS2_Superclass self, itk::Functor::Asin< unsigned short,unsigned short > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS2IUS2_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS2IUS2_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUS2IUS2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUS2IUS2_Superclass *":
        """GetPointer(itkAsinImageFilterIUS2IUS2_Superclass self) -> itkAsinImageFilterIUS2IUS2_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkAsinImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS2IUS2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUS2IUS2_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_Clone, None, itkAsinImageFilterIUS2IUS2_Superclass)
itkAsinImageFilterIUS2IUS2_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_GetFunctor, None, itkAsinImageFilterIUS2IUS2_Superclass)
itkAsinImageFilterIUS2IUS2_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_SetFunctor, None, itkAsinImageFilterIUS2IUS2_Superclass)
itkAsinImageFilterIUS2IUS2_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_GetPointer, None, itkAsinImageFilterIUS2IUS2_Superclass)
itkAsinImageFilterIUS2IUS2_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_swigregister
itkAsinImageFilterIUS2IUS2_Superclass_swigregister(itkAsinImageFilterIUS2IUS2_Superclass)

def itkAsinImageFilterIUS2IUS2_Superclass___New_orig__() -> "itkAsinImageFilterIUS2IUS2_Superclass_Pointer":
    """itkAsinImageFilterIUS2IUS2_Superclass___New_orig__() -> itkAsinImageFilterIUS2IUS2_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass___New_orig__()

def itkAsinImageFilterIUS2IUS2_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS2IUS2_Superclass *":
    """itkAsinImageFilterIUS2IUS2_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterIUS2IUS2_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Superclass_cast(obj)

class itkAsinImageFilterIUS3IUS3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    """Proxy of C++ itkAsinImageFilterIUS3IUS3_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUS3IUS3_Superclass_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUS3IUS3_Superclass_Pointer":
        """Clone(itkAsinImageFilterIUS3IUS3_Superclass self) -> itkAsinImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_Clone(self)


    def GetFunctor(self, *args) -> "itk::Functor::Asin< unsigned short,unsigned short > const &":
        """
        GetFunctor(itkAsinImageFilterIUS3IUS3_Superclass self) -> itk::Functor::Asin< unsigned short,unsigned short >
        GetFunctor(itkAsinImageFilterIUS3IUS3_Superclass self) -> itk::Functor::Asin< unsigned short,unsigned short > const &
        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'itk::Functor::Asin< unsigned short,unsigned short > const &') -> "void":
        """SetFunctor(itkAsinImageFilterIUS3IUS3_Superclass self, itk::Functor::Asin< unsigned short,unsigned short > const & functor)"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_SetFunctor(self, functor)

    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS3IUS3_Superclass

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS3IUS3_Superclass *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUS3IUS3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUS3IUS3_Superclass *":
        """GetPointer(itkAsinImageFilterIUS3IUS3_Superclass self) -> itkAsinImageFilterIUS3IUS3_Superclass"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkAsinImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS3IUS3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUS3IUS3_Superclass.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_Clone, None, itkAsinImageFilterIUS3IUS3_Superclass)
itkAsinImageFilterIUS3IUS3_Superclass.GetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_GetFunctor, None, itkAsinImageFilterIUS3IUS3_Superclass)
itkAsinImageFilterIUS3IUS3_Superclass.SetFunctor = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_SetFunctor, None, itkAsinImageFilterIUS3IUS3_Superclass)
itkAsinImageFilterIUS3IUS3_Superclass.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_GetPointer, None, itkAsinImageFilterIUS3IUS3_Superclass)
itkAsinImageFilterIUS3IUS3_Superclass_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_swigregister
itkAsinImageFilterIUS3IUS3_Superclass_swigregister(itkAsinImageFilterIUS3IUS3_Superclass)

def itkAsinImageFilterIUS3IUS3_Superclass___New_orig__() -> "itkAsinImageFilterIUS3IUS3_Superclass_Pointer":
    """itkAsinImageFilterIUS3IUS3_Superclass___New_orig__() -> itkAsinImageFilterIUS3IUS3_Superclass_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass___New_orig__()

def itkAsinImageFilterIUS3IUS3_Superclass_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS3IUS3_Superclass *":
    """itkAsinImageFilterIUS3IUS3_Superclass_cast(itkLightObject obj) -> itkAsinImageFilterIUS3IUS3_Superclass"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Superclass_cast(obj)

class itkAsinImageFilterIF2IF2(itkAsinImageFilterIF2IF2_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkAsinImageFilterIF2IF2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIF2IF2_Pointer":
        """Clone(itkAsinImageFilterIF2IF2 self) -> itkAsinImageFilterIF2IF2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIF2IF2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIF2IF2 *":
        """GetPointer(itkAsinImageFilterIF2IF2 self) -> itkAsinImageFilterIF2IF2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF2IF2

        Create a new object of the class itkAsinImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIF2IF2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Clone, None, itkAsinImageFilterIF2IF2)
itkAsinImageFilterIF2IF2.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_GetPointer, None, itkAsinImageFilterIF2IF2)
itkAsinImageFilterIF2IF2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_swigregister
itkAsinImageFilterIF2IF2_swigregister(itkAsinImageFilterIF2IF2)

def itkAsinImageFilterIF2IF2___New_orig__() -> "itkAsinImageFilterIF2IF2_Pointer":
    """itkAsinImageFilterIF2IF2___New_orig__() -> itkAsinImageFilterIF2IF2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2___New_orig__()

def itkAsinImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF2IF2 *":
    """itkAsinImageFilterIF2IF2_cast(itkLightObject obj) -> itkAsinImageFilterIF2IF2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_cast(obj)

class itkAsinImageFilterIF3IF3(itkAsinImageFilterIF3IF3_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkAsinImageFilterIF3IF3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIF3IF3_Pointer":
        """Clone(itkAsinImageFilterIF3IF3 self) -> itkAsinImageFilterIF3IF3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIF3IF3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIF3IF3 *":
        """GetPointer(itkAsinImageFilterIF3IF3 self) -> itkAsinImageFilterIF3IF3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF3IF3

        Create a new object of the class itkAsinImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIF3IF3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Clone, None, itkAsinImageFilterIF3IF3)
itkAsinImageFilterIF3IF3.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_GetPointer, None, itkAsinImageFilterIF3IF3)
itkAsinImageFilterIF3IF3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_swigregister
itkAsinImageFilterIF3IF3_swigregister(itkAsinImageFilterIF3IF3)

def itkAsinImageFilterIF3IF3___New_orig__() -> "itkAsinImageFilterIF3IF3_Pointer":
    """itkAsinImageFilterIF3IF3___New_orig__() -> itkAsinImageFilterIF3IF3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3___New_orig__()

def itkAsinImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF3IF3 *":
    """itkAsinImageFilterIF3IF3_cast(itkLightObject obj) -> itkAsinImageFilterIF3IF3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_cast(obj)

class itkAsinImageFilterISS2ISS2(itkAsinImageFilterISS2ISS2_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkAsinImageFilterISS2ISS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterISS2ISS2_Pointer":
        """Clone(itkAsinImageFilterISS2ISS2 self) -> itkAsinImageFilterISS2ISS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterISS2ISS2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterISS2ISS2 *":
        """GetPointer(itkAsinImageFilterISS2ISS2 self) -> itkAsinImageFilterISS2ISS2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS2ISS2

        Create a new object of the class itkAsinImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterISS2ISS2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Clone, None, itkAsinImageFilterISS2ISS2)
itkAsinImageFilterISS2ISS2.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_GetPointer, None, itkAsinImageFilterISS2ISS2)
itkAsinImageFilterISS2ISS2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_swigregister
itkAsinImageFilterISS2ISS2_swigregister(itkAsinImageFilterISS2ISS2)

def itkAsinImageFilterISS2ISS2___New_orig__() -> "itkAsinImageFilterISS2ISS2_Pointer":
    """itkAsinImageFilterISS2ISS2___New_orig__() -> itkAsinImageFilterISS2ISS2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2___New_orig__()

def itkAsinImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS2ISS2 *":
    """itkAsinImageFilterISS2ISS2_cast(itkLightObject obj) -> itkAsinImageFilterISS2ISS2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_cast(obj)

class itkAsinImageFilterISS3ISS3(itkAsinImageFilterISS3ISS3_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkAsinImageFilterISS3ISS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterISS3ISS3_Pointer":
        """Clone(itkAsinImageFilterISS3ISS3 self) -> itkAsinImageFilterISS3ISS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterISS3ISS3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterISS3ISS3 *":
        """GetPointer(itkAsinImageFilterISS3ISS3 self) -> itkAsinImageFilterISS3ISS3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS3ISS3

        Create a new object of the class itkAsinImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterISS3ISS3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Clone, None, itkAsinImageFilterISS3ISS3)
itkAsinImageFilterISS3ISS3.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_GetPointer, None, itkAsinImageFilterISS3ISS3)
itkAsinImageFilterISS3ISS3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_swigregister
itkAsinImageFilterISS3ISS3_swigregister(itkAsinImageFilterISS3ISS3)

def itkAsinImageFilterISS3ISS3___New_orig__() -> "itkAsinImageFilterISS3ISS3_Pointer":
    """itkAsinImageFilterISS3ISS3___New_orig__() -> itkAsinImageFilterISS3ISS3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3___New_orig__()

def itkAsinImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS3ISS3 *":
    """itkAsinImageFilterISS3ISS3_cast(itkLightObject obj) -> itkAsinImageFilterISS3ISS3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_cast(obj)

class itkAsinImageFilterIUC2IUC2(itkAsinImageFilterIUC2IUC2_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUC2IUC2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUC2IUC2_Pointer":
        """Clone(itkAsinImageFilterIUC2IUC2 self) -> itkAsinImageFilterIUC2IUC2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUC2IUC2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUC2IUC2 *":
        """GetPointer(itkAsinImageFilterIUC2IUC2 self) -> itkAsinImageFilterIUC2IUC2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC2IUC2

        Create a new object of the class itkAsinImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUC2IUC2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Clone, None, itkAsinImageFilterIUC2IUC2)
itkAsinImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_GetPointer, None, itkAsinImageFilterIUC2IUC2)
itkAsinImageFilterIUC2IUC2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_swigregister
itkAsinImageFilterIUC2IUC2_swigregister(itkAsinImageFilterIUC2IUC2)

def itkAsinImageFilterIUC2IUC2___New_orig__() -> "itkAsinImageFilterIUC2IUC2_Pointer":
    """itkAsinImageFilterIUC2IUC2___New_orig__() -> itkAsinImageFilterIUC2IUC2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2___New_orig__()

def itkAsinImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC2IUC2 *":
    """itkAsinImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkAsinImageFilterIUC2IUC2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_cast(obj)

class itkAsinImageFilterIUC3IUC3(itkAsinImageFilterIUC3IUC3_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUC3IUC3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUC3IUC3_Pointer":
        """Clone(itkAsinImageFilterIUC3IUC3 self) -> itkAsinImageFilterIUC3IUC3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUC3IUC3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUC3IUC3 *":
        """GetPointer(itkAsinImageFilterIUC3IUC3 self) -> itkAsinImageFilterIUC3IUC3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC3IUC3

        Create a new object of the class itkAsinImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUC3IUC3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Clone, None, itkAsinImageFilterIUC3IUC3)
itkAsinImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_GetPointer, None, itkAsinImageFilterIUC3IUC3)
itkAsinImageFilterIUC3IUC3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_swigregister
itkAsinImageFilterIUC3IUC3_swigregister(itkAsinImageFilterIUC3IUC3)

def itkAsinImageFilterIUC3IUC3___New_orig__() -> "itkAsinImageFilterIUC3IUC3_Pointer":
    """itkAsinImageFilterIUC3IUC3___New_orig__() -> itkAsinImageFilterIUC3IUC3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3___New_orig__()

def itkAsinImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC3IUC3 *":
    """itkAsinImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkAsinImageFilterIUC3IUC3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_cast(obj)

class itkAsinImageFilterIUS2IUS2(itkAsinImageFilterIUS2IUS2_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUS2IUS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUS2IUS2_Pointer":
        """Clone(itkAsinImageFilterIUS2IUS2 self) -> itkAsinImageFilterIUS2IUS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUS2IUS2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUS2IUS2 *":
        """GetPointer(itkAsinImageFilterIUS2IUS2 self) -> itkAsinImageFilterIUS2IUS2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS2IUS2

        Create a new object of the class itkAsinImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUS2IUS2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Clone, None, itkAsinImageFilterIUS2IUS2)
itkAsinImageFilterIUS2IUS2.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_GetPointer, None, itkAsinImageFilterIUS2IUS2)
itkAsinImageFilterIUS2IUS2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_swigregister
itkAsinImageFilterIUS2IUS2_swigregister(itkAsinImageFilterIUS2IUS2)

def itkAsinImageFilterIUS2IUS2___New_orig__() -> "itkAsinImageFilterIUS2IUS2_Pointer":
    """itkAsinImageFilterIUS2IUS2___New_orig__() -> itkAsinImageFilterIUS2IUS2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2___New_orig__()

def itkAsinImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS2IUS2 *":
    """itkAsinImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkAsinImageFilterIUS2IUS2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_cast(obj)

class itkAsinImageFilterIUS3IUS3(itkAsinImageFilterIUS3IUS3_Superclass):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUS3IUS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUS3IUS3_Pointer":
        """Clone(itkAsinImageFilterIUS3IUS3 self) -> itkAsinImageFilterIUS3IUS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUS3IUS3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkAsinImageFilterIUS3IUS3 *":
        """GetPointer(itkAsinImageFilterIUS3IUS3 self) -> itkAsinImageFilterIUS3IUS3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS3IUS3

        Create a new object of the class itkAsinImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUS3IUS3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Clone, None, itkAsinImageFilterIUS3IUS3)
itkAsinImageFilterIUS3IUS3.GetPointer = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_GetPointer, None, itkAsinImageFilterIUS3IUS3)
itkAsinImageFilterIUS3IUS3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_swigregister
itkAsinImageFilterIUS3IUS3_swigregister(itkAsinImageFilterIUS3IUS3)

def itkAsinImageFilterIUS3IUS3___New_orig__() -> "itkAsinImageFilterIUS3IUS3_Pointer":
    """itkAsinImageFilterIUS3IUS3___New_orig__() -> itkAsinImageFilterIUS3IUS3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3___New_orig__()

def itkAsinImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS3IUS3 *":
    """itkAsinImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkAsinImageFilterIUS3IUS3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_cast(obj)



