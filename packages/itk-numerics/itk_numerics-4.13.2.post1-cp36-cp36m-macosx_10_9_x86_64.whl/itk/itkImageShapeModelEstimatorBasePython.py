# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageShapeModelEstimatorBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageShapeModelEstimatorBasePython', [dirname(__file__)])
        except ImportError:
            import _itkImageShapeModelEstimatorBasePython
            return _itkImageShapeModelEstimatorBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageShapeModelEstimatorBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageShapeModelEstimatorBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageShapeModelEstimatorBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkImageRegionPython
import ITKCommonBasePython
import pyBasePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import itkImagePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkMatrixPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourceCommonPython

def itkImageShapeModelEstimatorBaseIF3IF3_New():
  return itkImageShapeModelEstimatorBaseIF3IF3.New()


def itkImageShapeModelEstimatorBaseIUS3IF3_New():
  return itkImageShapeModelEstimatorBaseIUS3IF3.New()


def itkImageShapeModelEstimatorBaseIUC3IF3_New():
  return itkImageShapeModelEstimatorBaseIUC3IF3.New()


def itkImageShapeModelEstimatorBaseISS3IF3_New():
  return itkImageShapeModelEstimatorBaseISS3IF3.New()


def itkImageShapeModelEstimatorBaseIF2IF2_New():
  return itkImageShapeModelEstimatorBaseIF2IF2.New()


def itkImageShapeModelEstimatorBaseIUS2IF2_New():
  return itkImageShapeModelEstimatorBaseIUS2IF2.New()


def itkImageShapeModelEstimatorBaseIUC2IF2_New():
  return itkImageShapeModelEstimatorBaseIUC2IF2.New()


def itkImageShapeModelEstimatorBaseISS2IF2_New():
  return itkImageShapeModelEstimatorBaseISS2IF2.New()

class itkImageShapeModelEstimatorBaseIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseIF2IF2

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIF2IF2 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIF2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseIF2IF2 *":
        """GetPointer(itkImageShapeModelEstimatorBaseIF2IF2 self) -> itkImageShapeModelEstimatorBaseIF2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseIF2IF2

        Create a new object of the class itkImageShapeModelEstimatorBaseIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseIF2IF2.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2IF2_GetPointer, None, itkImageShapeModelEstimatorBaseIF2IF2)
itkImageShapeModelEstimatorBaseIF2IF2_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2IF2_swigregister
itkImageShapeModelEstimatorBaseIF2IF2_swigregister(itkImageShapeModelEstimatorBaseIF2IF2)

def itkImageShapeModelEstimatorBaseIF2IF2_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIF2IF2 *":
    """itkImageShapeModelEstimatorBaseIF2IF2_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIF2IF2"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2IF2_cast(obj)

class itkImageShapeModelEstimatorBaseIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseIF3IF3

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIF3IF3 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIF3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseIF3IF3 *":
        """GetPointer(itkImageShapeModelEstimatorBaseIF3IF3 self) -> itkImageShapeModelEstimatorBaseIF3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseIF3IF3

        Create a new object of the class itkImageShapeModelEstimatorBaseIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseIF3IF3.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3IF3_GetPointer, None, itkImageShapeModelEstimatorBaseIF3IF3)
itkImageShapeModelEstimatorBaseIF3IF3_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3IF3_swigregister
itkImageShapeModelEstimatorBaseIF3IF3_swigregister(itkImageShapeModelEstimatorBaseIF3IF3)

def itkImageShapeModelEstimatorBaseIF3IF3_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIF3IF3 *":
    """itkImageShapeModelEstimatorBaseIF3IF3_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIF3IF3"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3IF3_cast(obj)

class itkImageShapeModelEstimatorBaseISS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseISS2IF2

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseISS2IF2 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseISS2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseISS2IF2 *":
        """GetPointer(itkImageShapeModelEstimatorBaseISS2IF2 self) -> itkImageShapeModelEstimatorBaseISS2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseISS2IF2

        Create a new object of the class itkImageShapeModelEstimatorBaseISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseISS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseISS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseISS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseISS2IF2.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2IF2_GetPointer, None, itkImageShapeModelEstimatorBaseISS2IF2)
itkImageShapeModelEstimatorBaseISS2IF2_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2IF2_swigregister
itkImageShapeModelEstimatorBaseISS2IF2_swigregister(itkImageShapeModelEstimatorBaseISS2IF2)

def itkImageShapeModelEstimatorBaseISS2IF2_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseISS2IF2 *":
    """itkImageShapeModelEstimatorBaseISS2IF2_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseISS2IF2"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2IF2_cast(obj)

class itkImageShapeModelEstimatorBaseISS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseISS3IF3

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseISS3IF3 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseISS3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseISS3IF3 *":
        """GetPointer(itkImageShapeModelEstimatorBaseISS3IF3 self) -> itkImageShapeModelEstimatorBaseISS3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseISS3IF3

        Create a new object of the class itkImageShapeModelEstimatorBaseISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseISS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseISS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseISS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseISS3IF3.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3IF3_GetPointer, None, itkImageShapeModelEstimatorBaseISS3IF3)
itkImageShapeModelEstimatorBaseISS3IF3_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3IF3_swigregister
itkImageShapeModelEstimatorBaseISS3IF3_swigregister(itkImageShapeModelEstimatorBaseISS3IF3)

def itkImageShapeModelEstimatorBaseISS3IF3_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseISS3IF3 *":
    """itkImageShapeModelEstimatorBaseISS3IF3_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseISS3IF3"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3IF3_cast(obj)

class itkImageShapeModelEstimatorBaseIUC2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUC2IF2 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUC2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseIUC2IF2 *":
        """GetPointer(itkImageShapeModelEstimatorBaseIUC2IF2 self) -> itkImageShapeModelEstimatorBaseIUC2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseIUC2IF2

        Create a new object of the class itkImageShapeModelEstimatorBaseIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseIUC2IF2.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2IF2_GetPointer, None, itkImageShapeModelEstimatorBaseIUC2IF2)
itkImageShapeModelEstimatorBaseIUC2IF2_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2IF2_swigregister
itkImageShapeModelEstimatorBaseIUC2IF2_swigregister(itkImageShapeModelEstimatorBaseIUC2IF2)

def itkImageShapeModelEstimatorBaseIUC2IF2_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUC2IF2 *":
    """itkImageShapeModelEstimatorBaseIUC2IF2_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUC2IF2"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2IF2_cast(obj)

class itkImageShapeModelEstimatorBaseIUC3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUC3IF3 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUC3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseIUC3IF3 *":
        """GetPointer(itkImageShapeModelEstimatorBaseIUC3IF3 self) -> itkImageShapeModelEstimatorBaseIUC3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseIUC3IF3

        Create a new object of the class itkImageShapeModelEstimatorBaseIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseIUC3IF3.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3IF3_GetPointer, None, itkImageShapeModelEstimatorBaseIUC3IF3)
itkImageShapeModelEstimatorBaseIUC3IF3_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3IF3_swigregister
itkImageShapeModelEstimatorBaseIUC3IF3_swigregister(itkImageShapeModelEstimatorBaseIUC3IF3)

def itkImageShapeModelEstimatorBaseIUC3IF3_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUC3IF3 *":
    """itkImageShapeModelEstimatorBaseIUC3IF3_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUC3IF3"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3IF3_cast(obj)

class itkImageShapeModelEstimatorBaseIUS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUS2IF2 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUS2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseIUS2IF2 *":
        """GetPointer(itkImageShapeModelEstimatorBaseIUS2IF2 self) -> itkImageShapeModelEstimatorBaseIUS2IF2"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseIUS2IF2

        Create a new object of the class itkImageShapeModelEstimatorBaseIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseIUS2IF2.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2IF2_GetPointer, None, itkImageShapeModelEstimatorBaseIUS2IF2)
itkImageShapeModelEstimatorBaseIUS2IF2_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2IF2_swigregister
itkImageShapeModelEstimatorBaseIUS2IF2_swigregister(itkImageShapeModelEstimatorBaseIUS2IF2)

def itkImageShapeModelEstimatorBaseIUS2IF2_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUS2IF2 *":
    """itkImageShapeModelEstimatorBaseIUS2IF2_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUS2IF2"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2IF2_cast(obj)

class itkImageShapeModelEstimatorBaseIUS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    """


    Base class for statistical shape model estimation.

    itkImageShapeModelEstimatorBase is the base class for the
    ImageShapeModelEstimator objects. It provides the basic function
    definitions that are inherent to a ImageShapeModelEstimator objects.

    This is the Superclass for the ImageShapeModelEstimator framework.
    This is an abstract class defining an interface for all such objects
    available through the ImageShapeModelEstimator framework in the ITK
    toolkit.

    The basic functionality of the ImageShapeModelEstimator framework base
    class is to generate the ShapeModels. It requires input image to be
    provided by the user. EstimateShapeModels() is a pure virtual function
    making this an abstract class. Classes deriving from this class are
    required to implement the EstimateShapeModels function.

    C++ includes: itkImageShapeModelEstimatorBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkImageShapeModelEstimatorBasePython.delete_itkImageShapeModelEstimatorBaseIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUS3IF3 *":
        """cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUS3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageShapeModelEstimatorBaseIUS3IF3 *":
        """GetPointer(itkImageShapeModelEstimatorBaseIUS3IF3 self) -> itkImageShapeModelEstimatorBaseIUS3IF3"""
        return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageShapeModelEstimatorBaseIUS3IF3

        Create a new object of the class itkImageShapeModelEstimatorBaseIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageShapeModelEstimatorBaseIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageShapeModelEstimatorBaseIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageShapeModelEstimatorBaseIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageShapeModelEstimatorBaseIUS3IF3.GetPointer = new_instancemethod(_itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3IF3_GetPointer, None, itkImageShapeModelEstimatorBaseIUS3IF3)
itkImageShapeModelEstimatorBaseIUS3IF3_swigregister = _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3IF3_swigregister
itkImageShapeModelEstimatorBaseIUS3IF3_swigregister(itkImageShapeModelEstimatorBaseIUS3IF3)

def itkImageShapeModelEstimatorBaseIUS3IF3_cast(obj: 'itkLightObject') -> "itkImageShapeModelEstimatorBaseIUS3IF3 *":
    """itkImageShapeModelEstimatorBaseIUS3IF3_cast(itkLightObject obj) -> itkImageShapeModelEstimatorBaseIUS3IF3"""
    return _itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3IF3_cast(obj)



