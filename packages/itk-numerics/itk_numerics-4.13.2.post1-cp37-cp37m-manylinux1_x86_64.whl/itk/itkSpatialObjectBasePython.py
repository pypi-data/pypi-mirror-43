# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSpatialObjectBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSpatialObjectBasePython', [dirname(__file__)])
        except ImportError:
            import _itkSpatialObjectBasePython
            return _itkSpatialObjectBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSpatialObjectBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSpatialObjectBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSpatialObjectBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSpatialObjectPropertyPython
import ITKCommonBasePython
import pyBasePython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkBoundingBoxPython
import itkPointPython
import itkVectorPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkMapContainerPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkImageRegionPython
import itkAffineGeometryFramePython
import itkScalableAffineTransformPython
import itkAffineTransformPython
import itkTransformBasePython
import itkArrayPython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkVariableLengthVectorPython
import itkOptimizerParametersPython
import itkArray2DPython
import itkMatrixOffsetTransformBasePython

def itkSpatialObjectTreeNode3_New():
  return itkSpatialObjectTreeNode3.New()


def itkSpatialObjectTreeNode2_New():
  return itkSpatialObjectTreeNode2.New()


def itkTreeNodeSO3_New():
  return itkTreeNodeSO3.New()


def itkTreeNodeSO2_New():
  return itkTreeNodeSO2.New()


def itkCylinderSpatialObject_New():
  return itkCylinderSpatialObject.New()


def itkSpatialObject3_New():
  return itkSpatialObject3.New()


def itkSpatialObject2_New():
  return itkSpatialObject2.New()

class listitkSpatialObject2_Pointer(object):
    """Proxy of C++ std::list<(itkSpatialObject2_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listitkSpatialObject2_Pointer self) -> SwigPyIterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listitkSpatialObject2_Pointer self) -> bool"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listitkSpatialObject2_Pointer self) -> bool"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___bool__(self)


    def __len__(self) -> "std::list< itkSpatialObject2_Pointer >::size_type":
        """__len__(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::size_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___len__(self)


    def __getslice__(self, i: 'std::list< itkSpatialObject2_Pointer >::difference_type', j: 'std::list< itkSpatialObject2_Pointer >::difference_type') -> "std::list< itkSpatialObject2_Pointer,std::allocator< itkSpatialObject2_Pointer > > *":
        """__getslice__(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::difference_type i, std::list< itkSpatialObject2_Pointer >::difference_type j) -> listitkSpatialObject2_Pointer"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::difference_type i, std::list< itkSpatialObject2_Pointer >::difference_type j)
        __setslice__(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::difference_type i, std::list< itkSpatialObject2_Pointer >::difference_type j, listitkSpatialObject2_Pointer v)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< itkSpatialObject2_Pointer >::difference_type', j: 'std::list< itkSpatialObject2_Pointer >::difference_type') -> "void":
        """__delslice__(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::difference_type i, std::list< itkSpatialObject2_Pointer >::difference_type j)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::difference_type i)
        __delitem__(listitkSpatialObject2_Pointer self, PySliceObject * slice)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< itkSpatialObject2_Pointer >::value_type const &":
        """
        __getitem__(listitkSpatialObject2_Pointer self, PySliceObject * slice) -> listitkSpatialObject2_Pointer
        __getitem__(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::difference_type i) -> std::list< itkSpatialObject2_Pointer >::value_type const &
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listitkSpatialObject2_Pointer self, PySliceObject * slice, listitkSpatialObject2_Pointer v)
        __setitem__(listitkSpatialObject2_Pointer self, PySliceObject * slice)
        __setitem__(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::difference_type i, std::list< itkSpatialObject2_Pointer >::value_type const & x)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___setitem__(self, *args)


    def pop(self) -> "std::list< itkSpatialObject2_Pointer >::value_type":
        """pop(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::value_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_pop(self)


    def append(self, x: 'std::list< itkSpatialObject2_Pointer >::value_type const &') -> "void":
        """append(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_append(self, x)


    def empty(self) -> "bool":
        """empty(listitkSpatialObject2_Pointer self) -> bool"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_empty(self)


    def size(self) -> "std::list< itkSpatialObject2_Pointer >::size_type":
        """size(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::size_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_size(self)


    def swap(self, v: 'listitkSpatialObject2_Pointer') -> "void":
        """swap(listitkSpatialObject2_Pointer self, listitkSpatialObject2_Pointer v)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_swap(self, v)


    def begin(self) -> "std::list< itkSpatialObject2_Pointer >::iterator":
        """begin(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_begin(self)


    def end(self) -> "std::list< itkSpatialObject2_Pointer >::iterator":
        """end(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_end(self)


    def rbegin(self) -> "std::list< itkSpatialObject2_Pointer >::reverse_iterator":
        """rbegin(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::reverse_iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_rbegin(self)


    def rend(self) -> "std::list< itkSpatialObject2_Pointer >::reverse_iterator":
        """rend(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::reverse_iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_rend(self)


    def clear(self) -> "void":
        """clear(listitkSpatialObject2_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_clear(self)


    def get_allocator(self) -> "std::list< itkSpatialObject2_Pointer >::allocator_type":
        """get_allocator(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::allocator_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listitkSpatialObject2_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_pop_back(self)


    def erase(self, *args) -> "std::list< itkSpatialObject2_Pointer >::iterator":
        """
        erase(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::iterator pos) -> std::list< itkSpatialObject2_Pointer >::iterator
        erase(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::iterator first, std::list< itkSpatialObject2_Pointer >::iterator last) -> std::list< itkSpatialObject2_Pointer >::iterator
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(itkSpatialObject2_Pointer)> self) -> listitkSpatialObject2_Pointer
        __init__(std::list<(itkSpatialObject2_Pointer)> self, listitkSpatialObject2_Pointer arg2) -> listitkSpatialObject2_Pointer
        __init__(std::list<(itkSpatialObject2_Pointer)> self, std::list< itkSpatialObject2_Pointer >::size_type size) -> listitkSpatialObject2_Pointer
        __init__(std::list<(itkSpatialObject2_Pointer)> self, std::list< itkSpatialObject2_Pointer >::size_type size, std::list< itkSpatialObject2_Pointer >::value_type const & value) -> listitkSpatialObject2_Pointer
        """
        _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_swiginit(self, _itkSpatialObjectBasePython.new_listitkSpatialObject2_Pointer(*args))

    def push_back(self, x: 'std::list< itkSpatialObject2_Pointer >::value_type const &') -> "void":
        """push_back(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_push_back(self, x)


    def front(self) -> "std::list< itkSpatialObject2_Pointer >::value_type const &":
        """front(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::value_type const &"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_front(self)


    def back(self) -> "std::list< itkSpatialObject2_Pointer >::value_type const &":
        """back(listitkSpatialObject2_Pointer self) -> std::list< itkSpatialObject2_Pointer >::value_type const &"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_back(self)


    def assign(self, n: 'std::list< itkSpatialObject2_Pointer >::size_type', x: 'std::list< itkSpatialObject2_Pointer >::value_type const &') -> "void":
        """assign(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::size_type n, std::list< itkSpatialObject2_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::size_type new_size)
        resize(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::size_type new_size, std::list< itkSpatialObject2_Pointer >::value_type const & x)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::iterator pos, std::list< itkSpatialObject2_Pointer >::value_type const & x) -> std::list< itkSpatialObject2_Pointer >::iterator
        insert(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::iterator pos, std::list< itkSpatialObject2_Pointer >::size_type n, std::list< itkSpatialObject2_Pointer >::value_type const & x)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listitkSpatialObject2_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_pop_front(self)


    def push_front(self, x: 'std::list< itkSpatialObject2_Pointer >::value_type const &') -> "void":
        """push_front(listitkSpatialObject2_Pointer self, std::list< itkSpatialObject2_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listitkSpatialObject2_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_reverse(self)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_listitkSpatialObject2_Pointer
listitkSpatialObject2_Pointer.iterator = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_iterator, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__nonzero__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___nonzero__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__bool__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___bool__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__len__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___len__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__getslice__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___getslice__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__setslice__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___setslice__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__delslice__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___delslice__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__delitem__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___delitem__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__getitem__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___getitem__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.__setitem__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer___setitem__, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.pop = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_pop, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.append = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_append, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.empty = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_empty, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.size = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_size, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.swap = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_swap, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.begin = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_begin, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.end = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_end, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.rbegin = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_rbegin, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.rend = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_rend, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.clear = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_clear, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.get_allocator = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_get_allocator, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.pop_back = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_pop_back, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.erase = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_erase, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.push_back = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_push_back, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.front = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_front, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.back = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_back, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.assign = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_assign, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.resize = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_resize, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.insert = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_insert, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.pop_front = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_pop_front, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.push_front = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_push_front, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer.reverse = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_reverse, None, listitkSpatialObject2_Pointer)
listitkSpatialObject2_Pointer_swigregister = _itkSpatialObjectBasePython.listitkSpatialObject2_Pointer_swigregister
listitkSpatialObject2_Pointer_swigregister(listitkSpatialObject2_Pointer)

class listitkSpatialObject3_Pointer(object):
    """Proxy of C++ std::list<(itkSpatialObject3_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(listitkSpatialObject3_Pointer self) -> SwigPyIterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(listitkSpatialObject3_Pointer self) -> bool"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(listitkSpatialObject3_Pointer self) -> bool"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___bool__(self)


    def __len__(self) -> "std::list< itkSpatialObject3_Pointer >::size_type":
        """__len__(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::size_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___len__(self)


    def __getslice__(self, i: 'std::list< itkSpatialObject3_Pointer >::difference_type', j: 'std::list< itkSpatialObject3_Pointer >::difference_type') -> "std::list< itkSpatialObject3_Pointer,std::allocator< itkSpatialObject3_Pointer > > *":
        """__getslice__(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::difference_type i, std::list< itkSpatialObject3_Pointer >::difference_type j) -> listitkSpatialObject3_Pointer"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::difference_type i, std::list< itkSpatialObject3_Pointer >::difference_type j)
        __setslice__(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::difference_type i, std::list< itkSpatialObject3_Pointer >::difference_type j, listitkSpatialObject3_Pointer v)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___setslice__(self, *args)


    def __delslice__(self, i: 'std::list< itkSpatialObject3_Pointer >::difference_type', j: 'std::list< itkSpatialObject3_Pointer >::difference_type') -> "void":
        """__delslice__(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::difference_type i, std::list< itkSpatialObject3_Pointer >::difference_type j)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::difference_type i)
        __delitem__(listitkSpatialObject3_Pointer self, PySliceObject * slice)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::list< itkSpatialObject3_Pointer >::value_type const &":
        """
        __getitem__(listitkSpatialObject3_Pointer self, PySliceObject * slice) -> listitkSpatialObject3_Pointer
        __getitem__(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::difference_type i) -> std::list< itkSpatialObject3_Pointer >::value_type const &
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(listitkSpatialObject3_Pointer self, PySliceObject * slice, listitkSpatialObject3_Pointer v)
        __setitem__(listitkSpatialObject3_Pointer self, PySliceObject * slice)
        __setitem__(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::difference_type i, std::list< itkSpatialObject3_Pointer >::value_type const & x)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___setitem__(self, *args)


    def pop(self) -> "std::list< itkSpatialObject3_Pointer >::value_type":
        """pop(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::value_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_pop(self)


    def append(self, x: 'std::list< itkSpatialObject3_Pointer >::value_type const &') -> "void":
        """append(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_append(self, x)


    def empty(self) -> "bool":
        """empty(listitkSpatialObject3_Pointer self) -> bool"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_empty(self)


    def size(self) -> "std::list< itkSpatialObject3_Pointer >::size_type":
        """size(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::size_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_size(self)


    def swap(self, v: 'listitkSpatialObject3_Pointer') -> "void":
        """swap(listitkSpatialObject3_Pointer self, listitkSpatialObject3_Pointer v)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_swap(self, v)


    def begin(self) -> "std::list< itkSpatialObject3_Pointer >::iterator":
        """begin(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_begin(self)


    def end(self) -> "std::list< itkSpatialObject3_Pointer >::iterator":
        """end(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_end(self)


    def rbegin(self) -> "std::list< itkSpatialObject3_Pointer >::reverse_iterator":
        """rbegin(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::reverse_iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_rbegin(self)


    def rend(self) -> "std::list< itkSpatialObject3_Pointer >::reverse_iterator":
        """rend(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::reverse_iterator"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_rend(self)


    def clear(self) -> "void":
        """clear(listitkSpatialObject3_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_clear(self)


    def get_allocator(self) -> "std::list< itkSpatialObject3_Pointer >::allocator_type":
        """get_allocator(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::allocator_type"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(listitkSpatialObject3_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_pop_back(self)


    def erase(self, *args) -> "std::list< itkSpatialObject3_Pointer >::iterator":
        """
        erase(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::iterator pos) -> std::list< itkSpatialObject3_Pointer >::iterator
        erase(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::iterator first, std::list< itkSpatialObject3_Pointer >::iterator last) -> std::list< itkSpatialObject3_Pointer >::iterator
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(itkSpatialObject3_Pointer)> self) -> listitkSpatialObject3_Pointer
        __init__(std::list<(itkSpatialObject3_Pointer)> self, listitkSpatialObject3_Pointer arg2) -> listitkSpatialObject3_Pointer
        __init__(std::list<(itkSpatialObject3_Pointer)> self, std::list< itkSpatialObject3_Pointer >::size_type size) -> listitkSpatialObject3_Pointer
        __init__(std::list<(itkSpatialObject3_Pointer)> self, std::list< itkSpatialObject3_Pointer >::size_type size, std::list< itkSpatialObject3_Pointer >::value_type const & value) -> listitkSpatialObject3_Pointer
        """
        _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_swiginit(self, _itkSpatialObjectBasePython.new_listitkSpatialObject3_Pointer(*args))

    def push_back(self, x: 'std::list< itkSpatialObject3_Pointer >::value_type const &') -> "void":
        """push_back(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_push_back(self, x)


    def front(self) -> "std::list< itkSpatialObject3_Pointer >::value_type const &":
        """front(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::value_type const &"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_front(self)


    def back(self) -> "std::list< itkSpatialObject3_Pointer >::value_type const &":
        """back(listitkSpatialObject3_Pointer self) -> std::list< itkSpatialObject3_Pointer >::value_type const &"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_back(self)


    def assign(self, n: 'std::list< itkSpatialObject3_Pointer >::size_type', x: 'std::list< itkSpatialObject3_Pointer >::value_type const &') -> "void":
        """assign(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::size_type n, std::list< itkSpatialObject3_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::size_type new_size)
        resize(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::size_type new_size, std::list< itkSpatialObject3_Pointer >::value_type const & x)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::iterator pos, std::list< itkSpatialObject3_Pointer >::value_type const & x) -> std::list< itkSpatialObject3_Pointer >::iterator
        insert(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::iterator pos, std::list< itkSpatialObject3_Pointer >::size_type n, std::list< itkSpatialObject3_Pointer >::value_type const & x)
        """
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_insert(self, *args)


    def pop_front(self) -> "void":
        """pop_front(listitkSpatialObject3_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_pop_front(self)


    def push_front(self, x: 'std::list< itkSpatialObject3_Pointer >::value_type const &') -> "void":
        """push_front(listitkSpatialObject3_Pointer self, std::list< itkSpatialObject3_Pointer >::value_type const & x)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_push_front(self, x)


    def reverse(self) -> "void":
        """reverse(listitkSpatialObject3_Pointer self)"""
        return _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_reverse(self)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_listitkSpatialObject3_Pointer
listitkSpatialObject3_Pointer.iterator = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_iterator, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__nonzero__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___nonzero__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__bool__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___bool__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__len__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___len__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__getslice__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___getslice__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__setslice__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___setslice__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__delslice__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___delslice__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__delitem__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___delitem__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__getitem__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___getitem__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.__setitem__ = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer___setitem__, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.pop = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_pop, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.append = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_append, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.empty = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_empty, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.size = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_size, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.swap = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_swap, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.begin = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_begin, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.end = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_end, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.rbegin = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_rbegin, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.rend = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_rend, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.clear = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_clear, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.get_allocator = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_get_allocator, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.pop_back = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_pop_back, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.erase = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_erase, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.push_back = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_push_back, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.front = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_front, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.back = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_back, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.assign = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_assign, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.resize = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_resize, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.insert = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_insert, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.pop_front = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_pop_front, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.push_front = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_push_front, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer.reverse = new_instancemethod(_itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_reverse, None, listitkSpatialObject3_Pointer)
listitkSpatialObject3_Pointer_swigregister = _itkSpatialObjectBasePython.listitkSpatialObject3_Pointer_swigregister
listitkSpatialObject3_Pointer_swigregister(listitkSpatialObject3_Pointer)

class itkMetaEvent_Superclass(object):
    """Proxy of C++ itkMetaEvent_Superclass class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkMetaEvent_Superclass

    def SetCurrentIteration(self, n: 'unsigned int') -> "void":
        """SetCurrentIteration(itkMetaEvent_Superclass self, unsigned int n)"""
        return _itkSpatialObjectBasePython.itkMetaEvent_Superclass_SetCurrentIteration(self, n)


    def StartReading(self, n: 'unsigned int') -> "void":
        """StartReading(itkMetaEvent_Superclass self, unsigned int n)"""
        return _itkSpatialObjectBasePython.itkMetaEvent_Superclass_StartReading(self, n)


    def StopReading(self) -> "void":
        """StopReading(itkMetaEvent_Superclass self)"""
        return _itkSpatialObjectBasePython.itkMetaEvent_Superclass_StopReading(self)


    def __init__(self, *args):
        """
        __init__(itkMetaEvent_Superclass self) -> itkMetaEvent_Superclass
        __init__(itkMetaEvent_Superclass self, itkMetaEvent_Superclass arg0) -> itkMetaEvent_Superclass
        """
        _itkSpatialObjectBasePython.itkMetaEvent_Superclass_swiginit(self, _itkSpatialObjectBasePython.new_itkMetaEvent_Superclass(*args))
itkMetaEvent_Superclass.SetCurrentIteration = new_instancemethod(_itkSpatialObjectBasePython.itkMetaEvent_Superclass_SetCurrentIteration, None, itkMetaEvent_Superclass)
itkMetaEvent_Superclass.StartReading = new_instancemethod(_itkSpatialObjectBasePython.itkMetaEvent_Superclass_StartReading, None, itkMetaEvent_Superclass)
itkMetaEvent_Superclass.StopReading = new_instancemethod(_itkSpatialObjectBasePython.itkMetaEvent_Superclass_StopReading, None, itkMetaEvent_Superclass)
itkMetaEvent_Superclass_swigregister = _itkSpatialObjectBasePython.itkMetaEvent_Superclass_swigregister
itkMetaEvent_Superclass_swigregister(itkMetaEvent_Superclass)

class itkSpatialObject2(ITKCommonBasePython.itkDataObject):
    """


    Implementation of the composite pattern.

    The purpose of this class is to implement the composite pattern
    [Design Patterns, Gamma, 1995] within itk, so that it becomes easy to
    create an environment containing objects within a scene, and to
    manipulate the environment as a whole or any of its component objects.
    An object has a list of transformations to transform index coordinates
    to the corresponding coordinates in the real world coordinate system,
    and a list of inverse transformation to go backward. Any spatial
    objects can be plugged to a spatial object as children. To implement
    your own spatial object, you need to derive from the following class,
    which requires the definition of just a few pure virtual functions.
    Examples of such functions are ValueAt(), IsEvaluableAt(), and
    IsInside(), each of which has a meaning specific to each particular
    object type.

    C++ includes: itkSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMaximumDepth(self) -> "unsigned int":
        """
        GetMaximumDepth(itkSpatialObject2 self) -> unsigned int

        Return the maximum
        depth that a tree of spatial objects can have. This provides
        convenient access to a static constant. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetMaximumDepth(self)


    def HasParent(self) -> "bool":
        """
        HasParent(itkSpatialObject2 self) -> bool

        Return true if the object
        has a parent object. Basically, only the root object , or some
        isolated objects should return false. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_HasParent(self)


    def GetTypeName(self) -> "char const *":
        """
        GetTypeName(itkSpatialObject2 self) -> char const *

        Get the typename of the
        SpatialObject 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetTypeName(self)


    def GetObjectDimension(self) -> "unsigned int":
        """
        GetObjectDimension(itkSpatialObject2 self) -> unsigned int

        Get the
        dimensionality of the object 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetObjectDimension(self)


    def __New_orig__() -> "itkSpatialObject2_Pointer":
        """__New_orig__() -> itkSpatialObject2_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObject2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSpatialObject2_Pointer":
        """Clone(itkSpatialObject2 self) -> itkSpatialObject2_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_Clone(self)


    def SetAffineGeometryFrame(self, _arg: 'itkAffineGeometryFrameD2') -> "void":
        """
        SetAffineGeometryFrame(itkSpatialObject2 self, itkAffineGeometryFrameD2 _arg)

        Set/Get the
        AffineGeometryFrame 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetAffineGeometryFrame(self, _arg)


    def GetModifiableAffineGeometryFrame(self) -> "itkAffineGeometryFrameD2 *":
        """GetModifiableAffineGeometryFrame(itkSpatialObject2 self) -> itkAffineGeometryFrameD2"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableAffineGeometryFrame(self)


    def GetAffineGeometryFrame(self, *args) -> "itkAffineGeometryFrameD2 *":
        """
        GetAffineGeometryFrame(itkSpatialObject2 self) -> itkAffineGeometryFrameD2
        GetAffineGeometryFrame(itkSpatialObject2 self) -> itkAffineGeometryFrameD2
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetAffineGeometryFrame(self, *args)


    def SetObjectToWorldTransform(self, transform: 'itkScalableAffineTransformD2') -> "void":
        """
        SetObjectToWorldTransform(itkSpatialObject2 self, itkScalableAffineTransformD2 transform)

        This
        defines the transformation from the global coordinate frame. By
        setting this transform, the local transform is computed 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetObjectToWorldTransform(self, transform)


    def GetModifiableObjectToWorldTransform(self) -> "itkScalableAffineTransformD2 *":
        """GetModifiableObjectToWorldTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableObjectToWorldTransform(self)


    def GetObjectToWorldTransform(self, *args) -> "itkScalableAffineTransformD2 *":
        """
        GetObjectToWorldTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        GetObjectToWorldTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetObjectToWorldTransform(self, *args)


    def GetModifiableIndexToWorldTransform(self) -> "itkScalableAffineTransformD2 *":
        """GetModifiableIndexToWorldTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableIndexToWorldTransform(self)


    def GetIndexToWorldTransform(self, *args) -> "itkScalableAffineTransformD2 *":
        """
        GetIndexToWorldTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        GetIndexToWorldTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetIndexToWorldTransform(self, *args)


    def ComputeObjectToWorldTransform(self) -> "void":
        """
        ComputeObjectToWorldTransform(itkSpatialObject2 self)

        Compute the World transform when the local transform is set This
        function should be called each time the local transform has been
        modified 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_ComputeObjectToWorldTransform(self)


    def ComputeObjectToParentTransform(self) -> "void":
        """
        ComputeObjectToParentTransform(itkSpatialObject2 self)

        Compute the Local transform when the global transform is set 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_ComputeObjectToParentTransform(self)


    def GetTransformMTime(self) -> "unsigned long":
        """
        GetTransformMTime(itkSpatialObject2 self) -> unsigned long

        Return the
        Modified time of the LocalToWorldTransform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetTransformMTime(self)


    def GetWorldTransformMTime(self) -> "unsigned long":
        """
        GetWorldTransformMTime(itkSpatialObject2 self) -> unsigned long

        Return the
        Modified time of the WorldToLocalTransform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetWorldTransformMTime(self)


    def ValueAt(self, point: 'itkPointD2', value: 'double &', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        ValueAt(itkSpatialObject2 self, itkPointD2 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkSpatialObject2 self, itkPointD2 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkSpatialObject2 self, itkPointD2 point, double & value) -> bool

        Returns the value at a
        point 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_ValueAt(self, point, value, depth, name)


    def IsEvaluableAt(self, point: 'itkPointD2', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        IsEvaluableAt(itkSpatialObject2 self, itkPointD2 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkSpatialObject2 self, itkPointD2 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkSpatialObject2 self, itkPointD2 point) -> bool

        Returns true if the
        object can provide a "meaningful" value at a point. Often defaults
        to returning same answer as IsInside, but certain objects influence
        space beyond their spatial extent, e.g., an RFA Needle Spatial Object
        can cause a burn that extends beyond the tip of the needle. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_IsEvaluableAt(self, point, depth, name)


    def IsInside(self, point: 'itkPointD2', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        IsInside(itkSpatialObject2 self, itkPointD2 point, unsigned int depth=0, char * name=None) -> bool
        IsInside(itkSpatialObject2 self, itkPointD2 point, unsigned int depth=0) -> bool
        IsInside(itkSpatialObject2 self, itkPointD2 point) -> bool

        Returns true if a point is
        inside the object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_IsInside(self, point, depth, name)


    def Evaluate(self, point: 'itkPointD2') -> "bool":
        """
        Evaluate(itkSpatialObject2 self, itkPointD2 point) -> bool

        Returns true if a point is
        inside the object - provided to make spatial objects compatible with
        spatial functions and conditional iterators for defining regions of
        interest. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_Evaluate(self, point)


    def DerivativeAt(self, point: 'itkPointD2', order: 'unsigned short', value: 'itkCovariantVectorD2', depth: 'unsigned int'=0, name: 'char *'=None) -> "void":
        """
        DerivativeAt(itkSpatialObject2 self, itkPointD2 point, unsigned short order, itkCovariantVectorD2 value, unsigned int depth=0, char * name=None)
        DerivativeAt(itkSpatialObject2 self, itkPointD2 point, unsigned short order, itkCovariantVectorD2 value, unsigned int depth=0)
        DerivativeAt(itkSpatialObject2 self, itkPointD2 point, unsigned short order, itkCovariantVectorD2 value)

        Return the n-th order
        derivative value at the specified point. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_DerivativeAt(self, point, order, value, depth, name)


    def GetObjectMTime(self) -> "unsigned long":
        """
        GetObjectMTime(itkSpatialObject2 self) -> unsigned long

        Returns the latest
        modified time of the spatial object, but not the modification time of
        the children 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetObjectMTime(self)


    def SetLargestPossibleRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetLargestPossibleRegion(itkSpatialObject2 self, itkImageRegion2 region)

        Set the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary conditions. See:  ImageRegion,
        SetBufferedRegion(), SetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self) -> "itkImageRegion2 const &":
        """
        GetLargestPossibleRegion(itkSpatialObject2 self) -> itkImageRegion2

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary conditions. See:  ImageRegion,
        GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetBufferedRegion(itkSpatialObject2 self, itkImageRegion2 region)

        Set the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:  ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "itkImageRegion2 const &":
        """
        GetBufferedRegion(itkSpatialObject2 self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:  ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkSpatialObject2 self, itkImageRegion2 region)
        SetRequestedRegion(itkSpatialObject2 self, itkDataObject data)

        Set the
        requested region from this data object to match the requested region
        of the data object passed in as a parameter. This method implements
        the API from DataObject. The data object parameter must be castable to
        an ImageBase. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """
        GetRequestedRegion(itkSpatialObject2 self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:  ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetRequestedRegion(self)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkSpatialObject2 self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex2') -> "long":
        """
        ComputeOffset(itkSpatialObject2 self, itkIndex2 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.

        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex2":
        """
        ComputeIndex(itkSpatialObject2 self, long offset) -> itkIndex2

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_ComputeIndex(self, offset)


    def GetProperty(self, *args) -> "itkSpatialObjectPropertyF const *":
        """
        GetProperty(itkSpatialObject2 self) -> itkSpatialObjectPropertyF
        GetProperty(itkSpatialObject2 self) -> itkSpatialObjectPropertyF

        Returns a pointer to
        the property object applied to this class. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetProperty(self, *args)


    def SetProperty(self, property: 'itkSpatialObjectPropertyF') -> "void":
        """
        SetProperty(itkSpatialObject2 self, itkSpatialObjectPropertyF property)

        Set the property
        applied to the object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetProperty(self, property)


    def GetId(self) -> "int const &":
        """
        GetId(itkSpatialObject2 self) -> int const &

        Get/Set the ID 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetId(self)


    def SetId(self, _arg: 'int const') -> "void":
        """SetId(itkSpatialObject2 self, int const _arg)"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetId(self, _arg)


    def SetParentId(self, _arg: 'int const') -> "void":
        """
        SetParentId(itkSpatialObject2 self, int const _arg)

        Set/Get the parent
        Identification number 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetParentId(self, _arg)


    def GetParentId(self) -> "int const &":
        """GetParentId(itkSpatialObject2 self) -> int const &"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetParentId(self)


    def SetTreeNode(self, _arg: 'itkSpatialObjectTreeNode2') -> "void":
        """
        SetTreeNode(itkSpatialObject2 self, itkSpatialObjectTreeNode2 _arg)

        Set the tree container

        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetTreeNode(self, _arg)


    def GetModifiableTreeNode(self) -> "itkSpatialObjectTreeNode2 *":
        """GetModifiableTreeNode(itkSpatialObject2 self) -> itkSpatialObjectTreeNode2"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableTreeNode(self)


    def GetTreeNode(self, *args) -> "itkSpatialObjectTreeNode2 *":
        """
        GetTreeNode(itkSpatialObject2 self) -> itkSpatialObjectTreeNode2
        GetTreeNode(itkSpatialObject2 self) -> itkSpatialObjectTreeNode2
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetTreeNode(self, *args)


    def SetSpacing(self, spacing: 'double const *') -> "void":
        """
        SetSpacing(itkSpatialObject2 self, double const * spacing)

        Theses functions are
        just calling the AffineGeometryFrame functions Set the spacing of the
        spatial object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetSpacing(self, spacing)


    def GetSpacing(self) -> "double const *":
        """
        GetSpacing(itkSpatialObject2 self) -> double const *

        Get the spacing of the
        spatial object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetSpacing(self)


    def GetModifiableIndexToObjectTransform(self) -> "itkScalableAffineTransformD2 *":
        """GetModifiableIndexToObjectTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableIndexToObjectTransform(self)


    def GetIndexToObjectTransform(self, *args) -> "itkScalableAffineTransformD2 *":
        """
        GetIndexToObjectTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        GetIndexToObjectTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2

        Transform
        points from the internal data coordinate system of the object
        (typically the indices of the image from which the object was defined)
        to "physical" space (which accounts for the spacing, orientation,
        and offset of the indices) 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetIndexToObjectTransform(self, *args)


    def SetObjectToParentTransform(self, transform: 'itkScalableAffineTransformD2') -> "void":
        """
        SetObjectToParentTransform(itkSpatialObject2 self, itkScalableAffineTransformD2 transform)

        Transforms points from the object-specific "physical" space to the
        "physical" space of its parent object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetObjectToParentTransform(self, transform)


    def GetObjectToParentTransform(self, *args) -> "itkScalableAffineTransformD2 const *":
        """
        GetObjectToParentTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        GetObjectToParentTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetObjectToParentTransform(self, *args)


    def GetObjectToNodeTransform(self, *args) -> "itkScalableAffineTransformD2 const *":
        """
        GetObjectToNodeTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        GetObjectToNodeTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetObjectToNodeTransform(self, *args)


    def AddSpatialObject(self, pointer: 'itkSpatialObject2') -> "void":
        """
        AddSpatialObject(itkSpatialObject2 self, itkSpatialObject2 pointer)

        Theses functions
        are just calling the itkSpatialObjectTreeNode functions Add an object
        to the list of children. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_AddSpatialObject(self, pointer)


    def RemoveSpatialObject(self, object: 'itkSpatialObject2') -> "void":
        """
        RemoveSpatialObject(itkSpatialObject2 self, itkSpatialObject2 object)

        Remove the
        object passed as arguments from the list of children. May this
        function should return a false value if the object to remove is not
        found in the list. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_RemoveSpatialObject(self, object)


    def GetParent(self, *args) -> "itkSpatialObject2 *":
        """
        GetParent(itkSpatialObject2 self) -> itkSpatialObject2
        GetParent(itkSpatialObject2 self) -> itkSpatialObject2

        Return a pointer to the
        parent object in the hierarchy tree 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetParent(self, *args)


    def GetChildren(self, depth: 'unsigned int'=0, name: 'char *'=None) -> "std::list< itkSpatialObject2_Pointer,std::allocator< itkSpatialObject2_Pointer > > *":
        """
        GetChildren(itkSpatialObject2 self, unsigned int depth=0, char * name=None) -> listitkSpatialObject2_Pointer
        GetChildren(itkSpatialObject2 self, unsigned int depth=0) -> listitkSpatialObject2_Pointer
        GetChildren(itkSpatialObject2 self) -> listitkSpatialObject2_Pointer

        Returns a list of
        pointer to the children affiliated to this object. A depth of 0
        returns the immediate childred. A depth of 1 returns the children and
        those children's children. WARNING:  User is responsible for freeing
        the list, but not the elements of the list. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetChildren(self, depth, name)


    def GetNumberOfChildren(self, depth: 'unsigned int'=0, name: 'char *'=None) -> "unsigned int":
        """
        GetNumberOfChildren(itkSpatialObject2 self, unsigned int depth=0, char * name=None) -> unsigned int
        GetNumberOfChildren(itkSpatialObject2 self, unsigned int depth=0) -> unsigned int
        GetNumberOfChildren(itkSpatialObject2 self) -> unsigned int

        Returns the
        number of children currently assigned to the object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetNumberOfChildren(self, depth, name)


    def SetChildren(self, children: 'listitkSpatialObject2_Pointer') -> "void":
        """
        SetChildren(itkSpatialObject2 self, listitkSpatialObject2_Pointer children)

        Set the list of
        pointers to children to the list passed as argument. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetChildren(self, children)


    def Clear(self) -> "void":
        """
        Clear(itkSpatialObject2 self)

        Clear the spatial object by
        deleting all lists of children and subchildren 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_Clear(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkSpatialObject2 self) -> bool

        Compute an axis-
        aligned bounding box for an object and its selected children, down to
        a specified depth. After computation, the resulting bounding box is
        stored in this->m_Bounds.

        By default, the bounding box children depth is maximum, meaning that
        the bounding box for the object and all its recursive children is
        computed. This depth can be set (before calling ComputeBoundingBox)
        using SetBoundingBoxChildrenDepth().

        By calling SetBoundingBoxChildrenName(), it is possible to restrict
        the bounding box computation to objects of a specified type or family
        of types. The spatial objects included in the computation are those
        whose typenames share, as their initial substring, the string
        specified via SetBoundingBoxChildrenName(). The root spatial object
        (on which the method is called) is not treated specially. If its
        typename does not match the bounding box children name, then it is not
        included in the bounding box computation, but its descendents that
        match the string are included. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_ComputeBoundingBox(self)


    def ComputeLocalBoundingBox(self) -> "bool":
        """ComputeLocalBoundingBox(itkSpatialObject2 self) -> bool"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_ComputeLocalBoundingBox(self)


    def GetBoundingBox(self) -> "itkBoundingBoxUL2DVCULPD2 *":
        """
        GetBoundingBox(itkSpatialObject2 self) -> itkBoundingBoxUL2DVCULPD2

        Get a pointer to the
        bounding box of the object. The extents and the position of the box
        are not computed. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetBoundingBox(self)


    def SetBoundingBoxChildrenDepth(self, _arg: 'unsigned int const') -> "void":
        """
        SetBoundingBoxChildrenDepth(itkSpatialObject2 self, unsigned int const _arg)

        Set/Get
        the depth at which the bounding box is computed 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetBoundingBoxChildrenDepth(self, _arg)


    def GetBoundingBoxChildrenDepth(self) -> "unsigned int const &":
        """GetBoundingBoxChildrenDepth(itkSpatialObject2 self) -> unsigned int const &"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetBoundingBoxChildrenDepth(self)


    def SetBoundingBoxChildrenName(self, _arg: 'std::string const') -> "void":
        """
        SetBoundingBoxChildrenName(itkSpatialObject2 self, std::string const _arg)

        Set/Get
        the name of the children to consider when computing the bounding box

        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetBoundingBoxChildrenName(self, _arg)


    def GetBoundingBoxChildrenName(self) -> "std::string const &":
        """GetBoundingBoxChildrenName(itkSpatialObject2 self) -> std::string const &"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetBoundingBoxChildrenName(self)


    def SetParent(self, parent: 'itkSpatialObject2') -> "void":
        """
        SetParent(itkSpatialObject2 self, itkSpatialObject2 parent)

        Set the pointer to the
        parent object in the tree hierarchy used for the spatial object
        patter. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetParent(self, parent)


    def SetNodeToParentNodeTransform(self, transform: 'itkScalableAffineTransformD2') -> "void":
        """
        SetNodeToParentNodeTransform(itkSpatialObject2 self, itkScalableAffineTransformD2 transform)

        These
        function are just calling the node container transforms 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetNodeToParentNodeTransform(self, transform)


    def GetNodeToParentNodeTransform(self, *args) -> "itkScalableAffineTransformD2 const *":
        """
        GetNodeToParentNodeTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        GetNodeToParentNodeTransform(itkSpatialObject2 self) -> itkScalableAffineTransformD2
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetNodeToParentNodeTransform(self, *args)


    def SetDefaultInsideValue(self, _arg: 'double const') -> "void":
        """
        SetDefaultInsideValue(itkSpatialObject2 self, double const _arg)

        Set/Get the
        default inside value ( ValueAt()) of the object. Default is 1.0 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetDefaultInsideValue(self, _arg)


    def GetDefaultInsideValue(self) -> "double":
        """GetDefaultInsideValue(itkSpatialObject2 self) -> double"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetDefaultInsideValue(self)


    def SetDefaultOutsideValue(self, _arg: 'double const') -> "void":
        """
        SetDefaultOutsideValue(itkSpatialObject2 self, double const _arg)

        Set/Get the
        default outside value ( ValueAt()) of the object. Default is 0.0 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_SetDefaultOutsideValue(self, _arg)


    def GetDefaultOutsideValue(self) -> "double":
        """GetDefaultOutsideValue(itkSpatialObject2 self) -> double"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetDefaultOutsideValue(self)


    def GetSpatialObjectTypeAsString(self) -> "std::string":
        """
        GetSpatialObjectTypeAsString(itkSpatialObject2 self) -> std::string

        Return
        the type of the spatial object as a string This is used by the
        SpatialObjectFactory 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetSpatialObjectTypeAsString(self)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkSpatialObject2

    def cast(obj: 'itkLightObject') -> "itkSpatialObject2 *":
        """cast(itkLightObject obj) -> itkSpatialObject2"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkSpatialObject2 *":
        """GetPointer(itkSpatialObject2 self) -> itkSpatialObject2"""
        return _itkSpatialObjectBasePython.itkSpatialObject2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkSpatialObject2

        Create a new object of the class itkSpatialObject2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpatialObject2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSpatialObject2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSpatialObject2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSpatialObject2.GetMaximumDepth = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetMaximumDepth, None, itkSpatialObject2)
itkSpatialObject2.HasParent = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_HasParent, None, itkSpatialObject2)
itkSpatialObject2.GetTypeName = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetTypeName, None, itkSpatialObject2)
itkSpatialObject2.GetObjectDimension = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetObjectDimension, None, itkSpatialObject2)
itkSpatialObject2.Clone = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_Clone, None, itkSpatialObject2)
itkSpatialObject2.SetAffineGeometryFrame = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetAffineGeometryFrame, None, itkSpatialObject2)
itkSpatialObject2.GetModifiableAffineGeometryFrame = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableAffineGeometryFrame, None, itkSpatialObject2)
itkSpatialObject2.GetAffineGeometryFrame = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetAffineGeometryFrame, None, itkSpatialObject2)
itkSpatialObject2.SetObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetObjectToWorldTransform, None, itkSpatialObject2)
itkSpatialObject2.GetModifiableObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableObjectToWorldTransform, None, itkSpatialObject2)
itkSpatialObject2.GetObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetObjectToWorldTransform, None, itkSpatialObject2)
itkSpatialObject2.GetModifiableIndexToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableIndexToWorldTransform, None, itkSpatialObject2)
itkSpatialObject2.GetIndexToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetIndexToWorldTransform, None, itkSpatialObject2)
itkSpatialObject2.ComputeObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_ComputeObjectToWorldTransform, None, itkSpatialObject2)
itkSpatialObject2.ComputeObjectToParentTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_ComputeObjectToParentTransform, None, itkSpatialObject2)
itkSpatialObject2.GetTransformMTime = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetTransformMTime, None, itkSpatialObject2)
itkSpatialObject2.GetWorldTransformMTime = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetWorldTransformMTime, None, itkSpatialObject2)
itkSpatialObject2.ValueAt = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_ValueAt, None, itkSpatialObject2)
itkSpatialObject2.IsEvaluableAt = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_IsEvaluableAt, None, itkSpatialObject2)
itkSpatialObject2.IsInside = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_IsInside, None, itkSpatialObject2)
itkSpatialObject2.Evaluate = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_Evaluate, None, itkSpatialObject2)
itkSpatialObject2.DerivativeAt = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_DerivativeAt, None, itkSpatialObject2)
itkSpatialObject2.GetObjectMTime = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetObjectMTime, None, itkSpatialObject2)
itkSpatialObject2.SetLargestPossibleRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetLargestPossibleRegion, None, itkSpatialObject2)
itkSpatialObject2.GetLargestPossibleRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetLargestPossibleRegion, None, itkSpatialObject2)
itkSpatialObject2.SetBufferedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetBufferedRegion, None, itkSpatialObject2)
itkSpatialObject2.GetBufferedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetBufferedRegion, None, itkSpatialObject2)
itkSpatialObject2.SetRequestedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetRequestedRegion, None, itkSpatialObject2)
itkSpatialObject2.GetRequestedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetRequestedRegion, None, itkSpatialObject2)
itkSpatialObject2.GetOffsetTable = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetOffsetTable, None, itkSpatialObject2)
itkSpatialObject2.ComputeOffset = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_ComputeOffset, None, itkSpatialObject2)
itkSpatialObject2.ComputeIndex = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_ComputeIndex, None, itkSpatialObject2)
itkSpatialObject2.GetProperty = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetProperty, None, itkSpatialObject2)
itkSpatialObject2.SetProperty = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetProperty, None, itkSpatialObject2)
itkSpatialObject2.GetId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetId, None, itkSpatialObject2)
itkSpatialObject2.SetId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetId, None, itkSpatialObject2)
itkSpatialObject2.SetParentId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetParentId, None, itkSpatialObject2)
itkSpatialObject2.GetParentId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetParentId, None, itkSpatialObject2)
itkSpatialObject2.SetTreeNode = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetTreeNode, None, itkSpatialObject2)
itkSpatialObject2.GetModifiableTreeNode = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableTreeNode, None, itkSpatialObject2)
itkSpatialObject2.GetTreeNode = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetTreeNode, None, itkSpatialObject2)
itkSpatialObject2.SetSpacing = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetSpacing, None, itkSpatialObject2)
itkSpatialObject2.GetSpacing = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetSpacing, None, itkSpatialObject2)
itkSpatialObject2.GetModifiableIndexToObjectTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetModifiableIndexToObjectTransform, None, itkSpatialObject2)
itkSpatialObject2.GetIndexToObjectTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetIndexToObjectTransform, None, itkSpatialObject2)
itkSpatialObject2.SetObjectToParentTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetObjectToParentTransform, None, itkSpatialObject2)
itkSpatialObject2.GetObjectToParentTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetObjectToParentTransform, None, itkSpatialObject2)
itkSpatialObject2.GetObjectToNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetObjectToNodeTransform, None, itkSpatialObject2)
itkSpatialObject2.AddSpatialObject = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_AddSpatialObject, None, itkSpatialObject2)
itkSpatialObject2.RemoveSpatialObject = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_RemoveSpatialObject, None, itkSpatialObject2)
itkSpatialObject2.GetParent = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetParent, None, itkSpatialObject2)
itkSpatialObject2.GetChildren = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetChildren, None, itkSpatialObject2)
itkSpatialObject2.GetNumberOfChildren = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetNumberOfChildren, None, itkSpatialObject2)
itkSpatialObject2.SetChildren = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetChildren, None, itkSpatialObject2)
itkSpatialObject2.Clear = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_Clear, None, itkSpatialObject2)
itkSpatialObject2.ComputeBoundingBox = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_ComputeBoundingBox, None, itkSpatialObject2)
itkSpatialObject2.ComputeLocalBoundingBox = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_ComputeLocalBoundingBox, None, itkSpatialObject2)
itkSpatialObject2.GetBoundingBox = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetBoundingBox, None, itkSpatialObject2)
itkSpatialObject2.SetBoundingBoxChildrenDepth = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetBoundingBoxChildrenDepth, None, itkSpatialObject2)
itkSpatialObject2.GetBoundingBoxChildrenDepth = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetBoundingBoxChildrenDepth, None, itkSpatialObject2)
itkSpatialObject2.SetBoundingBoxChildrenName = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetBoundingBoxChildrenName, None, itkSpatialObject2)
itkSpatialObject2.GetBoundingBoxChildrenName = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetBoundingBoxChildrenName, None, itkSpatialObject2)
itkSpatialObject2.SetParent = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetParent, None, itkSpatialObject2)
itkSpatialObject2.SetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetNodeToParentNodeTransform, None, itkSpatialObject2)
itkSpatialObject2.GetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetNodeToParentNodeTransform, None, itkSpatialObject2)
itkSpatialObject2.SetDefaultInsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetDefaultInsideValue, None, itkSpatialObject2)
itkSpatialObject2.GetDefaultInsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetDefaultInsideValue, None, itkSpatialObject2)
itkSpatialObject2.SetDefaultOutsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_SetDefaultOutsideValue, None, itkSpatialObject2)
itkSpatialObject2.GetDefaultOutsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetDefaultOutsideValue, None, itkSpatialObject2)
itkSpatialObject2.GetSpatialObjectTypeAsString = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetSpatialObjectTypeAsString, None, itkSpatialObject2)
itkSpatialObject2.GetPointer = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject2_GetPointer, None, itkSpatialObject2)
itkSpatialObject2_swigregister = _itkSpatialObjectBasePython.itkSpatialObject2_swigregister
itkSpatialObject2_swigregister(itkSpatialObject2)

def itkSpatialObject2___New_orig__() -> "itkSpatialObject2_Pointer":
    """itkSpatialObject2___New_orig__() -> itkSpatialObject2_Pointer"""
    return _itkSpatialObjectBasePython.itkSpatialObject2___New_orig__()

def itkSpatialObject2_cast(obj: 'itkLightObject') -> "itkSpatialObject2 *":
    """itkSpatialObject2_cast(itkLightObject obj) -> itkSpatialObject2"""
    return _itkSpatialObjectBasePython.itkSpatialObject2_cast(obj)

class itkSpatialObject3(ITKCommonBasePython.itkDataObject):
    """


    Implementation of the composite pattern.

    The purpose of this class is to implement the composite pattern
    [Design Patterns, Gamma, 1995] within itk, so that it becomes easy to
    create an environment containing objects within a scene, and to
    manipulate the environment as a whole or any of its component objects.
    An object has a list of transformations to transform index coordinates
    to the corresponding coordinates in the real world coordinate system,
    and a list of inverse transformation to go backward. Any spatial
    objects can be plugged to a spatial object as children. To implement
    your own spatial object, you need to derive from the following class,
    which requires the definition of just a few pure virtual functions.
    Examples of such functions are ValueAt(), IsEvaluableAt(), and
    IsInside(), each of which has a meaning specific to each particular
    object type.

    C++ includes: itkSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMaximumDepth(self) -> "unsigned int":
        """
        GetMaximumDepth(itkSpatialObject3 self) -> unsigned int

        Return the maximum
        depth that a tree of spatial objects can have. This provides
        convenient access to a static constant. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetMaximumDepth(self)


    def HasParent(self) -> "bool":
        """
        HasParent(itkSpatialObject3 self) -> bool

        Return true if the object
        has a parent object. Basically, only the root object , or some
        isolated objects should return false. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_HasParent(self)


    def GetTypeName(self) -> "char const *":
        """
        GetTypeName(itkSpatialObject3 self) -> char const *

        Get the typename of the
        SpatialObject 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetTypeName(self)


    def GetObjectDimension(self) -> "unsigned int":
        """
        GetObjectDimension(itkSpatialObject3 self) -> unsigned int

        Get the
        dimensionality of the object 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetObjectDimension(self)


    def __New_orig__() -> "itkSpatialObject3_Pointer":
        """__New_orig__() -> itkSpatialObject3_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObject3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSpatialObject3_Pointer":
        """Clone(itkSpatialObject3 self) -> itkSpatialObject3_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_Clone(self)


    def SetAffineGeometryFrame(self, _arg: 'itkAffineGeometryFrameD3') -> "void":
        """
        SetAffineGeometryFrame(itkSpatialObject3 self, itkAffineGeometryFrameD3 _arg)

        Set/Get the
        AffineGeometryFrame 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetAffineGeometryFrame(self, _arg)


    def GetModifiableAffineGeometryFrame(self) -> "itkAffineGeometryFrameD3 *":
        """GetModifiableAffineGeometryFrame(itkSpatialObject3 self) -> itkAffineGeometryFrameD3"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableAffineGeometryFrame(self)


    def GetAffineGeometryFrame(self, *args) -> "itkAffineGeometryFrameD3 *":
        """
        GetAffineGeometryFrame(itkSpatialObject3 self) -> itkAffineGeometryFrameD3
        GetAffineGeometryFrame(itkSpatialObject3 self) -> itkAffineGeometryFrameD3
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetAffineGeometryFrame(self, *args)


    def SetObjectToWorldTransform(self, transform: 'itkScalableAffineTransformD3') -> "void":
        """
        SetObjectToWorldTransform(itkSpatialObject3 self, itkScalableAffineTransformD3 transform)

        This
        defines the transformation from the global coordinate frame. By
        setting this transform, the local transform is computed 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetObjectToWorldTransform(self, transform)


    def GetModifiableObjectToWorldTransform(self) -> "itkScalableAffineTransformD3 *":
        """GetModifiableObjectToWorldTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableObjectToWorldTransform(self)


    def GetObjectToWorldTransform(self, *args) -> "itkScalableAffineTransformD3 *":
        """
        GetObjectToWorldTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        GetObjectToWorldTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetObjectToWorldTransform(self, *args)


    def GetModifiableIndexToWorldTransform(self) -> "itkScalableAffineTransformD3 *":
        """GetModifiableIndexToWorldTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableIndexToWorldTransform(self)


    def GetIndexToWorldTransform(self, *args) -> "itkScalableAffineTransformD3 *":
        """
        GetIndexToWorldTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        GetIndexToWorldTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetIndexToWorldTransform(self, *args)


    def ComputeObjectToWorldTransform(self) -> "void":
        """
        ComputeObjectToWorldTransform(itkSpatialObject3 self)

        Compute the World transform when the local transform is set This
        function should be called each time the local transform has been
        modified 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_ComputeObjectToWorldTransform(self)


    def ComputeObjectToParentTransform(self) -> "void":
        """
        ComputeObjectToParentTransform(itkSpatialObject3 self)

        Compute the Local transform when the global transform is set 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_ComputeObjectToParentTransform(self)


    def GetTransformMTime(self) -> "unsigned long":
        """
        GetTransformMTime(itkSpatialObject3 self) -> unsigned long

        Return the
        Modified time of the LocalToWorldTransform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetTransformMTime(self)


    def GetWorldTransformMTime(self) -> "unsigned long":
        """
        GetWorldTransformMTime(itkSpatialObject3 self) -> unsigned long

        Return the
        Modified time of the WorldToLocalTransform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetWorldTransformMTime(self)


    def ValueAt(self, point: 'itkPointD3', value: 'double &', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        ValueAt(itkSpatialObject3 self, itkPointD3 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkSpatialObject3 self, itkPointD3 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkSpatialObject3 self, itkPointD3 point, double & value) -> bool

        Returns the value at a
        point 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_ValueAt(self, point, value, depth, name)


    def IsEvaluableAt(self, point: 'itkPointD3', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        IsEvaluableAt(itkSpatialObject3 self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkSpatialObject3 self, itkPointD3 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkSpatialObject3 self, itkPointD3 point) -> bool

        Returns true if the
        object can provide a "meaningful" value at a point. Often defaults
        to returning same answer as IsInside, but certain objects influence
        space beyond their spatial extent, e.g., an RFA Needle Spatial Object
        can cause a burn that extends beyond the tip of the needle. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_IsEvaluableAt(self, point, depth, name)


    def IsInside(self, point: 'itkPointD3', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        IsInside(itkSpatialObject3 self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsInside(itkSpatialObject3 self, itkPointD3 point, unsigned int depth=0) -> bool
        IsInside(itkSpatialObject3 self, itkPointD3 point) -> bool

        Returns true if a point is
        inside the object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_IsInside(self, point, depth, name)


    def Evaluate(self, point: 'itkPointD3') -> "bool":
        """
        Evaluate(itkSpatialObject3 self, itkPointD3 point) -> bool

        Returns true if a point is
        inside the object - provided to make spatial objects compatible with
        spatial functions and conditional iterators for defining regions of
        interest. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_Evaluate(self, point)


    def DerivativeAt(self, point: 'itkPointD3', order: 'unsigned short', value: 'itkCovariantVectorD3', depth: 'unsigned int'=0, name: 'char *'=None) -> "void":
        """
        DerivativeAt(itkSpatialObject3 self, itkPointD3 point, unsigned short order, itkCovariantVectorD3 value, unsigned int depth=0, char * name=None)
        DerivativeAt(itkSpatialObject3 self, itkPointD3 point, unsigned short order, itkCovariantVectorD3 value, unsigned int depth=0)
        DerivativeAt(itkSpatialObject3 self, itkPointD3 point, unsigned short order, itkCovariantVectorD3 value)

        Return the n-th order
        derivative value at the specified point. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_DerivativeAt(self, point, order, value, depth, name)


    def GetObjectMTime(self) -> "unsigned long":
        """
        GetObjectMTime(itkSpatialObject3 self) -> unsigned long

        Returns the latest
        modified time of the spatial object, but not the modification time of
        the children 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetObjectMTime(self)


    def SetLargestPossibleRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetLargestPossibleRegion(itkSpatialObject3 self, itkImageRegion3 region)

        Set the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary conditions. See:  ImageRegion,
        SetBufferedRegion(), SetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self) -> "itkImageRegion3 const &":
        """
        GetLargestPossibleRegion(itkSpatialObject3 self) -> itkImageRegion3

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary conditions. See:  ImageRegion,
        GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region: 'itkImageRegion3') -> "void":
        """
        SetBufferedRegion(itkSpatialObject3 self, itkImageRegion3 region)

        Set the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:  ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetBufferedRegion(self, region)


    def GetBufferedRegion(self) -> "itkImageRegion3 const &":
        """
        GetBufferedRegion(itkSpatialObject3 self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:  ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args) -> "void":
        """
        SetRequestedRegion(itkSpatialObject3 self, itkImageRegion3 region)
        SetRequestedRegion(itkSpatialObject3 self, itkDataObject data)

        Set the
        requested region from this data object to match the requested region
        of the data object passed in as a parameter. This method implements
        the API from DataObject. The data object parameter must be castable to
        an ImageBase. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self) -> "itkImageRegion3 const &":
        """
        GetRequestedRegion(itkSpatialObject3 self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:  ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetRequestedRegion(self)


    def GetOffsetTable(self) -> "long const *":
        """
        GetOffsetTable(itkSpatialObject3 self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetOffsetTable(self)


    def ComputeOffset(self, ind: 'itkIndex3') -> "long":
        """
        ComputeOffset(itkSpatialObject3 self, itkIndex3 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.

        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_ComputeOffset(self, ind)


    def ComputeIndex(self, offset: 'long') -> "itkIndex3":
        """
        ComputeIndex(itkSpatialObject3 self, long offset) -> itkIndex3

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_ComputeIndex(self, offset)


    def GetProperty(self, *args) -> "itkSpatialObjectPropertyF const *":
        """
        GetProperty(itkSpatialObject3 self) -> itkSpatialObjectPropertyF
        GetProperty(itkSpatialObject3 self) -> itkSpatialObjectPropertyF

        Returns a pointer to
        the property object applied to this class. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetProperty(self, *args)


    def SetProperty(self, property: 'itkSpatialObjectPropertyF') -> "void":
        """
        SetProperty(itkSpatialObject3 self, itkSpatialObjectPropertyF property)

        Set the property
        applied to the object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetProperty(self, property)


    def GetId(self) -> "int const &":
        """
        GetId(itkSpatialObject3 self) -> int const &

        Get/Set the ID 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetId(self)


    def SetId(self, _arg: 'int const') -> "void":
        """SetId(itkSpatialObject3 self, int const _arg)"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetId(self, _arg)


    def SetParentId(self, _arg: 'int const') -> "void":
        """
        SetParentId(itkSpatialObject3 self, int const _arg)

        Set/Get the parent
        Identification number 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetParentId(self, _arg)


    def GetParentId(self) -> "int const &":
        """GetParentId(itkSpatialObject3 self) -> int const &"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetParentId(self)


    def SetTreeNode(self, _arg: 'itkSpatialObjectTreeNode3') -> "void":
        """
        SetTreeNode(itkSpatialObject3 self, itkSpatialObjectTreeNode3 _arg)

        Set the tree container

        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetTreeNode(self, _arg)


    def GetModifiableTreeNode(self) -> "itkSpatialObjectTreeNode3 *":
        """GetModifiableTreeNode(itkSpatialObject3 self) -> itkSpatialObjectTreeNode3"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableTreeNode(self)


    def GetTreeNode(self, *args) -> "itkSpatialObjectTreeNode3 *":
        """
        GetTreeNode(itkSpatialObject3 self) -> itkSpatialObjectTreeNode3
        GetTreeNode(itkSpatialObject3 self) -> itkSpatialObjectTreeNode3
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetTreeNode(self, *args)


    def SetSpacing(self, spacing: 'double const *') -> "void":
        """
        SetSpacing(itkSpatialObject3 self, double const * spacing)

        Theses functions are
        just calling the AffineGeometryFrame functions Set the spacing of the
        spatial object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetSpacing(self, spacing)


    def GetSpacing(self) -> "double const *":
        """
        GetSpacing(itkSpatialObject3 self) -> double const *

        Get the spacing of the
        spatial object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetSpacing(self)


    def GetModifiableIndexToObjectTransform(self) -> "itkScalableAffineTransformD3 *":
        """GetModifiableIndexToObjectTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableIndexToObjectTransform(self)


    def GetIndexToObjectTransform(self, *args) -> "itkScalableAffineTransformD3 *":
        """
        GetIndexToObjectTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        GetIndexToObjectTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3

        Transform
        points from the internal data coordinate system of the object
        (typically the indices of the image from which the object was defined)
        to "physical" space (which accounts for the spacing, orientation,
        and offset of the indices) 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetIndexToObjectTransform(self, *args)


    def SetObjectToParentTransform(self, transform: 'itkScalableAffineTransformD3') -> "void":
        """
        SetObjectToParentTransform(itkSpatialObject3 self, itkScalableAffineTransformD3 transform)

        Transforms points from the object-specific "physical" space to the
        "physical" space of its parent object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetObjectToParentTransform(self, transform)


    def GetObjectToParentTransform(self, *args) -> "itkScalableAffineTransformD3 const *":
        """
        GetObjectToParentTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        GetObjectToParentTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetObjectToParentTransform(self, *args)


    def GetObjectToNodeTransform(self, *args) -> "itkScalableAffineTransformD3 const *":
        """
        GetObjectToNodeTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        GetObjectToNodeTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetObjectToNodeTransform(self, *args)


    def AddSpatialObject(self, pointer: 'itkSpatialObject3') -> "void":
        """
        AddSpatialObject(itkSpatialObject3 self, itkSpatialObject3 pointer)

        Theses functions
        are just calling the itkSpatialObjectTreeNode functions Add an object
        to the list of children. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_AddSpatialObject(self, pointer)


    def RemoveSpatialObject(self, object: 'itkSpatialObject3') -> "void":
        """
        RemoveSpatialObject(itkSpatialObject3 self, itkSpatialObject3 object)

        Remove the
        object passed as arguments from the list of children. May this
        function should return a false value if the object to remove is not
        found in the list. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_RemoveSpatialObject(self, object)


    def GetParent(self, *args) -> "itkSpatialObject3 *":
        """
        GetParent(itkSpatialObject3 self) -> itkSpatialObject3
        GetParent(itkSpatialObject3 self) -> itkSpatialObject3

        Return a pointer to the
        parent object in the hierarchy tree 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetParent(self, *args)


    def GetChildren(self, depth: 'unsigned int'=0, name: 'char *'=None) -> "std::list< itkSpatialObject3_Pointer,std::allocator< itkSpatialObject3_Pointer > > *":
        """
        GetChildren(itkSpatialObject3 self, unsigned int depth=0, char * name=None) -> listitkSpatialObject3_Pointer
        GetChildren(itkSpatialObject3 self, unsigned int depth=0) -> listitkSpatialObject3_Pointer
        GetChildren(itkSpatialObject3 self) -> listitkSpatialObject3_Pointer

        Returns a list of
        pointer to the children affiliated to this object. A depth of 0
        returns the immediate childred. A depth of 1 returns the children and
        those children's children. WARNING:  User is responsible for freeing
        the list, but not the elements of the list. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetChildren(self, depth, name)


    def GetNumberOfChildren(self, depth: 'unsigned int'=0, name: 'char *'=None) -> "unsigned int":
        """
        GetNumberOfChildren(itkSpatialObject3 self, unsigned int depth=0, char * name=None) -> unsigned int
        GetNumberOfChildren(itkSpatialObject3 self, unsigned int depth=0) -> unsigned int
        GetNumberOfChildren(itkSpatialObject3 self) -> unsigned int

        Returns the
        number of children currently assigned to the object. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetNumberOfChildren(self, depth, name)


    def SetChildren(self, children: 'listitkSpatialObject3_Pointer') -> "void":
        """
        SetChildren(itkSpatialObject3 self, listitkSpatialObject3_Pointer children)

        Set the list of
        pointers to children to the list passed as argument. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetChildren(self, children)


    def Clear(self) -> "void":
        """
        Clear(itkSpatialObject3 self)

        Clear the spatial object by
        deleting all lists of children and subchildren 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_Clear(self)


    def ComputeBoundingBox(self) -> "bool":
        """
        ComputeBoundingBox(itkSpatialObject3 self) -> bool

        Compute an axis-
        aligned bounding box for an object and its selected children, down to
        a specified depth. After computation, the resulting bounding box is
        stored in this->m_Bounds.

        By default, the bounding box children depth is maximum, meaning that
        the bounding box for the object and all its recursive children is
        computed. This depth can be set (before calling ComputeBoundingBox)
        using SetBoundingBoxChildrenDepth().

        By calling SetBoundingBoxChildrenName(), it is possible to restrict
        the bounding box computation to objects of a specified type or family
        of types. The spatial objects included in the computation are those
        whose typenames share, as their initial substring, the string
        specified via SetBoundingBoxChildrenName(). The root spatial object
        (on which the method is called) is not treated specially. If its
        typename does not match the bounding box children name, then it is not
        included in the bounding box computation, but its descendents that
        match the string are included. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_ComputeBoundingBox(self)


    def ComputeLocalBoundingBox(self) -> "bool":
        """ComputeLocalBoundingBox(itkSpatialObject3 self) -> bool"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_ComputeLocalBoundingBox(self)


    def GetBoundingBox(self) -> "itkBoundingBoxUL3DVCULPD3 *":
        """
        GetBoundingBox(itkSpatialObject3 self) -> itkBoundingBoxUL3DVCULPD3

        Get a pointer to the
        bounding box of the object. The extents and the position of the box
        are not computed. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetBoundingBox(self)


    def SetBoundingBoxChildrenDepth(self, _arg: 'unsigned int const') -> "void":
        """
        SetBoundingBoxChildrenDepth(itkSpatialObject3 self, unsigned int const _arg)

        Set/Get
        the depth at which the bounding box is computed 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetBoundingBoxChildrenDepth(self, _arg)


    def GetBoundingBoxChildrenDepth(self) -> "unsigned int const &":
        """GetBoundingBoxChildrenDepth(itkSpatialObject3 self) -> unsigned int const &"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetBoundingBoxChildrenDepth(self)


    def SetBoundingBoxChildrenName(self, _arg: 'std::string const') -> "void":
        """
        SetBoundingBoxChildrenName(itkSpatialObject3 self, std::string const _arg)

        Set/Get
        the name of the children to consider when computing the bounding box

        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetBoundingBoxChildrenName(self, _arg)


    def GetBoundingBoxChildrenName(self) -> "std::string const &":
        """GetBoundingBoxChildrenName(itkSpatialObject3 self) -> std::string const &"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetBoundingBoxChildrenName(self)


    def SetParent(self, parent: 'itkSpatialObject3') -> "void":
        """
        SetParent(itkSpatialObject3 self, itkSpatialObject3 parent)

        Set the pointer to the
        parent object in the tree hierarchy used for the spatial object
        patter. 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetParent(self, parent)


    def SetNodeToParentNodeTransform(self, transform: 'itkScalableAffineTransformD3') -> "void":
        """
        SetNodeToParentNodeTransform(itkSpatialObject3 self, itkScalableAffineTransformD3 transform)

        These
        function are just calling the node container transforms 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetNodeToParentNodeTransform(self, transform)


    def GetNodeToParentNodeTransform(self, *args) -> "itkScalableAffineTransformD3 const *":
        """
        GetNodeToParentNodeTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        GetNodeToParentNodeTransform(itkSpatialObject3 self) -> itkScalableAffineTransformD3
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetNodeToParentNodeTransform(self, *args)


    def SetDefaultInsideValue(self, _arg: 'double const') -> "void":
        """
        SetDefaultInsideValue(itkSpatialObject3 self, double const _arg)

        Set/Get the
        default inside value ( ValueAt()) of the object. Default is 1.0 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetDefaultInsideValue(self, _arg)


    def GetDefaultInsideValue(self) -> "double":
        """GetDefaultInsideValue(itkSpatialObject3 self) -> double"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetDefaultInsideValue(self)


    def SetDefaultOutsideValue(self, _arg: 'double const') -> "void":
        """
        SetDefaultOutsideValue(itkSpatialObject3 self, double const _arg)

        Set/Get the
        default outside value ( ValueAt()) of the object. Default is 0.0 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_SetDefaultOutsideValue(self, _arg)


    def GetDefaultOutsideValue(self) -> "double":
        """GetDefaultOutsideValue(itkSpatialObject3 self) -> double"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetDefaultOutsideValue(self)


    def GetSpatialObjectTypeAsString(self) -> "std::string":
        """
        GetSpatialObjectTypeAsString(itkSpatialObject3 self) -> std::string

        Return
        the type of the spatial object as a string This is used by the
        SpatialObjectFactory 
        """
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetSpatialObjectTypeAsString(self)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkSpatialObject3

    def cast(obj: 'itkLightObject') -> "itkSpatialObject3 *":
        """cast(itkLightObject obj) -> itkSpatialObject3"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkSpatialObject3 *":
        """GetPointer(itkSpatialObject3 self) -> itkSpatialObject3"""
        return _itkSpatialObjectBasePython.itkSpatialObject3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkSpatialObject3

        Create a new object of the class itkSpatialObject3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpatialObject3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSpatialObject3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSpatialObject3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSpatialObject3.GetMaximumDepth = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetMaximumDepth, None, itkSpatialObject3)
itkSpatialObject3.HasParent = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_HasParent, None, itkSpatialObject3)
itkSpatialObject3.GetTypeName = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetTypeName, None, itkSpatialObject3)
itkSpatialObject3.GetObjectDimension = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetObjectDimension, None, itkSpatialObject3)
itkSpatialObject3.Clone = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_Clone, None, itkSpatialObject3)
itkSpatialObject3.SetAffineGeometryFrame = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetAffineGeometryFrame, None, itkSpatialObject3)
itkSpatialObject3.GetModifiableAffineGeometryFrame = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableAffineGeometryFrame, None, itkSpatialObject3)
itkSpatialObject3.GetAffineGeometryFrame = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetAffineGeometryFrame, None, itkSpatialObject3)
itkSpatialObject3.SetObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetObjectToWorldTransform, None, itkSpatialObject3)
itkSpatialObject3.GetModifiableObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableObjectToWorldTransform, None, itkSpatialObject3)
itkSpatialObject3.GetObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetObjectToWorldTransform, None, itkSpatialObject3)
itkSpatialObject3.GetModifiableIndexToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableIndexToWorldTransform, None, itkSpatialObject3)
itkSpatialObject3.GetIndexToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetIndexToWorldTransform, None, itkSpatialObject3)
itkSpatialObject3.ComputeObjectToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_ComputeObjectToWorldTransform, None, itkSpatialObject3)
itkSpatialObject3.ComputeObjectToParentTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_ComputeObjectToParentTransform, None, itkSpatialObject3)
itkSpatialObject3.GetTransformMTime = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetTransformMTime, None, itkSpatialObject3)
itkSpatialObject3.GetWorldTransformMTime = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetWorldTransformMTime, None, itkSpatialObject3)
itkSpatialObject3.ValueAt = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_ValueAt, None, itkSpatialObject3)
itkSpatialObject3.IsEvaluableAt = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_IsEvaluableAt, None, itkSpatialObject3)
itkSpatialObject3.IsInside = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_IsInside, None, itkSpatialObject3)
itkSpatialObject3.Evaluate = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_Evaluate, None, itkSpatialObject3)
itkSpatialObject3.DerivativeAt = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_DerivativeAt, None, itkSpatialObject3)
itkSpatialObject3.GetObjectMTime = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetObjectMTime, None, itkSpatialObject3)
itkSpatialObject3.SetLargestPossibleRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetLargestPossibleRegion, None, itkSpatialObject3)
itkSpatialObject3.GetLargestPossibleRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetLargestPossibleRegion, None, itkSpatialObject3)
itkSpatialObject3.SetBufferedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetBufferedRegion, None, itkSpatialObject3)
itkSpatialObject3.GetBufferedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetBufferedRegion, None, itkSpatialObject3)
itkSpatialObject3.SetRequestedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetRequestedRegion, None, itkSpatialObject3)
itkSpatialObject3.GetRequestedRegion = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetRequestedRegion, None, itkSpatialObject3)
itkSpatialObject3.GetOffsetTable = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetOffsetTable, None, itkSpatialObject3)
itkSpatialObject3.ComputeOffset = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_ComputeOffset, None, itkSpatialObject3)
itkSpatialObject3.ComputeIndex = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_ComputeIndex, None, itkSpatialObject3)
itkSpatialObject3.GetProperty = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetProperty, None, itkSpatialObject3)
itkSpatialObject3.SetProperty = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetProperty, None, itkSpatialObject3)
itkSpatialObject3.GetId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetId, None, itkSpatialObject3)
itkSpatialObject3.SetId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetId, None, itkSpatialObject3)
itkSpatialObject3.SetParentId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetParentId, None, itkSpatialObject3)
itkSpatialObject3.GetParentId = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetParentId, None, itkSpatialObject3)
itkSpatialObject3.SetTreeNode = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetTreeNode, None, itkSpatialObject3)
itkSpatialObject3.GetModifiableTreeNode = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableTreeNode, None, itkSpatialObject3)
itkSpatialObject3.GetTreeNode = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetTreeNode, None, itkSpatialObject3)
itkSpatialObject3.SetSpacing = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetSpacing, None, itkSpatialObject3)
itkSpatialObject3.GetSpacing = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetSpacing, None, itkSpatialObject3)
itkSpatialObject3.GetModifiableIndexToObjectTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetModifiableIndexToObjectTransform, None, itkSpatialObject3)
itkSpatialObject3.GetIndexToObjectTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetIndexToObjectTransform, None, itkSpatialObject3)
itkSpatialObject3.SetObjectToParentTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetObjectToParentTransform, None, itkSpatialObject3)
itkSpatialObject3.GetObjectToParentTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetObjectToParentTransform, None, itkSpatialObject3)
itkSpatialObject3.GetObjectToNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetObjectToNodeTransform, None, itkSpatialObject3)
itkSpatialObject3.AddSpatialObject = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_AddSpatialObject, None, itkSpatialObject3)
itkSpatialObject3.RemoveSpatialObject = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_RemoveSpatialObject, None, itkSpatialObject3)
itkSpatialObject3.GetParent = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetParent, None, itkSpatialObject3)
itkSpatialObject3.GetChildren = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetChildren, None, itkSpatialObject3)
itkSpatialObject3.GetNumberOfChildren = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetNumberOfChildren, None, itkSpatialObject3)
itkSpatialObject3.SetChildren = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetChildren, None, itkSpatialObject3)
itkSpatialObject3.Clear = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_Clear, None, itkSpatialObject3)
itkSpatialObject3.ComputeBoundingBox = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_ComputeBoundingBox, None, itkSpatialObject3)
itkSpatialObject3.ComputeLocalBoundingBox = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_ComputeLocalBoundingBox, None, itkSpatialObject3)
itkSpatialObject3.GetBoundingBox = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetBoundingBox, None, itkSpatialObject3)
itkSpatialObject3.SetBoundingBoxChildrenDepth = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetBoundingBoxChildrenDepth, None, itkSpatialObject3)
itkSpatialObject3.GetBoundingBoxChildrenDepth = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetBoundingBoxChildrenDepth, None, itkSpatialObject3)
itkSpatialObject3.SetBoundingBoxChildrenName = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetBoundingBoxChildrenName, None, itkSpatialObject3)
itkSpatialObject3.GetBoundingBoxChildrenName = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetBoundingBoxChildrenName, None, itkSpatialObject3)
itkSpatialObject3.SetParent = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetParent, None, itkSpatialObject3)
itkSpatialObject3.SetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetNodeToParentNodeTransform, None, itkSpatialObject3)
itkSpatialObject3.GetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetNodeToParentNodeTransform, None, itkSpatialObject3)
itkSpatialObject3.SetDefaultInsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetDefaultInsideValue, None, itkSpatialObject3)
itkSpatialObject3.GetDefaultInsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetDefaultInsideValue, None, itkSpatialObject3)
itkSpatialObject3.SetDefaultOutsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_SetDefaultOutsideValue, None, itkSpatialObject3)
itkSpatialObject3.GetDefaultOutsideValue = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetDefaultOutsideValue, None, itkSpatialObject3)
itkSpatialObject3.GetSpatialObjectTypeAsString = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetSpatialObjectTypeAsString, None, itkSpatialObject3)
itkSpatialObject3.GetPointer = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObject3_GetPointer, None, itkSpatialObject3)
itkSpatialObject3_swigregister = _itkSpatialObjectBasePython.itkSpatialObject3_swigregister
itkSpatialObject3_swigregister(itkSpatialObject3)

def itkSpatialObject3___New_orig__() -> "itkSpatialObject3_Pointer":
    """itkSpatialObject3___New_orig__() -> itkSpatialObject3_Pointer"""
    return _itkSpatialObjectBasePython.itkSpatialObject3___New_orig__()

def itkSpatialObject3_cast(obj: 'itkLightObject') -> "itkSpatialObject3 *":
    """itkSpatialObject3_cast(itkLightObject obj) -> itkSpatialObject3"""
    return _itkSpatialObjectBasePython.itkSpatialObject3_cast(obj)

class itkTreeNodeSO2(ITKCommonBasePython.itkObject):
    """


    Represents a node in a tree.

    This class derives from the Object class.

    The class is templated over the type of the elements.

    Parameters:
    -----------

    TValue:  = Element type stored in the node

    C++ includes: itkTreeNode.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTreeNodeSO2_Pointer":
        """__New_orig__() -> itkTreeNodeSO2_Pointer"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTreeNodeSO2_Pointer":
        """Clone(itkTreeNodeSO2 self) -> itkTreeNodeSO2_Pointer"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_Clone(self)


    def Get(self) -> "itkSpatialObject2 *const &":
        """Get(itkTreeNodeSO2 self) -> itkSpatialObject2"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_Get(self)


    def Set(self, data: 'itkSpatialObject2') -> "itkSpatialObject2 *":
        """
        Set(itkTreeNodeSO2 self, itkSpatialObject2 data) -> itkSpatialObject2

        Set the current value of the
        node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_Set(self, data)


    def GetChild(self, number: 'long') -> "itkTreeNodeSO2 *":
        """
        GetChild(itkTreeNodeSO2 self, long number) -> itkTreeNodeSO2

        Get the child node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_GetChild(self, number)


    def GetParent(self) -> "itkTreeNodeSO2 *":
        """
        GetParent(itkTreeNodeSO2 self) -> itkTreeNodeSO2

        Get the parent node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_GetParent(self)


    def HasChildren(self) -> "bool":
        """
        HasChildren(itkTreeNodeSO2 self) -> bool

        Return true if the node
        has children 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_HasChildren(self)


    def HasParent(self) -> "bool":
        """
        HasParent(itkTreeNodeSO2 self) -> bool

        Return true if the node
        has a parent 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_HasParent(self)


    def SetParent(self, n: 'itkTreeNodeSO2') -> "void":
        """
        SetParent(itkTreeNodeSO2 self, itkTreeNodeSO2 n)

        Set the parent of the
        node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_SetParent(self, n)


    def CountChildren(self) -> "long":
        """
        CountChildren(itkTreeNodeSO2 self) -> long

        Return the number of
        children 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_CountChildren(self)


    def Remove(self, n: 'itkTreeNodeSO2') -> "bool":
        """
        Remove(itkTreeNodeSO2 self, itkTreeNodeSO2 n) -> bool

        Remove a node from the node

        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_Remove(self, n)


    def GetNumberOfChildren(self, depth: 'unsigned int'=0, name: 'char *'=None) -> "long":
        """
        GetNumberOfChildren(itkTreeNodeSO2 self, unsigned int depth=0, char * name=None) -> long
        GetNumberOfChildren(itkTreeNodeSO2 self, unsigned int depth=0) -> long
        GetNumberOfChildren(itkTreeNodeSO2 self) -> long

        Get the number
        of children given a name and depth 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_GetNumberOfChildren(self, depth, name)


    def ReplaceChild(self, oldChild: 'itkTreeNodeSO2', newChild: 'itkTreeNodeSO2') -> "bool":
        """
        ReplaceChild(itkTreeNodeSO2 self, itkTreeNodeSO2 oldChild, itkTreeNodeSO2 newChild) -> bool

        Replace a given child
        by a new one 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_ReplaceChild(self, oldChild, newChild)


    def ChildPosition(self, *args) -> "long":
        """
        ChildPosition(itkTreeNodeSO2 self, itkTreeNodeSO2 node) -> long
        ChildPosition(itkTreeNodeSO2 self, itkSpatialObject2 node) -> long

        Return the child
        position given a value 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_ChildPosition(self, *args)


    def AddChild(self, *args) -> "void":
        """
        AddChild(itkTreeNodeSO2 self, itkTreeNodeSO2 node)
        AddChild(itkTreeNodeSO2 self, long number, itkTreeNodeSO2 node)

        Add a child to the node
        and specify the number in the children list 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_AddChild(self, *args)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkTreeNodeSO2

    def cast(obj: 'itkLightObject') -> "itkTreeNodeSO2 *":
        """cast(itkLightObject obj) -> itkTreeNodeSO2"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkTreeNodeSO2 *":
        """GetPointer(itkTreeNodeSO2 self) -> itkTreeNodeSO2"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTreeNodeSO2

        Create a new object of the class itkTreeNodeSO2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTreeNodeSO2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTreeNodeSO2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTreeNodeSO2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTreeNodeSO2.Clone = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_Clone, None, itkTreeNodeSO2)
itkTreeNodeSO2.Get = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_Get, None, itkTreeNodeSO2)
itkTreeNodeSO2.Set = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_Set, None, itkTreeNodeSO2)
itkTreeNodeSO2.GetChild = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_GetChild, None, itkTreeNodeSO2)
itkTreeNodeSO2.GetParent = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_GetParent, None, itkTreeNodeSO2)
itkTreeNodeSO2.HasChildren = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_HasChildren, None, itkTreeNodeSO2)
itkTreeNodeSO2.HasParent = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_HasParent, None, itkTreeNodeSO2)
itkTreeNodeSO2.SetParent = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_SetParent, None, itkTreeNodeSO2)
itkTreeNodeSO2.CountChildren = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_CountChildren, None, itkTreeNodeSO2)
itkTreeNodeSO2.Remove = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_Remove, None, itkTreeNodeSO2)
itkTreeNodeSO2.GetNumberOfChildren = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_GetNumberOfChildren, None, itkTreeNodeSO2)
itkTreeNodeSO2.ReplaceChild = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_ReplaceChild, None, itkTreeNodeSO2)
itkTreeNodeSO2.ChildPosition = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_ChildPosition, None, itkTreeNodeSO2)
itkTreeNodeSO2.AddChild = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_AddChild, None, itkTreeNodeSO2)
itkTreeNodeSO2.GetPointer = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO2_GetPointer, None, itkTreeNodeSO2)
itkTreeNodeSO2_swigregister = _itkSpatialObjectBasePython.itkTreeNodeSO2_swigregister
itkTreeNodeSO2_swigregister(itkTreeNodeSO2)

def itkTreeNodeSO2___New_orig__() -> "itkTreeNodeSO2_Pointer":
    """itkTreeNodeSO2___New_orig__() -> itkTreeNodeSO2_Pointer"""
    return _itkSpatialObjectBasePython.itkTreeNodeSO2___New_orig__()

def itkTreeNodeSO2_cast(obj: 'itkLightObject') -> "itkTreeNodeSO2 *":
    """itkTreeNodeSO2_cast(itkLightObject obj) -> itkTreeNodeSO2"""
    return _itkSpatialObjectBasePython.itkTreeNodeSO2_cast(obj)

class itkTreeNodeSO3(ITKCommonBasePython.itkObject):
    """


    Represents a node in a tree.

    This class derives from the Object class.

    The class is templated over the type of the elements.

    Parameters:
    -----------

    TValue:  = Element type stored in the node

    C++ includes: itkTreeNode.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTreeNodeSO3_Pointer":
        """__New_orig__() -> itkTreeNodeSO3_Pointer"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTreeNodeSO3_Pointer":
        """Clone(itkTreeNodeSO3 self) -> itkTreeNodeSO3_Pointer"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_Clone(self)


    def Get(self) -> "itkSpatialObject3 *const &":
        """Get(itkTreeNodeSO3 self) -> itkSpatialObject3"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_Get(self)


    def Set(self, data: 'itkSpatialObject3') -> "itkSpatialObject3 *":
        """
        Set(itkTreeNodeSO3 self, itkSpatialObject3 data) -> itkSpatialObject3

        Set the current value of the
        node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_Set(self, data)


    def GetChild(self, number: 'long') -> "itkTreeNodeSO3 *":
        """
        GetChild(itkTreeNodeSO3 self, long number) -> itkTreeNodeSO3

        Get the child node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_GetChild(self, number)


    def GetParent(self) -> "itkTreeNodeSO3 *":
        """
        GetParent(itkTreeNodeSO3 self) -> itkTreeNodeSO3

        Get the parent node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_GetParent(self)


    def HasChildren(self) -> "bool":
        """
        HasChildren(itkTreeNodeSO3 self) -> bool

        Return true if the node
        has children 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_HasChildren(self)


    def HasParent(self) -> "bool":
        """
        HasParent(itkTreeNodeSO3 self) -> bool

        Return true if the node
        has a parent 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_HasParent(self)


    def SetParent(self, n: 'itkTreeNodeSO3') -> "void":
        """
        SetParent(itkTreeNodeSO3 self, itkTreeNodeSO3 n)

        Set the parent of the
        node 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_SetParent(self, n)


    def CountChildren(self) -> "long":
        """
        CountChildren(itkTreeNodeSO3 self) -> long

        Return the number of
        children 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_CountChildren(self)


    def Remove(self, n: 'itkTreeNodeSO3') -> "bool":
        """
        Remove(itkTreeNodeSO3 self, itkTreeNodeSO3 n) -> bool

        Remove a node from the node

        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_Remove(self, n)


    def GetNumberOfChildren(self, depth: 'unsigned int'=0, name: 'char *'=None) -> "long":
        """
        GetNumberOfChildren(itkTreeNodeSO3 self, unsigned int depth=0, char * name=None) -> long
        GetNumberOfChildren(itkTreeNodeSO3 self, unsigned int depth=0) -> long
        GetNumberOfChildren(itkTreeNodeSO3 self) -> long

        Get the number
        of children given a name and depth 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_GetNumberOfChildren(self, depth, name)


    def ReplaceChild(self, oldChild: 'itkTreeNodeSO3', newChild: 'itkTreeNodeSO3') -> "bool":
        """
        ReplaceChild(itkTreeNodeSO3 self, itkTreeNodeSO3 oldChild, itkTreeNodeSO3 newChild) -> bool

        Replace a given child
        by a new one 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_ReplaceChild(self, oldChild, newChild)


    def ChildPosition(self, *args) -> "long":
        """
        ChildPosition(itkTreeNodeSO3 self, itkTreeNodeSO3 node) -> long
        ChildPosition(itkTreeNodeSO3 self, itkSpatialObject3 node) -> long

        Return the child
        position given a value 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_ChildPosition(self, *args)


    def AddChild(self, *args) -> "void":
        """
        AddChild(itkTreeNodeSO3 self, itkTreeNodeSO3 node)
        AddChild(itkTreeNodeSO3 self, long number, itkTreeNodeSO3 node)

        Add a child to the node
        and specify the number in the children list 
        """
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_AddChild(self, *args)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkTreeNodeSO3

    def cast(obj: 'itkLightObject') -> "itkTreeNodeSO3 *":
        """cast(itkLightObject obj) -> itkTreeNodeSO3"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkTreeNodeSO3 *":
        """GetPointer(itkTreeNodeSO3 self) -> itkTreeNodeSO3"""
        return _itkSpatialObjectBasePython.itkTreeNodeSO3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTreeNodeSO3

        Create a new object of the class itkTreeNodeSO3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTreeNodeSO3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTreeNodeSO3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTreeNodeSO3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTreeNodeSO3.Clone = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_Clone, None, itkTreeNodeSO3)
itkTreeNodeSO3.Get = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_Get, None, itkTreeNodeSO3)
itkTreeNodeSO3.Set = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_Set, None, itkTreeNodeSO3)
itkTreeNodeSO3.GetChild = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_GetChild, None, itkTreeNodeSO3)
itkTreeNodeSO3.GetParent = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_GetParent, None, itkTreeNodeSO3)
itkTreeNodeSO3.HasChildren = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_HasChildren, None, itkTreeNodeSO3)
itkTreeNodeSO3.HasParent = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_HasParent, None, itkTreeNodeSO3)
itkTreeNodeSO3.SetParent = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_SetParent, None, itkTreeNodeSO3)
itkTreeNodeSO3.CountChildren = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_CountChildren, None, itkTreeNodeSO3)
itkTreeNodeSO3.Remove = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_Remove, None, itkTreeNodeSO3)
itkTreeNodeSO3.GetNumberOfChildren = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_GetNumberOfChildren, None, itkTreeNodeSO3)
itkTreeNodeSO3.ReplaceChild = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_ReplaceChild, None, itkTreeNodeSO3)
itkTreeNodeSO3.ChildPosition = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_ChildPosition, None, itkTreeNodeSO3)
itkTreeNodeSO3.AddChild = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_AddChild, None, itkTreeNodeSO3)
itkTreeNodeSO3.GetPointer = new_instancemethod(_itkSpatialObjectBasePython.itkTreeNodeSO3_GetPointer, None, itkTreeNodeSO3)
itkTreeNodeSO3_swigregister = _itkSpatialObjectBasePython.itkTreeNodeSO3_swigregister
itkTreeNodeSO3_swigregister(itkTreeNodeSO3)

def itkTreeNodeSO3___New_orig__() -> "itkTreeNodeSO3_Pointer":
    """itkTreeNodeSO3___New_orig__() -> itkTreeNodeSO3_Pointer"""
    return _itkSpatialObjectBasePython.itkTreeNodeSO3___New_orig__()

def itkTreeNodeSO3_cast(obj: 'itkLightObject') -> "itkTreeNodeSO3 *":
    """itkTreeNodeSO3_cast(itkLightObject obj) -> itkTreeNodeSO3"""
    return _itkSpatialObjectBasePython.itkTreeNodeSO3_cast(obj)

class itkCylinderSpatialObject(itkSpatialObject3):
    """


    This class describe a cylinder in 3D only.

    C++ includes: itkCylinderSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCylinderSpatialObject_Pointer":
        """__New_orig__() -> itkCylinderSpatialObject_Pointer"""
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCylinderSpatialObject_Pointer":
        """Clone(itkCylinderSpatialObject self) -> itkCylinderSpatialObject_Pointer"""
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_Clone(self)


    def SetRadius(self, _arg: 'double const') -> "void":
        """
        SetRadius(itkCylinderSpatialObject self, double const _arg)

        Set/Get the radius 
        """
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_SetRadius(self, _arg)


    def GetRadius(self) -> "double const &":
        """GetRadius(itkCylinderSpatialObject self) -> double const &"""
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_GetRadius(self)


    def SetHeight(self, _arg: 'double const') -> "void":
        """
        SetHeight(itkCylinderSpatialObject self, double const _arg)

        Set/Get the height 
        """
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_SetHeight(self, _arg)


    def GetHeight(self) -> "double const &":
        """GetHeight(itkCylinderSpatialObject self) -> double const &"""
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_GetHeight(self)


    def ValueAt(self, point: 'itkPointD3', value: 'double &', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        ValueAt(itkCylinderSpatialObject self, itkPointD3 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkCylinderSpatialObject self, itkPointD3 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkCylinderSpatialObject self, itkPointD3 point, double & value) -> bool

        Returns a degree of
        membership to the object. That's useful for fuzzy objects. 
        """
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_ValueAt(self, point, value, depth, name)


    def IsEvaluableAt(self, point: 'itkPointD3', depth: 'unsigned int'=0, name: 'char *'=None) -> "bool":
        """
        IsEvaluableAt(itkCylinderSpatialObject self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkCylinderSpatialObject self, itkPointD3 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkCylinderSpatialObject self, itkPointD3 point) -> bool

        Return true if the
        object provides a method to evaluate the value at the specified point,
        false otherwise. 
        """
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_IsEvaluableAt(self, point, depth, name)


    def IsInside(self, *args) -> "bool":
        """
        IsInside(itkCylinderSpatialObject self, itkPointD3 point, unsigned int depth, char * arg2) -> bool
        IsInside(itkCylinderSpatialObject self, itkPointD3 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_IsInside(self, *args)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkCylinderSpatialObject

    def cast(obj: 'itkLightObject') -> "itkCylinderSpatialObject *":
        """cast(itkLightObject obj) -> itkCylinderSpatialObject"""
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkCylinderSpatialObject *":
        """GetPointer(itkCylinderSpatialObject self) -> itkCylinderSpatialObject"""
        return _itkSpatialObjectBasePython.itkCylinderSpatialObject_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkCylinderSpatialObject

        Create a new object of the class itkCylinderSpatialObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCylinderSpatialObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCylinderSpatialObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCylinderSpatialObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCylinderSpatialObject.Clone = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_Clone, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.SetRadius = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_SetRadius, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.GetRadius = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_GetRadius, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.SetHeight = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_SetHeight, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.GetHeight = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_GetHeight, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.ValueAt = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_ValueAt, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.IsEvaluableAt = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_IsEvaluableAt, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.IsInside = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_IsInside, None, itkCylinderSpatialObject)
itkCylinderSpatialObject.GetPointer = new_instancemethod(_itkSpatialObjectBasePython.itkCylinderSpatialObject_GetPointer, None, itkCylinderSpatialObject)
itkCylinderSpatialObject_swigregister = _itkSpatialObjectBasePython.itkCylinderSpatialObject_swigregister
itkCylinderSpatialObject_swigregister(itkCylinderSpatialObject)

def itkCylinderSpatialObject___New_orig__() -> "itkCylinderSpatialObject_Pointer":
    """itkCylinderSpatialObject___New_orig__() -> itkCylinderSpatialObject_Pointer"""
    return _itkSpatialObjectBasePython.itkCylinderSpatialObject___New_orig__()

def itkCylinderSpatialObject_cast(obj: 'itkLightObject') -> "itkCylinderSpatialObject *":
    """itkCylinderSpatialObject_cast(itkLightObject obj) -> itkCylinderSpatialObject"""
    return _itkSpatialObjectBasePython.itkCylinderSpatialObject_cast(obj)

class itkMetaEvent(itkMetaEvent_Superclass):
    """


    Event abstract class.

    The itk::MetaEvent inherits from the MetaEvent that is provided by the
    MetaIO/src/metaEvent.h class.

    C++ includes: itkMetaEvent.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkMetaEvent

    def __init__(self, *args):
        """
        __init__(itkMetaEvent self) -> itkMetaEvent
        __init__(itkMetaEvent self, itkMetaEvent arg0) -> itkMetaEvent



        Event abstract class.

        The itk::MetaEvent inherits from the MetaEvent that is provided by the
        MetaIO/src/metaEvent.h class.

        C++ includes: itkMetaEvent.h 
        """
        _itkSpatialObjectBasePython.itkMetaEvent_swiginit(self, _itkSpatialObjectBasePython.new_itkMetaEvent(*args))
itkMetaEvent_swigregister = _itkSpatialObjectBasePython.itkMetaEvent_swigregister
itkMetaEvent_swigregister(itkMetaEvent)

class itkSpatialObjectTreeNode2(itkTreeNodeSO2):
    """


    TODO.

    C++ includes: itkSpatialObjectTreeNode.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSpatialObjectTreeNode2_Pointer":
        """__New_orig__() -> itkSpatialObjectTreeNode2_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSpatialObjectTreeNode2_Pointer":
        """Clone(itkSpatialObjectTreeNode2 self) -> itkSpatialObjectTreeNode2_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_Clone(self)


    def SetData(self, data: 'itkSpatialObject2') -> "void":
        """
        SetData(itkSpatialObjectTreeNode2 self, itkSpatialObject2 data)

        Set the SpatialObject
        pointer 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_SetData(self, data)


    def SetNodeToParentNodeTransform(self, _arg: 'itkScalableAffineTransformD2') -> "void":
        """
        SetNodeToParentNodeTransform(itkSpatialObjectTreeNode2 self, itkScalableAffineTransformD2 _arg)

        Set/Get the NodeToParenNode transform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_SetNodeToParentNodeTransform(self, _arg)


    def GetNodeToParentNodeTransform(self) -> "itkScalableAffineTransformD2_Pointer const &":
        """GetNodeToParentNodeTransform(itkSpatialObjectTreeNode2 self) -> itkScalableAffineTransformD2_Pointer const &"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_GetNodeToParentNodeTransform(self)


    def SetNodeToWorldTransform(self, _arg: 'itkScalableAffineTransformD2') -> "void":
        """
        SetNodeToWorldTransform(itkSpatialObjectTreeNode2 self, itkScalableAffineTransformD2 _arg)

        Set/Get the
        NodeToParenNode transform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_SetNodeToWorldTransform(self, _arg)


    def GetNodeToWorldTransform(self) -> "itkScalableAffineTransformD2_Pointer const &":
        """GetNodeToWorldTransform(itkSpatialObjectTreeNode2 self) -> itkScalableAffineTransformD2_Pointer const &"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_GetNodeToWorldTransform(self)


    def ComputeNodeToWorldTransform(self) -> "void":
        """
        ComputeNodeToWorldTransform(itkSpatialObjectTreeNode2 self)

        Compute
        the NodeToWorld transform based on the parent 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_ComputeNodeToWorldTransform(self)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkSpatialObjectTreeNode2

    def cast(obj: 'itkLightObject') -> "itkSpatialObjectTreeNode2 *":
        """cast(itkLightObject obj) -> itkSpatialObjectTreeNode2"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkSpatialObjectTreeNode2 *":
        """GetPointer(itkSpatialObjectTreeNode2 self) -> itkSpatialObjectTreeNode2"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkSpatialObjectTreeNode2

        Create a new object of the class itkSpatialObjectTreeNode2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpatialObjectTreeNode2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSpatialObjectTreeNode2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSpatialObjectTreeNode2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSpatialObjectTreeNode2.Clone = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_Clone, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2.SetData = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_SetData, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2.SetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_SetNodeToParentNodeTransform, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2.GetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_GetNodeToParentNodeTransform, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2.SetNodeToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_SetNodeToWorldTransform, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2.GetNodeToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_GetNodeToWorldTransform, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2.ComputeNodeToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_ComputeNodeToWorldTransform, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2.GetPointer = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_GetPointer, None, itkSpatialObjectTreeNode2)
itkSpatialObjectTreeNode2_swigregister = _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_swigregister
itkSpatialObjectTreeNode2_swigregister(itkSpatialObjectTreeNode2)

def itkSpatialObjectTreeNode2___New_orig__() -> "itkSpatialObjectTreeNode2_Pointer":
    """itkSpatialObjectTreeNode2___New_orig__() -> itkSpatialObjectTreeNode2_Pointer"""
    return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2___New_orig__()

def itkSpatialObjectTreeNode2_cast(obj: 'itkLightObject') -> "itkSpatialObjectTreeNode2 *":
    """itkSpatialObjectTreeNode2_cast(itkLightObject obj) -> itkSpatialObjectTreeNode2"""
    return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode2_cast(obj)

class itkSpatialObjectTreeNode3(itkTreeNodeSO3):
    """


    TODO.

    C++ includes: itkSpatialObjectTreeNode.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSpatialObjectTreeNode3_Pointer":
        """__New_orig__() -> itkSpatialObjectTreeNode3_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSpatialObjectTreeNode3_Pointer":
        """Clone(itkSpatialObjectTreeNode3 self) -> itkSpatialObjectTreeNode3_Pointer"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_Clone(self)


    def SetData(self, data: 'itkSpatialObject3') -> "void":
        """
        SetData(itkSpatialObjectTreeNode3 self, itkSpatialObject3 data)

        Set the SpatialObject
        pointer 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_SetData(self, data)


    def SetNodeToParentNodeTransform(self, _arg: 'itkScalableAffineTransformD3') -> "void":
        """
        SetNodeToParentNodeTransform(itkSpatialObjectTreeNode3 self, itkScalableAffineTransformD3 _arg)

        Set/Get the NodeToParenNode transform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_SetNodeToParentNodeTransform(self, _arg)


    def GetNodeToParentNodeTransform(self) -> "itkScalableAffineTransformD3_Pointer const &":
        """GetNodeToParentNodeTransform(itkSpatialObjectTreeNode3 self) -> itkScalableAffineTransformD3_Pointer const &"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_GetNodeToParentNodeTransform(self)


    def SetNodeToWorldTransform(self, _arg: 'itkScalableAffineTransformD3') -> "void":
        """
        SetNodeToWorldTransform(itkSpatialObjectTreeNode3 self, itkScalableAffineTransformD3 _arg)

        Set/Get the
        NodeToParenNode transform 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_SetNodeToWorldTransform(self, _arg)


    def GetNodeToWorldTransform(self) -> "itkScalableAffineTransformD3_Pointer const &":
        """GetNodeToWorldTransform(itkSpatialObjectTreeNode3 self) -> itkScalableAffineTransformD3_Pointer const &"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_GetNodeToWorldTransform(self)


    def ComputeNodeToWorldTransform(self) -> "void":
        """
        ComputeNodeToWorldTransform(itkSpatialObjectTreeNode3 self)

        Compute
        the NodeToWorld transform based on the parent 
        """
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_ComputeNodeToWorldTransform(self)

    __swig_destroy__ = _itkSpatialObjectBasePython.delete_itkSpatialObjectTreeNode3

    def cast(obj: 'itkLightObject') -> "itkSpatialObjectTreeNode3 *":
        """cast(itkLightObject obj) -> itkSpatialObjectTreeNode3"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkSpatialObjectTreeNode3 *":
        """GetPointer(itkSpatialObjectTreeNode3 self) -> itkSpatialObjectTreeNode3"""
        return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkSpatialObjectTreeNode3

        Create a new object of the class itkSpatialObjectTreeNode3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpatialObjectTreeNode3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSpatialObjectTreeNode3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSpatialObjectTreeNode3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSpatialObjectTreeNode3.Clone = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_Clone, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3.SetData = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_SetData, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3.SetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_SetNodeToParentNodeTransform, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3.GetNodeToParentNodeTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_GetNodeToParentNodeTransform, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3.SetNodeToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_SetNodeToWorldTransform, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3.GetNodeToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_GetNodeToWorldTransform, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3.ComputeNodeToWorldTransform = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_ComputeNodeToWorldTransform, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3.GetPointer = new_instancemethod(_itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_GetPointer, None, itkSpatialObjectTreeNode3)
itkSpatialObjectTreeNode3_swigregister = _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_swigregister
itkSpatialObjectTreeNode3_swigregister(itkSpatialObjectTreeNode3)

def itkSpatialObjectTreeNode3___New_orig__() -> "itkSpatialObjectTreeNode3_Pointer":
    """itkSpatialObjectTreeNode3___New_orig__() -> itkSpatialObjectTreeNode3_Pointer"""
    return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3___New_orig__()

def itkSpatialObjectTreeNode3_cast(obj: 'itkLightObject') -> "itkSpatialObjectTreeNode3 *":
    """itkSpatialObjectTreeNode3_cast(itkLightObject obj) -> itkSpatialObjectTreeNode3"""
    return _itkSpatialObjectBasePython.itkSpatialObjectTreeNode3_cast(obj)



