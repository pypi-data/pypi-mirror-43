# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageSpatialObjectPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageSpatialObjectPython', [dirname(__file__)])
        except ImportError:
            import _itkImageSpatialObjectPython
            return _itkImageSpatialObjectPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageSpatialObjectPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageSpatialObjectPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageSpatialObjectPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSpatialObjectBasePython
import itkAffineGeometryFramePython
import itkScalableAffineTransformPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkAffineTransformPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkTransformBasePython
import itkOptimizerParametersPython
import itkArrayPython
import ITKCommonBasePython
import itkArray2DPython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkVariableLengthVectorPython
import itkMatrixOffsetTransformBasePython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImageRegionPython
import itkSpatialObjectPropertyPython
import itkRGBAPixelPython
import itkImagePython
import itkRGBPixelPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython

def itkImageSpatialObject3F_New():
  return itkImageSpatialObject3F.New()


def itkImageSpatialObject3US_New():
  return itkImageSpatialObject3US.New()


def itkImageSpatialObject3SS_New():
  return itkImageSpatialObject3SS.New()


def itkImageSpatialObject3UC_New():
  return itkImageSpatialObject3UC.New()


def itkImageSpatialObject2F_New():
  return itkImageSpatialObject2F.New()


def itkImageSpatialObject2US_New():
  return itkImageSpatialObject2US.New()


def itkImageSpatialObject2SS_New():
  return itkImageSpatialObject2SS.New()


def itkImageSpatialObject2UC_New():
  return itkImageSpatialObject2UC.New()

class itkImageSpatialObject2F(itkSpatialObjectBasePython.itkSpatialObject2):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject2F_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject2F self) -> itkImageSpatialObject2F_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject2F self, itkImageF2 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject2F self) -> itkImageF2

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject2F self, itkPointD2 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject2F self, itkPointD2 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject2F self, itkPointD2 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject2F self, itkPointD2 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject2F self, itkPointD2 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject2F self, itkPointD2 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject2F self, itkPointD2 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject2F self, itkPointD2 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject2F self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject2F self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject2F self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject2F self, itkInterpolateImageFunctionIF2D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject2F self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject2F self) -> itkInterpolateImageFunctionIF2D
        GetInterpolator(itkImageSpatialObject2F self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject2F

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject2F"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject2F self) -> itkImageSpatialObject2F"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2F_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject2F

        Create a new object of the class itkImageSpatialObject2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject2F.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_Clone, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_SetImage, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_GetImage, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_IsEvaluableAt, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_ValueAt, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_IsInside, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_SetSlicePosition, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_GetSlicePosition, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_GetPixelType, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_SetInterpolator, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_GetModifiableInterpolator, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_GetInterpolator, None, itkImageSpatialObject2F)
itkImageSpatialObject2F.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2F_GetPointer, None, itkImageSpatialObject2F)
itkImageSpatialObject2F_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject2F_swigregister
itkImageSpatialObject2F_swigregister(itkImageSpatialObject2F)

def itkImageSpatialObject2F___New_orig__():
    """itkImageSpatialObject2F___New_orig__() -> itkImageSpatialObject2F_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2F___New_orig__()

def itkImageSpatialObject2F_cast(obj):
    """itkImageSpatialObject2F_cast(itkLightObject obj) -> itkImageSpatialObject2F"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2F_cast(obj)

class itkImageSpatialObject2SS(itkSpatialObjectBasePython.itkSpatialObject2):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject2SS_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject2SS self) -> itkImageSpatialObject2SS_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject2SS self, itkImageSS2 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject2SS self) -> itkImageSS2

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject2SS self, itkPointD2 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject2SS self, itkPointD2 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject2SS self, itkPointD2 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject2SS self, itkPointD2 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject2SS self, itkPointD2 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject2SS self, itkPointD2 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject2SS self, itkPointD2 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject2SS self, itkPointD2 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject2SS self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject2SS self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject2SS self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject2SS self, itkInterpolateImageFunctionISS2D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject2SS self) -> itkInterpolateImageFunctionISS2D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject2SS self) -> itkInterpolateImageFunctionISS2D
        GetInterpolator(itkImageSpatialObject2SS self) -> itkInterpolateImageFunctionISS2D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject2SS

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject2SS"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject2SS self) -> itkImageSpatialObject2SS"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject2SS

        Create a new object of the class itkImageSpatialObject2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject2SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject2SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject2SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject2SS.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_Clone, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_SetImage, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetImage, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_IsEvaluableAt, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_ValueAt, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_IsInside, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_SetSlicePosition, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetSlicePosition, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetPixelType, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_SetInterpolator, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetModifiableInterpolator, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetInterpolator, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2SS_GetPointer, None, itkImageSpatialObject2SS)
itkImageSpatialObject2SS_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject2SS_swigregister
itkImageSpatialObject2SS_swigregister(itkImageSpatialObject2SS)

def itkImageSpatialObject2SS___New_orig__():
    """itkImageSpatialObject2SS___New_orig__() -> itkImageSpatialObject2SS_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2SS___New_orig__()

def itkImageSpatialObject2SS_cast(obj):
    """itkImageSpatialObject2SS_cast(itkLightObject obj) -> itkImageSpatialObject2SS"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2SS_cast(obj)

class itkImageSpatialObject2UC(itkSpatialObjectBasePython.itkSpatialObject2):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject2UC_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject2UC self) -> itkImageSpatialObject2UC_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject2UC self, itkImageUC2 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject2UC self) -> itkImageUC2

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject2UC self, itkPointD2 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject2UC self, itkPointD2 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject2UC self, itkPointD2 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject2UC self, itkPointD2 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject2UC self, itkPointD2 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject2UC self, itkPointD2 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject2UC self, itkPointD2 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject2UC self, itkPointD2 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject2UC self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject2UC self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject2UC self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject2UC self, itkInterpolateImageFunctionIUC2D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject2UC self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject2UC self) -> itkInterpolateImageFunctionIUC2D
        GetInterpolator(itkImageSpatialObject2UC self) -> itkInterpolateImageFunctionIUC2D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject2UC

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject2UC"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject2UC self) -> itkImageSpatialObject2UC"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject2UC

        Create a new object of the class itkImageSpatialObject2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject2UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject2UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject2UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject2UC.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_Clone, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_SetImage, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetImage, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_IsEvaluableAt, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_ValueAt, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_IsInside, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_SetSlicePosition, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetSlicePosition, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetPixelType, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_SetInterpolator, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetModifiableInterpolator, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetInterpolator, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2UC_GetPointer, None, itkImageSpatialObject2UC)
itkImageSpatialObject2UC_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject2UC_swigregister
itkImageSpatialObject2UC_swigregister(itkImageSpatialObject2UC)

def itkImageSpatialObject2UC___New_orig__():
    """itkImageSpatialObject2UC___New_orig__() -> itkImageSpatialObject2UC_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2UC___New_orig__()

def itkImageSpatialObject2UC_cast(obj):
    """itkImageSpatialObject2UC_cast(itkLightObject obj) -> itkImageSpatialObject2UC"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2UC_cast(obj)

class itkImageSpatialObject2US(itkSpatialObjectBasePython.itkSpatialObject2):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject2US_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject2US self) -> itkImageSpatialObject2US_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject2US self, itkImageUS2 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject2US self) -> itkImageUS2

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject2US self, itkPointD2 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject2US self, itkPointD2 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject2US self, itkPointD2 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject2US self, itkPointD2 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject2US self, itkPointD2 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject2US self, itkPointD2 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject2US self, itkPointD2 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject2US self, itkPointD2 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject2US self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject2US self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject2US self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject2US self, itkInterpolateImageFunctionIUS2D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject2US self) -> itkInterpolateImageFunctionIUS2D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject2US self) -> itkInterpolateImageFunctionIUS2D
        GetInterpolator(itkImageSpatialObject2US self) -> itkInterpolateImageFunctionIUS2D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject2US

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject2US"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject2US self) -> itkImageSpatialObject2US"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject2US_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject2US

        Create a new object of the class itkImageSpatialObject2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject2US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject2US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject2US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject2US.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_Clone, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_SetImage, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_GetImage, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_IsEvaluableAt, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_ValueAt, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_IsInside, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_SetSlicePosition, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_GetSlicePosition, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_GetPixelType, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_SetInterpolator, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_GetModifiableInterpolator, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_GetInterpolator, None, itkImageSpatialObject2US)
itkImageSpatialObject2US.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject2US_GetPointer, None, itkImageSpatialObject2US)
itkImageSpatialObject2US_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject2US_swigregister
itkImageSpatialObject2US_swigregister(itkImageSpatialObject2US)

def itkImageSpatialObject2US___New_orig__():
    """itkImageSpatialObject2US___New_orig__() -> itkImageSpatialObject2US_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2US___New_orig__()

def itkImageSpatialObject2US_cast(obj):
    """itkImageSpatialObject2US_cast(itkLightObject obj) -> itkImageSpatialObject2US"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject2US_cast(obj)

class itkImageSpatialObject3F(itkSpatialObjectBasePython.itkSpatialObject3):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject3F_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject3F self) -> itkImageSpatialObject3F_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject3F self, itkImageF3 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject3F self) -> itkImageF3

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject3F self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject3F self, itkPointD3 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject3F self, itkPointD3 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject3F self, itkPointD3 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject3F self, itkPointD3 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject3F self, itkPointD3 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject3F self, itkPointD3 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject3F self, itkPointD3 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject3F self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject3F self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject3F self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject3F self, itkInterpolateImageFunctionIF3D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject3F self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject3F self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(itkImageSpatialObject3F self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject3F

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject3F"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject3F self) -> itkImageSpatialObject3F"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3F_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject3F

        Create a new object of the class itkImageSpatialObject3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject3F.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_Clone, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_SetImage, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_GetImage, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_IsEvaluableAt, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_ValueAt, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_IsInside, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_SetSlicePosition, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_GetSlicePosition, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_GetPixelType, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_SetInterpolator, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_GetModifiableInterpolator, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_GetInterpolator, None, itkImageSpatialObject3F)
itkImageSpatialObject3F.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3F_GetPointer, None, itkImageSpatialObject3F)
itkImageSpatialObject3F_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject3F_swigregister
itkImageSpatialObject3F_swigregister(itkImageSpatialObject3F)

def itkImageSpatialObject3F___New_orig__():
    """itkImageSpatialObject3F___New_orig__() -> itkImageSpatialObject3F_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3F___New_orig__()

def itkImageSpatialObject3F_cast(obj):
    """itkImageSpatialObject3F_cast(itkLightObject obj) -> itkImageSpatialObject3F"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3F_cast(obj)

class itkImageSpatialObject3SS(itkSpatialObjectBasePython.itkSpatialObject3):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject3SS_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject3SS self) -> itkImageSpatialObject3SS_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject3SS self, itkImageSS3 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject3SS self) -> itkImageSS3

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject3SS self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject3SS self, itkPointD3 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject3SS self, itkPointD3 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject3SS self, itkPointD3 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject3SS self, itkPointD3 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject3SS self, itkPointD3 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject3SS self, itkPointD3 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject3SS self, itkPointD3 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject3SS self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject3SS self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject3SS self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject3SS self, itkInterpolateImageFunctionISS3D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject3SS self) -> itkInterpolateImageFunctionISS3D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject3SS self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(itkImageSpatialObject3SS self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject3SS

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject3SS"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject3SS self) -> itkImageSpatialObject3SS"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject3SS

        Create a new object of the class itkImageSpatialObject3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject3SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject3SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject3SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject3SS.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_Clone, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_SetImage, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetImage, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_IsEvaluableAt, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_ValueAt, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_IsInside, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_SetSlicePosition, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetSlicePosition, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetPixelType, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_SetInterpolator, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetModifiableInterpolator, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetInterpolator, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3SS_GetPointer, None, itkImageSpatialObject3SS)
itkImageSpatialObject3SS_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject3SS_swigregister
itkImageSpatialObject3SS_swigregister(itkImageSpatialObject3SS)

def itkImageSpatialObject3SS___New_orig__():
    """itkImageSpatialObject3SS___New_orig__() -> itkImageSpatialObject3SS_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3SS___New_orig__()

def itkImageSpatialObject3SS_cast(obj):
    """itkImageSpatialObject3SS_cast(itkLightObject obj) -> itkImageSpatialObject3SS"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3SS_cast(obj)

class itkImageSpatialObject3UC(itkSpatialObjectBasePython.itkSpatialObject3):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject3UC_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject3UC self) -> itkImageSpatialObject3UC_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject3UC self, itkImageUC3 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject3UC self) -> itkImageUC3

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject3UC self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject3UC self, itkPointD3 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject3UC self, itkPointD3 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject3UC self, itkPointD3 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject3UC self, itkPointD3 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject3UC self, itkPointD3 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject3UC self, itkPointD3 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject3UC self, itkPointD3 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject3UC self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject3UC self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject3UC self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject3UC self, itkInterpolateImageFunctionIUC3D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject3UC self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject3UC self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(itkImageSpatialObject3UC self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject3UC

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject3UC"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject3UC self) -> itkImageSpatialObject3UC"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject3UC

        Create a new object of the class itkImageSpatialObject3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject3UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject3UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject3UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject3UC.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_Clone, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_SetImage, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetImage, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_IsEvaluableAt, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_ValueAt, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_IsInside, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_SetSlicePosition, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetSlicePosition, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetPixelType, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_SetInterpolator, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetModifiableInterpolator, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetInterpolator, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3UC_GetPointer, None, itkImageSpatialObject3UC)
itkImageSpatialObject3UC_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject3UC_swigregister
itkImageSpatialObject3UC_swigregister(itkImageSpatialObject3UC)

def itkImageSpatialObject3UC___New_orig__():
    """itkImageSpatialObject3UC___New_orig__() -> itkImageSpatialObject3UC_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3UC___New_orig__()

def itkImageSpatialObject3UC_cast(obj):
    """itkImageSpatialObject3UC_cast(itkLightObject obj) -> itkImageSpatialObject3UC"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3UC_cast(obj)

class itkImageSpatialObject3US(itkSpatialObjectBasePython.itkSpatialObject3):
    """


    Implementation of an image as spatial object.

    This class combines functionnalities from a spatial object, and an
    image.

    See:   SpatialObject CompositeSpatialObject

    C++ includes: itkImageSpatialObject.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageSpatialObject3US_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageSpatialObject3US self) -> itkImageSpatialObject3US_Pointer"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_Clone(self)


    def SetImage(self, image):
        """
        SetImage(itkImageSpatialObject3US self, itkImageUS3 image)

        Set the image. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_SetImage(self, image)


    def GetImage(self):
        """
        GetImage(itkImageSpatialObject3US self) -> itkImageUS3

        Get a pointer to the image
        currently attached to the object. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_GetImage(self)


    def IsEvaluableAt(self, point, depth=0, name=None):
        """
        IsEvaluableAt(itkImageSpatialObject3US self, itkPointD3 point, unsigned int depth=0, char * name=None) -> bool
        IsEvaluableAt(itkImageSpatialObject3US self, itkPointD3 point, unsigned int depth=0) -> bool
        IsEvaluableAt(itkImageSpatialObject3US self, itkPointD3 point) -> bool

        Return true if the
        object is evaluable at the requested point, and else otherwise. 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_IsEvaluableAt(self, point, depth, name)


    def ValueAt(self, point, value, depth=0, name=None):
        """
        ValueAt(itkImageSpatialObject3US self, itkPointD3 point, double & value, unsigned int depth=0, char * name=None) -> bool
        ValueAt(itkImageSpatialObject3US self, itkPointD3 point, double & value, unsigned int depth=0) -> bool
        ValueAt(itkImageSpatialObject3US self, itkPointD3 point, double & value) -> bool

        Returns the value of the
        image at the requested point. If the point is not inside the object,
        then an exception is thrown. See:  ExceptionObject 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_ValueAt(self, point, value, depth, name)


    def IsInside(self, *args):
        """
        IsInside(itkImageSpatialObject3US self, itkPointD3 point, unsigned int depth, char * name) -> bool
        IsInside(itkImageSpatialObject3US self, itkPointD3 point) -> bool

        Test whether a point is
        inside or outside the object For computational speed purposes, it is
        faster if the method does not check the name of the class and the
        current depth 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_IsInside(self, *args)


    def SetSlicePosition(self, dimension, position):
        """
        SetSlicePosition(itkImageSpatialObject3US self, unsigned int dimension, int position)

        Set the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_SetSlicePosition(self, dimension, position)


    def GetSlicePosition(self, dimension):
        """
        GetSlicePosition(itkImageSpatialObject3US self, unsigned int dimension) -> int

        Get the slice
        position 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_GetSlicePosition(self, dimension)


    def GetPixelType(self):
        """GetPixelType(itkImageSpatialObject3US self) -> char const *"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_GetPixelType(self)


    def SetInterpolator(self, interpolator):
        """
        SetInterpolator(itkImageSpatialObject3US self, itkInterpolateImageFunctionIUS3D interpolator)

        Set/Get the
        interpolator 
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self):
        """GetModifiableInterpolator(itkImageSpatialObject3US self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args):
        """
        GetInterpolator(itkImageSpatialObject3US self) -> itkInterpolateImageFunctionIUS3D
        GetInterpolator(itkImageSpatialObject3US self) -> itkInterpolateImageFunctionIUS3D
        """
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_GetInterpolator(self, *args)

    __swig_destroy__ = _itkImageSpatialObjectPython.delete_itkImageSpatialObject3US

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSpatialObject3US"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageSpatialObject3US self) -> itkImageSpatialObject3US"""
        return _itkImageSpatialObjectPython.itkImageSpatialObject3US_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageSpatialObject3US

        Create a new object of the class itkImageSpatialObject3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSpatialObject3US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSpatialObject3US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSpatialObject3US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSpatialObject3US.Clone = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_Clone, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.SetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_SetImage, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.GetImage = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_GetImage, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.IsEvaluableAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_IsEvaluableAt, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.ValueAt = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_ValueAt, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.IsInside = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_IsInside, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.SetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_SetSlicePosition, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.GetSlicePosition = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_GetSlicePosition, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.GetPixelType = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_GetPixelType, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.SetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_SetInterpolator, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.GetModifiableInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_GetModifiableInterpolator, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.GetInterpolator = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_GetInterpolator, None, itkImageSpatialObject3US)
itkImageSpatialObject3US.GetPointer = new_instancemethod(_itkImageSpatialObjectPython.itkImageSpatialObject3US_GetPointer, None, itkImageSpatialObject3US)
itkImageSpatialObject3US_swigregister = _itkImageSpatialObjectPython.itkImageSpatialObject3US_swigregister
itkImageSpatialObject3US_swigregister(itkImageSpatialObject3US)

def itkImageSpatialObject3US___New_orig__():
    """itkImageSpatialObject3US___New_orig__() -> itkImageSpatialObject3US_Pointer"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3US___New_orig__()

def itkImageSpatialObject3US_cast(obj):
    """itkImageSpatialObject3US_cast(itkLightObject obj) -> itkImageSpatialObject3US"""
    return _itkImageSpatialObjectPython.itkImageSpatialObject3US_cast(obj)



