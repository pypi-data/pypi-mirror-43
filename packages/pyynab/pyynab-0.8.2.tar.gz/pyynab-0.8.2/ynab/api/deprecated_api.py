# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ynab.api_client import ApiClient


class DeprecatedApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_create_transactions(self, budget_id, bulk_transactions, **kwargs):  # noqa: E501
        """Bulk create transactions  # noqa: E501

        Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_transactions(budget_id, bulk_transactions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str budget_id: The id of the budget (\"last-used\" can also be used to specify the last used budget) (required)
        :param BulkTransactions bulk_transactions: The list of transactions to create (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_create_transactions_with_http_info(budget_id, bulk_transactions, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_create_transactions_with_http_info(budget_id, bulk_transactions, **kwargs)  # noqa: E501
            return data

    def bulk_create_transactions_with_http_info(self, budget_id, bulk_transactions, **kwargs):  # noqa: E501
        """Bulk create transactions  # noqa: E501

        Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_transactions_with_http_info(budget_id, bulk_transactions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str budget_id: The id of the budget (\"last-used\" can also be used to specify the last used budget) (required)
        :param BulkTransactions bulk_transactions: The list of transactions to create (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['budget_id', 'bulk_transactions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_create_transactions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'budget_id' is set
        if ('budget_id' not in local_var_params or
                local_var_params['budget_id'] is None):
            raise ValueError("Missing the required parameter `budget_id` when calling `bulk_create_transactions`")  # noqa: E501
        # verify the required parameter 'bulk_transactions' is set
        if ('bulk_transactions' not in local_var_params or
                local_var_params['bulk_transactions'] is None):
            raise ValueError("Missing the required parameter `bulk_transactions` when calling `bulk_create_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'budget_id' in local_var_params:
            path_params['budget_id'] = local_var_params['budget_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_transactions' in local_var_params:
            body_params = local_var_params['bulk_transactions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/budgets/{budget_id}/transactions/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
