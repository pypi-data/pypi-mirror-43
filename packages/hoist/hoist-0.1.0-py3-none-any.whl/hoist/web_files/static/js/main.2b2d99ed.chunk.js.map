{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["params","URLSearchParams","document","location","search","host","get","port","parseInt","App","interval","el","state","__groups","Set","__selection","__autoScroll","__connected","this","clearInterval","ws","setInterval","readyState","start","_this2","setState","WebSocket","concat","onmessage","e","data","JSON","parse","addMessage","onclose","alias","has","groups","add","list","length","shift","Object","defineProperty","scrollToBottom","maxScrollTop","scrollHeight","clientHeight","scrollTop","_this3","console","log","react_default","a","createElement","className","id","htmlFor","type","value","onChange","target","checked","Array","from","sort","map","s","key","href","onClick","ref","row","std","message","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b2d99ed.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\n\nconst params = new URLSearchParams(document.location.search);\nconst host = params.get('host');\nconst port = parseInt(params.get('port'));\n\n\nclass App extends Component {\n\n    interval = null;\n    el = null;\n    state = {\n        __groups: new Set(),\n        __selection: null,\n        __autoScroll: true,\n        __connected: false,\n    };\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n            this.interval = null;\n        }\n    }\n\n    async componentDidMount() {\n        let ws = null; //\n\n        this.interval = setInterval(() => {\n            if (!ws || ws.readyState == 3) {\n                start();\n            }\n            if (ws.readyState == 1 && !this.state.__connected) {\n                this.setState({__connected: true});\n            }\n        }, 500);\n\n        const start = () => {\n            ws = new WebSocket(`ws://${host}:${port}`);\n\n            ws.onmessage = e => {\n                const data = JSON.parse(e.data);\n                this.addMessage(data);\n            };\n            ws.onclose = () => {\n                this.setState({__connected: false});\n            }\n        };\n    }\n\n    addMessage(data) {\n        if (!this.state.__selection) {\n            this.setState({__selection: data.alias});\n        }\n        if (!this.state.__groups.has(data.alias)) {\n            const groups = new Set(this.state.__groups);\n            groups.add(data.alias);\n            this.setState({__groups: groups});\n        }\n        if (!this.state[data.alias]) {\n            this.setState({[data.alias]: [data]});\n        } else {\n            let list = this.state[data.alias].concat(data);\n            if (list.length > 5000) {\n                list.shift();\n            }\n            this.setState({[data.alias]: list});\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.__autoScroll) {\n            this.scrollToBottom();\n        }\n    }\n\n    scrollToBottom() {\n        const scrollHeight = this.el.scrollHeight;\n        const height = this.el.clientHeight;\n        const maxScrollTop = scrollHeight - height;\n        this.el.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n    }\n\n    render() {\n        console.log(this.state.__autoScroll);\n        return (\n            <div className=\"App\">\n                <header>\n                    <h1 className={this.state.__connected ? \"\" : \"offline\"}>Hoist <span>{this.state.__selection}</span>\n                    </h1>\n                    <span>Connected to wss://{host}:{port}</span>\n                </header>\n                <div className=\"grid\">\n                    <div id=\"controls\">\n                        <div className=\"item\">\n                            <label htmlFor=\"auto-scroll\">\n                                <input id=\"auto-scroll\" type=\"checkbox\" value={this.state.__autoScroll} onChange={\n                                    e => {\n                                        this.setState({__autoScroll: e.target.checked});\n                                    }\n                                }/> Auto-scroll\n                            </label>\n                        </div>\n                    </div>\n                    <nav>\n                        {Array.from(this.state.__groups).sort().map(s => (\n                            <div>\n                                <a key={s} href=\"#\" onClick={() => this.setState({__selection: s})}>{s}</a>\n                            </div>\n                        ))}\n                    </nav>\n                    <main ref={el => {\n                        this.el = el\n                    }}>\n                        {(this.state[this.state.__selection] || []).map(row => (\n                            <div key={row.id} className={`std ${row.std}`}>{row.message}</div>\n                        ))}\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}