# Python stubs generated by omniidl from C:\Users\TyouK\Documents\GitHub\rtctree\idl\SDOPackage.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "SDOPackage"
#
__name__ = "rtctree.rtc.SDOPackage"
_0_SDOPackage = omniORB.openModule("rtctree.rtc.SDOPackage", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\SDOPackage.idl")
_0_SDOPackage__POA = omniORB.openModule("rtctree.rtc.SDOPackage__POA", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\SDOPackage.idl")


# forward interface SDO;
_0_SDOPackage._d_SDO = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/SDO:1.0", "SDO")
omniORB.typeMapping["IDL:org.omg/SDOPackage/SDO:1.0"] = _0_SDOPackage._d_SDO

# forward interface SDOService;
_0_SDOPackage._d_SDOService = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/SDOService:1.0", "SDOService")
omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOService:1.0"] = _0_SDOPackage._d_SDOService

# forward interface SDOSystemElement;
_0_SDOPackage._d_SDOSystemElement = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/SDOSystemElement:1.0", "SDOSystemElement")
omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOSystemElement:1.0"] = _0_SDOPackage._d_SDOSystemElement

# forward interface Configuration;
_0_SDOPackage._d_Configuration = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/Configuration:1.0", "Configuration")
omniORB.typeMapping["IDL:org.omg/SDOPackage/Configuration:1.0"] = _0_SDOPackage._d_Configuration

# forward interface Monitoring;
_0_SDOPackage._d_Monitoring = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/Monitoring:1.0", "Monitoring")
omniORB.typeMapping["IDL:org.omg/SDOPackage/Monitoring:1.0"] = _0_SDOPackage._d_Monitoring

# forward interface Organization;
_0_SDOPackage._d_Organization = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/Organization:1.0", "Organization")
omniORB.typeMapping["IDL:org.omg/SDOPackage/Organization:1.0"] = _0_SDOPackage._d_Organization

# typedef ... StringList
class StringList:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/StringList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.StringList = StringList
_0_SDOPackage._d_StringList  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_SDOPackage._ad_StringList = (omniORB.tcInternal.tv_alias, StringList._NP_RepositoryId, "StringList", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_SDOPackage._tc_StringList = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_StringList)
omniORB.registerType(StringList._NP_RepositoryId, _0_SDOPackage._ad_StringList, _0_SDOPackage._tc_StringList)
del StringList

# typedef ... SDOList
class SDOList:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/SDOList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.SDOList = SDOList
_0_SDOPackage._d_SDOList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/SDO:1.0"], 0)
_0_SDOPackage._ad_SDOList = (omniORB.tcInternal.tv_alias, SDOList._NP_RepositoryId, "SDOList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/SDO:1.0"], 0))
_0_SDOPackage._tc_SDOList = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_SDOList)
omniORB.registerType(SDOList._NP_RepositoryId, _0_SDOPackage._ad_SDOList, _0_SDOPackage._tc_SDOList)
del SDOList

# typedef ... OrganizationList
class OrganizationList:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/OrganizationList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.OrganizationList = OrganizationList
_0_SDOPackage._d_OrganizationList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/Organization:1.0"], 0)
_0_SDOPackage._ad_OrganizationList = (omniORB.tcInternal.tv_alias, OrganizationList._NP_RepositoryId, "OrganizationList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/Organization:1.0"], 0))
_0_SDOPackage._tc_OrganizationList = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_OrganizationList)
omniORB.registerType(OrganizationList._NP_RepositoryId, _0_SDOPackage._ad_OrganizationList, _0_SDOPackage._tc_OrganizationList)
del OrganizationList

# typedef ... UniqueIdentifier
class UniqueIdentifier:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.UniqueIdentifier = UniqueIdentifier
_0_SDOPackage._d_UniqueIdentifier  = (omniORB.tcInternal.tv_string,0)
_0_SDOPackage._ad_UniqueIdentifier = (omniORB.tcInternal.tv_alias, UniqueIdentifier._NP_RepositoryId, "UniqueIdentifier", (omniORB.tcInternal.tv_string,0))
_0_SDOPackage._tc_UniqueIdentifier = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_UniqueIdentifier)
omniORB.registerType(UniqueIdentifier._NP_RepositoryId, _0_SDOPackage._ad_UniqueIdentifier, _0_SDOPackage._tc_UniqueIdentifier)
del UniqueIdentifier

# struct NameValue
_0_SDOPackage.NameValue = omniORB.newEmptyClass()
class NameValue (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/NameValue:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_SDOPackage.NameValue = NameValue
_0_SDOPackage._d_NameValue  = (omniORB.tcInternal.tv_struct, NameValue, NameValue._NP_RepositoryId, "NameValue", "name", (omniORB.tcInternal.tv_string,0), "value", omniORB.tcInternal.tv_any)
_0_SDOPackage._tc_NameValue = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_NameValue)
omniORB.registerType(NameValue._NP_RepositoryId, _0_SDOPackage._d_NameValue, _0_SDOPackage._tc_NameValue)
del NameValue

# typedef ... NVList
class NVList:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/NVList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.NVList = NVList
_0_SDOPackage._d_NVList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/NameValue:1.0"], 0)
_0_SDOPackage._ad_NVList = (omniORB.tcInternal.tv_alias, NVList._NP_RepositoryId, "NVList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/NameValue:1.0"], 0))
_0_SDOPackage._tc_NVList = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_NVList)
omniORB.registerType(NVList._NP_RepositoryId, _0_SDOPackage._ad_NVList, _0_SDOPackage._tc_NVList)
del NVList

# enum NumericType
_0_SDOPackage.SHORT_TYPE = omniORB.EnumItem("SHORT_TYPE", 0)
_0_SDOPackage.LONG_TYPE = omniORB.EnumItem("LONG_TYPE", 1)
_0_SDOPackage.FLOAT_TYPE = omniORB.EnumItem("FLOAT_TYPE", 2)
_0_SDOPackage.DOUBLE_TYPE = omniORB.EnumItem("DOUBLE_TYPE", 3)
_0_SDOPackage.NumericType = omniORB.Enum("IDL:org.omg/SDOPackage/NumericType:1.0", (_0_SDOPackage.SHORT_TYPE, _0_SDOPackage.LONG_TYPE, _0_SDOPackage.FLOAT_TYPE, _0_SDOPackage.DOUBLE_TYPE,))

_0_SDOPackage._d_NumericType  = (omniORB.tcInternal.tv_enum, _0_SDOPackage.NumericType._NP_RepositoryId, "NumericType", _0_SDOPackage.NumericType._items)
_0_SDOPackage._tc_NumericType = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_NumericType)
omniORB.registerType(_0_SDOPackage.NumericType._NP_RepositoryId, _0_SDOPackage._d_NumericType, _0_SDOPackage._tc_NumericType)

# union Numeric
_0_SDOPackage.Numeric = omniORB.newEmptyClass()
class Numeric (omniORB.Union):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/Numeric:1.0"

_0_SDOPackage.Numeric = Numeric

Numeric._m_to_d = {"short_value": _0_SDOPackage.SHORT_TYPE, "long_value": _0_SDOPackage.LONG_TYPE, "float_value": _0_SDOPackage.FLOAT_TYPE, "double_value": _0_SDOPackage.DOUBLE_TYPE}
Numeric._d_to_m = {_0_SDOPackage.SHORT_TYPE: "short_value", _0_SDOPackage.LONG_TYPE: "long_value", _0_SDOPackage.FLOAT_TYPE: "float_value", _0_SDOPackage.DOUBLE_TYPE: "double_value"}
Numeric._def_m  = None
Numeric._def_d  = None

_0_SDOPackage._m_Numeric  = ((_0_SDOPackage.SHORT_TYPE, "short_value", omniORB.tcInternal.tv_short), (_0_SDOPackage.LONG_TYPE, "long_value", omniORB.tcInternal.tv_long), (_0_SDOPackage.FLOAT_TYPE, "float_value", omniORB.tcInternal.tv_float), (_0_SDOPackage.DOUBLE_TYPE, "double_value", omniORB.tcInternal.tv_double),)
_0_SDOPackage._d_Numeric  = (omniORB.tcInternal.tv_union, Numeric, Numeric._NP_RepositoryId, "Numeric", omniORB.typeMapping["IDL:org.omg/SDOPackage/NumericType:1.0"], -1, _0_SDOPackage._m_Numeric, None, {_0_SDOPackage.SHORT_TYPE: _0_SDOPackage._m_Numeric[0], _0_SDOPackage.LONG_TYPE: _0_SDOPackage._m_Numeric[1], _0_SDOPackage.FLOAT_TYPE: _0_SDOPackage._m_Numeric[2], _0_SDOPackage.DOUBLE_TYPE: _0_SDOPackage._m_Numeric[3]})
_0_SDOPackage._tc_Numeric = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_Numeric)
omniORB.registerType(Numeric._NP_RepositoryId, _0_SDOPackage._d_Numeric, _0_SDOPackage._tc_Numeric)
del Numeric

# struct EnumerationType
_0_SDOPackage.EnumerationType = omniORB.newEmptyClass()
class EnumerationType (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/EnumerationType:1.0"

    def __init__(self, enumerated_values):
        self.enumerated_values = enumerated_values

_0_SDOPackage.EnumerationType = EnumerationType
_0_SDOPackage._d_EnumerationType  = (omniORB.tcInternal.tv_struct, EnumerationType, EnumerationType._NP_RepositoryId, "EnumerationType", "enumerated_values", omniORB.typeMapping["IDL:org.omg/SDOPackage/StringList:1.0"])
_0_SDOPackage._tc_EnumerationType = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_EnumerationType)
omniORB.registerType(EnumerationType._NP_RepositoryId, _0_SDOPackage._d_EnumerationType, _0_SDOPackage._tc_EnumerationType)
del EnumerationType

# struct RangeType
_0_SDOPackage.RangeType = omniORB.newEmptyClass()
class RangeType (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/RangeType:1.0"

    def __init__(self, min, max, min_inclusive, max_inclusive):
        self.min = min
        self.max = max
        self.min_inclusive = min_inclusive
        self.max_inclusive = max_inclusive

_0_SDOPackage.RangeType = RangeType
_0_SDOPackage._d_RangeType  = (omniORB.tcInternal.tv_struct, RangeType, RangeType._NP_RepositoryId, "RangeType", "min", omniORB.typeMapping["IDL:org.omg/SDOPackage/Numeric:1.0"], "max", omniORB.typeMapping["IDL:org.omg/SDOPackage/Numeric:1.0"], "min_inclusive", omniORB.tcInternal.tv_boolean, "max_inclusive", omniORB.tcInternal.tv_boolean)
_0_SDOPackage._tc_RangeType = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_RangeType)
omniORB.registerType(RangeType._NP_RepositoryId, _0_SDOPackage._d_RangeType, _0_SDOPackage._tc_RangeType)
del RangeType

# struct IntervalType
_0_SDOPackage.IntervalType = omniORB.newEmptyClass()
class IntervalType (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/IntervalType:1.0"

    def __init__(self, min, max, min_inclusive, max_inclusive, step):
        self.min = min
        self.max = max
        self.min_inclusive = min_inclusive
        self.max_inclusive = max_inclusive
        self.step = step

_0_SDOPackage.IntervalType = IntervalType
_0_SDOPackage._d_IntervalType  = (omniORB.tcInternal.tv_struct, IntervalType, IntervalType._NP_RepositoryId, "IntervalType", "min", omniORB.typeMapping["IDL:org.omg/SDOPackage/Numeric:1.0"], "max", omniORB.typeMapping["IDL:org.omg/SDOPackage/Numeric:1.0"], "min_inclusive", omniORB.tcInternal.tv_boolean, "max_inclusive", omniORB.tcInternal.tv_boolean, "step", omniORB.typeMapping["IDL:org.omg/SDOPackage/Numeric:1.0"])
_0_SDOPackage._tc_IntervalType = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_IntervalType)
omniORB.registerType(IntervalType._NP_RepositoryId, _0_SDOPackage._d_IntervalType, _0_SDOPackage._tc_IntervalType)
del IntervalType

# enum ComplexDataType
_0_SDOPackage.ENUMERATION = omniORB.EnumItem("ENUMERATION", 0)
_0_SDOPackage.RANGE = omniORB.EnumItem("RANGE", 1)
_0_SDOPackage.INTERVAL = omniORB.EnumItem("INTERVAL", 2)
_0_SDOPackage.ComplexDataType = omniORB.Enum("IDL:org.omg/SDOPackage/ComplexDataType:1.0", (_0_SDOPackage.ENUMERATION, _0_SDOPackage.RANGE, _0_SDOPackage.INTERVAL,))

_0_SDOPackage._d_ComplexDataType  = (omniORB.tcInternal.tv_enum, _0_SDOPackage.ComplexDataType._NP_RepositoryId, "ComplexDataType", _0_SDOPackage.ComplexDataType._items)
_0_SDOPackage._tc_ComplexDataType = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_ComplexDataType)
omniORB.registerType(_0_SDOPackage.ComplexDataType._NP_RepositoryId, _0_SDOPackage._d_ComplexDataType, _0_SDOPackage._tc_ComplexDataType)

# union AllowedValues
_0_SDOPackage.AllowedValues = omniORB.newEmptyClass()
class AllowedValues (omniORB.Union):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/AllowedValues:1.0"

_0_SDOPackage.AllowedValues = AllowedValues

AllowedValues._m_to_d = {"allowed_enum": _0_SDOPackage.ENUMERATION, "allowed_interval": _0_SDOPackage.INTERVAL, "allowed_range": _0_SDOPackage.RANGE}
AllowedValues._d_to_m = {_0_SDOPackage.ENUMERATION: "allowed_enum", _0_SDOPackage.INTERVAL: "allowed_interval", _0_SDOPackage.RANGE: "allowed_range"}
AllowedValues._def_m  = None
AllowedValues._def_d  = None

_0_SDOPackage._m_AllowedValues  = ((_0_SDOPackage.ENUMERATION, "allowed_enum", omniORB.typeMapping["IDL:org.omg/SDOPackage/EnumerationType:1.0"]), (_0_SDOPackage.INTERVAL, "allowed_interval", omniORB.typeMapping["IDL:org.omg/SDOPackage/IntervalType:1.0"]), (_0_SDOPackage.RANGE, "allowed_range", omniORB.typeMapping["IDL:org.omg/SDOPackage/RangeType:1.0"]),)
_0_SDOPackage._d_AllowedValues  = (omniORB.tcInternal.tv_union, AllowedValues, AllowedValues._NP_RepositoryId, "AllowedValues", omniORB.typeMapping["IDL:org.omg/SDOPackage/ComplexDataType:1.0"], -1, _0_SDOPackage._m_AllowedValues, None, {_0_SDOPackage.ENUMERATION: _0_SDOPackage._m_AllowedValues[0], _0_SDOPackage.INTERVAL: _0_SDOPackage._m_AllowedValues[1], _0_SDOPackage.RANGE: _0_SDOPackage._m_AllowedValues[2]})
_0_SDOPackage._tc_AllowedValues = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_AllowedValues)
omniORB.registerType(AllowedValues._NP_RepositoryId, _0_SDOPackage._d_AllowedValues, _0_SDOPackage._tc_AllowedValues)
del AllowedValues

# struct Parameter
_0_SDOPackage.Parameter = omniORB.newEmptyClass()
class Parameter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/Parameter:1.0"

    def __init__(self, name, type, allowed_values):
        self.name = name
        self.type = type
        self.allowed_values = allowed_values

_0_SDOPackage.Parameter = Parameter
_0_SDOPackage._d_Parameter  = (omniORB.tcInternal.tv_struct, Parameter, Parameter._NP_RepositoryId, "Parameter", "name", (omniORB.tcInternal.tv_string,0), "type", omniORB.tcInternal.tv_TypeCode, "allowed_values", omniORB.typeMapping["IDL:org.omg/SDOPackage/AllowedValues:1.0"])
_0_SDOPackage._tc_Parameter = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_Parameter)
omniORB.registerType(Parameter._NP_RepositoryId, _0_SDOPackage._d_Parameter, _0_SDOPackage._tc_Parameter)
del Parameter

# typedef ... ParameterList
class ParameterList:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/ParameterList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.ParameterList = ParameterList
_0_SDOPackage._d_ParameterList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/Parameter:1.0"], 0)
_0_SDOPackage._ad_ParameterList = (omniORB.tcInternal.tv_alias, ParameterList._NP_RepositoryId, "ParameterList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/Parameter:1.0"], 0))
_0_SDOPackage._tc_ParameterList = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_ParameterList)
omniORB.registerType(ParameterList._NP_RepositoryId, _0_SDOPackage._ad_ParameterList, _0_SDOPackage._tc_ParameterList)
del ParameterList

# struct OrganizationProperty
_0_SDOPackage.OrganizationProperty = omniORB.newEmptyClass()
class OrganizationProperty (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/OrganizationProperty:1.0"

    def __init__(self, properties):
        self.properties = properties

_0_SDOPackage.OrganizationProperty = OrganizationProperty
_0_SDOPackage._d_OrganizationProperty  = (omniORB.tcInternal.tv_struct, OrganizationProperty, OrganizationProperty._NP_RepositoryId, "OrganizationProperty", "properties", omniORB.typeMapping["IDL:org.omg/SDOPackage/NVList:1.0"])
_0_SDOPackage._tc_OrganizationProperty = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_OrganizationProperty)
omniORB.registerType(OrganizationProperty._NP_RepositoryId, _0_SDOPackage._d_OrganizationProperty, _0_SDOPackage._tc_OrganizationProperty)
del OrganizationProperty

# enum DependencyType
_0_SDOPackage.OWN = omniORB.EnumItem("OWN", 0)
_0_SDOPackage.OWNED = omniORB.EnumItem("OWNED", 1)
_0_SDOPackage.NO_DEPENDENCY = omniORB.EnumItem("NO_DEPENDENCY", 2)
_0_SDOPackage.DependencyType = omniORB.Enum("IDL:org.omg/SDOPackage/DependencyType:1.0", (_0_SDOPackage.OWN, _0_SDOPackage.OWNED, _0_SDOPackage.NO_DEPENDENCY,))

_0_SDOPackage._d_DependencyType  = (omniORB.tcInternal.tv_enum, _0_SDOPackage.DependencyType._NP_RepositoryId, "DependencyType", _0_SDOPackage.DependencyType._items)
_0_SDOPackage._tc_DependencyType = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_DependencyType)
omniORB.registerType(_0_SDOPackage.DependencyType._NP_RepositoryId, _0_SDOPackage._d_DependencyType, _0_SDOPackage._tc_DependencyType)

# struct DeviceProfile
_0_SDOPackage.DeviceProfile = omniORB.newEmptyClass()
class DeviceProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/DeviceProfile:1.0"

    def __init__(self, device_type, manufacturer, model, version, properties):
        self.device_type = device_type
        self.manufacturer = manufacturer
        self.model = model
        self.version = version
        self.properties = properties

_0_SDOPackage.DeviceProfile = DeviceProfile
_0_SDOPackage._d_DeviceProfile  = (omniORB.tcInternal.tv_struct, DeviceProfile, DeviceProfile._NP_RepositoryId, "DeviceProfile", "device_type", (omniORB.tcInternal.tv_string,0), "manufacturer", (omniORB.tcInternal.tv_string,0), "model", (omniORB.tcInternal.tv_string,0), "version", (omniORB.tcInternal.tv_string,0), "properties", omniORB.typeMapping["IDL:org.omg/SDOPackage/NVList:1.0"])
_0_SDOPackage._tc_DeviceProfile = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_DeviceProfile)
omniORB.registerType(DeviceProfile._NP_RepositoryId, _0_SDOPackage._d_DeviceProfile, _0_SDOPackage._tc_DeviceProfile)
del DeviceProfile

# struct ServiceProfile
_0_SDOPackage.ServiceProfile = omniORB.newEmptyClass()
class ServiceProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/ServiceProfile:1.0"

    def __init__(self, id, interface_type, properties, service):
        self.id = id
        self.interface_type = interface_type
        self.properties = properties
        self.service = service

_0_SDOPackage.ServiceProfile = ServiceProfile
_0_SDOPackage._d_ServiceProfile  = (omniORB.tcInternal.tv_struct, ServiceProfile, ServiceProfile._NP_RepositoryId, "ServiceProfile", "id", (omniORB.tcInternal.tv_string,0), "interface_type", (omniORB.tcInternal.tv_string,0), "properties", omniORB.typeMapping["IDL:org.omg/SDOPackage/NVList:1.0"], "service", omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOService:1.0"])
_0_SDOPackage._tc_ServiceProfile = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_ServiceProfile)
omniORB.registerType(ServiceProfile._NP_RepositoryId, _0_SDOPackage._d_ServiceProfile, _0_SDOPackage._tc_ServiceProfile)
del ServiceProfile

# typedef ... ServiceProfileList
class ServiceProfileList:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/ServiceProfileList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.ServiceProfileList = ServiceProfileList
_0_SDOPackage._d_ServiceProfileList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/ServiceProfile:1.0"], 0)
_0_SDOPackage._ad_ServiceProfileList = (omniORB.tcInternal.tv_alias, ServiceProfileList._NP_RepositoryId, "ServiceProfileList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/ServiceProfile:1.0"], 0))
_0_SDOPackage._tc_ServiceProfileList = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_ServiceProfileList)
omniORB.registerType(ServiceProfileList._NP_RepositoryId, _0_SDOPackage._ad_ServiceProfileList, _0_SDOPackage._tc_ServiceProfileList)
del ServiceProfileList

# struct ConfigurationSet
_0_SDOPackage.ConfigurationSet = omniORB.newEmptyClass()
class ConfigurationSet (omniORB.StructBase):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/ConfigurationSet:1.0"

    def __init__(self, id, description, configuration_data):
        self.id = id
        self.description = description
        self.configuration_data = configuration_data

_0_SDOPackage.ConfigurationSet = ConfigurationSet
_0_SDOPackage._d_ConfigurationSet  = (omniORB.tcInternal.tv_struct, ConfigurationSet, ConfigurationSet._NP_RepositoryId, "ConfigurationSet", "id", (omniORB.tcInternal.tv_string,0), "description", (omniORB.tcInternal.tv_string,0), "configuration_data", omniORB.typeMapping["IDL:org.omg/SDOPackage/NVList:1.0"])
_0_SDOPackage._tc_ConfigurationSet = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_ConfigurationSet)
omniORB.registerType(ConfigurationSet._NP_RepositoryId, _0_SDOPackage._d_ConfigurationSet, _0_SDOPackage._tc_ConfigurationSet)
del ConfigurationSet

# typedef ... ConfigurationSetList
class ConfigurationSetList:
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/ConfigurationSetList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_SDOPackage.ConfigurationSetList = ConfigurationSetList
_0_SDOPackage._d_ConfigurationSetList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/ConfigurationSet:1.0"], 0)
_0_SDOPackage._ad_ConfigurationSetList = (omniORB.tcInternal.tv_alias, ConfigurationSetList._NP_RepositoryId, "ConfigurationSetList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:org.omg/SDOPackage/ConfigurationSet:1.0"], 0))
_0_SDOPackage._tc_ConfigurationSetList = omniORB.tcInternal.createTypeCode(_0_SDOPackage._ad_ConfigurationSetList)
omniORB.registerType(ConfigurationSetList._NP_RepositoryId, _0_SDOPackage._ad_ConfigurationSetList, _0_SDOPackage._tc_ConfigurationSetList)
del ConfigurationSetList

# exception NotAvailable
_0_SDOPackage.NotAvailable = omniORB.newEmptyClass()
class NotAvailable (CORBA.UserException):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/NotAvailable:1.0"

    def __init__(self, description):
        CORBA.UserException.__init__(self, description)
        self.description = description

_0_SDOPackage.NotAvailable = NotAvailable
_0_SDOPackage._d_NotAvailable  = (omniORB.tcInternal.tv_except, NotAvailable, NotAvailable._NP_RepositoryId, "NotAvailable", "description", (omniORB.tcInternal.tv_string,0))
_0_SDOPackage._tc_NotAvailable = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_NotAvailable)
omniORB.registerType(NotAvailable._NP_RepositoryId, _0_SDOPackage._d_NotAvailable, _0_SDOPackage._tc_NotAvailable)
del NotAvailable

# exception InterfaceNotImplemented
_0_SDOPackage.InterfaceNotImplemented = omniORB.newEmptyClass()
class InterfaceNotImplemented (CORBA.UserException):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/InterfaceNotImplemented:1.0"

    def __init__(self, description):
        CORBA.UserException.__init__(self, description)
        self.description = description

_0_SDOPackage.InterfaceNotImplemented = InterfaceNotImplemented
_0_SDOPackage._d_InterfaceNotImplemented  = (omniORB.tcInternal.tv_except, InterfaceNotImplemented, InterfaceNotImplemented._NP_RepositoryId, "InterfaceNotImplemented", "description", (omniORB.tcInternal.tv_string,0))
_0_SDOPackage._tc_InterfaceNotImplemented = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_InterfaceNotImplemented)
omniORB.registerType(InterfaceNotImplemented._NP_RepositoryId, _0_SDOPackage._d_InterfaceNotImplemented, _0_SDOPackage._tc_InterfaceNotImplemented)
del InterfaceNotImplemented

# exception InvalidParameter
_0_SDOPackage.InvalidParameter = omniORB.newEmptyClass()
class InvalidParameter (CORBA.UserException):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/InvalidParameter:1.0"

    def __init__(self, description):
        CORBA.UserException.__init__(self, description)
        self.description = description

_0_SDOPackage.InvalidParameter = InvalidParameter
_0_SDOPackage._d_InvalidParameter  = (omniORB.tcInternal.tv_except, InvalidParameter, InvalidParameter._NP_RepositoryId, "InvalidParameter", "description", (omniORB.tcInternal.tv_string,0))
_0_SDOPackage._tc_InvalidParameter = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_InvalidParameter)
omniORB.registerType(InvalidParameter._NP_RepositoryId, _0_SDOPackage._d_InvalidParameter, _0_SDOPackage._tc_InvalidParameter)
del InvalidParameter

# exception InternalError
_0_SDOPackage.InternalError = omniORB.newEmptyClass()
class InternalError (CORBA.UserException):
    _NP_RepositoryId = "IDL:org.omg/SDOPackage/InternalError:1.0"

    def __init__(self, description):
        CORBA.UserException.__init__(self, description)
        self.description = description

_0_SDOPackage.InternalError = InternalError
_0_SDOPackage._d_InternalError  = (omniORB.tcInternal.tv_except, InternalError, InternalError._NP_RepositoryId, "InternalError", "description", (omniORB.tcInternal.tv_string,0))
_0_SDOPackage._tc_InternalError = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_InternalError)
omniORB.registerType(InternalError._NP_RepositoryId, _0_SDOPackage._d_InternalError, _0_SDOPackage._tc_InternalError)
del InternalError

# interface SDOSystemElement
_0_SDOPackage._d_SDOSystemElement = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/SDOSystemElement:1.0", "SDOSystemElement")
omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOSystemElement:1.0"] = _0_SDOPackage._d_SDOSystemElement
_0_SDOPackage.SDOSystemElement = omniORB.newEmptyClass()
class SDOSystemElement :
    _NP_RepositoryId = _0_SDOPackage._d_SDOSystemElement[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SDOPackage.SDOSystemElement = SDOSystemElement
_0_SDOPackage._tc_SDOSystemElement = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_SDOSystemElement)
omniORB.registerType(SDOSystemElement._NP_RepositoryId, _0_SDOPackage._d_SDOSystemElement, _0_SDOPackage._tc_SDOSystemElement)

# SDOSystemElement operations and attributes
SDOSystemElement._d_get_owned_organizations = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/OrganizationList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})

# SDOSystemElement object reference
class _objref_SDOSystemElement (CORBA.Object):
    _NP_RepositoryId = SDOSystemElement._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def get_owned_organizations(self, *args):
        return self._obj.invoke("get_owned_organizations", _0_SDOPackage.SDOSystemElement._d_get_owned_organizations, args)

omniORB.registerObjref(SDOSystemElement._NP_RepositoryId, _objref_SDOSystemElement)
_0_SDOPackage._objref_SDOSystemElement = _objref_SDOSystemElement
del SDOSystemElement, _objref_SDOSystemElement

# SDOSystemElement skeleton
__name__ = "rtctree.rtc.SDOPackage__POA"
class SDOSystemElement (PortableServer.Servant):
    _NP_RepositoryId = _0_SDOPackage.SDOSystemElement._NP_RepositoryId


    _omni_op_d = {"get_owned_organizations": _0_SDOPackage.SDOSystemElement._d_get_owned_organizations}

SDOSystemElement._omni_skeleton = SDOSystemElement
_0_SDOPackage__POA.SDOSystemElement = SDOSystemElement
omniORB.registerSkeleton(SDOSystemElement._NP_RepositoryId, SDOSystemElement)
del SDOSystemElement
__name__ = "rtctree.rtc.SDOPackage"

# interface SDO
_0_SDOPackage._d_SDO = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/SDO:1.0", "SDO")
omniORB.typeMapping["IDL:org.omg/SDOPackage/SDO:1.0"] = _0_SDOPackage._d_SDO
_0_SDOPackage.SDO = omniORB.newEmptyClass()
class SDO (_0_SDOPackage.SDOSystemElement):
    _NP_RepositoryId = _0_SDOPackage._d_SDO[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SDOPackage.SDO = SDO
_0_SDOPackage._tc_SDO = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_SDO)
omniORB.registerType(SDO._NP_RepositoryId, _0_SDOPackage._d_SDO, _0_SDOPackage._tc_SDO)

# SDO operations and attributes
SDO._d_get_sdo_id = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_sdo_type = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_device_profile = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/DeviceProfile:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_service_profiles = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/ServiceProfileList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_service_profile = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.typeMapping["IDL:org.omg/SDOPackage/ServiceProfile:1.0"], ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_sdo_service = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOService:1.0"], ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_configuration = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/Configuration:1.0"], ), {_0_SDOPackage.InterfaceNotImplemented._NP_RepositoryId: _0_SDOPackage._d_InterfaceNotImplemented, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_monitoring = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/Monitoring:1.0"], ), {_0_SDOPackage.InterfaceNotImplemented._NP_RepositoryId: _0_SDOPackage._d_InterfaceNotImplemented, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_organizations = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/OrganizationList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_status_list = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/NVList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
SDO._d_get_status = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_any, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})

# SDO object reference
class _objref_SDO (_0_SDOPackage._objref_SDOSystemElement):
    _NP_RepositoryId = SDO._NP_RepositoryId

    def __init__(self, obj):
        _0_SDOPackage._objref_SDOSystemElement.__init__(self, obj)

    def get_sdo_id(self, *args):
        return self._obj.invoke("get_sdo_id", _0_SDOPackage.SDO._d_get_sdo_id, args)

    def get_sdo_type(self, *args):
        return self._obj.invoke("get_sdo_type", _0_SDOPackage.SDO._d_get_sdo_type, args)

    def get_device_profile(self, *args):
        return self._obj.invoke("get_device_profile", _0_SDOPackage.SDO._d_get_device_profile, args)

    def get_service_profiles(self, *args):
        return self._obj.invoke("get_service_profiles", _0_SDOPackage.SDO._d_get_service_profiles, args)

    def get_service_profile(self, *args):
        return self._obj.invoke("get_service_profile", _0_SDOPackage.SDO._d_get_service_profile, args)

    def get_sdo_service(self, *args):
        return self._obj.invoke("get_sdo_service", _0_SDOPackage.SDO._d_get_sdo_service, args)

    def get_configuration(self, *args):
        return self._obj.invoke("get_configuration", _0_SDOPackage.SDO._d_get_configuration, args)

    def get_monitoring(self, *args):
        return self._obj.invoke("get_monitoring", _0_SDOPackage.SDO._d_get_monitoring, args)

    def get_organizations(self, *args):
        return self._obj.invoke("get_organizations", _0_SDOPackage.SDO._d_get_organizations, args)

    def get_status_list(self, *args):
        return self._obj.invoke("get_status_list", _0_SDOPackage.SDO._d_get_status_list, args)

    def get_status(self, *args):
        return self._obj.invoke("get_status", _0_SDOPackage.SDO._d_get_status, args)

omniORB.registerObjref(SDO._NP_RepositoryId, _objref_SDO)
_0_SDOPackage._objref_SDO = _objref_SDO
del SDO, _objref_SDO

# SDO skeleton
__name__ = "rtctree.rtc.SDOPackage__POA"
class SDO (_0_SDOPackage__POA.SDOSystemElement):
    _NP_RepositoryId = _0_SDOPackage.SDO._NP_RepositoryId


    _omni_op_d = {"get_sdo_id": _0_SDOPackage.SDO._d_get_sdo_id, "get_sdo_type": _0_SDOPackage.SDO._d_get_sdo_type, "get_device_profile": _0_SDOPackage.SDO._d_get_device_profile, "get_service_profiles": _0_SDOPackage.SDO._d_get_service_profiles, "get_service_profile": _0_SDOPackage.SDO._d_get_service_profile, "get_sdo_service": _0_SDOPackage.SDO._d_get_sdo_service, "get_configuration": _0_SDOPackage.SDO._d_get_configuration, "get_monitoring": _0_SDOPackage.SDO._d_get_monitoring, "get_organizations": _0_SDOPackage.SDO._d_get_organizations, "get_status_list": _0_SDOPackage.SDO._d_get_status_list, "get_status": _0_SDOPackage.SDO._d_get_status}
    _omni_op_d.update(_0_SDOPackage__POA.SDOSystemElement._omni_op_d)

SDO._omni_skeleton = SDO
_0_SDOPackage__POA.SDO = SDO
omniORB.registerSkeleton(SDO._NP_RepositoryId, SDO)
del SDO
__name__ = "rtctree.rtc.SDOPackage"

# interface Configuration
_0_SDOPackage._d_Configuration = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/Configuration:1.0", "Configuration")
omniORB.typeMapping["IDL:org.omg/SDOPackage/Configuration:1.0"] = _0_SDOPackage._d_Configuration
_0_SDOPackage.Configuration = omniORB.newEmptyClass()
class Configuration :
    _NP_RepositoryId = _0_SDOPackage._d_Configuration[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SDOPackage.Configuration = Configuration
_0_SDOPackage._tc_Configuration = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_Configuration)
omniORB.registerType(Configuration._NP_RepositoryId, _0_SDOPackage._d_Configuration, _0_SDOPackage._tc_Configuration)

# Configuration operations and attributes
Configuration._d_set_device_profile = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/DeviceProfile:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_add_service_profile = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/ServiceProfile:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_add_organization = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/Organization:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_remove_service_profile = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_remove_organization = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_get_configuration_parameters = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/ParameterList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_get_configuration_parameter_values = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/NVList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_get_configuration_parameter_value = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_any, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_set_configuration_parameter = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_get_configuration_sets = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/ConfigurationSetList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_get_configuration_set = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.typeMapping["IDL:org.omg/SDOPackage/ConfigurationSet:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_set_configuration_set_values = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/ConfigurationSet:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_get_active_configuration_set = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/ConfigurationSet:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_add_configuration_set = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/ConfigurationSet:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_remove_configuration_set = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Configuration._d_activate_configuration_set = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})

# Configuration object reference
class _objref_Configuration (CORBA.Object):
    _NP_RepositoryId = Configuration._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def set_device_profile(self, *args):
        return self._obj.invoke("set_device_profile", _0_SDOPackage.Configuration._d_set_device_profile, args)

    def add_service_profile(self, *args):
        return self._obj.invoke("add_service_profile", _0_SDOPackage.Configuration._d_add_service_profile, args)

    def add_organization(self, *args):
        return self._obj.invoke("add_organization", _0_SDOPackage.Configuration._d_add_organization, args)

    def remove_service_profile(self, *args):
        return self._obj.invoke("remove_service_profile", _0_SDOPackage.Configuration._d_remove_service_profile, args)

    def remove_organization(self, *args):
        return self._obj.invoke("remove_organization", _0_SDOPackage.Configuration._d_remove_organization, args)

    def get_configuration_parameters(self, *args):
        return self._obj.invoke("get_configuration_parameters", _0_SDOPackage.Configuration._d_get_configuration_parameters, args)

    def get_configuration_parameter_values(self, *args):
        return self._obj.invoke("get_configuration_parameter_values", _0_SDOPackage.Configuration._d_get_configuration_parameter_values, args)

    def get_configuration_parameter_value(self, *args):
        return self._obj.invoke("get_configuration_parameter_value", _0_SDOPackage.Configuration._d_get_configuration_parameter_value, args)

    def set_configuration_parameter(self, *args):
        return self._obj.invoke("set_configuration_parameter", _0_SDOPackage.Configuration._d_set_configuration_parameter, args)

    def get_configuration_sets(self, *args):
        return self._obj.invoke("get_configuration_sets", _0_SDOPackage.Configuration._d_get_configuration_sets, args)

    def get_configuration_set(self, *args):
        return self._obj.invoke("get_configuration_set", _0_SDOPackage.Configuration._d_get_configuration_set, args)

    def set_configuration_set_values(self, *args):
        return self._obj.invoke("set_configuration_set_values", _0_SDOPackage.Configuration._d_set_configuration_set_values, args)

    def get_active_configuration_set(self, *args):
        return self._obj.invoke("get_active_configuration_set", _0_SDOPackage.Configuration._d_get_active_configuration_set, args)

    def add_configuration_set(self, *args):
        return self._obj.invoke("add_configuration_set", _0_SDOPackage.Configuration._d_add_configuration_set, args)

    def remove_configuration_set(self, *args):
        return self._obj.invoke("remove_configuration_set", _0_SDOPackage.Configuration._d_remove_configuration_set, args)

    def activate_configuration_set(self, *args):
        return self._obj.invoke("activate_configuration_set", _0_SDOPackage.Configuration._d_activate_configuration_set, args)

omniORB.registerObjref(Configuration._NP_RepositoryId, _objref_Configuration)
_0_SDOPackage._objref_Configuration = _objref_Configuration
del Configuration, _objref_Configuration

# Configuration skeleton
__name__ = "rtctree.rtc.SDOPackage__POA"
class Configuration (PortableServer.Servant):
    _NP_RepositoryId = _0_SDOPackage.Configuration._NP_RepositoryId


    _omni_op_d = {"set_device_profile": _0_SDOPackage.Configuration._d_set_device_profile, "add_service_profile": _0_SDOPackage.Configuration._d_add_service_profile, "add_organization": _0_SDOPackage.Configuration._d_add_organization, "remove_service_profile": _0_SDOPackage.Configuration._d_remove_service_profile, "remove_organization": _0_SDOPackage.Configuration._d_remove_organization, "get_configuration_parameters": _0_SDOPackage.Configuration._d_get_configuration_parameters, "get_configuration_parameter_values": _0_SDOPackage.Configuration._d_get_configuration_parameter_values, "get_configuration_parameter_value": _0_SDOPackage.Configuration._d_get_configuration_parameter_value, "set_configuration_parameter": _0_SDOPackage.Configuration._d_set_configuration_parameter, "get_configuration_sets": _0_SDOPackage.Configuration._d_get_configuration_sets, "get_configuration_set": _0_SDOPackage.Configuration._d_get_configuration_set, "set_configuration_set_values": _0_SDOPackage.Configuration._d_set_configuration_set_values, "get_active_configuration_set": _0_SDOPackage.Configuration._d_get_active_configuration_set, "add_configuration_set": _0_SDOPackage.Configuration._d_add_configuration_set, "remove_configuration_set": _0_SDOPackage.Configuration._d_remove_configuration_set, "activate_configuration_set": _0_SDOPackage.Configuration._d_activate_configuration_set}

Configuration._omni_skeleton = Configuration
_0_SDOPackage__POA.Configuration = Configuration
omniORB.registerSkeleton(Configuration._NP_RepositoryId, Configuration)
del Configuration
__name__ = "rtctree.rtc.SDOPackage"

# interface Monitoring
_0_SDOPackage._d_Monitoring = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/Monitoring:1.0", "Monitoring")
omniORB.typeMapping["IDL:org.omg/SDOPackage/Monitoring:1.0"] = _0_SDOPackage._d_Monitoring
_0_SDOPackage.Monitoring = omniORB.newEmptyClass()
class Monitoring :
    _NP_RepositoryId = _0_SDOPackage._d_Monitoring[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SDOPackage.Monitoring = Monitoring
_0_SDOPackage._tc_Monitoring = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_Monitoring)
omniORB.registerType(Monitoring._NP_RepositoryId, _0_SDOPackage._d_Monitoring, _0_SDOPackage._tc_Monitoring)

# Monitoring object reference
class _objref_Monitoring (CORBA.Object):
    _NP_RepositoryId = Monitoring._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

omniORB.registerObjref(Monitoring._NP_RepositoryId, _objref_Monitoring)
_0_SDOPackage._objref_Monitoring = _objref_Monitoring
del Monitoring, _objref_Monitoring

# Monitoring skeleton
__name__ = "rtctree.rtc.SDOPackage__POA"
class Monitoring (PortableServer.Servant):
    _NP_RepositoryId = _0_SDOPackage.Monitoring._NP_RepositoryId


    _omni_op_d = {}

Monitoring._omni_skeleton = Monitoring
_0_SDOPackage__POA.Monitoring = Monitoring
omniORB.registerSkeleton(Monitoring._NP_RepositoryId, Monitoring)
del Monitoring
__name__ = "rtctree.rtc.SDOPackage"

# interface SDOService
_0_SDOPackage._d_SDOService = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/SDOService:1.0", "SDOService")
omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOService:1.0"] = _0_SDOPackage._d_SDOService
_0_SDOPackage.SDOService = omniORB.newEmptyClass()
class SDOService :
    _NP_RepositoryId = _0_SDOPackage._d_SDOService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SDOPackage.SDOService = SDOService
_0_SDOPackage._tc_SDOService = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_SDOService)
omniORB.registerType(SDOService._NP_RepositoryId, _0_SDOPackage._d_SDOService, _0_SDOPackage._tc_SDOService)

# SDOService object reference
class _objref_SDOService (CORBA.Object):
    _NP_RepositoryId = SDOService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

omniORB.registerObjref(SDOService._NP_RepositoryId, _objref_SDOService)
_0_SDOPackage._objref_SDOService = _objref_SDOService
del SDOService, _objref_SDOService

# SDOService skeleton
__name__ = "rtctree.rtc.SDOPackage__POA"
class SDOService (PortableServer.Servant):
    _NP_RepositoryId = _0_SDOPackage.SDOService._NP_RepositoryId


    _omni_op_d = {}

SDOService._omni_skeleton = SDOService
_0_SDOPackage__POA.SDOService = SDOService
omniORB.registerSkeleton(SDOService._NP_RepositoryId, SDOService)
del SDOService
__name__ = "rtctree.rtc.SDOPackage"

# interface Organization
_0_SDOPackage._d_Organization = (omniORB.tcInternal.tv_objref, "IDL:org.omg/SDOPackage/Organization:1.0", "Organization")
omniORB.typeMapping["IDL:org.omg/SDOPackage/Organization:1.0"] = _0_SDOPackage._d_Organization
_0_SDOPackage.Organization = omniORB.newEmptyClass()
class Organization :
    _NP_RepositoryId = _0_SDOPackage._d_Organization[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SDOPackage.Organization = Organization
_0_SDOPackage._tc_Organization = omniORB.tcInternal.createTypeCode(_0_SDOPackage._d_Organization)
omniORB.registerType(Organization._NP_RepositoryId, _0_SDOPackage._d_Organization, _0_SDOPackage._tc_Organization)

# Organization operations and attributes
Organization._d_get_organization_id = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_get_organization_property = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/OrganizationProperty:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_get_organization_property_value = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_any, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_add_organization_property = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/OrganizationProperty:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_set_organization_property_value = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_remove_organization_property = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_get_owner = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOSystemElement:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_set_owner = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOSystemElement:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_get_members = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOList:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_set_members = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOList:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_add_members = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/SDOList:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_remove_member = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.InvalidParameter._NP_RepositoryId: _0_SDOPackage._d_InvalidParameter, _0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_get_dependency = ((), (omniORB.typeMapping["IDL:org.omg/SDOPackage/DependencyType:1.0"], ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})
Organization._d_set_dependency = ((omniORB.typeMapping["IDL:org.omg/SDOPackage/DependencyType:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_SDOPackage.NotAvailable._NP_RepositoryId: _0_SDOPackage._d_NotAvailable, _0_SDOPackage.InternalError._NP_RepositoryId: _0_SDOPackage._d_InternalError})

# Organization object reference
class _objref_Organization (CORBA.Object):
    _NP_RepositoryId = Organization._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def get_organization_id(self, *args):
        return self._obj.invoke("get_organization_id", _0_SDOPackage.Organization._d_get_organization_id, args)

    def get_organization_property(self, *args):
        return self._obj.invoke("get_organization_property", _0_SDOPackage.Organization._d_get_organization_property, args)

    def get_organization_property_value(self, *args):
        return self._obj.invoke("get_organization_property_value", _0_SDOPackage.Organization._d_get_organization_property_value, args)

    def add_organization_property(self, *args):
        return self._obj.invoke("add_organization_property", _0_SDOPackage.Organization._d_add_organization_property, args)

    def set_organization_property_value(self, *args):
        return self._obj.invoke("set_organization_property_value", _0_SDOPackage.Organization._d_set_organization_property_value, args)

    def remove_organization_property(self, *args):
        return self._obj.invoke("remove_organization_property", _0_SDOPackage.Organization._d_remove_organization_property, args)

    def get_owner(self, *args):
        return self._obj.invoke("get_owner", _0_SDOPackage.Organization._d_get_owner, args)

    def set_owner(self, *args):
        return self._obj.invoke("set_owner", _0_SDOPackage.Organization._d_set_owner, args)

    def get_members(self, *args):
        return self._obj.invoke("get_members", _0_SDOPackage.Organization._d_get_members, args)

    def set_members(self, *args):
        return self._obj.invoke("set_members", _0_SDOPackage.Organization._d_set_members, args)

    def add_members(self, *args):
        return self._obj.invoke("add_members", _0_SDOPackage.Organization._d_add_members, args)

    def remove_member(self, *args):
        return self._obj.invoke("remove_member", _0_SDOPackage.Organization._d_remove_member, args)

    def get_dependency(self, *args):
        return self._obj.invoke("get_dependency", _0_SDOPackage.Organization._d_get_dependency, args)

    def set_dependency(self, *args):
        return self._obj.invoke("set_dependency", _0_SDOPackage.Organization._d_set_dependency, args)

omniORB.registerObjref(Organization._NP_RepositoryId, _objref_Organization)
_0_SDOPackage._objref_Organization = _objref_Organization
del Organization, _objref_Organization

# Organization skeleton
__name__ = "rtctree.rtc.SDOPackage__POA"
class Organization (PortableServer.Servant):
    _NP_RepositoryId = _0_SDOPackage.Organization._NP_RepositoryId


    _omni_op_d = {"get_organization_id": _0_SDOPackage.Organization._d_get_organization_id, "get_organization_property": _0_SDOPackage.Organization._d_get_organization_property, "get_organization_property_value": _0_SDOPackage.Organization._d_get_organization_property_value, "add_organization_property": _0_SDOPackage.Organization._d_add_organization_property, "set_organization_property_value": _0_SDOPackage.Organization._d_set_organization_property_value, "remove_organization_property": _0_SDOPackage.Organization._d_remove_organization_property, "get_owner": _0_SDOPackage.Organization._d_get_owner, "set_owner": _0_SDOPackage.Organization._d_set_owner, "get_members": _0_SDOPackage.Organization._d_get_members, "set_members": _0_SDOPackage.Organization._d_set_members, "add_members": _0_SDOPackage.Organization._d_add_members, "remove_member": _0_SDOPackage.Organization._d_remove_member, "get_dependency": _0_SDOPackage.Organization._d_get_dependency, "set_dependency": _0_SDOPackage.Organization._d_set_dependency}

Organization._omni_skeleton = Organization
_0_SDOPackage__POA.Organization = Organization
omniORB.registerSkeleton(Organization._NP_RepositoryId, Organization)
del Organization
__name__ = "rtctree.rtc.SDOPackage"

#
# End of module "SDOPackage"
#
__name__ = "rtctree.rtc.SDOPackage_idl"

_exported_modules = ( "rtctree.rtc.SDOPackage", )

# The end.
