# Python stubs generated by omniidl from C:\Users\TyouK\Documents\GitHub\rtctree\idl\Logger.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "BasicDataType.idl"
import rtctree.rtc.BasicDataType_idl
_0_RTC = omniORB.openModule("rtctree.rtc.RTC")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA")

# #include "SDOPackage.idl"
import rtctree.rtc.SDOPackage_idl
_0_SDOPackage = omniORB.openModule("rtctree.rtc.SDOPackage")
_0_SDOPackage__POA = omniORB.openModule("rtctree.rtc.SDOPackage__POA")

#
# Start of module "OpenRTM"
#
__name__ = "rtctree.rtc.OpenRTM"
_0_OpenRTM = omniORB.openModule("rtctree.rtc.OpenRTM", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\Logger.idl")
_0_OpenRTM__POA = omniORB.openModule("rtctree.rtc.OpenRTM__POA", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\Logger.idl")


# enum LogLevel
_0_OpenRTM.SILENT = omniORB.EnumItem("SILENT", 0)
_0_OpenRTM.ERROR = omniORB.EnumItem("ERROR", 1)
_0_OpenRTM.WARN = omniORB.EnumItem("WARN", 2)
_0_OpenRTM.INFO = omniORB.EnumItem("INFO", 3)
_0_OpenRTM.NORMAL = omniORB.EnumItem("NORMAL", 4)
_0_OpenRTM.DEBUG = omniORB.EnumItem("DEBUG", 5)
_0_OpenRTM.TRACE = omniORB.EnumItem("TRACE", 6)
_0_OpenRTM.VERBOSE = omniORB.EnumItem("VERBOSE", 7)
_0_OpenRTM.PARANOID = omniORB.EnumItem("PARANOID", 8)
_0_OpenRTM.LogLevel = omniORB.Enum("IDL:OpenRTM/LogLevel:1.0", (_0_OpenRTM.SILENT, _0_OpenRTM.ERROR, _0_OpenRTM.WARN, _0_OpenRTM.INFO, _0_OpenRTM.NORMAL, _0_OpenRTM.DEBUG, _0_OpenRTM.TRACE, _0_OpenRTM.VERBOSE, _0_OpenRTM.PARANOID,))

_0_OpenRTM._d_LogLevel  = (omniORB.tcInternal.tv_enum, _0_OpenRTM.LogLevel._NP_RepositoryId, "LogLevel", _0_OpenRTM.LogLevel._items)
_0_OpenRTM._tc_LogLevel = omniORB.tcInternal.createTypeCode(_0_OpenRTM._d_LogLevel)
omniORB.registerType(_0_OpenRTM.LogLevel._NP_RepositoryId, _0_OpenRTM._d_LogLevel, _0_OpenRTM._tc_LogLevel)

# struct LogRecord
_0_OpenRTM.LogRecord = omniORB.newEmptyClass()
class LogRecord (omniORB.StructBase):
    _NP_RepositoryId = "IDL:OpenRTM/LogRecord:1.0"

    def __init__(self, time, loggername, level, message):
        self.time = time
        self.loggername = loggername
        self.level = level
        self.message = message

_0_OpenRTM.LogRecord = LogRecord
_0_OpenRTM._d_LogRecord  = (omniORB.tcInternal.tv_struct, LogRecord, LogRecord._NP_RepositoryId, "LogRecord", "time", omniORB.typeMapping["IDL:RTC/Time:1.0"], "loggername", (omniORB.tcInternal.tv_string,0), "level", omniORB.typeMapping["IDL:OpenRTM/LogLevel:1.0"], "message", (omniORB.tcInternal.tv_string,0))
_0_OpenRTM._tc_LogRecord = omniORB.tcInternal.createTypeCode(_0_OpenRTM._d_LogRecord)
omniORB.registerType(LogRecord._NP_RepositoryId, _0_OpenRTM._d_LogRecord, _0_OpenRTM._tc_LogRecord)
del LogRecord

# interface Logger
_0_OpenRTM._d_Logger = (omniORB.tcInternal.tv_objref, "IDL:OpenRTM/Logger:1.0", "Logger")
omniORB.typeMapping["IDL:OpenRTM/Logger:1.0"] = _0_OpenRTM._d_Logger
_0_OpenRTM.Logger = omniORB.newEmptyClass()
class Logger (_0_SDOPackage.SDOService):
    _NP_RepositoryId = _0_OpenRTM._d_Logger[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenRTM.Logger = Logger
_0_OpenRTM._tc_Logger = omniORB.tcInternal.createTypeCode(_0_OpenRTM._d_Logger)
omniORB.registerType(Logger._NP_RepositoryId, _0_OpenRTM._d_Logger, _0_OpenRTM._tc_Logger)

# Logger operations and attributes
Logger._d_publish = ((omniORB.typeMapping["IDL:OpenRTM/LogRecord:1.0"], ), None, None)
Logger._d_close = ((), (), None)

# Logger object reference
class _objref_Logger (_0_SDOPackage._objref_SDOService):
    _NP_RepositoryId = Logger._NP_RepositoryId

    def __init__(self, obj):
        _0_SDOPackage._objref_SDOService.__init__(self, obj)

    def publish(self, *args):
        return self._obj.invoke("publish", _0_OpenRTM.Logger._d_publish, args)

    def close(self, *args):
        return self._obj.invoke("close", _0_OpenRTM.Logger._d_close, args)

omniORB.registerObjref(Logger._NP_RepositoryId, _objref_Logger)
_0_OpenRTM._objref_Logger = _objref_Logger
del Logger, _objref_Logger

# Logger skeleton
__name__ = "rtctree.rtc.OpenRTM__POA"
class Logger (_0_SDOPackage__POA.SDOService):
    _NP_RepositoryId = _0_OpenRTM.Logger._NP_RepositoryId


    _omni_op_d = {"publish": _0_OpenRTM.Logger._d_publish, "close": _0_OpenRTM.Logger._d_close}
    _omni_op_d.update(_0_SDOPackage__POA.SDOService._omni_op_d)

Logger._omni_skeleton = Logger
_0_OpenRTM__POA.Logger = Logger
omniORB.registerSkeleton(Logger._NP_RepositoryId, Logger)
del Logger
__name__ = "rtctree.rtc.OpenRTM"

#
# End of module "OpenRTM"
#
__name__ = "rtctree.rtc.Logger_idl"

_exported_modules = ( "rtctree.rtc.OpenRTM", )

# The end.
