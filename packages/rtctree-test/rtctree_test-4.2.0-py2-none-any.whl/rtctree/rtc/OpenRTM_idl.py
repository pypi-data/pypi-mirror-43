# Python stubs generated by omniidl from C:\Users\TyouK\Documents\GitHub\rtctree\idl\OpenRTM.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "SDOPackage.idl"
import rtctree.rtc.SDOPackage_idl
_0_SDOPackage = omniORB.openModule("rtctree.rtc.SDOPackage")
_0_SDOPackage__POA = omniORB.openModule("rtctree.rtc.SDOPackage__POA")

# #include "RTC.idl"
import rtctree.rtc.RTC_idl
_0_RTC = omniORB.openModule("rtctree.rtc.RTC")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA")

#
# Start of module "OpenRTM"
#
__name__ = "rtctree.rtc.OpenRTM"
_0_OpenRTM = omniORB.openModule("rtctree.rtc.OpenRTM", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\OpenRTM.idl")
_0_OpenRTM__POA = omniORB.openModule("rtctree.rtc.OpenRTM__POA", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\OpenRTM.idl")


# interface DataFlowComponent
_0_OpenRTM._d_DataFlowComponent = (omniORB.tcInternal.tv_objref, "IDL:openrtm.aist.go.jp/OpenRTM/DataFlowComponent:1.0", "DataFlowComponent")
omniORB.typeMapping["IDL:openrtm.aist.go.jp/OpenRTM/DataFlowComponent:1.0"] = _0_OpenRTM._d_DataFlowComponent
_0_OpenRTM.DataFlowComponent = omniORB.newEmptyClass()
class DataFlowComponent (_0_RTC.RTObject, _0_RTC.DataFlowComponent):
    _NP_RepositoryId = _0_OpenRTM._d_DataFlowComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenRTM.DataFlowComponent = DataFlowComponent
_0_OpenRTM._tc_DataFlowComponent = omniORB.tcInternal.createTypeCode(_0_OpenRTM._d_DataFlowComponent)
omniORB.registerType(DataFlowComponent._NP_RepositoryId, _0_OpenRTM._d_DataFlowComponent, _0_OpenRTM._tc_DataFlowComponent)

# DataFlowComponent object reference
class _objref_DataFlowComponent (_0_RTC._objref_RTObject, _0_RTC._objref_DataFlowComponent):
    _NP_RepositoryId = DataFlowComponent._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_RTObject.__init__(self, obj)
        _0_RTC._objref_DataFlowComponent.__init__(self, obj)

omniORB.registerObjref(DataFlowComponent._NP_RepositoryId, _objref_DataFlowComponent)
_0_OpenRTM._objref_DataFlowComponent = _objref_DataFlowComponent
del DataFlowComponent, _objref_DataFlowComponent

# DataFlowComponent skeleton
__name__ = "rtctree.rtc.OpenRTM__POA"
class DataFlowComponent (_0_RTC__POA.RTObject, _0_RTC__POA.DataFlowComponent):
    _NP_RepositoryId = _0_OpenRTM.DataFlowComponent._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_RTC__POA.RTObject._omni_op_d)
    _omni_op_d.update(_0_RTC__POA.DataFlowComponent._omni_op_d)

DataFlowComponent._omni_skeleton = DataFlowComponent
_0_OpenRTM__POA.DataFlowComponent = DataFlowComponent
omniORB.registerSkeleton(DataFlowComponent._NP_RepositoryId, DataFlowComponent)
del DataFlowComponent
__name__ = "rtctree.rtc.OpenRTM"

# interface ExtTrigExecutionContextService
_0_OpenRTM._d_ExtTrigExecutionContextService = (omniORB.tcInternal.tv_objref, "IDL:openrtm.aist.go.jp/OpenRTM/ExtTrigExecutionContextService:1.0", "ExtTrigExecutionContextService")
omniORB.typeMapping["IDL:openrtm.aist.go.jp/OpenRTM/ExtTrigExecutionContextService:1.0"] = _0_OpenRTM._d_ExtTrigExecutionContextService
_0_OpenRTM.ExtTrigExecutionContextService = omniORB.newEmptyClass()
class ExtTrigExecutionContextService (_0_RTC.ExecutionContextService):
    _NP_RepositoryId = _0_OpenRTM._d_ExtTrigExecutionContextService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_OpenRTM.ExtTrigExecutionContextService = ExtTrigExecutionContextService
_0_OpenRTM._tc_ExtTrigExecutionContextService = omniORB.tcInternal.createTypeCode(_0_OpenRTM._d_ExtTrigExecutionContextService)
omniORB.registerType(ExtTrigExecutionContextService._NP_RepositoryId, _0_OpenRTM._d_ExtTrigExecutionContextService, _0_OpenRTM._tc_ExtTrigExecutionContextService)

# ExtTrigExecutionContextService operations and attributes
ExtTrigExecutionContextService._d_tick = ((), (), None)

# ExtTrigExecutionContextService object reference
class _objref_ExtTrigExecutionContextService (_0_RTC._objref_ExecutionContextService):
    _NP_RepositoryId = ExtTrigExecutionContextService._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_ExecutionContextService.__init__(self, obj)

    def tick(self, *args):
        return self._obj.invoke("tick", _0_OpenRTM.ExtTrigExecutionContextService._d_tick, args)

omniORB.registerObjref(ExtTrigExecutionContextService._NP_RepositoryId, _objref_ExtTrigExecutionContextService)
_0_OpenRTM._objref_ExtTrigExecutionContextService = _objref_ExtTrigExecutionContextService
del ExtTrigExecutionContextService, _objref_ExtTrigExecutionContextService

# ExtTrigExecutionContextService skeleton
__name__ = "rtctree.rtc.OpenRTM__POA"
class ExtTrigExecutionContextService (_0_RTC__POA.ExecutionContextService):
    _NP_RepositoryId = _0_OpenRTM.ExtTrigExecutionContextService._NP_RepositoryId


    _omni_op_d = {"tick": _0_OpenRTM.ExtTrigExecutionContextService._d_tick}
    _omni_op_d.update(_0_RTC__POA.ExecutionContextService._omni_op_d)

ExtTrigExecutionContextService._omni_skeleton = ExtTrigExecutionContextService
_0_OpenRTM__POA.ExtTrigExecutionContextService = ExtTrigExecutionContextService
omniORB.registerSkeleton(ExtTrigExecutionContextService._NP_RepositoryId, ExtTrigExecutionContextService)
del ExtTrigExecutionContextService
__name__ = "rtctree.rtc.OpenRTM"

#
# End of module "OpenRTM"
#
__name__ = "rtctree.rtc.OpenRTM_idl"

_exported_modules = ( "rtctree.rtc.OpenRTM", )

# The end.
