# Python stubs generated by omniidl from C:\Users\TyouK\Documents\GitHub\rtctree\idl\RTC.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "SDOPackage.idl"
import rtctree.rtc.SDOPackage_idl
_0_SDOPackage = omniORB.openModule("rtctree.rtc.SDOPackage")
_0_SDOPackage__POA = omniORB.openModule("rtctree.rtc.SDOPackage__POA")

#
# Start of module "RTC"
#
__name__ = "rtctree.rtc.RTC"
_0_RTC = omniORB.openModule("rtctree.rtc.RTC", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\RTC.idl")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\RTC.idl")


# typedef ... ExecutionContextHandle_t
class ExecutionContextHandle_t:
    _NP_RepositoryId = "IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ExecutionContextHandle_t = ExecutionContextHandle_t
_0_RTC._d_ExecutionContextHandle_t  = omniORB.tcInternal.tv_long
_0_RTC._ad_ExecutionContextHandle_t = (omniORB.tcInternal.tv_alias, ExecutionContextHandle_t._NP_RepositoryId, "ExecutionContextHandle_t", omniORB.tcInternal.tv_long)
_0_RTC._tc_ExecutionContextHandle_t = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ExecutionContextHandle_t)
omniORB.registerType(ExecutionContextHandle_t._NP_RepositoryId, _0_RTC._ad_ExecutionContextHandle_t, _0_RTC._tc_ExecutionContextHandle_t)
del ExecutionContextHandle_t

# typedef ... UniqueIdentifier
class UniqueIdentifier:
    _NP_RepositoryId = "IDL:omg.org/RTC/UniqueIdentifier:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.UniqueIdentifier = UniqueIdentifier
_0_RTC._d_UniqueIdentifier  = omniORB.typeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"]
_0_RTC._ad_UniqueIdentifier = (omniORB.tcInternal.tv_alias, UniqueIdentifier._NP_RepositoryId, "UniqueIdentifier", omniORB.typeCodeMapping["IDL:org.omg/SDOPackage/UniqueIdentifier:1.0"]._d)
_0_RTC._tc_UniqueIdentifier = omniORB.tcInternal.createTypeCode(_0_RTC._ad_UniqueIdentifier)
omniORB.registerType(UniqueIdentifier._NP_RepositoryId, _0_RTC._ad_UniqueIdentifier, _0_RTC._tc_UniqueIdentifier)
del UniqueIdentifier

# typedef ... NVList
class NVList:
    _NP_RepositoryId = "IDL:omg.org/RTC/NVList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.NVList = NVList
_0_RTC._d_NVList  = omniORB.typeMapping["IDL:org.omg/SDOPackage/NVList:1.0"]
_0_RTC._ad_NVList = (omniORB.tcInternal.tv_alias, NVList._NP_RepositoryId, "NVList", omniORB.typeCodeMapping["IDL:org.omg/SDOPackage/NVList:1.0"]._d)
_0_RTC._tc_NVList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_NVList)
omniORB.registerType(NVList._NP_RepositoryId, _0_RTC._ad_NVList, _0_RTC._tc_NVList)
del NVList

# enum ReturnCode_t
_0_RTC.RTC_OK = omniORB.EnumItem("RTC_OK", 0)
_0_RTC.RTC_ERROR = omniORB.EnumItem("RTC_ERROR", 1)
_0_RTC.BAD_PARAMETER = omniORB.EnumItem("BAD_PARAMETER", 2)
_0_RTC.UNSUPPORTED = omniORB.EnumItem("UNSUPPORTED", 3)
_0_RTC.OUT_OF_RESOURCES = omniORB.EnumItem("OUT_OF_RESOURCES", 4)
_0_RTC.PRECONDITION_NOT_MET = omniORB.EnumItem("PRECONDITION_NOT_MET", 5)
_0_RTC.ReturnCode_t = omniORB.Enum("IDL:omg.org/RTC/ReturnCode_t:1.0", (_0_RTC.RTC_OK, _0_RTC.RTC_ERROR, _0_RTC.BAD_PARAMETER, _0_RTC.UNSUPPORTED, _0_RTC.OUT_OF_RESOURCES, _0_RTC.PRECONDITION_NOT_MET,))

_0_RTC._d_ReturnCode_t  = (omniORB.tcInternal.tv_enum, _0_RTC.ReturnCode_t._NP_RepositoryId, "ReturnCode_t", _0_RTC.ReturnCode_t._items)
_0_RTC._tc_ReturnCode_t = omniORB.tcInternal.createTypeCode(_0_RTC._d_ReturnCode_t)
omniORB.registerType(_0_RTC.ReturnCode_t._NP_RepositoryId, _0_RTC._d_ReturnCode_t, _0_RTC._tc_ReturnCode_t)

# enum LifeCycleState
_0_RTC.CREATED_STATE = omniORB.EnumItem("CREATED_STATE", 0)
_0_RTC.INACTIVE_STATE = omniORB.EnumItem("INACTIVE_STATE", 1)
_0_RTC.ACTIVE_STATE = omniORB.EnumItem("ACTIVE_STATE", 2)
_0_RTC.ERROR_STATE = omniORB.EnumItem("ERROR_STATE", 3)
_0_RTC.LifeCycleState = omniORB.Enum("IDL:omg.org/RTC/LifeCycleState:1.0", (_0_RTC.CREATED_STATE, _0_RTC.INACTIVE_STATE, _0_RTC.ACTIVE_STATE, _0_RTC.ERROR_STATE,))

_0_RTC._d_LifeCycleState  = (omniORB.tcInternal.tv_enum, _0_RTC.LifeCycleState._NP_RepositoryId, "LifeCycleState", _0_RTC.LifeCycleState._items)
_0_RTC._tc_LifeCycleState = omniORB.tcInternal.createTypeCode(_0_RTC._d_LifeCycleState)
omniORB.registerType(_0_RTC.LifeCycleState._NP_RepositoryId, _0_RTC._d_LifeCycleState, _0_RTC._tc_LifeCycleState)

# forward interface ExecutionContext;
_0_RTC._d_ExecutionContext = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/ExecutionContext:1.0", "ExecutionContext")
omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"] = _0_RTC._d_ExecutionContext

# typedef ... ExecutionContextList
class ExecutionContextList:
    _NP_RepositoryId = "IDL:omg.org/RTC/ExecutionContextList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ExecutionContextList = ExecutionContextList
_0_RTC._d_ExecutionContextList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], 0)
_0_RTC._ad_ExecutionContextList = (omniORB.tcInternal.tv_alias, ExecutionContextList._NP_RepositoryId, "ExecutionContextList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], 0))
_0_RTC._tc_ExecutionContextList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ExecutionContextList)
omniORB.registerType(ExecutionContextList._NP_RepositoryId, _0_RTC._ad_ExecutionContextList, _0_RTC._tc_ExecutionContextList)
del ExecutionContextList

# interface ComponentAction
_0_RTC._d_ComponentAction = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/ComponentAction:1.0", "ComponentAction")
omniORB.typeMapping["IDL:omg.org/RTC/ComponentAction:1.0"] = _0_RTC._d_ComponentAction
_0_RTC.ComponentAction = omniORB.newEmptyClass()
class ComponentAction :
    _NP_RepositoryId = _0_RTC._d_ComponentAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.ComponentAction = ComponentAction
_0_RTC._tc_ComponentAction = omniORB.tcInternal.createTypeCode(_0_RTC._d_ComponentAction)
omniORB.registerType(ComponentAction._NP_RepositoryId, _0_RTC._d_ComponentAction, _0_RTC._tc_ComponentAction)

# ComponentAction operations and attributes
ComponentAction._d_on_initialize = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_finalize = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_startup = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_shutdown = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_activated = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_deactivated = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_aborting = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_error = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ComponentAction._d_on_reset = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# ComponentAction object reference
class _objref_ComponentAction (CORBA.Object):
    _NP_RepositoryId = ComponentAction._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def on_initialize(self, *args):
        return self._obj.invoke("on_initialize", _0_RTC.ComponentAction._d_on_initialize, args)

    def on_finalize(self, *args):
        return self._obj.invoke("on_finalize", _0_RTC.ComponentAction._d_on_finalize, args)

    def on_startup(self, *args):
        return self._obj.invoke("on_startup", _0_RTC.ComponentAction._d_on_startup, args)

    def on_shutdown(self, *args):
        return self._obj.invoke("on_shutdown", _0_RTC.ComponentAction._d_on_shutdown, args)

    def on_activated(self, *args):
        return self._obj.invoke("on_activated", _0_RTC.ComponentAction._d_on_activated, args)

    def on_deactivated(self, *args):
        return self._obj.invoke("on_deactivated", _0_RTC.ComponentAction._d_on_deactivated, args)

    def on_aborting(self, *args):
        return self._obj.invoke("on_aborting", _0_RTC.ComponentAction._d_on_aborting, args)

    def on_error(self, *args):
        return self._obj.invoke("on_error", _0_RTC.ComponentAction._d_on_error, args)

    def on_reset(self, *args):
        return self._obj.invoke("on_reset", _0_RTC.ComponentAction._d_on_reset, args)

omniORB.registerObjref(ComponentAction._NP_RepositoryId, _objref_ComponentAction)
_0_RTC._objref_ComponentAction = _objref_ComponentAction
del ComponentAction, _objref_ComponentAction

# ComponentAction skeleton
__name__ = "rtctree.rtc.RTC__POA"
class ComponentAction (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.ComponentAction._NP_RepositoryId


    _omni_op_d = {"on_initialize": _0_RTC.ComponentAction._d_on_initialize, "on_finalize": _0_RTC.ComponentAction._d_on_finalize, "on_startup": _0_RTC.ComponentAction._d_on_startup, "on_shutdown": _0_RTC.ComponentAction._d_on_shutdown, "on_activated": _0_RTC.ComponentAction._d_on_activated, "on_deactivated": _0_RTC.ComponentAction._d_on_deactivated, "on_aborting": _0_RTC.ComponentAction._d_on_aborting, "on_error": _0_RTC.ComponentAction._d_on_error, "on_reset": _0_RTC.ComponentAction._d_on_reset}

ComponentAction._omni_skeleton = ComponentAction
_0_RTC__POA.ComponentAction = ComponentAction
omniORB.registerSkeleton(ComponentAction._NP_RepositoryId, ComponentAction)
del ComponentAction
__name__ = "rtctree.rtc.RTC"

# interface LightweightRTObject
_0_RTC._d_LightweightRTObject = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/LightweightRTObject:1.0", "LightweightRTObject")
omniORB.typeMapping["IDL:omg.org/RTC/LightweightRTObject:1.0"] = _0_RTC._d_LightweightRTObject
_0_RTC.LightweightRTObject = omniORB.newEmptyClass()
class LightweightRTObject (_0_RTC.ComponentAction):
    _NP_RepositoryId = _0_RTC._d_LightweightRTObject[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.LightweightRTObject = LightweightRTObject
_0_RTC._tc_LightweightRTObject = omniORB.tcInternal.createTypeCode(_0_RTC._d_LightweightRTObject)
omniORB.registerType(LightweightRTObject._NP_RepositoryId, _0_RTC._d_LightweightRTObject, _0_RTC._tc_LightweightRTObject)

# LightweightRTObject operations and attributes
LightweightRTObject._d_initialize = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
LightweightRTObject._d_finalize = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
LightweightRTObject._d_is_alive = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
LightweightRTObject._d_exit = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
LightweightRTObject._d_attach_context = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), None)
LightweightRTObject._d_detach_context = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
LightweightRTObject._d_get_context = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], ), None)
LightweightRTObject._d_get_owned_contexts = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextList:1.0"], ), None)
LightweightRTObject._d_get_participating_contexts = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextList:1.0"], ), None)
LightweightRTObject._d_get_context_handle = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), None)

# LightweightRTObject object reference
class _objref_LightweightRTObject (_0_RTC._objref_ComponentAction):
    _NP_RepositoryId = LightweightRTObject._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_ComponentAction.__init__(self, obj)

    def initialize(self, *args):
        return self._obj.invoke("initialize", _0_RTC.LightweightRTObject._d_initialize, args)

    def finalize(self, *args):
        return self._obj.invoke("finalize", _0_RTC.LightweightRTObject._d_finalize, args)

    def is_alive(self, *args):
        return self._obj.invoke("is_alive", _0_RTC.LightweightRTObject._d_is_alive, args)

    def exit(self, *args):
        return self._obj.invoke("exit", _0_RTC.LightweightRTObject._d_exit, args)

    def attach_context(self, *args):
        return self._obj.invoke("attach_context", _0_RTC.LightweightRTObject._d_attach_context, args)

    def detach_context(self, *args):
        return self._obj.invoke("detach_context", _0_RTC.LightweightRTObject._d_detach_context, args)

    def get_context(self, *args):
        return self._obj.invoke("get_context", _0_RTC.LightweightRTObject._d_get_context, args)

    def get_owned_contexts(self, *args):
        return self._obj.invoke("get_owned_contexts", _0_RTC.LightweightRTObject._d_get_owned_contexts, args)

    def get_participating_contexts(self, *args):
        return self._obj.invoke("get_participating_contexts", _0_RTC.LightweightRTObject._d_get_participating_contexts, args)

    def get_context_handle(self, *args):
        return self._obj.invoke("get_context_handle", _0_RTC.LightweightRTObject._d_get_context_handle, args)

omniORB.registerObjref(LightweightRTObject._NP_RepositoryId, _objref_LightweightRTObject)
_0_RTC._objref_LightweightRTObject = _objref_LightweightRTObject
del LightweightRTObject, _objref_LightweightRTObject

# LightweightRTObject skeleton
__name__ = "rtctree.rtc.RTC__POA"
class LightweightRTObject (_0_RTC__POA.ComponentAction):
    _NP_RepositoryId = _0_RTC.LightweightRTObject._NP_RepositoryId


    _omni_op_d = {"initialize": _0_RTC.LightweightRTObject._d_initialize, "finalize": _0_RTC.LightweightRTObject._d_finalize, "is_alive": _0_RTC.LightweightRTObject._d_is_alive, "exit": _0_RTC.LightweightRTObject._d_exit, "attach_context": _0_RTC.LightweightRTObject._d_attach_context, "detach_context": _0_RTC.LightweightRTObject._d_detach_context, "get_context": _0_RTC.LightweightRTObject._d_get_context, "get_owned_contexts": _0_RTC.LightweightRTObject._d_get_owned_contexts, "get_participating_contexts": _0_RTC.LightweightRTObject._d_get_participating_contexts, "get_context_handle": _0_RTC.LightweightRTObject._d_get_context_handle}
    _omni_op_d.update(_0_RTC__POA.ComponentAction._omni_op_d)

LightweightRTObject._omni_skeleton = LightweightRTObject
_0_RTC__POA.LightweightRTObject = LightweightRTObject
omniORB.registerSkeleton(LightweightRTObject._NP_RepositoryId, LightweightRTObject)
del LightweightRTObject
__name__ = "rtctree.rtc.RTC"

# enum ExecutionKind
_0_RTC.PERIODIC = omniORB.EnumItem("PERIODIC", 0)
_0_RTC.EVENT_DRIVEN = omniORB.EnumItem("EVENT_DRIVEN", 1)
_0_RTC.OTHER = omniORB.EnumItem("OTHER", 2)
_0_RTC.ExecutionKind = omniORB.Enum("IDL:omg.org/RTC/ExecutionKind:1.0", (_0_RTC.PERIODIC, _0_RTC.EVENT_DRIVEN, _0_RTC.OTHER,))

_0_RTC._d_ExecutionKind  = (omniORB.tcInternal.tv_enum, _0_RTC.ExecutionKind._NP_RepositoryId, "ExecutionKind", _0_RTC.ExecutionKind._items)
_0_RTC._tc_ExecutionKind = omniORB.tcInternal.createTypeCode(_0_RTC._d_ExecutionKind)
omniORB.registerType(_0_RTC.ExecutionKind._NP_RepositoryId, _0_RTC._d_ExecutionKind, _0_RTC._tc_ExecutionKind)

# interface ExecutionContext
_0_RTC._d_ExecutionContext = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/ExecutionContext:1.0", "ExecutionContext")
omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"] = _0_RTC._d_ExecutionContext
_0_RTC.ExecutionContext = omniORB.newEmptyClass()
class ExecutionContext :
    _NP_RepositoryId = _0_RTC._d_ExecutionContext[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.ExecutionContext = ExecutionContext
_0_RTC._tc_ExecutionContext = omniORB.tcInternal.createTypeCode(_0_RTC._d_ExecutionContext)
omniORB.registerType(ExecutionContext._NP_RepositoryId, _0_RTC._d_ExecutionContext, _0_RTC._tc_ExecutionContext)

# ExecutionContext operations and attributes
ExecutionContext._d_is_running = ((), (omniORB.tcInternal.tv_boolean, ), None)
ExecutionContext._d_start = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_stop = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_get_rate = ((), (omniORB.tcInternal.tv_double, ), None)
ExecutionContext._d_set_rate = ((omniORB.tcInternal.tv_double, ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_add_component = ((omniORB.typeMapping["IDL:omg.org/RTC/LightweightRTObject:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_remove_component = ((omniORB.typeMapping["IDL:omg.org/RTC/LightweightRTObject:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_activate_component = ((omniORB.typeMapping["IDL:omg.org/RTC/LightweightRTObject:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_deactivate_component = ((omniORB.typeMapping["IDL:omg.org/RTC/LightweightRTObject:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_reset_component = ((omniORB.typeMapping["IDL:omg.org/RTC/LightweightRTObject:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
ExecutionContext._d_get_component_state = ((omniORB.typeMapping["IDL:omg.org/RTC/LightweightRTObject:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/LifeCycleState:1.0"], ), None)
ExecutionContext._d_get_kind = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ExecutionKind:1.0"], ), None)

# ExecutionContext object reference
class _objref_ExecutionContext (CORBA.Object):
    _NP_RepositoryId = ExecutionContext._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def is_running(self, *args):
        return self._obj.invoke("is_running", _0_RTC.ExecutionContext._d_is_running, args)

    def start(self, *args):
        return self._obj.invoke("start", _0_RTC.ExecutionContext._d_start, args)

    def stop(self, *args):
        return self._obj.invoke("stop", _0_RTC.ExecutionContext._d_stop, args)

    def get_rate(self, *args):
        return self._obj.invoke("get_rate", _0_RTC.ExecutionContext._d_get_rate, args)

    def set_rate(self, *args):
        return self._obj.invoke("set_rate", _0_RTC.ExecutionContext._d_set_rate, args)

    def add_component(self, *args):
        return self._obj.invoke("add_component", _0_RTC.ExecutionContext._d_add_component, args)

    def remove_component(self, *args):
        return self._obj.invoke("remove_component", _0_RTC.ExecutionContext._d_remove_component, args)

    def activate_component(self, *args):
        return self._obj.invoke("activate_component", _0_RTC.ExecutionContext._d_activate_component, args)

    def deactivate_component(self, *args):
        return self._obj.invoke("deactivate_component", _0_RTC.ExecutionContext._d_deactivate_component, args)

    def reset_component(self, *args):
        return self._obj.invoke("reset_component", _0_RTC.ExecutionContext._d_reset_component, args)

    def get_component_state(self, *args):
        return self._obj.invoke("get_component_state", _0_RTC.ExecutionContext._d_get_component_state, args)

    def get_kind(self, *args):
        return self._obj.invoke("get_kind", _0_RTC.ExecutionContext._d_get_kind, args)

omniORB.registerObjref(ExecutionContext._NP_RepositoryId, _objref_ExecutionContext)
_0_RTC._objref_ExecutionContext = _objref_ExecutionContext
del ExecutionContext, _objref_ExecutionContext

# ExecutionContext skeleton
__name__ = "rtctree.rtc.RTC__POA"
class ExecutionContext (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.ExecutionContext._NP_RepositoryId


    _omni_op_d = {"is_running": _0_RTC.ExecutionContext._d_is_running, "start": _0_RTC.ExecutionContext._d_start, "stop": _0_RTC.ExecutionContext._d_stop, "get_rate": _0_RTC.ExecutionContext._d_get_rate, "set_rate": _0_RTC.ExecutionContext._d_set_rate, "add_component": _0_RTC.ExecutionContext._d_add_component, "remove_component": _0_RTC.ExecutionContext._d_remove_component, "activate_component": _0_RTC.ExecutionContext._d_activate_component, "deactivate_component": _0_RTC.ExecutionContext._d_deactivate_component, "reset_component": _0_RTC.ExecutionContext._d_reset_component, "get_component_state": _0_RTC.ExecutionContext._d_get_component_state, "get_kind": _0_RTC.ExecutionContext._d_get_kind}

ExecutionContext._omni_skeleton = ExecutionContext
_0_RTC__POA.ExecutionContext = ExecutionContext
omniORB.registerSkeleton(ExecutionContext._NP_RepositoryId, ExecutionContext)
del ExecutionContext
__name__ = "rtctree.rtc.RTC"

# interface DataFlowComponentAction
_0_RTC._d_DataFlowComponentAction = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/DataFlowComponentAction:1.0", "DataFlowComponentAction")
omniORB.typeMapping["IDL:omg.org/RTC/DataFlowComponentAction:1.0"] = _0_RTC._d_DataFlowComponentAction
_0_RTC.DataFlowComponentAction = omniORB.newEmptyClass()
class DataFlowComponentAction :
    _NP_RepositoryId = _0_RTC._d_DataFlowComponentAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.DataFlowComponentAction = DataFlowComponentAction
_0_RTC._tc_DataFlowComponentAction = omniORB.tcInternal.createTypeCode(_0_RTC._d_DataFlowComponentAction)
omniORB.registerType(DataFlowComponentAction._NP_RepositoryId, _0_RTC._d_DataFlowComponentAction, _0_RTC._tc_DataFlowComponentAction)

# DataFlowComponentAction operations and attributes
DataFlowComponentAction._d_on_execute = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
DataFlowComponentAction._d_on_state_update = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
DataFlowComponentAction._d_on_rate_changed = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# DataFlowComponentAction object reference
class _objref_DataFlowComponentAction (CORBA.Object):
    _NP_RepositoryId = DataFlowComponentAction._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def on_execute(self, *args):
        return self._obj.invoke("on_execute", _0_RTC.DataFlowComponentAction._d_on_execute, args)

    def on_state_update(self, *args):
        return self._obj.invoke("on_state_update", _0_RTC.DataFlowComponentAction._d_on_state_update, args)

    def on_rate_changed(self, *args):
        return self._obj.invoke("on_rate_changed", _0_RTC.DataFlowComponentAction._d_on_rate_changed, args)

omniORB.registerObjref(DataFlowComponentAction._NP_RepositoryId, _objref_DataFlowComponentAction)
_0_RTC._objref_DataFlowComponentAction = _objref_DataFlowComponentAction
del DataFlowComponentAction, _objref_DataFlowComponentAction

# DataFlowComponentAction skeleton
__name__ = "rtctree.rtc.RTC__POA"
class DataFlowComponentAction (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.DataFlowComponentAction._NP_RepositoryId


    _omni_op_d = {"on_execute": _0_RTC.DataFlowComponentAction._d_on_execute, "on_state_update": _0_RTC.DataFlowComponentAction._d_on_state_update, "on_rate_changed": _0_RTC.DataFlowComponentAction._d_on_rate_changed}

DataFlowComponentAction._omni_skeleton = DataFlowComponentAction
_0_RTC__POA.DataFlowComponentAction = DataFlowComponentAction
omniORB.registerSkeleton(DataFlowComponentAction._NP_RepositoryId, DataFlowComponentAction)
del DataFlowComponentAction
__name__ = "rtctree.rtc.RTC"

# interface DataFlowComponent
_0_RTC._d_DataFlowComponent = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/DataFlowComponent:1.0", "DataFlowComponent")
omniORB.typeMapping["IDL:omg.org/RTC/DataFlowComponent:1.0"] = _0_RTC._d_DataFlowComponent
_0_RTC.DataFlowComponent = omniORB.newEmptyClass()
class DataFlowComponent (_0_RTC.LightweightRTObject, _0_RTC.DataFlowComponentAction):
    _NP_RepositoryId = _0_RTC._d_DataFlowComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.DataFlowComponent = DataFlowComponent
_0_RTC._tc_DataFlowComponent = omniORB.tcInternal.createTypeCode(_0_RTC._d_DataFlowComponent)
omniORB.registerType(DataFlowComponent._NP_RepositoryId, _0_RTC._d_DataFlowComponent, _0_RTC._tc_DataFlowComponent)

# DataFlowComponent object reference
class _objref_DataFlowComponent (_0_RTC._objref_LightweightRTObject, _0_RTC._objref_DataFlowComponentAction):
    _NP_RepositoryId = DataFlowComponent._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_LightweightRTObject.__init__(self, obj)
        _0_RTC._objref_DataFlowComponentAction.__init__(self, obj)

omniORB.registerObjref(DataFlowComponent._NP_RepositoryId, _objref_DataFlowComponent)
_0_RTC._objref_DataFlowComponent = _objref_DataFlowComponent
del DataFlowComponent, _objref_DataFlowComponent

# DataFlowComponent skeleton
__name__ = "rtctree.rtc.RTC__POA"
class DataFlowComponent (_0_RTC__POA.LightweightRTObject, _0_RTC__POA.DataFlowComponentAction):
    _NP_RepositoryId = _0_RTC.DataFlowComponent._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_RTC__POA.LightweightRTObject._omni_op_d)
    _omni_op_d.update(_0_RTC__POA.DataFlowComponentAction._omni_op_d)

DataFlowComponent._omni_skeleton = DataFlowComponent
_0_RTC__POA.DataFlowComponent = DataFlowComponent
omniORB.registerSkeleton(DataFlowComponent._NP_RepositoryId, DataFlowComponent)
del DataFlowComponent
__name__ = "rtctree.rtc.RTC"

# interface Fsm
_0_RTC._d_Fsm = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/Fsm:1.0", "Fsm")
omniORB.typeMapping["IDL:omg.org/RTC/Fsm:1.0"] = _0_RTC._d_Fsm
_0_RTC.Fsm = omniORB.newEmptyClass()
class Fsm (_0_RTC.LightweightRTObject):
    _NP_RepositoryId = _0_RTC._d_Fsm[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.Fsm = Fsm
_0_RTC._tc_Fsm = omniORB.tcInternal.createTypeCode(_0_RTC._d_Fsm)
omniORB.registerType(Fsm._NP_RepositoryId, _0_RTC._d_Fsm, _0_RTC._tc_Fsm)

# Fsm object reference
class _objref_Fsm (_0_RTC._objref_LightweightRTObject):
    _NP_RepositoryId = Fsm._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_LightweightRTObject.__init__(self, obj)

omniORB.registerObjref(Fsm._NP_RepositoryId, _objref_Fsm)
_0_RTC._objref_Fsm = _objref_Fsm
del Fsm, _objref_Fsm

# Fsm skeleton
__name__ = "rtctree.rtc.RTC__POA"
class Fsm (_0_RTC__POA.LightweightRTObject):
    _NP_RepositoryId = _0_RTC.Fsm._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_RTC__POA.LightweightRTObject._omni_op_d)

Fsm._omni_skeleton = Fsm
_0_RTC__POA.Fsm = Fsm
omniORB.registerSkeleton(Fsm._NP_RepositoryId, Fsm)
del Fsm
__name__ = "rtctree.rtc.RTC"

# interface FsmParticipantAction
_0_RTC._d_FsmParticipantAction = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/FsmParticipantAction:1.0", "FsmParticipantAction")
omniORB.typeMapping["IDL:omg.org/RTC/FsmParticipantAction:1.0"] = _0_RTC._d_FsmParticipantAction
_0_RTC.FsmParticipantAction = omniORB.newEmptyClass()
class FsmParticipantAction :
    _NP_RepositoryId = _0_RTC._d_FsmParticipantAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.FsmParticipantAction = FsmParticipantAction
_0_RTC._tc_FsmParticipantAction = omniORB.tcInternal.createTypeCode(_0_RTC._d_FsmParticipantAction)
omniORB.registerType(FsmParticipantAction._NP_RepositoryId, _0_RTC._d_FsmParticipantAction, _0_RTC._tc_FsmParticipantAction)

# FsmParticipantAction operations and attributes
FsmParticipantAction._d_on_action = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# FsmParticipantAction object reference
class _objref_FsmParticipantAction (CORBA.Object):
    _NP_RepositoryId = FsmParticipantAction._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def on_action(self, *args):
        return self._obj.invoke("on_action", _0_RTC.FsmParticipantAction._d_on_action, args)

omniORB.registerObjref(FsmParticipantAction._NP_RepositoryId, _objref_FsmParticipantAction)
_0_RTC._objref_FsmParticipantAction = _objref_FsmParticipantAction
del FsmParticipantAction, _objref_FsmParticipantAction

# FsmParticipantAction skeleton
__name__ = "rtctree.rtc.RTC__POA"
class FsmParticipantAction (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.FsmParticipantAction._NP_RepositoryId


    _omni_op_d = {"on_action": _0_RTC.FsmParticipantAction._d_on_action}

FsmParticipantAction._omni_skeleton = FsmParticipantAction
_0_RTC__POA.FsmParticipantAction = FsmParticipantAction
omniORB.registerSkeleton(FsmParticipantAction._NP_RepositoryId, FsmParticipantAction)
del FsmParticipantAction
__name__ = "rtctree.rtc.RTC"

# interface FsmParticipant
_0_RTC._d_FsmParticipant = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/FsmParticipant:1.0", "FsmParticipant")
omniORB.typeMapping["IDL:omg.org/RTC/FsmParticipant:1.0"] = _0_RTC._d_FsmParticipant
_0_RTC.FsmParticipant = omniORB.newEmptyClass()
class FsmParticipant (_0_RTC.LightweightRTObject, _0_RTC.FsmParticipantAction):
    _NP_RepositoryId = _0_RTC._d_FsmParticipant[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.FsmParticipant = FsmParticipant
_0_RTC._tc_FsmParticipant = omniORB.tcInternal.createTypeCode(_0_RTC._d_FsmParticipant)
omniORB.registerType(FsmParticipant._NP_RepositoryId, _0_RTC._d_FsmParticipant, _0_RTC._tc_FsmParticipant)

# FsmParticipant object reference
class _objref_FsmParticipant (_0_RTC._objref_LightweightRTObject, _0_RTC._objref_FsmParticipantAction):
    _NP_RepositoryId = FsmParticipant._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_LightweightRTObject.__init__(self, obj)
        _0_RTC._objref_FsmParticipantAction.__init__(self, obj)

omniORB.registerObjref(FsmParticipant._NP_RepositoryId, _objref_FsmParticipant)
_0_RTC._objref_FsmParticipant = _objref_FsmParticipant
del FsmParticipant, _objref_FsmParticipant

# FsmParticipant skeleton
__name__ = "rtctree.rtc.RTC__POA"
class FsmParticipant (_0_RTC__POA.LightweightRTObject, _0_RTC__POA.FsmParticipantAction):
    _NP_RepositoryId = _0_RTC.FsmParticipant._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_RTC__POA.LightweightRTObject._omni_op_d)
    _omni_op_d.update(_0_RTC__POA.FsmParticipantAction._omni_op_d)

FsmParticipant._omni_skeleton = FsmParticipant
_0_RTC__POA.FsmParticipant = FsmParticipant
omniORB.registerSkeleton(FsmParticipant._NP_RepositoryId, FsmParticipant)
del FsmParticipant
__name__ = "rtctree.rtc.RTC"

# interface Mode
_0_RTC._d_Mode = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/Mode:1.0", "Mode")
omniORB.typeMapping["IDL:omg.org/RTC/Mode:1.0"] = _0_RTC._d_Mode
_0_RTC.Mode = omniORB.newEmptyClass()
class Mode :
    _NP_RepositoryId = _0_RTC._d_Mode[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.Mode = Mode
_0_RTC._tc_Mode = omniORB.tcInternal.createTypeCode(_0_RTC._d_Mode)
omniORB.registerType(Mode._NP_RepositoryId, _0_RTC._d_Mode, _0_RTC._tc_Mode)

# Mode object reference
class _objref_Mode (CORBA.Object):
    _NP_RepositoryId = Mode._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

omniORB.registerObjref(Mode._NP_RepositoryId, _objref_Mode)
_0_RTC._objref_Mode = _objref_Mode
del Mode, _objref_Mode

# Mode skeleton
__name__ = "rtctree.rtc.RTC__POA"
class Mode (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.Mode._NP_RepositoryId


    _omni_op_d = {}

Mode._omni_skeleton = Mode
_0_RTC__POA.Mode = Mode
omniORB.registerSkeleton(Mode._NP_RepositoryId, Mode)
del Mode
__name__ = "rtctree.rtc.RTC"

# interface ModeCapable
_0_RTC._d_ModeCapable = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/ModeCapable:1.0", "ModeCapable")
omniORB.typeMapping["IDL:omg.org/RTC/ModeCapable:1.0"] = _0_RTC._d_ModeCapable
_0_RTC.ModeCapable = omniORB.newEmptyClass()
class ModeCapable :
    _NP_RepositoryId = _0_RTC._d_ModeCapable[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.ModeCapable = ModeCapable
_0_RTC._tc_ModeCapable = omniORB.tcInternal.createTypeCode(_0_RTC._d_ModeCapable)
omniORB.registerType(ModeCapable._NP_RepositoryId, _0_RTC._d_ModeCapable, _0_RTC._tc_ModeCapable)

# ModeCapable operations and attributes
ModeCapable._d_get_default_mode = ((), (omniORB.typeMapping["IDL:omg.org/RTC/Mode:1.0"], ), None)
ModeCapable._d_get_current_mode = ((), (omniORB.typeMapping["IDL:omg.org/RTC/Mode:1.0"], ), None)
ModeCapable._d_get_current_mode_in_context = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/Mode:1.0"], ), None)
ModeCapable._d_get_pending_mode = ((), (omniORB.typeMapping["IDL:omg.org/RTC/Mode:1.0"], ), None)
ModeCapable._d_get_pending_mode_in_context = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContext:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/Mode:1.0"], ), None)
ModeCapable._d_set_mode = ((omniORB.typeMapping["IDL:omg.org/RTC/Mode:1.0"], omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# ModeCapable object reference
class _objref_ModeCapable (CORBA.Object):
    _NP_RepositoryId = ModeCapable._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def get_default_mode(self, *args):
        return self._obj.invoke("get_default_mode", _0_RTC.ModeCapable._d_get_default_mode, args)

    def get_current_mode(self, *args):
        return self._obj.invoke("get_current_mode", _0_RTC.ModeCapable._d_get_current_mode, args)

    def get_current_mode_in_context(self, *args):
        return self._obj.invoke("get_current_mode_in_context", _0_RTC.ModeCapable._d_get_current_mode_in_context, args)

    def get_pending_mode(self, *args):
        return self._obj.invoke("get_pending_mode", _0_RTC.ModeCapable._d_get_pending_mode, args)

    def get_pending_mode_in_context(self, *args):
        return self._obj.invoke("get_pending_mode_in_context", _0_RTC.ModeCapable._d_get_pending_mode_in_context, args)

    def set_mode(self, *args):
        return self._obj.invoke("set_mode", _0_RTC.ModeCapable._d_set_mode, args)

omniORB.registerObjref(ModeCapable._NP_RepositoryId, _objref_ModeCapable)
_0_RTC._objref_ModeCapable = _objref_ModeCapable
del ModeCapable, _objref_ModeCapable

# ModeCapable skeleton
__name__ = "rtctree.rtc.RTC__POA"
class ModeCapable (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.ModeCapable._NP_RepositoryId


    _omni_op_d = {"get_default_mode": _0_RTC.ModeCapable._d_get_default_mode, "get_current_mode": _0_RTC.ModeCapable._d_get_current_mode, "get_current_mode_in_context": _0_RTC.ModeCapable._d_get_current_mode_in_context, "get_pending_mode": _0_RTC.ModeCapable._d_get_pending_mode, "get_pending_mode_in_context": _0_RTC.ModeCapable._d_get_pending_mode_in_context, "set_mode": _0_RTC.ModeCapable._d_set_mode}

ModeCapable._omni_skeleton = ModeCapable
_0_RTC__POA.ModeCapable = ModeCapable
omniORB.registerSkeleton(ModeCapable._NP_RepositoryId, ModeCapable)
del ModeCapable
__name__ = "rtctree.rtc.RTC"

# interface MultiModeComponentAction
_0_RTC._d_MultiModeComponentAction = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/MultiModeComponentAction:1.0", "MultiModeComponentAction")
omniORB.typeMapping["IDL:omg.org/RTC/MultiModeComponentAction:1.0"] = _0_RTC._d_MultiModeComponentAction
_0_RTC.MultiModeComponentAction = omniORB.newEmptyClass()
class MultiModeComponentAction :
    _NP_RepositoryId = _0_RTC._d_MultiModeComponentAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.MultiModeComponentAction = MultiModeComponentAction
_0_RTC._tc_MultiModeComponentAction = omniORB.tcInternal.createTypeCode(_0_RTC._d_MultiModeComponentAction)
omniORB.registerType(MultiModeComponentAction._NP_RepositoryId, _0_RTC._d_MultiModeComponentAction, _0_RTC._tc_MultiModeComponentAction)

# MultiModeComponentAction operations and attributes
MultiModeComponentAction._d_on_mode_changed = ((omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# MultiModeComponentAction object reference
class _objref_MultiModeComponentAction (CORBA.Object):
    _NP_RepositoryId = MultiModeComponentAction._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def on_mode_changed(self, *args):
        return self._obj.invoke("on_mode_changed", _0_RTC.MultiModeComponentAction._d_on_mode_changed, args)

omniORB.registerObjref(MultiModeComponentAction._NP_RepositoryId, _objref_MultiModeComponentAction)
_0_RTC._objref_MultiModeComponentAction = _objref_MultiModeComponentAction
del MultiModeComponentAction, _objref_MultiModeComponentAction

# MultiModeComponentAction skeleton
__name__ = "rtctree.rtc.RTC__POA"
class MultiModeComponentAction (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.MultiModeComponentAction._NP_RepositoryId


    _omni_op_d = {"on_mode_changed": _0_RTC.MultiModeComponentAction._d_on_mode_changed}

MultiModeComponentAction._omni_skeleton = MultiModeComponentAction
_0_RTC__POA.MultiModeComponentAction = MultiModeComponentAction
omniORB.registerSkeleton(MultiModeComponentAction._NP_RepositoryId, MultiModeComponentAction)
del MultiModeComponentAction
__name__ = "rtctree.rtc.RTC"

# interface MultiModeObject
_0_RTC._d_MultiModeObject = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/MultiModeObject:1.0", "MultiModeObject")
omniORB.typeMapping["IDL:omg.org/RTC/MultiModeObject:1.0"] = _0_RTC._d_MultiModeObject
_0_RTC.MultiModeObject = omniORB.newEmptyClass()
class MultiModeObject (_0_RTC.LightweightRTObject, _0_RTC.ModeCapable, _0_RTC.MultiModeComponentAction):
    _NP_RepositoryId = _0_RTC._d_MultiModeObject[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.MultiModeObject = MultiModeObject
_0_RTC._tc_MultiModeObject = omniORB.tcInternal.createTypeCode(_0_RTC._d_MultiModeObject)
omniORB.registerType(MultiModeObject._NP_RepositoryId, _0_RTC._d_MultiModeObject, _0_RTC._tc_MultiModeObject)

# MultiModeObject object reference
class _objref_MultiModeObject (_0_RTC._objref_LightweightRTObject, _0_RTC._objref_ModeCapable, _0_RTC._objref_MultiModeComponentAction):
    _NP_RepositoryId = MultiModeObject._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_LightweightRTObject.__init__(self, obj)
        _0_RTC._objref_ModeCapable.__init__(self, obj)
        _0_RTC._objref_MultiModeComponentAction.__init__(self, obj)

omniORB.registerObjref(MultiModeObject._NP_RepositoryId, _objref_MultiModeObject)
_0_RTC._objref_MultiModeObject = _objref_MultiModeObject
del MultiModeObject, _objref_MultiModeObject

# MultiModeObject skeleton
__name__ = "rtctree.rtc.RTC__POA"
class MultiModeObject (_0_RTC__POA.LightweightRTObject, _0_RTC__POA.ModeCapable, _0_RTC__POA.MultiModeComponentAction):
    _NP_RepositoryId = _0_RTC.MultiModeObject._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_RTC__POA.LightweightRTObject._omni_op_d)
    _omni_op_d.update(_0_RTC__POA.ModeCapable._omni_op_d)
    _omni_op_d.update(_0_RTC__POA.MultiModeComponentAction._omni_op_d)

MultiModeObject._omni_skeleton = MultiModeObject
_0_RTC__POA.MultiModeObject = MultiModeObject
omniORB.registerSkeleton(MultiModeObject._NP_RepositoryId, MultiModeObject)
del MultiModeObject
__name__ = "rtctree.rtc.RTC"

# forward interface RTObject;
_0_RTC._d_RTObject = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/RTObject:1.0", "RTObject")
omniORB.typeMapping["IDL:omg.org/RTC/RTObject:1.0"] = _0_RTC._d_RTObject

# enum PortInterfacePolarity
_0_RTC.PROVIDED = omniORB.EnumItem("PROVIDED", 0)
_0_RTC.REQUIRED = omniORB.EnumItem("REQUIRED", 1)
_0_RTC.PortInterfacePolarity = omniORB.Enum("IDL:omg.org/RTC/PortInterfacePolarity:1.0", (_0_RTC.PROVIDED, _0_RTC.REQUIRED,))

_0_RTC._d_PortInterfacePolarity  = (omniORB.tcInternal.tv_enum, _0_RTC.PortInterfacePolarity._NP_RepositoryId, "PortInterfacePolarity", _0_RTC.PortInterfacePolarity._items)
_0_RTC._tc_PortInterfacePolarity = omniORB.tcInternal.createTypeCode(_0_RTC._d_PortInterfacePolarity)
omniORB.registerType(_0_RTC.PortInterfacePolarity._NP_RepositoryId, _0_RTC._d_PortInterfacePolarity, _0_RTC._tc_PortInterfacePolarity)

# struct PortInterfaceProfile
_0_RTC.PortInterfaceProfile = omniORB.newEmptyClass()
class PortInterfaceProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/RTC/PortInterfaceProfile:1.0"

    def __init__(self, instance_name, type_name, polarity):
        self.instance_name = instance_name
        self.type_name = type_name
        self.polarity = polarity

_0_RTC.PortInterfaceProfile = PortInterfaceProfile
_0_RTC._d_PortInterfaceProfile  = (omniORB.tcInternal.tv_struct, PortInterfaceProfile, PortInterfaceProfile._NP_RepositoryId, "PortInterfaceProfile", "instance_name", (omniORB.tcInternal.tv_string,0), "type_name", (omniORB.tcInternal.tv_string,0), "polarity", omniORB.typeMapping["IDL:omg.org/RTC/PortInterfacePolarity:1.0"])
_0_RTC._tc_PortInterfaceProfile = omniORB.tcInternal.createTypeCode(_0_RTC._d_PortInterfaceProfile)
omniORB.registerType(PortInterfaceProfile._NP_RepositoryId, _0_RTC._d_PortInterfaceProfile, _0_RTC._tc_PortInterfaceProfile)
del PortInterfaceProfile

# typedef ... PortInterfaceProfileList
class PortInterfaceProfileList:
    _NP_RepositoryId = "IDL:omg.org/RTC/PortInterfaceProfileList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.PortInterfaceProfileList = PortInterfaceProfileList
_0_RTC._d_PortInterfaceProfileList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/PortInterfaceProfile:1.0"], 0)
_0_RTC._ad_PortInterfaceProfileList = (omniORB.tcInternal.tv_alias, PortInterfaceProfileList._NP_RepositoryId, "PortInterfaceProfileList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/PortInterfaceProfile:1.0"], 0))
_0_RTC._tc_PortInterfaceProfileList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_PortInterfaceProfileList)
omniORB.registerType(PortInterfaceProfileList._NP_RepositoryId, _0_RTC._ad_PortInterfaceProfileList, _0_RTC._tc_PortInterfaceProfileList)
del PortInterfaceProfileList

# forward interface PortService;
_0_RTC._d_PortService = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/PortService:1.0", "PortService")
omniORB.typeMapping["IDL:omg.org/RTC/PortService:1.0"] = _0_RTC._d_PortService

# typedef ... PortServiceList
class PortServiceList:
    _NP_RepositoryId = "IDL:omg.org/RTC/PortServiceList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.PortServiceList = PortServiceList
_0_RTC._d_PortServiceList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/PortService:1.0"], 0)
_0_RTC._ad_PortServiceList = (omniORB.tcInternal.tv_alias, PortServiceList._NP_RepositoryId, "PortServiceList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/PortService:1.0"], 0))
_0_RTC._tc_PortServiceList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_PortServiceList)
omniORB.registerType(PortServiceList._NP_RepositoryId, _0_RTC._ad_PortServiceList, _0_RTC._tc_PortServiceList)
del PortServiceList

# typedef ... RTCList
class RTCList:
    _NP_RepositoryId = "IDL:omg.org/RTC/RTCList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.RTCList = RTCList
_0_RTC._d_RTCList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/RTObject:1.0"], 0)
_0_RTC._ad_RTCList = (omniORB.tcInternal.tv_alias, RTCList._NP_RepositoryId, "RTCList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/RTObject:1.0"], 0))
_0_RTC._tc_RTCList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_RTCList)
omniORB.registerType(RTCList._NP_RepositoryId, _0_RTC._ad_RTCList, _0_RTC._tc_RTCList)
del RTCList

# struct ConnectorProfile
_0_RTC.ConnectorProfile = omniORB.newEmptyClass()
class ConnectorProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/RTC/ConnectorProfile:1.0"

    def __init__(self, name, connector_id, ports, properties):
        self.name = name
        self.connector_id = connector_id
        self.ports = ports
        self.properties = properties

_0_RTC.ConnectorProfile = ConnectorProfile
_0_RTC._d_ConnectorProfile  = (omniORB.tcInternal.tv_struct, ConnectorProfile, ConnectorProfile._NP_RepositoryId, "ConnectorProfile", "name", (omniORB.tcInternal.tv_string,0), "connector_id", omniORB.typeMapping["IDL:omg.org/RTC/UniqueIdentifier:1.0"], "ports", omniORB.typeMapping["IDL:omg.org/RTC/PortServiceList:1.0"], "properties", omniORB.typeMapping["IDL:omg.org/RTC/NVList:1.0"])
_0_RTC._tc_ConnectorProfile = omniORB.tcInternal.createTypeCode(_0_RTC._d_ConnectorProfile)
omniORB.registerType(ConnectorProfile._NP_RepositoryId, _0_RTC._d_ConnectorProfile, _0_RTC._tc_ConnectorProfile)
del ConnectorProfile

# typedef ... ConnectorProfileList
class ConnectorProfileList:
    _NP_RepositoryId = "IDL:omg.org/RTC/ConnectorProfileList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ConnectorProfileList = ConnectorProfileList
_0_RTC._d_ConnectorProfileList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfile:1.0"], 0)
_0_RTC._ad_ConnectorProfileList = (omniORB.tcInternal.tv_alias, ConnectorProfileList._NP_RepositoryId, "ConnectorProfileList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfile:1.0"], 0))
_0_RTC._tc_ConnectorProfileList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ConnectorProfileList)
omniORB.registerType(ConnectorProfileList._NP_RepositoryId, _0_RTC._ad_ConnectorProfileList, _0_RTC._tc_ConnectorProfileList)
del ConnectorProfileList

# struct PortProfile
_0_RTC.PortProfile = omniORB.newEmptyClass()
class PortProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/RTC/PortProfile:1.0"

    def __init__(self, name, interfaces, port_ref, connector_profiles, owner, properties):
        self.name = name
        self.interfaces = interfaces
        self.port_ref = port_ref
        self.connector_profiles = connector_profiles
        self.owner = owner
        self.properties = properties

_0_RTC.PortProfile = PortProfile
_0_RTC._d_PortProfile  = (omniORB.tcInternal.tv_struct, PortProfile, PortProfile._NP_RepositoryId, "PortProfile", "name", (omniORB.tcInternal.tv_string,0), "interfaces", omniORB.typeMapping["IDL:omg.org/RTC/PortInterfaceProfileList:1.0"], "port_ref", omniORB.typeMapping["IDL:omg.org/RTC/PortService:1.0"], "connector_profiles", omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfileList:1.0"], "owner", omniORB.typeMapping["IDL:omg.org/RTC/RTObject:1.0"], "properties", omniORB.typeMapping["IDL:omg.org/RTC/NVList:1.0"])
_0_RTC._tc_PortProfile = omniORB.tcInternal.createTypeCode(_0_RTC._d_PortProfile)
omniORB.registerType(PortProfile._NP_RepositoryId, _0_RTC._d_PortProfile, _0_RTC._tc_PortProfile)
del PortProfile

# typedef ... PortProfileList
class PortProfileList:
    _NP_RepositoryId = "IDL:omg.org/RTC/PortProfileList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.PortProfileList = PortProfileList
_0_RTC._d_PortProfileList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/PortProfile:1.0"], 0)
_0_RTC._ad_PortProfileList = (omniORB.tcInternal.tv_alias, PortProfileList._NP_RepositoryId, "PortProfileList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/PortProfile:1.0"], 0))
_0_RTC._tc_PortProfileList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_PortProfileList)
omniORB.registerType(PortProfileList._NP_RepositoryId, _0_RTC._ad_PortProfileList, _0_RTC._tc_PortProfileList)
del PortProfileList

# struct ExecutionContextProfile
_0_RTC.ExecutionContextProfile = omniORB.newEmptyClass()
class ExecutionContextProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/RTC/ExecutionContextProfile:1.0"

    def __init__(self, kind, rate, owner, participants, properties):
        self.kind = kind
        self.rate = rate
        self.owner = owner
        self.participants = participants
        self.properties = properties

_0_RTC.ExecutionContextProfile = ExecutionContextProfile
_0_RTC._d_ExecutionContextProfile  = (omniORB.tcInternal.tv_struct, ExecutionContextProfile, ExecutionContextProfile._NP_RepositoryId, "ExecutionContextProfile", "kind", omniORB.typeMapping["IDL:omg.org/RTC/ExecutionKind:1.0"], "rate", omniORB.tcInternal.tv_double, "owner", omniORB.typeMapping["IDL:omg.org/RTC/RTObject:1.0"], "participants", omniORB.typeMapping["IDL:omg.org/RTC/RTCList:1.0"], "properties", omniORB.typeMapping["IDL:omg.org/RTC/NVList:1.0"])
_0_RTC._tc_ExecutionContextProfile = omniORB.tcInternal.createTypeCode(_0_RTC._d_ExecutionContextProfile)
omniORB.registerType(ExecutionContextProfile._NP_RepositoryId, _0_RTC._d_ExecutionContextProfile, _0_RTC._tc_ExecutionContextProfile)
del ExecutionContextProfile

# typedef ... ExecutionContextProfileList
class ExecutionContextProfileList:
    _NP_RepositoryId = "IDL:omg.org/RTC/ExecutionContextProfileList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ExecutionContextProfileList = ExecutionContextProfileList
_0_RTC._d_ExecutionContextProfileList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextProfile:1.0"], 0)
_0_RTC._ad_ExecutionContextProfileList = (omniORB.tcInternal.tv_alias, ExecutionContextProfileList._NP_RepositoryId, "ExecutionContextProfileList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextProfile:1.0"], 0))
_0_RTC._tc_ExecutionContextProfileList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ExecutionContextProfileList)
omniORB.registerType(ExecutionContextProfileList._NP_RepositoryId, _0_RTC._ad_ExecutionContextProfileList, _0_RTC._tc_ExecutionContextProfileList)
del ExecutionContextProfileList

# interface FsmObject
_0_RTC._d_FsmObject = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/FsmObject:1.0", "FsmObject")
omniORB.typeMapping["IDL:omg.org/RTC/FsmObject:1.0"] = _0_RTC._d_FsmObject
_0_RTC.FsmObject = omniORB.newEmptyClass()
class FsmObject :
    _NP_RepositoryId = _0_RTC._d_FsmObject[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.FsmObject = FsmObject
_0_RTC._tc_FsmObject = omniORB.tcInternal.createTypeCode(_0_RTC._d_FsmObject)
omniORB.registerType(FsmObject._NP_RepositoryId, _0_RTC._d_FsmObject, _0_RTC._tc_FsmObject)

# FsmObject operations and attributes
FsmObject._d_send_stimulus = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextHandle_t:1.0"]), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# FsmObject object reference
class _objref_FsmObject (CORBA.Object):
    _NP_RepositoryId = FsmObject._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def send_stimulus(self, *args):
        return self._obj.invoke("send_stimulus", _0_RTC.FsmObject._d_send_stimulus, args)

omniORB.registerObjref(FsmObject._NP_RepositoryId, _objref_FsmObject)
_0_RTC._objref_FsmObject = _objref_FsmObject
del FsmObject, _objref_FsmObject

# FsmObject skeleton
__name__ = "rtctree.rtc.RTC__POA"
class FsmObject (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.FsmObject._NP_RepositoryId


    _omni_op_d = {"send_stimulus": _0_RTC.FsmObject._d_send_stimulus}

FsmObject._omni_skeleton = FsmObject
_0_RTC__POA.FsmObject = FsmObject
omniORB.registerSkeleton(FsmObject._NP_RepositoryId, FsmObject)
del FsmObject
__name__ = "rtctree.rtc.RTC"

# struct FsmBehaviorProfile
_0_RTC.FsmBehaviorProfile = omniORB.newEmptyClass()
class FsmBehaviorProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/RTC/FsmBehaviorProfile:1.0"

    def __init__(self, action_component, id):
        self.action_component = action_component
        self.id = id

_0_RTC.FsmBehaviorProfile = FsmBehaviorProfile
_0_RTC._d_FsmBehaviorProfile  = (omniORB.tcInternal.tv_struct, FsmBehaviorProfile, FsmBehaviorProfile._NP_RepositoryId, "FsmBehaviorProfile", "action_component", omniORB.typeMapping["IDL:omg.org/RTC/FsmParticipantAction:1.0"], "id", omniORB.typeMapping["IDL:omg.org/RTC/UniqueIdentifier:1.0"])
_0_RTC._tc_FsmBehaviorProfile = omniORB.tcInternal.createTypeCode(_0_RTC._d_FsmBehaviorProfile)
omniORB.registerType(FsmBehaviorProfile._NP_RepositoryId, _0_RTC._d_FsmBehaviorProfile, _0_RTC._tc_FsmBehaviorProfile)
del FsmBehaviorProfile

# typedef ... FsmBehaviorProfileList
class FsmBehaviorProfileList:
    _NP_RepositoryId = "IDL:omg.org/RTC/FsmBehaviorProfileList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.FsmBehaviorProfileList = FsmBehaviorProfileList
_0_RTC._d_FsmBehaviorProfileList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/FsmBehaviorProfile:1.0"], 0)
_0_RTC._ad_FsmBehaviorProfileList = (omniORB.tcInternal.tv_alias, FsmBehaviorProfileList._NP_RepositoryId, "FsmBehaviorProfileList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/FsmBehaviorProfile:1.0"], 0))
_0_RTC._tc_FsmBehaviorProfileList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_FsmBehaviorProfileList)
omniORB.registerType(FsmBehaviorProfileList._NP_RepositoryId, _0_RTC._ad_FsmBehaviorProfileList, _0_RTC._tc_FsmBehaviorProfileList)
del FsmBehaviorProfileList

# struct FsmProfile
_0_RTC.FsmProfile = omniORB.newEmptyClass()
class FsmProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/RTC/FsmProfile:1.0"

    def __init__(self, behavior_profiles):
        self.behavior_profiles = behavior_profiles

_0_RTC.FsmProfile = FsmProfile
_0_RTC._d_FsmProfile  = (omniORB.tcInternal.tv_struct, FsmProfile, FsmProfile._NP_RepositoryId, "FsmProfile", "behavior_profiles", omniORB.typeMapping["IDL:omg.org/RTC/FsmBehaviorProfileList:1.0"])
_0_RTC._tc_FsmProfile = omniORB.tcInternal.createTypeCode(_0_RTC._d_FsmProfile)
omniORB.registerType(FsmProfile._NP_RepositoryId, _0_RTC._d_FsmProfile, _0_RTC._tc_FsmProfile)
del FsmProfile

# interface FsmService
_0_RTC._d_FsmService = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/FsmService:1.0", "FsmService")
omniORB.typeMapping["IDL:omg.org/RTC/FsmService:1.0"] = _0_RTC._d_FsmService
_0_RTC.FsmService = omniORB.newEmptyClass()
class FsmService (_0_SDOPackage.SDOService):
    _NP_RepositoryId = _0_RTC._d_FsmService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.FsmService = FsmService
_0_RTC._tc_FsmService = omniORB.tcInternal.createTypeCode(_0_RTC._d_FsmService)
omniORB.registerType(FsmService._NP_RepositoryId, _0_RTC._d_FsmService, _0_RTC._tc_FsmService)

# FsmService operations and attributes
FsmService._d_get_fsm_profile = ((), (omniORB.typeMapping["IDL:omg.org/RTC/FsmProfile:1.0"], ), None)
FsmService._d_set_fsm_profile = ((omniORB.typeMapping["IDL:omg.org/RTC/FsmProfile:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# FsmService object reference
class _objref_FsmService (_0_SDOPackage._objref_SDOService):
    _NP_RepositoryId = FsmService._NP_RepositoryId

    def __init__(self, obj):
        _0_SDOPackage._objref_SDOService.__init__(self, obj)

    def get_fsm_profile(self, *args):
        return self._obj.invoke("get_fsm_profile", _0_RTC.FsmService._d_get_fsm_profile, args)

    def set_fsm_profile(self, *args):
        return self._obj.invoke("set_fsm_profile", _0_RTC.FsmService._d_set_fsm_profile, args)

omniORB.registerObjref(FsmService._NP_RepositoryId, _objref_FsmService)
_0_RTC._objref_FsmService = _objref_FsmService
del FsmService, _objref_FsmService

# FsmService skeleton
__name__ = "rtctree.rtc.RTC__POA"
class FsmService (_0_SDOPackage__POA.SDOService):
    _NP_RepositoryId = _0_RTC.FsmService._NP_RepositoryId


    _omni_op_d = {"get_fsm_profile": _0_RTC.FsmService._d_get_fsm_profile, "set_fsm_profile": _0_RTC.FsmService._d_set_fsm_profile}
    _omni_op_d.update(_0_SDOPackage__POA.SDOService._omni_op_d)

FsmService._omni_skeleton = FsmService
_0_RTC__POA.FsmService = FsmService
omniORB.registerSkeleton(FsmService._NP_RepositoryId, FsmService)
del FsmService
__name__ = "rtctree.rtc.RTC"

# struct ComponentProfile
_0_RTC.ComponentProfile = omniORB.newEmptyClass()
class ComponentProfile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/RTC/ComponentProfile:1.0"

    def __init__(self, instance_name, type_name, description, version, vendor, category, port_profiles, parent, properties):
        self.instance_name = instance_name
        self.type_name = type_name
        self.description = description
        self.version = version
        self.vendor = vendor
        self.category = category
        self.port_profiles = port_profiles
        self.parent = parent
        self.properties = properties

_0_RTC.ComponentProfile = ComponentProfile
_0_RTC._d_ComponentProfile  = (omniORB.tcInternal.tv_struct, ComponentProfile, ComponentProfile._NP_RepositoryId, "ComponentProfile", "instance_name", (omniORB.tcInternal.tv_string,0), "type_name", (omniORB.tcInternal.tv_string,0), "description", (omniORB.tcInternal.tv_string,0), "version", (omniORB.tcInternal.tv_string,0), "vendor", (omniORB.tcInternal.tv_string,0), "category", (omniORB.tcInternal.tv_string,0), "port_profiles", omniORB.typeMapping["IDL:omg.org/RTC/PortProfileList:1.0"], "parent", omniORB.typeMapping["IDL:omg.org/RTC/RTObject:1.0"], "properties", omniORB.typeMapping["IDL:omg.org/RTC/NVList:1.0"])
_0_RTC._tc_ComponentProfile = omniORB.tcInternal.createTypeCode(_0_RTC._d_ComponentProfile)
omniORB.registerType(ComponentProfile._NP_RepositoryId, _0_RTC._d_ComponentProfile, _0_RTC._tc_ComponentProfile)
del ComponentProfile

# typedef ... ComponentProfileList
class ComponentProfileList:
    _NP_RepositoryId = "IDL:omg.org/RTC/ComponentProfileList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ComponentProfileList = ComponentProfileList
_0_RTC._d_ComponentProfileList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ComponentProfile:1.0"], 0)
_0_RTC._ad_ComponentProfileList = (omniORB.tcInternal.tv_alias, ComponentProfileList._NP_RepositoryId, "ComponentProfileList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ComponentProfile:1.0"], 0))
_0_RTC._tc_ComponentProfileList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ComponentProfileList)
omniORB.registerType(ComponentProfileList._NP_RepositoryId, _0_RTC._ad_ComponentProfileList, _0_RTC._tc_ComponentProfileList)
del ComponentProfileList

# interface PortService
_0_RTC._d_PortService = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/PortService:1.0", "PortService")
omniORB.typeMapping["IDL:omg.org/RTC/PortService:1.0"] = _0_RTC._d_PortService
_0_RTC.PortService = omniORB.newEmptyClass()
class PortService (_0_SDOPackage.SDOService):
    _NP_RepositoryId = _0_RTC._d_PortService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.PortService = PortService
_0_RTC._tc_PortService = omniORB.tcInternal.createTypeCode(_0_RTC._d_PortService)
omniORB.registerType(PortService._NP_RepositoryId, _0_RTC._d_PortService, _0_RTC._tc_PortService)

# PortService operations and attributes
PortService._d_get_port_profile = ((), (omniORB.typeMapping["IDL:omg.org/RTC/PortProfile:1.0"], ), None)
PortService._d_get_connector_profiles = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfileList:1.0"], ), None)
PortService._d_get_connector_profile = ((omniORB.typeMapping["IDL:omg.org/RTC/UniqueIdentifier:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfile:1.0"], ), None)
PortService._d_connect = ((omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfile:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfile:1.0"]), None)
PortService._d_disconnect = ((omniORB.typeMapping["IDL:omg.org/RTC/UniqueIdentifier:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
PortService._d_disconnect_all = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)
PortService._d_notify_connect = ((omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfile:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], omniORB.typeMapping["IDL:omg.org/RTC/ConnectorProfile:1.0"]), None)
PortService._d_notify_disconnect = ((omniORB.typeMapping["IDL:omg.org/RTC/UniqueIdentifier:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/ReturnCode_t:1.0"], ), None)

# PortService object reference
class _objref_PortService (_0_SDOPackage._objref_SDOService):
    _NP_RepositoryId = PortService._NP_RepositoryId

    def __init__(self, obj):
        _0_SDOPackage._objref_SDOService.__init__(self, obj)

    def get_port_profile(self, *args):
        return self._obj.invoke("get_port_profile", _0_RTC.PortService._d_get_port_profile, args)

    def get_connector_profiles(self, *args):
        return self._obj.invoke("get_connector_profiles", _0_RTC.PortService._d_get_connector_profiles, args)

    def get_connector_profile(self, *args):
        return self._obj.invoke("get_connector_profile", _0_RTC.PortService._d_get_connector_profile, args)

    def connect(self, *args):
        return self._obj.invoke("connect", _0_RTC.PortService._d_connect, args)

    def disconnect(self, *args):
        return self._obj.invoke("disconnect", _0_RTC.PortService._d_disconnect, args)

    def disconnect_all(self, *args):
        return self._obj.invoke("disconnect_all", _0_RTC.PortService._d_disconnect_all, args)

    def notify_connect(self, *args):
        return self._obj.invoke("notify_connect", _0_RTC.PortService._d_notify_connect, args)

    def notify_disconnect(self, *args):
        return self._obj.invoke("notify_disconnect", _0_RTC.PortService._d_notify_disconnect, args)

omniORB.registerObjref(PortService._NP_RepositoryId, _objref_PortService)
_0_RTC._objref_PortService = _objref_PortService
del PortService, _objref_PortService

# PortService skeleton
__name__ = "rtctree.rtc.RTC__POA"
class PortService (_0_SDOPackage__POA.SDOService):
    _NP_RepositoryId = _0_RTC.PortService._NP_RepositoryId


    _omni_op_d = {"get_port_profile": _0_RTC.PortService._d_get_port_profile, "get_connector_profiles": _0_RTC.PortService._d_get_connector_profiles, "get_connector_profile": _0_RTC.PortService._d_get_connector_profile, "connect": _0_RTC.PortService._d_connect, "disconnect": _0_RTC.PortService._d_disconnect, "disconnect_all": _0_RTC.PortService._d_disconnect_all, "notify_connect": _0_RTC.PortService._d_notify_connect, "notify_disconnect": _0_RTC.PortService._d_notify_disconnect}
    _omni_op_d.update(_0_SDOPackage__POA.SDOService._omni_op_d)

PortService._omni_skeleton = PortService
_0_RTC__POA.PortService = PortService
omniORB.registerSkeleton(PortService._NP_RepositoryId, PortService)
del PortService
__name__ = "rtctree.rtc.RTC"

# interface ExecutionContextService
_0_RTC._d_ExecutionContextService = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/ExecutionContextService:1.0", "ExecutionContextService")
omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextService:1.0"] = _0_RTC._d_ExecutionContextService
_0_RTC.ExecutionContextService = omniORB.newEmptyClass()
class ExecutionContextService (_0_RTC.ExecutionContext, _0_SDOPackage.SDOService):
    _NP_RepositoryId = _0_RTC._d_ExecutionContextService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.ExecutionContextService = ExecutionContextService
_0_RTC._tc_ExecutionContextService = omniORB.tcInternal.createTypeCode(_0_RTC._d_ExecutionContextService)
omniORB.registerType(ExecutionContextService._NP_RepositoryId, _0_RTC._d_ExecutionContextService, _0_RTC._tc_ExecutionContextService)

# ExecutionContextService operations and attributes
ExecutionContextService._d_get_profile = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextProfile:1.0"], ), None)

# ExecutionContextService object reference
class _objref_ExecutionContextService (_0_RTC._objref_ExecutionContext, _0_SDOPackage._objref_SDOService):
    _NP_RepositoryId = ExecutionContextService._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_ExecutionContext.__init__(self, obj)
        _0_SDOPackage._objref_SDOService.__init__(self, obj)

    def get_profile(self, *args):
        return self._obj.invoke("get_profile", _0_RTC.ExecutionContextService._d_get_profile, args)

omniORB.registerObjref(ExecutionContextService._NP_RepositoryId, _objref_ExecutionContextService)
_0_RTC._objref_ExecutionContextService = _objref_ExecutionContextService
del ExecutionContextService, _objref_ExecutionContextService

# ExecutionContextService skeleton
__name__ = "rtctree.rtc.RTC__POA"
class ExecutionContextService (_0_RTC__POA.ExecutionContext, _0_SDOPackage__POA.SDOService):
    _NP_RepositoryId = _0_RTC.ExecutionContextService._NP_RepositoryId


    _omni_op_d = {"get_profile": _0_RTC.ExecutionContextService._d_get_profile}
    _omni_op_d.update(_0_RTC__POA.ExecutionContext._omni_op_d)
    _omni_op_d.update(_0_SDOPackage__POA.SDOService._omni_op_d)

ExecutionContextService._omni_skeleton = ExecutionContextService
_0_RTC__POA.ExecutionContextService = ExecutionContextService
omniORB.registerSkeleton(ExecutionContextService._NP_RepositoryId, ExecutionContextService)
del ExecutionContextService
__name__ = "rtctree.rtc.RTC"

# typedef ... ExecutionContextServiceList
class ExecutionContextServiceList:
    _NP_RepositoryId = "IDL:omg.org/RTC/ExecutionContextServiceList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ExecutionContextServiceList = ExecutionContextServiceList
_0_RTC._d_ExecutionContextServiceList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextService:1.0"], 0)
_0_RTC._ad_ExecutionContextServiceList = (omniORB.tcInternal.tv_alias, ExecutionContextServiceList._NP_RepositoryId, "ExecutionContextServiceList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/RTC/ExecutionContextService:1.0"], 0))
_0_RTC._tc_ExecutionContextServiceList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ExecutionContextServiceList)
omniORB.registerType(ExecutionContextServiceList._NP_RepositoryId, _0_RTC._ad_ExecutionContextServiceList, _0_RTC._tc_ExecutionContextServiceList)
del ExecutionContextServiceList

# interface RTObject
_0_RTC._d_RTObject = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/RTObject:1.0", "RTObject")
omniORB.typeMapping["IDL:omg.org/RTC/RTObject:1.0"] = _0_RTC._d_RTObject
_0_RTC.RTObject = omniORB.newEmptyClass()
class RTObject (_0_RTC.LightweightRTObject, _0_SDOPackage.SDO):
    _NP_RepositoryId = _0_RTC._d_RTObject[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.RTObject = RTObject
_0_RTC._tc_RTObject = omniORB.tcInternal.createTypeCode(_0_RTC._d_RTObject)
omniORB.registerType(RTObject._NP_RepositoryId, _0_RTC._d_RTObject, _0_RTC._tc_RTObject)

# RTObject operations and attributes
RTObject._d_get_component_profile = ((), (omniORB.typeMapping["IDL:omg.org/RTC/ComponentProfile:1.0"], ), None)
RTObject._d_get_ports = ((), (omniORB.typeMapping["IDL:omg.org/RTC/PortServiceList:1.0"], ), None)

# RTObject object reference
class _objref_RTObject (_0_RTC._objref_LightweightRTObject, _0_SDOPackage._objref_SDO):
    _NP_RepositoryId = RTObject._NP_RepositoryId

    def __init__(self, obj):
        _0_RTC._objref_LightweightRTObject.__init__(self, obj)
        _0_SDOPackage._objref_SDO.__init__(self, obj)

    def get_component_profile(self, *args):
        return self._obj.invoke("get_component_profile", _0_RTC.RTObject._d_get_component_profile, args)

    def get_ports(self, *args):
        return self._obj.invoke("get_ports", _0_RTC.RTObject._d_get_ports, args)

omniORB.registerObjref(RTObject._NP_RepositoryId, _objref_RTObject)
_0_RTC._objref_RTObject = _objref_RTObject
del RTObject, _objref_RTObject

# RTObject skeleton
__name__ = "rtctree.rtc.RTC__POA"
class RTObject (_0_RTC__POA.LightweightRTObject, _0_SDOPackage__POA.SDO):
    _NP_RepositoryId = _0_RTC.RTObject._NP_RepositoryId


    _omni_op_d = {"get_component_profile": _0_RTC.RTObject._d_get_component_profile, "get_ports": _0_RTC.RTObject._d_get_ports}
    _omni_op_d.update(_0_RTC__POA.LightweightRTObject._omni_op_d)
    _omni_op_d.update(_0_SDOPackage__POA.SDO._omni_op_d)

RTObject._omni_skeleton = RTObject
_0_RTC__POA.RTObject = RTObject
omniORB.registerSkeleton(RTObject._NP_RepositoryId, RTObject)
del RTObject
__name__ = "rtctree.rtc.RTC"

#
# End of module "RTC"
#
__name__ = "rtctree.rtc.RTC_idl"

_exported_modules = ( "rtctree.rtc.RTC", )

# The end.
