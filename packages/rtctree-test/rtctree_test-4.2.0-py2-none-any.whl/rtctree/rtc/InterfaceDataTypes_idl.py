# Python stubs generated by omniidl from C:\Users\TyouK\Documents\GitHub\rtctree\idl\InterfaceDataTypes.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "BasicDataType.idl"
import rtctree.rtc.BasicDataType_idl
_0_RTC = omniORB.openModule("rtctree.rtc.RTC")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA")

# #include "ExtendedDataTypes.idl"
import rtctree.rtc.ExtendedDataTypes_idl
_0_RTC = omniORB.openModule("rtctree.rtc.RTC")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA")

#
# Start of module "RTC"
#
__name__ = "rtctree.rtc.RTC"
_0_RTC = omniORB.openModule("rtctree.rtc.RTC", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\InterfaceDataTypes.idl")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\InterfaceDataTypes.idl")


# struct ActArrayActuatorPos
_0_RTC.ActArrayActuatorPos = omniORB.newEmptyClass()
class ActArrayActuatorPos (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/ActArrayActuatorPos:1.0"

    def __init__(self, tm, index, position):
        self.tm = tm
        self.index = index
        self.position = position

_0_RTC.ActArrayActuatorPos = ActArrayActuatorPos
_0_RTC._d_ActArrayActuatorPos  = (omniORB.tcInternal.tv_struct, ActArrayActuatorPos, ActArrayActuatorPos._NP_RepositoryId, "ActArrayActuatorPos", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "index", omniORB.tcInternal.tv_ushort, "position", omniORB.tcInternal.tv_double)
_0_RTC._tc_ActArrayActuatorPos = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayActuatorPos)
omniORB.registerType(ActArrayActuatorPos._NP_RepositoryId, _0_RTC._d_ActArrayActuatorPos, _0_RTC._tc_ActArrayActuatorPos)
del ActArrayActuatorPos

# struct ActArrayActuatorSpeed
_0_RTC.ActArrayActuatorSpeed = omniORB.newEmptyClass()
class ActArrayActuatorSpeed (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/ActArrayActuatorSpeed:1.0"

    def __init__(self, tm, index, speed):
        self.tm = tm
        self.index = index
        self.speed = speed

_0_RTC.ActArrayActuatorSpeed = ActArrayActuatorSpeed
_0_RTC._d_ActArrayActuatorSpeed  = (omniORB.tcInternal.tv_struct, ActArrayActuatorSpeed, ActArrayActuatorSpeed._NP_RepositoryId, "ActArrayActuatorSpeed", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "index", omniORB.tcInternal.tv_ushort, "speed", omniORB.tcInternal.tv_double)
_0_RTC._tc_ActArrayActuatorSpeed = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayActuatorSpeed)
omniORB.registerType(ActArrayActuatorSpeed._NP_RepositoryId, _0_RTC._d_ActArrayActuatorSpeed, _0_RTC._tc_ActArrayActuatorSpeed)
del ActArrayActuatorSpeed

# struct ActArrayActuatorCurrent
_0_RTC.ActArrayActuatorCurrent = omniORB.newEmptyClass()
class ActArrayActuatorCurrent (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/ActArrayActuatorCurrent:1.0"

    def __init__(self, tm, index, current):
        self.tm = tm
        self.index = index
        self.current = current

_0_RTC.ActArrayActuatorCurrent = ActArrayActuatorCurrent
_0_RTC._d_ActArrayActuatorCurrent  = (omniORB.tcInternal.tv_struct, ActArrayActuatorCurrent, ActArrayActuatorCurrent._NP_RepositoryId, "ActArrayActuatorCurrent", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "index", omniORB.tcInternal.tv_ushort, "current", omniORB.tcInternal.tv_double)
_0_RTC._tc_ActArrayActuatorCurrent = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayActuatorCurrent)
omniORB.registerType(ActArrayActuatorCurrent._NP_RepositoryId, _0_RTC._d_ActArrayActuatorCurrent, _0_RTC._tc_ActArrayActuatorCurrent)
del ActArrayActuatorCurrent

# enum ActArrayActuatorStatus
_0_RTC.ACTUATOR_STATUS_IDLE = omniORB.EnumItem("ACTUATOR_STATUS_IDLE", 0)
_0_RTC.ACTUATOR_STATUS_MOVING = omniORB.EnumItem("ACTUATOR_STATUS_MOVING", 1)
_0_RTC.ACTUATOR_STATUS_BRAKED = omniORB.EnumItem("ACTUATOR_STATUS_BRAKED", 2)
_0_RTC.ACTUATOR_STATUS_STALLED = omniORB.EnumItem("ACTUATOR_STATUS_STALLED", 3)
_0_RTC.ActArrayActuatorStatus = omniORB.Enum("IDL:RTC/ActArrayActuatorStatus:1.0", (_0_RTC.ACTUATOR_STATUS_IDLE, _0_RTC.ACTUATOR_STATUS_MOVING, _0_RTC.ACTUATOR_STATUS_BRAKED, _0_RTC.ACTUATOR_STATUS_STALLED,))

_0_RTC._d_ActArrayActuatorStatus  = (omniORB.tcInternal.tv_enum, _0_RTC.ActArrayActuatorStatus._NP_RepositoryId, "ActArrayActuatorStatus", _0_RTC.ActArrayActuatorStatus._items)
_0_RTC._tc_ActArrayActuatorStatus = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayActuatorStatus)
omniORB.registerType(_0_RTC.ActArrayActuatorStatus._NP_RepositoryId, _0_RTC._d_ActArrayActuatorStatus, _0_RTC._tc_ActArrayActuatorStatus)

# struct Actuator
_0_RTC.Actuator = omniORB.newEmptyClass()
class Actuator (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Actuator:1.0"

    def __init__(self, position, speed, accel, current, status):
        self.position = position
        self.speed = speed
        self.accel = accel
        self.current = current
        self.status = status

_0_RTC.Actuator = Actuator
_0_RTC._d_Actuator  = (omniORB.tcInternal.tv_struct, Actuator, Actuator._NP_RepositoryId, "Actuator", "position", omniORB.tcInternal.tv_double, "speed", omniORB.tcInternal.tv_double, "accel", omniORB.tcInternal.tv_double, "current", omniORB.tcInternal.tv_double, "status", omniORB.typeMapping["IDL:RTC/ActArrayActuatorStatus:1.0"])
_0_RTC._tc_Actuator = omniORB.tcInternal.createTypeCode(_0_RTC._d_Actuator)
omniORB.registerType(Actuator._NP_RepositoryId, _0_RTC._d_Actuator, _0_RTC._tc_Actuator)
del Actuator

# typedef ... ActuatorList
class ActuatorList:
    _NP_RepositoryId = "IDL:RTC/ActuatorList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ActuatorList = ActuatorList
_0_RTC._d_ActuatorList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Actuator:1.0"], 0)
_0_RTC._ad_ActuatorList = (omniORB.tcInternal.tv_alias, ActuatorList._NP_RepositoryId, "ActuatorList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Actuator:1.0"], 0))
_0_RTC._tc_ActuatorList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ActuatorList)
omniORB.registerType(ActuatorList._NP_RepositoryId, _0_RTC._ad_ActuatorList, _0_RTC._tc_ActuatorList)
del ActuatorList

# struct ActArrayState
_0_RTC.ActArrayState = omniORB.newEmptyClass()
class ActArrayState (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/ActArrayState:1.0"

    def __init__(self, tm, actuators):
        self.tm = tm
        self.actuators = actuators

_0_RTC.ActArrayState = ActArrayState
_0_RTC._d_ActArrayState  = (omniORB.tcInternal.tv_struct, ActArrayState, ActArrayState._NP_RepositoryId, "ActArrayState", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "actuators", omniORB.typeMapping["IDL:RTC/ActuatorList:1.0"])
_0_RTC._tc_ActArrayState = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayState)
omniORB.registerType(ActArrayState._NP_RepositoryId, _0_RTC._d_ActArrayState, _0_RTC._tc_ActArrayState)
del ActArrayState

# enum ActArrayActuatorType
_0_RTC.ACTARRAY_ACTUATORTYPE_LINEAR = omniORB.EnumItem("ACTARRAY_ACTUATORTYPE_LINEAR", 0)
_0_RTC.ACTARRAY_ACTUATORTYPE_ROTARY = omniORB.EnumItem("ACTARRAY_ACTUATORTYPE_ROTARY", 1)
_0_RTC.ActArrayActuatorType = omniORB.Enum("IDL:RTC/ActArrayActuatorType:1.0", (_0_RTC.ACTARRAY_ACTUATORTYPE_LINEAR, _0_RTC.ACTARRAY_ACTUATORTYPE_ROTARY,))

_0_RTC._d_ActArrayActuatorType  = (omniORB.tcInternal.tv_enum, _0_RTC.ActArrayActuatorType._NP_RepositoryId, "ActArrayActuatorType", _0_RTC.ActArrayActuatorType._items)
_0_RTC._tc_ActArrayActuatorType = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayActuatorType)
omniORB.registerType(_0_RTC.ActArrayActuatorType._NP_RepositoryId, _0_RTC._d_ActArrayActuatorType, _0_RTC._tc_ActArrayActuatorType)

# struct ActArrayActuatorGeometry
_0_RTC.ActArrayActuatorGeometry = omniORB.newEmptyClass()
class ActArrayActuatorGeometry (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/ActArrayActuatorGeometry:1.0"

    def __init__(self, type, length, orientation, axis, minRange, centre, maxRange, homePosition, hasBrakes):
        self.type = type
        self.length = length
        self.orientation = orientation
        self.axis = axis
        self.minRange = minRange
        self.centre = centre
        self.maxRange = maxRange
        self.homePosition = homePosition
        self.hasBrakes = hasBrakes

_0_RTC.ActArrayActuatorGeometry = ActArrayActuatorGeometry
_0_RTC._d_ActArrayActuatorGeometry  = (omniORB.tcInternal.tv_struct, ActArrayActuatorGeometry, ActArrayActuatorGeometry._NP_RepositoryId, "ActArrayActuatorGeometry", "type", omniORB.typeMapping["IDL:RTC/ActArrayActuatorType:1.0"], "length", omniORB.tcInternal.tv_double, "orientation", omniORB.typeMapping["IDL:RTC/Orientation3D:1.0"], "axis", omniORB.typeMapping["IDL:RTC/Vector3D:1.0"], "minRange", omniORB.tcInternal.tv_double, "centre", omniORB.tcInternal.tv_double, "maxRange", omniORB.tcInternal.tv_double, "homePosition", omniORB.tcInternal.tv_double, "hasBrakes", omniORB.tcInternal.tv_boolean)
_0_RTC._tc_ActArrayActuatorGeometry = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayActuatorGeometry)
omniORB.registerType(ActArrayActuatorGeometry._NP_RepositoryId, _0_RTC._d_ActArrayActuatorGeometry, _0_RTC._tc_ActArrayActuatorGeometry)
del ActArrayActuatorGeometry

# typedef ... ActArrayActuatorGeometryList
class ActArrayActuatorGeometryList:
    _NP_RepositoryId = "IDL:RTC/ActArrayActuatorGeometryList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ActArrayActuatorGeometryList = ActArrayActuatorGeometryList
_0_RTC._d_ActArrayActuatorGeometryList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/ActArrayActuatorGeometry:1.0"], 0)
_0_RTC._ad_ActArrayActuatorGeometryList = (omniORB.tcInternal.tv_alias, ActArrayActuatorGeometryList._NP_RepositoryId, "ActArrayActuatorGeometryList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/ActArrayActuatorGeometry:1.0"], 0))
_0_RTC._tc_ActArrayActuatorGeometryList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ActArrayActuatorGeometryList)
omniORB.registerType(ActArrayActuatorGeometryList._NP_RepositoryId, _0_RTC._ad_ActArrayActuatorGeometryList, _0_RTC._tc_ActArrayActuatorGeometryList)
del ActArrayActuatorGeometryList

# struct ActArrayGeometry
_0_RTC.ActArrayGeometry = omniORB.newEmptyClass()
class ActArrayGeometry (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/ActArrayGeometry:1.0"

    def __init__(self, arrayGeometry, actuatorGeometry):
        self.arrayGeometry = arrayGeometry
        self.actuatorGeometry = actuatorGeometry

_0_RTC.ActArrayGeometry = ActArrayGeometry
_0_RTC._d_ActArrayGeometry  = (omniORB.tcInternal.tv_struct, ActArrayGeometry, ActArrayGeometry._NP_RepositoryId, "ActArrayGeometry", "arrayGeometry", omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], "actuatorGeometry", omniORB.typeMapping["IDL:RTC/ActArrayActuatorGeometryList:1.0"])
_0_RTC._tc_ActArrayGeometry = omniORB.tcInternal.createTypeCode(_0_RTC._d_ActArrayGeometry)
omniORB.registerType(ActArrayGeometry._NP_RepositoryId, _0_RTC._d_ActArrayGeometry, _0_RTC._tc_ActArrayGeometry)
del ActArrayGeometry

# struct BumperGeometry
_0_RTC.BumperGeometry = omniORB.newEmptyClass()
class BumperGeometry (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/BumperGeometry:1.0"

    def __init__(self, pose, size, roc):
        self.pose = pose
        self.size = size
        self.roc = roc

_0_RTC.BumperGeometry = BumperGeometry
_0_RTC._d_BumperGeometry  = (omniORB.tcInternal.tv_struct, BumperGeometry, BumperGeometry._NP_RepositoryId, "BumperGeometry", "pose", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], "size", omniORB.typeMapping["IDL:RTC/Size3D:1.0"], "roc", omniORB.tcInternal.tv_double)
_0_RTC._tc_BumperGeometry = omniORB.tcInternal.createTypeCode(_0_RTC._d_BumperGeometry)
omniORB.registerType(BumperGeometry._NP_RepositoryId, _0_RTC._d_BumperGeometry, _0_RTC._tc_BumperGeometry)
del BumperGeometry

# typedef ... BumperGeometryList
class BumperGeometryList:
    _NP_RepositoryId = "IDL:RTC/BumperGeometryList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.BumperGeometryList = BumperGeometryList
_0_RTC._d_BumperGeometryList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/BumperGeometry:1.0"], 0)
_0_RTC._ad_BumperGeometryList = (omniORB.tcInternal.tv_alias, BumperGeometryList._NP_RepositoryId, "BumperGeometryList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/BumperGeometry:1.0"], 0))
_0_RTC._tc_BumperGeometryList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_BumperGeometryList)
omniORB.registerType(BumperGeometryList._NP_RepositoryId, _0_RTC._ad_BumperGeometryList, _0_RTC._tc_BumperGeometryList)
del BumperGeometryList

# struct BumperArrayGeometry
_0_RTC.BumperArrayGeometry = omniORB.newEmptyClass()
class BumperArrayGeometry (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/BumperArrayGeometry:1.0"

    def __init__(self, arrayGeometry, bumperGeometry):
        self.arrayGeometry = arrayGeometry
        self.bumperGeometry = bumperGeometry

_0_RTC.BumperArrayGeometry = BumperArrayGeometry
_0_RTC._d_BumperArrayGeometry  = (omniORB.tcInternal.tv_struct, BumperArrayGeometry, BumperArrayGeometry._NP_RepositoryId, "BumperArrayGeometry", "arrayGeometry", omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], "bumperGeometry", omniORB.typeMapping["IDL:RTC/BumperGeometryList:1.0"])
_0_RTC._tc_BumperArrayGeometry = omniORB.tcInternal.createTypeCode(_0_RTC._d_BumperArrayGeometry)
omniORB.registerType(BumperArrayGeometry._NP_RepositoryId, _0_RTC._d_BumperArrayGeometry, _0_RTC._tc_BumperArrayGeometry)
del BumperArrayGeometry

# struct CameraImage
_0_RTC.CameraImage = omniORB.newEmptyClass()
class CameraImage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/CameraImage:1.0"

    def __init__(self, tm, width, height, bpp, format, fDiv, pixels):
        self.tm = tm
        self.width = width
        self.height = height
        self.bpp = bpp
        self.format = format
        self.fDiv = fDiv
        self.pixels = pixels

_0_RTC.CameraImage = CameraImage
_0_RTC._d_CameraImage  = (omniORB.tcInternal.tv_struct, CameraImage, CameraImage._NP_RepositoryId, "CameraImage", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "width", omniORB.tcInternal.tv_ushort, "height", omniORB.tcInternal.tv_ushort, "bpp", omniORB.tcInternal.tv_ushort, "format", (omniORB.tcInternal.tv_string,0), "fDiv", omniORB.tcInternal.tv_double, "pixels", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_RTC._tc_CameraImage = omniORB.tcInternal.createTypeCode(_0_RTC._d_CameraImage)
omniORB.registerType(CameraImage._NP_RepositoryId, _0_RTC._d_CameraImage, _0_RTC._tc_CameraImage)
del CameraImage

# struct CameraInfo
_0_RTC.CameraInfo = omniORB.newEmptyClass()
class CameraInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/CameraInfo:1.0"

    def __init__(self, focalLength, principalPoint, k1, k2, p1, p2):
        self.focalLength = focalLength
        self.principalPoint = principalPoint
        self.k1 = k1
        self.k2 = k2
        self.p1 = p1
        self.p2 = p2

_0_RTC.CameraInfo = CameraInfo
_0_RTC._d_CameraInfo  = (omniORB.tcInternal.tv_struct, CameraInfo, CameraInfo._NP_RepositoryId, "CameraInfo", "focalLength", omniORB.typeMapping["IDL:RTC/Vector2D:1.0"], "principalPoint", omniORB.typeMapping["IDL:RTC/Point2D:1.0"], "k1", omniORB.tcInternal.tv_double, "k2", omniORB.tcInternal.tv_double, "p1", omniORB.tcInternal.tv_double, "p2", omniORB.tcInternal.tv_double)
_0_RTC._tc_CameraInfo = omniORB.tcInternal.createTypeCode(_0_RTC._d_CameraInfo)
omniORB.registerType(CameraInfo._NP_RepositoryId, _0_RTC._d_CameraInfo, _0_RTC._tc_CameraInfo)
del CameraInfo

# struct FiducialInfo
_0_RTC.FiducialInfo = omniORB.newEmptyClass()
class FiducialInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/FiducialInfo:1.0"

    def __init__(self, id, pose, poseUncertainty, size, sizeUncertainty):
        self.id = id
        self.pose = pose
        self.poseUncertainty = poseUncertainty
        self.size = size
        self.sizeUncertainty = sizeUncertainty

_0_RTC.FiducialInfo = FiducialInfo
_0_RTC._d_FiducialInfo  = (omniORB.tcInternal.tv_struct, FiducialInfo, FiducialInfo._NP_RepositoryId, "FiducialInfo", "id", omniORB.tcInternal.tv_ulong, "pose", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], "poseUncertainty", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], "size", omniORB.typeMapping["IDL:RTC/Size3D:1.0"], "sizeUncertainty", omniORB.typeMapping["IDL:RTC/Size3D:1.0"])
_0_RTC._tc_FiducialInfo = omniORB.tcInternal.createTypeCode(_0_RTC._d_FiducialInfo)
omniORB.registerType(FiducialInfo._NP_RepositoryId, _0_RTC._d_FiducialInfo, _0_RTC._tc_FiducialInfo)
del FiducialInfo

# typedef ... FiducialInfoList
class FiducialInfoList:
    _NP_RepositoryId = "IDL:RTC/FiducialInfoList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.FiducialInfoList = FiducialInfoList
_0_RTC._d_FiducialInfoList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/FiducialInfo:1.0"], 0)
_0_RTC._ad_FiducialInfoList = (omniORB.tcInternal.tv_alias, FiducialInfoList._NP_RepositoryId, "FiducialInfoList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/FiducialInfo:1.0"], 0))
_0_RTC._tc_FiducialInfoList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_FiducialInfoList)
omniORB.registerType(FiducialInfoList._NP_RepositoryId, _0_RTC._ad_FiducialInfoList, _0_RTC._tc_FiducialInfoList)
del FiducialInfoList

# struct Fiducials
_0_RTC.Fiducials = omniORB.newEmptyClass()
class Fiducials (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Fiducials:1.0"

    def __init__(self, tm, fiducialsList):
        self.tm = tm
        self.fiducialsList = fiducialsList

_0_RTC.Fiducials = Fiducials
_0_RTC._d_Fiducials  = (omniORB.tcInternal.tv_struct, Fiducials, Fiducials._NP_RepositoryId, "Fiducials", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "fiducialsList", omniORB.typeMapping["IDL:RTC/FiducialInfoList:1.0"])
_0_RTC._tc_Fiducials = omniORB.tcInternal.createTypeCode(_0_RTC._d_Fiducials)
omniORB.registerType(Fiducials._NP_RepositoryId, _0_RTC._d_Fiducials, _0_RTC._tc_Fiducials)
del Fiducials

# struct FiducialFOV
_0_RTC.FiducialFOV = omniORB.newEmptyClass()
class FiducialFOV (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/FiducialFOV:1.0"

    def __init__(self, minRange, maxRange, viewAngle):
        self.minRange = minRange
        self.maxRange = maxRange
        self.viewAngle = viewAngle

_0_RTC.FiducialFOV = FiducialFOV
_0_RTC._d_FiducialFOV  = (omniORB.tcInternal.tv_struct, FiducialFOV, FiducialFOV._NP_RepositoryId, "FiducialFOV", "minRange", omniORB.tcInternal.tv_double, "maxRange", omniORB.tcInternal.tv_double, "viewAngle", omniORB.tcInternal.tv_double)
_0_RTC._tc_FiducialFOV = omniORB.tcInternal.createTypeCode(_0_RTC._d_FiducialFOV)
omniORB.registerType(FiducialFOV._NP_RepositoryId, _0_RTC._d_FiducialFOV, _0_RTC._tc_FiducialFOV)
del FiducialFOV

# struct GPSTime
_0_RTC.GPSTime = omniORB.newEmptyClass()
class GPSTime (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/GPSTime:1.0"

    def __init__(self, sec, msec):
        self.sec = sec
        self.msec = msec

_0_RTC.GPSTime = GPSTime
_0_RTC._d_GPSTime  = (omniORB.tcInternal.tv_struct, GPSTime, GPSTime._NP_RepositoryId, "GPSTime", "sec", omniORB.tcInternal.tv_ulong, "msec", omniORB.tcInternal.tv_ulong)
_0_RTC._tc_GPSTime = omniORB.tcInternal.createTypeCode(_0_RTC._d_GPSTime)
omniORB.registerType(GPSTime._NP_RepositoryId, _0_RTC._d_GPSTime, _0_RTC._tc_GPSTime)
del GPSTime

# enum GPSFixType
_0_RTC.GPS_FIX_NONE = omniORB.EnumItem("GPS_FIX_NONE", 0)
_0_RTC.GPS_FIX_NORMAL = omniORB.EnumItem("GPS_FIX_NORMAL", 1)
_0_RTC.GPS_FIX_DGPS = omniORB.EnumItem("GPS_FIX_DGPS", 2)
_0_RTC.GPSFixType = omniORB.Enum("IDL:RTC/GPSFixType:1.0", (_0_RTC.GPS_FIX_NONE, _0_RTC.GPS_FIX_NORMAL, _0_RTC.GPS_FIX_DGPS,))

_0_RTC._d_GPSFixType  = (omniORB.tcInternal.tv_enum, _0_RTC.GPSFixType._NP_RepositoryId, "GPSFixType", _0_RTC.GPSFixType._items)
_0_RTC._tc_GPSFixType = omniORB.tcInternal.createTypeCode(_0_RTC._d_GPSFixType)
omniORB.registerType(_0_RTC.GPSFixType._NP_RepositoryId, _0_RTC._d_GPSFixType, _0_RTC._tc_GPSFixType)

# struct GPSData
_0_RTC.GPSData = omniORB.newEmptyClass()
class GPSData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/GPSData:1.0"

    def __init__(self, tm, timeFromGPS, latitude, longitude, altitude, horizontalError, verticalError, heading, horizontalSpeed, verticalSpeed, numSatellites, fixType):
        self.tm = tm
        self.timeFromGPS = timeFromGPS
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.horizontalError = horizontalError
        self.verticalError = verticalError
        self.heading = heading
        self.horizontalSpeed = horizontalSpeed
        self.verticalSpeed = verticalSpeed
        self.numSatellites = numSatellites
        self.fixType = fixType

_0_RTC.GPSData = GPSData
_0_RTC._d_GPSData  = (omniORB.tcInternal.tv_struct, GPSData, GPSData._NP_RepositoryId, "GPSData", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "timeFromGPS", omniORB.typeMapping["IDL:RTC/GPSTime:1.0"], "latitude", omniORB.tcInternal.tv_double, "longitude", omniORB.tcInternal.tv_double, "altitude", omniORB.tcInternal.tv_double, "horizontalError", omniORB.tcInternal.tv_double, "verticalError", omniORB.tcInternal.tv_double, "heading", omniORB.tcInternal.tv_double, "horizontalSpeed", omniORB.tcInternal.tv_double, "verticalSpeed", omniORB.tcInternal.tv_double, "numSatellites", omniORB.tcInternal.tv_ushort, "fixType", omniORB.typeMapping["IDL:RTC/GPSFixType:1.0"])
_0_RTC._tc_GPSData = omniORB.tcInternal.createTypeCode(_0_RTC._d_GPSData)
omniORB.registerType(GPSData._NP_RepositoryId, _0_RTC._d_GPSData, _0_RTC._tc_GPSData)
del GPSData

# enum GripperStatus
_0_RTC.GRIPPER_STATE_OPEN = omniORB.EnumItem("GRIPPER_STATE_OPEN", 0)
_0_RTC.GRIPPER_STATE_CLOSED = omniORB.EnumItem("GRIPPER_STATE_CLOSED", 1)
_0_RTC.GRIPPER_STATE_MOVING = omniORB.EnumItem("GRIPPER_STATE_MOVING", 2)
_0_RTC.GRIPPER_STATE_UNKNOWN = omniORB.EnumItem("GRIPPER_STATE_UNKNOWN", 3)
_0_RTC.GripperStatus = omniORB.Enum("IDL:RTC/GripperStatus:1.0", (_0_RTC.GRIPPER_STATE_OPEN, _0_RTC.GRIPPER_STATE_CLOSED, _0_RTC.GRIPPER_STATE_MOVING, _0_RTC.GRIPPER_STATE_UNKNOWN,))

_0_RTC._d_GripperStatus  = (omniORB.tcInternal.tv_enum, _0_RTC.GripperStatus._NP_RepositoryId, "GripperStatus", _0_RTC.GripperStatus._items)
_0_RTC._tc_GripperStatus = omniORB.tcInternal.createTypeCode(_0_RTC._d_GripperStatus)
omniORB.registerType(_0_RTC.GripperStatus._NP_RepositoryId, _0_RTC._d_GripperStatus, _0_RTC._tc_GripperStatus)

# struct GripperState
_0_RTC.GripperState = omniORB.newEmptyClass()
class GripperState (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/GripperState:1.0"

    def __init__(self, tm, status):
        self.tm = tm
        self.status = status

_0_RTC.GripperState = GripperState
_0_RTC._d_GripperState  = (omniORB.tcInternal.tv_struct, GripperState, GripperState._NP_RepositoryId, "GripperState", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "status", omniORB.typeMapping["IDL:RTC/GripperStatus:1.0"])
_0_RTC._tc_GripperState = omniORB.tcInternal.createTypeCode(_0_RTC._d_GripperState)
omniORB.registerType(GripperState._NP_RepositoryId, _0_RTC._d_GripperState, _0_RTC._tc_GripperState)
del GripperState

# struct GripperGeometry
_0_RTC.GripperGeometry = omniORB.newEmptyClass()
class GripperGeometry (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/GripperGeometry:1.0"

    def __init__(self, exterior, interior):
        self.exterior = exterior
        self.interior = interior

_0_RTC.GripperGeometry = GripperGeometry
_0_RTC._d_GripperGeometry  = (omniORB.tcInternal.tv_struct, GripperGeometry, GripperGeometry._NP_RepositoryId, "GripperGeometry", "exterior", omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], "interior", omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"])
_0_RTC._tc_GripperGeometry = omniORB.tcInternal.createTypeCode(_0_RTC._d_GripperGeometry)
omniORB.registerType(GripperGeometry._NP_RepositoryId, _0_RTC._d_GripperGeometry, _0_RTC._tc_GripperGeometry)
del GripperGeometry

# struct INSData
_0_RTC.INSData = omniORB.newEmptyClass()
class INSData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/INSData:1.0"

    def __init__(self, tm, latitude, longitude, altitude, heightAMSL, velocityENU, orientation):
        self.tm = tm
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.heightAMSL = heightAMSL
        self.velocityENU = velocityENU
        self.orientation = orientation

_0_RTC.INSData = INSData
_0_RTC._d_INSData  = (omniORB.tcInternal.tv_struct, INSData, INSData._NP_RepositoryId, "INSData", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "latitude", omniORB.tcInternal.tv_double, "longitude", omniORB.tcInternal.tv_double, "altitude", omniORB.tcInternal.tv_double, "heightAMSL", omniORB.tcInternal.tv_double, "velocityENU", omniORB.typeMapping["IDL:RTC/Velocity3D:1.0"], "orientation", omniORB.typeMapping["IDL:RTC/Orientation3D:1.0"])
_0_RTC._tc_INSData = omniORB.tcInternal.createTypeCode(_0_RTC._d_INSData)
omniORB.registerType(INSData._NP_RepositoryId, _0_RTC._d_INSData, _0_RTC._tc_INSData)
del INSData

# enum LimbStatus
_0_RTC.LIMB_STATUS_IDLE = omniORB.EnumItem("LIMB_STATUS_IDLE", 0)
_0_RTC.LIMB_STATUS_BRAKED = omniORB.EnumItem("LIMB_STATUS_BRAKED", 1)
_0_RTC.LIMB_STATUS_MOVING = omniORB.EnumItem("LIMB_STATUS_MOVING", 2)
_0_RTC.LIMB_STATUS_OOR = omniORB.EnumItem("LIMB_STATUS_OOR", 3)
_0_RTC.LIMB_STATUS_COLLISION = omniORB.EnumItem("LIMB_STATUS_COLLISION", 4)
_0_RTC.LimbStatus = omniORB.Enum("IDL:RTC/LimbStatus:1.0", (_0_RTC.LIMB_STATUS_IDLE, _0_RTC.LIMB_STATUS_BRAKED, _0_RTC.LIMB_STATUS_MOVING, _0_RTC.LIMB_STATUS_OOR, _0_RTC.LIMB_STATUS_COLLISION,))

_0_RTC._d_LimbStatus  = (omniORB.tcInternal.tv_enum, _0_RTC.LimbStatus._NP_RepositoryId, "LimbStatus", _0_RTC.LimbStatus._items)
_0_RTC._tc_LimbStatus = omniORB.tcInternal.createTypeCode(_0_RTC._d_LimbStatus)
omniORB.registerType(_0_RTC.LimbStatus._NP_RepositoryId, _0_RTC._d_LimbStatus, _0_RTC._tc_LimbStatus)

# struct LimbState
_0_RTC.LimbState = omniORB.newEmptyClass()
class LimbState (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/LimbState:1.0"

    def __init__(self, tm, oapMatrix, status):
        self.tm = tm
        self.oapMatrix = oapMatrix
        self.status = status

_0_RTC.LimbState = LimbState
_0_RTC._d_LimbState  = (omniORB.tcInternal.tv_struct, LimbState, LimbState._NP_RepositoryId, "LimbState", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "oapMatrix", omniORB.typeMapping["IDL:RTC/OAP:1.0"], "status", omniORB.typeMapping["IDL:RTC/LimbStatus:1.0"])
_0_RTC._tc_LimbState = omniORB.tcInternal.createTypeCode(_0_RTC._d_LimbState)
omniORB.registerType(LimbState._NP_RepositoryId, _0_RTC._d_LimbState, _0_RTC._tc_LimbState)
del LimbState

# struct Hypothesis2D
_0_RTC.Hypothesis2D = omniORB.newEmptyClass()
class Hypothesis2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Hypothesis2D:1.0"

    def __init__(self, mean, covariance, weight):
        self.mean = mean
        self.covariance = covariance
        self.weight = weight

_0_RTC.Hypothesis2D = Hypothesis2D
_0_RTC._d_Hypothesis2D  = (omniORB.tcInternal.tv_struct, Hypothesis2D, Hypothesis2D._NP_RepositoryId, "Hypothesis2D", "mean", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"], "covariance", omniORB.typeMapping["IDL:RTC/Covariance2D:1.0"], "weight", omniORB.tcInternal.tv_double)
_0_RTC._tc_Hypothesis2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Hypothesis2D)
omniORB.registerType(Hypothesis2D._NP_RepositoryId, _0_RTC._d_Hypothesis2D, _0_RTC._tc_Hypothesis2D)
del Hypothesis2D

# typedef ... Hypothesis2DList
class Hypothesis2DList:
    _NP_RepositoryId = "IDL:RTC/Hypothesis2DList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.Hypothesis2DList = Hypothesis2DList
_0_RTC._d_Hypothesis2DList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Hypothesis2D:1.0"], 0)
_0_RTC._ad_Hypothesis2DList = (omniORB.tcInternal.tv_alias, Hypothesis2DList._NP_RepositoryId, "Hypothesis2DList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Hypothesis2D:1.0"], 0))
_0_RTC._tc_Hypothesis2DList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_Hypothesis2DList)
omniORB.registerType(Hypothesis2DList._NP_RepositoryId, _0_RTC._ad_Hypothesis2DList, _0_RTC._tc_Hypothesis2DList)
del Hypothesis2DList

# struct Hypotheses2D
_0_RTC.Hypotheses2D = omniORB.newEmptyClass()
class Hypotheses2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Hypotheses2D:1.0"

    def __init__(self, tm, hypotheses):
        self.tm = tm
        self.hypotheses = hypotheses

_0_RTC.Hypotheses2D = Hypotheses2D
_0_RTC._d_Hypotheses2D  = (omniORB.tcInternal.tv_struct, Hypotheses2D, Hypotheses2D._NP_RepositoryId, "Hypotheses2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "hypotheses", omniORB.typeMapping["IDL:RTC/Hypothesis2DList:1.0"])
_0_RTC._tc_Hypotheses2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Hypotheses2D)
omniORB.registerType(Hypotheses2D._NP_RepositoryId, _0_RTC._d_Hypotheses2D, _0_RTC._tc_Hypotheses2D)
del Hypotheses2D

# struct Hypothesis3D
_0_RTC.Hypothesis3D = omniORB.newEmptyClass()
class Hypothesis3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Hypothesis3D:1.0"

    def __init__(self, mean, covariance, weight):
        self.mean = mean
        self.covariance = covariance
        self.weight = weight

_0_RTC.Hypothesis3D = Hypothesis3D
_0_RTC._d_Hypothesis3D  = (omniORB.tcInternal.tv_struct, Hypothesis3D, Hypothesis3D._NP_RepositoryId, "Hypothesis3D", "mean", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], "covariance", omniORB.typeMapping["IDL:RTC/Covariance3D:1.0"], "weight", omniORB.tcInternal.tv_double)
_0_RTC._tc_Hypothesis3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Hypothesis3D)
omniORB.registerType(Hypothesis3D._NP_RepositoryId, _0_RTC._d_Hypothesis3D, _0_RTC._tc_Hypothesis3D)
del Hypothesis3D

# typedef ... Hypothesis3DList
class Hypothesis3DList:
    _NP_RepositoryId = "IDL:RTC/Hypothesis3DList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.Hypothesis3DList = Hypothesis3DList
_0_RTC._d_Hypothesis3DList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Hypothesis3D:1.0"], 0)
_0_RTC._ad_Hypothesis3DList = (omniORB.tcInternal.tv_alias, Hypothesis3DList._NP_RepositoryId, "Hypothesis3DList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Hypothesis3D:1.0"], 0))
_0_RTC._tc_Hypothesis3DList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_Hypothesis3DList)
omniORB.registerType(Hypothesis3DList._NP_RepositoryId, _0_RTC._ad_Hypothesis3DList, _0_RTC._tc_Hypothesis3DList)
del Hypothesis3DList

# struct Hypotheses3D
_0_RTC.Hypotheses3D = omniORB.newEmptyClass()
class Hypotheses3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Hypotheses3D:1.0"

    def __init__(self, tm, hypotheses):
        self.tm = tm
        self.hypotheses = hypotheses

_0_RTC.Hypotheses3D = Hypotheses3D
_0_RTC._d_Hypotheses3D  = (omniORB.tcInternal.tv_struct, Hypotheses3D, Hypotheses3D._NP_RepositoryId, "Hypotheses3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "hypotheses", omniORB.typeMapping["IDL:RTC/Hypothesis3DList:1.0"])
_0_RTC._tc_Hypotheses3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Hypotheses3D)
omniORB.registerType(Hypotheses3D._NP_RepositoryId, _0_RTC._d_Hypotheses3D, _0_RTC._tc_Hypotheses3D)
del Hypotheses3D

# struct OGMapConfig
_0_RTC.OGMapConfig = omniORB.newEmptyClass()
class OGMapConfig (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/OGMapConfig:1.0"

    def __init__(self, xScale, yScale, width, height, origin):
        self.xScale = xScale
        self.yScale = yScale
        self.width = width
        self.height = height
        self.origin = origin

_0_RTC.OGMapConfig = OGMapConfig
_0_RTC._d_OGMapConfig  = (omniORB.tcInternal.tv_struct, OGMapConfig, OGMapConfig._NP_RepositoryId, "OGMapConfig", "xScale", omniORB.tcInternal.tv_double, "yScale", omniORB.tcInternal.tv_double, "width", omniORB.tcInternal.tv_ulong, "height", omniORB.tcInternal.tv_ulong, "origin", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"])
_0_RTC._tc_OGMapConfig = omniORB.tcInternal.createTypeCode(_0_RTC._d_OGMapConfig)
omniORB.registerType(OGMapConfig._NP_RepositoryId, _0_RTC._d_OGMapConfig, _0_RTC._tc_OGMapConfig)
del OGMapConfig

# typedef ... OGMapCells
class OGMapCells:
    _NP_RepositoryId = "IDL:RTC/OGMapCells:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.OGMapCells = OGMapCells
_0_RTC._d_OGMapCells  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_RTC._ad_OGMapCells = (omniORB.tcInternal.tv_alias, OGMapCells._NP_RepositoryId, "OGMapCells", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_RTC._tc_OGMapCells = omniORB.tcInternal.createTypeCode(_0_RTC._ad_OGMapCells)
omniORB.registerType(OGMapCells._NP_RepositoryId, _0_RTC._ad_OGMapCells, _0_RTC._tc_OGMapCells)
del OGMapCells

# struct OGMapTile
_0_RTC.OGMapTile = omniORB.newEmptyClass()
class OGMapTile (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/OGMapTile:1.0"

    def __init__(self, column, row, width, height, cells):
        self.column = column
        self.row = row
        self.width = width
        self.height = height
        self.cells = cells

_0_RTC.OGMapTile = OGMapTile
_0_RTC._d_OGMapTile  = (omniORB.tcInternal.tv_struct, OGMapTile, OGMapTile._NP_RepositoryId, "OGMapTile", "column", omniORB.tcInternal.tv_ulong, "row", omniORB.tcInternal.tv_ulong, "width", omniORB.tcInternal.tv_ulong, "height", omniORB.tcInternal.tv_ulong, "cells", omniORB.typeMapping["IDL:RTC/OGMapCells:1.0"])
_0_RTC._tc_OGMapTile = omniORB.tcInternal.createTypeCode(_0_RTC._d_OGMapTile)
omniORB.registerType(OGMapTile._NP_RepositoryId, _0_RTC._d_OGMapTile, _0_RTC._tc_OGMapTile)
del OGMapTile

# struct PointFeature
_0_RTC.PointFeature = omniORB.newEmptyClass()
class PointFeature (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PointFeature:1.0"

    def __init__(self, probability, position, covariance):
        self.probability = probability
        self.position = position
        self.covariance = covariance

_0_RTC.PointFeature = PointFeature
_0_RTC._d_PointFeature  = (omniORB.tcInternal.tv_struct, PointFeature, PointFeature._NP_RepositoryId, "PointFeature", "probability", omniORB.tcInternal.tv_double, "position", omniORB.typeMapping["IDL:RTC/Point2D:1.0"], "covariance", omniORB.typeMapping["IDL:RTC/PointCovariance2D:1.0"])
_0_RTC._tc_PointFeature = omniORB.tcInternal.createTypeCode(_0_RTC._d_PointFeature)
omniORB.registerType(PointFeature._NP_RepositoryId, _0_RTC._d_PointFeature, _0_RTC._tc_PointFeature)
del PointFeature

# typedef ... PointFeatureList
class PointFeatureList:
    _NP_RepositoryId = "IDL:RTC/PointFeatureList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.PointFeatureList = PointFeatureList
_0_RTC._d_PointFeatureList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/PointFeature:1.0"], 0)
_0_RTC._ad_PointFeatureList = (omniORB.tcInternal.tv_alias, PointFeatureList._NP_RepositoryId, "PointFeatureList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/PointFeature:1.0"], 0))
_0_RTC._tc_PointFeatureList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_PointFeatureList)
omniORB.registerType(PointFeatureList._NP_RepositoryId, _0_RTC._ad_PointFeatureList, _0_RTC._tc_PointFeatureList)
del PointFeatureList

# struct PoseFeature
_0_RTC.PoseFeature = omniORB.newEmptyClass()
class PoseFeature (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PoseFeature:1.0"

    def __init__(self, probability, position, covariance):
        self.probability = probability
        self.position = position
        self.covariance = covariance

_0_RTC.PoseFeature = PoseFeature
_0_RTC._d_PoseFeature  = (omniORB.tcInternal.tv_struct, PoseFeature, PoseFeature._NP_RepositoryId, "PoseFeature", "probability", omniORB.tcInternal.tv_double, "position", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"], "covariance", omniORB.typeMapping["IDL:RTC/Covariance2D:1.0"])
_0_RTC._tc_PoseFeature = omniORB.tcInternal.createTypeCode(_0_RTC._d_PoseFeature)
omniORB.registerType(PoseFeature._NP_RepositoryId, _0_RTC._d_PoseFeature, _0_RTC._tc_PoseFeature)
del PoseFeature

# typedef ... PoseFeatureList
class PoseFeatureList:
    _NP_RepositoryId = "IDL:RTC/PoseFeatureList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.PoseFeatureList = PoseFeatureList
_0_RTC._d_PoseFeatureList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/PoseFeature:1.0"], 0)
_0_RTC._ad_PoseFeatureList = (omniORB.tcInternal.tv_alias, PoseFeatureList._NP_RepositoryId, "PoseFeatureList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/PoseFeature:1.0"], 0))
_0_RTC._tc_PoseFeatureList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_PoseFeatureList)
omniORB.registerType(PoseFeatureList._NP_RepositoryId, _0_RTC._ad_PoseFeatureList, _0_RTC._tc_PoseFeatureList)
del PoseFeatureList

# struct LineFeature
_0_RTC.LineFeature = omniORB.newEmptyClass()
class LineFeature (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/LineFeature:1.0"

    def __init__(self, probability, rho, alpha, covariance, start, end, startSighted, endSighted):
        self.probability = probability
        self.rho = rho
        self.alpha = alpha
        self.covariance = covariance
        self.start = start
        self.end = end
        self.startSighted = startSighted
        self.endSighted = endSighted

_0_RTC.LineFeature = LineFeature
_0_RTC._d_LineFeature  = (omniORB.tcInternal.tv_struct, LineFeature, LineFeature._NP_RepositoryId, "LineFeature", "probability", omniORB.tcInternal.tv_double, "rho", omniORB.tcInternal.tv_double, "alpha", omniORB.tcInternal.tv_double, "covariance", omniORB.typeMapping["IDL:RTC/PointCovariance2D:1.0"], "start", omniORB.typeMapping["IDL:RTC/Point2D:1.0"], "end", omniORB.typeMapping["IDL:RTC/Point2D:1.0"], "startSighted", omniORB.tcInternal.tv_boolean, "endSighted", omniORB.tcInternal.tv_boolean)
_0_RTC._tc_LineFeature = omniORB.tcInternal.createTypeCode(_0_RTC._d_LineFeature)
omniORB.registerType(LineFeature._NP_RepositoryId, _0_RTC._d_LineFeature, _0_RTC._tc_LineFeature)
del LineFeature

# typedef ... LineFeatureList
class LineFeatureList:
    _NP_RepositoryId = "IDL:RTC/LineFeatureList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.LineFeatureList = LineFeatureList
_0_RTC._d_LineFeatureList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/LineFeature:1.0"], 0)
_0_RTC._ad_LineFeatureList = (omniORB.tcInternal.tv_alias, LineFeatureList._NP_RepositoryId, "LineFeatureList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/LineFeature:1.0"], 0))
_0_RTC._tc_LineFeatureList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_LineFeatureList)
omniORB.registerType(LineFeatureList._NP_RepositoryId, _0_RTC._ad_LineFeatureList, _0_RTC._tc_LineFeatureList)
del LineFeatureList

# struct Features
_0_RTC.Features = omniORB.newEmptyClass()
class Features (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Features:1.0"

    def __init__(self, tm, pointFeatures, poseFeatures, lineFeatures):
        self.tm = tm
        self.pointFeatures = pointFeatures
        self.poseFeatures = poseFeatures
        self.lineFeatures = lineFeatures

_0_RTC.Features = Features
_0_RTC._d_Features  = (omniORB.tcInternal.tv_struct, Features, Features._NP_RepositoryId, "Features", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "pointFeatures", omniORB.typeMapping["IDL:RTC/PointFeatureList:1.0"], "poseFeatures", omniORB.typeMapping["IDL:RTC/PoseFeatureList:1.0"], "lineFeatures", omniORB.typeMapping["IDL:RTC/LineFeatureList:1.0"])
_0_RTC._tc_Features = omniORB.tcInternal.createTypeCode(_0_RTC._d_Features)
omniORB.registerType(Features._NP_RepositoryId, _0_RTC._d_Features, _0_RTC._tc_Features)
del Features

# typedef ... MulticameraImageList
class MulticameraImageList:
    _NP_RepositoryId = "IDL:RTC/MulticameraImageList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.MulticameraImageList = MulticameraImageList
_0_RTC._d_MulticameraImageList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/CameraImage:1.0"], 0)
_0_RTC._ad_MulticameraImageList = (omniORB.tcInternal.tv_alias, MulticameraImageList._NP_RepositoryId, "MulticameraImageList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/CameraImage:1.0"], 0))
_0_RTC._tc_MulticameraImageList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_MulticameraImageList)
omniORB.registerType(MulticameraImageList._NP_RepositoryId, _0_RTC._ad_MulticameraImageList, _0_RTC._tc_MulticameraImageList)
del MulticameraImageList

# struct MultiCameraImages
_0_RTC.MultiCameraImages = omniORB.newEmptyClass()
class MultiCameraImages (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/MultiCameraImages:1.0"

    def __init__(self, tm, images):
        self.tm = tm
        self.images = images

_0_RTC.MultiCameraImages = MultiCameraImages
_0_RTC._d_MultiCameraImages  = (omniORB.tcInternal.tv_struct, MultiCameraImages, MultiCameraImages._NP_RepositoryId, "MultiCameraImages", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "images", omniORB.typeMapping["IDL:RTC/MulticameraImageList:1.0"])
_0_RTC._tc_MultiCameraImages = omniORB.tcInternal.createTypeCode(_0_RTC._d_MultiCameraImages)
omniORB.registerType(MultiCameraImages._NP_RepositoryId, _0_RTC._d_MultiCameraImages, _0_RTC._tc_MultiCameraImages)
del MultiCameraImages

# typedef ... MulticameraInfoList
class MulticameraInfoList:
    _NP_RepositoryId = "IDL:RTC/MulticameraInfoList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.MulticameraInfoList = MulticameraInfoList
_0_RTC._d_MulticameraInfoList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/CameraInfo:1.0"], 0)
_0_RTC._ad_MulticameraInfoList = (omniORB.tcInternal.tv_alias, MulticameraInfoList._NP_RepositoryId, "MulticameraInfoList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/CameraInfo:1.0"], 0))
_0_RTC._tc_MulticameraInfoList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_MulticameraInfoList)
omniORB.registerType(MulticameraInfoList._NP_RepositoryId, _0_RTC._ad_MulticameraInfoList, _0_RTC._tc_MulticameraInfoList)
del MulticameraInfoList

# typedef ... MulticameraGeometryList
class MulticameraGeometryList:
    _NP_RepositoryId = "IDL:RTC/MulticameraGeometryList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.MulticameraGeometryList = MulticameraGeometryList
_0_RTC._d_MulticameraGeometryList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], 0)
_0_RTC._ad_MulticameraGeometryList = (omniORB.tcInternal.tv_alias, MulticameraGeometryList._NP_RepositoryId, "MulticameraGeometryList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], 0))
_0_RTC._tc_MulticameraGeometryList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_MulticameraGeometryList)
omniORB.registerType(MulticameraGeometryList._NP_RepositoryId, _0_RTC._ad_MulticameraGeometryList, _0_RTC._tc_MulticameraGeometryList)
del MulticameraGeometryList

# struct MulticameraGeometry
_0_RTC.MulticameraGeometry = omniORB.newEmptyClass()
class MulticameraGeometry (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/MulticameraGeometry:1.0"

    def __init__(self, geometry, cameraGeometries):
        self.geometry = geometry
        self.cameraGeometries = cameraGeometries

_0_RTC.MulticameraGeometry = MulticameraGeometry
_0_RTC._d_MulticameraGeometry  = (omniORB.tcInternal.tv_struct, MulticameraGeometry, MulticameraGeometry._NP_RepositoryId, "MulticameraGeometry", "geometry", omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], "cameraGeometries", omniORB.typeMapping["IDL:RTC/MulticameraGeometryList:1.0"])
_0_RTC._tc_MulticameraGeometry = omniORB.tcInternal.createTypeCode(_0_RTC._d_MulticameraGeometry)
omniORB.registerType(MulticameraGeometry._NP_RepositoryId, _0_RTC._d_MulticameraGeometry, _0_RTC._tc_MulticameraGeometry)
del MulticameraGeometry

# struct Waypoint2D
_0_RTC.Waypoint2D = omniORB.newEmptyClass()
class Waypoint2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Waypoint2D:1.0"

    def __init__(self, target, distanceTolerance, headingTolerance, timeLimit, maxSpeed):
        self.target = target
        self.distanceTolerance = distanceTolerance
        self.headingTolerance = headingTolerance
        self.timeLimit = timeLimit
        self.maxSpeed = maxSpeed

_0_RTC.Waypoint2D = Waypoint2D
_0_RTC._d_Waypoint2D  = (omniORB.tcInternal.tv_struct, Waypoint2D, Waypoint2D._NP_RepositoryId, "Waypoint2D", "target", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"], "distanceTolerance", omniORB.tcInternal.tv_double, "headingTolerance", omniORB.tcInternal.tv_double, "timeLimit", omniORB.typeMapping["IDL:RTC/Time:1.0"], "maxSpeed", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"])
_0_RTC._tc_Waypoint2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Waypoint2D)
omniORB.registerType(Waypoint2D._NP_RepositoryId, _0_RTC._d_Waypoint2D, _0_RTC._tc_Waypoint2D)
del Waypoint2D

# typedef ... Waypoint2DList
class Waypoint2DList:
    _NP_RepositoryId = "IDL:RTC/Waypoint2DList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.Waypoint2DList = Waypoint2DList
_0_RTC._d_Waypoint2DList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Waypoint2D:1.0"], 0)
_0_RTC._ad_Waypoint2DList = (omniORB.tcInternal.tv_alias, Waypoint2DList._NP_RepositoryId, "Waypoint2DList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Waypoint2D:1.0"], 0))
_0_RTC._tc_Waypoint2DList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_Waypoint2DList)
omniORB.registerType(Waypoint2DList._NP_RepositoryId, _0_RTC._ad_Waypoint2DList, _0_RTC._tc_Waypoint2DList)
del Waypoint2DList

# struct Path2D
_0_RTC.Path2D = omniORB.newEmptyClass()
class Path2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Path2D:1.0"

    def __init__(self, tm, waypoints):
        self.tm = tm
        self.waypoints = waypoints

_0_RTC.Path2D = Path2D
_0_RTC._d_Path2D  = (omniORB.tcInternal.tv_struct, Path2D, Path2D._NP_RepositoryId, "Path2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "waypoints", omniORB.typeMapping["IDL:RTC/Waypoint2DList:1.0"])
_0_RTC._tc_Path2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Path2D)
omniORB.registerType(Path2D._NP_RepositoryId, _0_RTC._d_Path2D, _0_RTC._tc_Path2D)
del Path2D

# struct Waypoint3D
_0_RTC.Waypoint3D = omniORB.newEmptyClass()
class Waypoint3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Waypoint3D:1.0"

    def __init__(self, target, distanceTolerance, headingTolerance, timeLimit, maxSpeed):
        self.target = target
        self.distanceTolerance = distanceTolerance
        self.headingTolerance = headingTolerance
        self.timeLimit = timeLimit
        self.maxSpeed = maxSpeed

_0_RTC.Waypoint3D = Waypoint3D
_0_RTC._d_Waypoint3D  = (omniORB.tcInternal.tv_struct, Waypoint3D, Waypoint3D._NP_RepositoryId, "Waypoint3D", "target", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], "distanceTolerance", omniORB.tcInternal.tv_double, "headingTolerance", omniORB.tcInternal.tv_double, "timeLimit", omniORB.typeMapping["IDL:RTC/Time:1.0"], "maxSpeed", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"])
_0_RTC._tc_Waypoint3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Waypoint3D)
omniORB.registerType(Waypoint3D._NP_RepositoryId, _0_RTC._d_Waypoint3D, _0_RTC._tc_Waypoint3D)
del Waypoint3D

# typedef ... Waypoint3DList
class Waypoint3DList:
    _NP_RepositoryId = "IDL:RTC/Waypoint3DList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.Waypoint3DList = Waypoint3DList
_0_RTC._d_Waypoint3DList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Waypoint3D:1.0"], 0)
_0_RTC._ad_Waypoint3DList = (omniORB.tcInternal.tv_alias, Waypoint3DList._NP_RepositoryId, "Waypoint3DList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Waypoint3D:1.0"], 0))
_0_RTC._tc_Waypoint3DList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_Waypoint3DList)
omniORB.registerType(Waypoint3DList._NP_RepositoryId, _0_RTC._ad_Waypoint3DList, _0_RTC._tc_Waypoint3DList)
del Waypoint3DList

# struct Path3D
_0_RTC.Path3D = omniORB.newEmptyClass()
class Path3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Path3D:1.0"

    def __init__(self, tm, waypoints):
        self.tm = tm
        self.waypoints = waypoints

_0_RTC.Path3D = Path3D
_0_RTC._d_Path3D  = (omniORB.tcInternal.tv_struct, Path3D, Path3D._NP_RepositoryId, "Path3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "waypoints", omniORB.typeMapping["IDL:RTC/Waypoint3DList:1.0"])
_0_RTC._tc_Path3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Path3D)
omniORB.registerType(Path3D._NP_RepositoryId, _0_RTC._d_Path3D, _0_RTC._tc_Path3D)
del Path3D

# struct PointCloudPoint
_0_RTC.PointCloudPoint = omniORB.newEmptyClass()
class PointCloudPoint (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PointCloudPoint:1.0"

    def __init__(self, point, colour):
        self.point = point
        self.colour = colour

_0_RTC.PointCloudPoint = PointCloudPoint
_0_RTC._d_PointCloudPoint  = (omniORB.tcInternal.tv_struct, PointCloudPoint, PointCloudPoint._NP_RepositoryId, "PointCloudPoint", "point", omniORB.typeMapping["IDL:RTC/Point3D:1.0"], "colour", omniORB.typeMapping["IDL:RTC/RGBColour:1.0"])
_0_RTC._tc_PointCloudPoint = omniORB.tcInternal.createTypeCode(_0_RTC._d_PointCloudPoint)
omniORB.registerType(PointCloudPoint._NP_RepositoryId, _0_RTC._d_PointCloudPoint, _0_RTC._tc_PointCloudPoint)
del PointCloudPoint

# typedef ... PointCloudPointList
class PointCloudPointList:
    _NP_RepositoryId = "IDL:RTC/PointCloudPointList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.PointCloudPointList = PointCloudPointList
_0_RTC._d_PointCloudPointList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/PointCloudPoint:1.0"], 0)
_0_RTC._ad_PointCloudPointList = (omniORB.tcInternal.tv_alias, PointCloudPointList._NP_RepositoryId, "PointCloudPointList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/PointCloudPoint:1.0"], 0))
_0_RTC._tc_PointCloudPointList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_PointCloudPointList)
omniORB.registerType(PointCloudPointList._NP_RepositoryId, _0_RTC._ad_PointCloudPointList, _0_RTC._tc_PointCloudPointList)
del PointCloudPointList

# struct PointCloud
_0_RTC.PointCloud = omniORB.newEmptyClass()
class PointCloud (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PointCloud:1.0"

    def __init__(self, tm, points):
        self.tm = tm
        self.points = points

_0_RTC.PointCloud = PointCloud
_0_RTC._d_PointCloud  = (omniORB.tcInternal.tv_struct, PointCloud, PointCloud._NP_RepositoryId, "PointCloud", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "points", omniORB.typeMapping["IDL:RTC/PointCloudPointList:1.0"])
_0_RTC._tc_PointCloud = omniORB.tcInternal.createTypeCode(_0_RTC._d_PointCloud)
omniORB.registerType(PointCloud._NP_RepositoryId, _0_RTC._d_PointCloud, _0_RTC._tc_PointCloud)
del PointCloud

# struct PanTiltAngles
_0_RTC.PanTiltAngles = omniORB.newEmptyClass()
class PanTiltAngles (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PanTiltAngles:1.0"

    def __init__(self, tm, pan, tilt):
        self.tm = tm
        self.pan = pan
        self.tilt = tilt

_0_RTC.PanTiltAngles = PanTiltAngles
_0_RTC._d_PanTiltAngles  = (omniORB.tcInternal.tv_struct, PanTiltAngles, PanTiltAngles._NP_RepositoryId, "PanTiltAngles", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "pan", omniORB.tcInternal.tv_double, "tilt", omniORB.tcInternal.tv_double)
_0_RTC._tc_PanTiltAngles = omniORB.tcInternal.createTypeCode(_0_RTC._d_PanTiltAngles)
omniORB.registerType(PanTiltAngles._NP_RepositoryId, _0_RTC._d_PanTiltAngles, _0_RTC._tc_PanTiltAngles)
del PanTiltAngles

# struct PanTiltState
_0_RTC.PanTiltState = omniORB.newEmptyClass()
class PanTiltState (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PanTiltState:1.0"

    def __init__(self, tm, angles, panSpeed, tiltSpeed):
        self.tm = tm
        self.angles = angles
        self.panSpeed = panSpeed
        self.tiltSpeed = tiltSpeed

_0_RTC.PanTiltState = PanTiltState
_0_RTC._d_PanTiltState  = (omniORB.tcInternal.tv_struct, PanTiltState, PanTiltState._NP_RepositoryId, "PanTiltState", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "angles", omniORB.typeMapping["IDL:RTC/PanTiltAngles:1.0"], "panSpeed", omniORB.tcInternal.tv_double, "tiltSpeed", omniORB.tcInternal.tv_double)
_0_RTC._tc_PanTiltState = omniORB.tcInternal.createTypeCode(_0_RTC._d_PanTiltState)
omniORB.registerType(PanTiltState._NP_RepositoryId, _0_RTC._d_PanTiltState, _0_RTC._tc_PanTiltState)
del PanTiltState

# typedef ... ElementGeometryList
class ElementGeometryList:
    _NP_RepositoryId = "IDL:RTC/ElementGeometryList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.ElementGeometryList = ElementGeometryList
_0_RTC._d_ElementGeometryList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], 0)
_0_RTC._ad_ElementGeometryList = (omniORB.tcInternal.tv_alias, ElementGeometryList._NP_RepositoryId, "ElementGeometryList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], 0))
_0_RTC._tc_ElementGeometryList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_ElementGeometryList)
omniORB.registerType(ElementGeometryList._NP_RepositoryId, _0_RTC._ad_ElementGeometryList, _0_RTC._tc_ElementGeometryList)
del ElementGeometryList

# struct RangerGeometry
_0_RTC.RangerGeometry = omniORB.newEmptyClass()
class RangerGeometry (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/RangerGeometry:1.0"

    def __init__(self, geometry, elementGeometries):
        self.geometry = geometry
        self.elementGeometries = elementGeometries

_0_RTC.RangerGeometry = RangerGeometry
_0_RTC._d_RangerGeometry  = (omniORB.tcInternal.tv_struct, RangerGeometry, RangerGeometry._NP_RepositoryId, "RangerGeometry", "geometry", omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], "elementGeometries", omniORB.typeMapping["IDL:RTC/ElementGeometryList:1.0"])
_0_RTC._tc_RangerGeometry = omniORB.tcInternal.createTypeCode(_0_RTC._d_RangerGeometry)
omniORB.registerType(RangerGeometry._NP_RepositoryId, _0_RTC._d_RangerGeometry, _0_RTC._tc_RangerGeometry)
del RangerGeometry

# struct RangerConfig
_0_RTC.RangerConfig = omniORB.newEmptyClass()
class RangerConfig (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/RangerConfig:1.0"

    def __init__(self, minAngle, maxAngle, angularRes, minRange, maxRange, rangeRes, frequency):
        self.minAngle = minAngle
        self.maxAngle = maxAngle
        self.angularRes = angularRes
        self.minRange = minRange
        self.maxRange = maxRange
        self.rangeRes = rangeRes
        self.frequency = frequency

_0_RTC.RangerConfig = RangerConfig
_0_RTC._d_RangerConfig  = (omniORB.tcInternal.tv_struct, RangerConfig, RangerConfig._NP_RepositoryId, "RangerConfig", "minAngle", omniORB.tcInternal.tv_double, "maxAngle", omniORB.tcInternal.tv_double, "angularRes", omniORB.tcInternal.tv_double, "minRange", omniORB.tcInternal.tv_double, "maxRange", omniORB.tcInternal.tv_double, "rangeRes", omniORB.tcInternal.tv_double, "frequency", omniORB.tcInternal.tv_double)
_0_RTC._tc_RangerConfig = omniORB.tcInternal.createTypeCode(_0_RTC._d_RangerConfig)
omniORB.registerType(RangerConfig._NP_RepositoryId, _0_RTC._d_RangerConfig, _0_RTC._tc_RangerConfig)
del RangerConfig

# typedef ... RangeList
class RangeList:
    _NP_RepositoryId = "IDL:RTC/RangeList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.RangeList = RangeList
_0_RTC._d_RangeList  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0_RTC._ad_RangeList = (omniORB.tcInternal.tv_alias, RangeList._NP_RepositoryId, "RangeList", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_RTC._tc_RangeList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_RangeList)
omniORB.registerType(RangeList._NP_RepositoryId, _0_RTC._ad_RangeList, _0_RTC._tc_RangeList)
del RangeList

# struct RangeData
_0_RTC.RangeData = omniORB.newEmptyClass()
class RangeData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/RangeData:1.0"

    def __init__(self, tm, ranges, geometry, config):
        self.tm = tm
        self.ranges = ranges
        self.geometry = geometry
        self.config = config

_0_RTC.RangeData = RangeData
_0_RTC._d_RangeData  = (omniORB.tcInternal.tv_struct, RangeData, RangeData._NP_RepositoryId, "RangeData", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "ranges", omniORB.typeMapping["IDL:RTC/RangeList:1.0"], "geometry", omniORB.typeMapping["IDL:RTC/RangerGeometry:1.0"], "config", omniORB.typeMapping["IDL:RTC/RangerConfig:1.0"])
_0_RTC._tc_RangeData = omniORB.tcInternal.createTypeCode(_0_RTC._d_RangeData)
omniORB.registerType(RangeData._NP_RepositoryId, _0_RTC._d_RangeData, _0_RTC._tc_RangeData)
del RangeData

# typedef ... IntensityList
class IntensityList:
    _NP_RepositoryId = "IDL:RTC/IntensityList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.IntensityList = IntensityList
_0_RTC._d_IntensityList  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0_RTC._ad_IntensityList = (omniORB.tcInternal.tv_alias, IntensityList._NP_RepositoryId, "IntensityList", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_RTC._tc_IntensityList = omniORB.tcInternal.createTypeCode(_0_RTC._ad_IntensityList)
omniORB.registerType(IntensityList._NP_RepositoryId, _0_RTC._ad_IntensityList, _0_RTC._tc_IntensityList)
del IntensityList

# struct IntensityData
_0_RTC.IntensityData = omniORB.newEmptyClass()
class IntensityData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/IntensityData:1.0"

    def __init__(self, tm, ranges, geometry, config):
        self.tm = tm
        self.ranges = ranges
        self.geometry = geometry
        self.config = config

_0_RTC.IntensityData = IntensityData
_0_RTC._d_IntensityData  = (omniORB.tcInternal.tv_struct, IntensityData, IntensityData._NP_RepositoryId, "IntensityData", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "ranges", omniORB.typeMapping["IDL:RTC/IntensityList:1.0"], "geometry", omniORB.typeMapping["IDL:RTC/RangerGeometry:1.0"], "config", omniORB.typeMapping["IDL:RTC/RangerConfig:1.0"])
_0_RTC._tc_IntensityData = omniORB.tcInternal.createTypeCode(_0_RTC._d_IntensityData)
omniORB.registerType(IntensityData._NP_RepositoryId, _0_RTC._d_IntensityData, _0_RTC._tc_IntensityData)
del IntensityData

# typedef ... RFIDTagData
class RFIDTagData:
    _NP_RepositoryId = "IDL:RTC/RFIDTagData:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.RFIDTagData = RFIDTagData
_0_RTC._d_RFIDTagData  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_RTC._ad_RFIDTagData = (omniORB.tcInternal.tv_alias, RFIDTagData._NP_RepositoryId, "RFIDTagData", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_RTC._tc_RFIDTagData = omniORB.tcInternal.createTypeCode(_0_RTC._ad_RFIDTagData)
omniORB.registerType(RFIDTagData._NP_RepositoryId, _0_RTC._ad_RFIDTagData, _0_RTC._tc_RFIDTagData)
del RFIDTagData

#
# End of module "RTC"
#
__name__ = "rtctree.rtc.InterfaceDataTypes_idl"

_exported_modules = ( "rtctree.rtc.RTC", )

# The end.
