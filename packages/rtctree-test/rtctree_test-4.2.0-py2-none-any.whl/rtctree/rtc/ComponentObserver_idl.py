# Python stubs generated by omniidl from C:\Users\TyouK\Documents\GitHub\rtctree\idl\ComponentObserver.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "SDOPackage.idl"
import rtctree.rtc.SDOPackage_idl
_0_SDOPackage = omniORB.openModule("rtctree.rtc.SDOPackage")
_0_SDOPackage__POA = omniORB.openModule("rtctree.rtc.SDOPackage__POA")

# #include "RTC.idl"
import rtctree.rtc.RTC_idl
_0_RTC = omniORB.openModule("rtctree.rtc.RTC")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA")

#
# Start of module "RTC"
#
__name__ = "rtctree.rtc.RTC"
_0_RTC = omniORB.openModule("rtctree.rtc.RTC", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\ComponentObserver.idl")
_0_RTC__POA = omniORB.openModule("rtctree.rtc.RTC__POA", r"C:\Users\TyouK\Documents\GitHub\rtctree\idl\ComponentObserver.idl")


# enum StatusKind
_0_RTC.COMPONENT_PROFILE = omniORB.EnumItem("COMPONENT_PROFILE", 0)
_0_RTC.RTC_STATUS = omniORB.EnumItem("RTC_STATUS", 1)
_0_RTC.EC_STATUS = omniORB.EnumItem("EC_STATUS", 2)
_0_RTC.PORT_PROFILE = omniORB.EnumItem("PORT_PROFILE", 3)
_0_RTC.CONFIGURATION = omniORB.EnumItem("CONFIGURATION", 4)
_0_RTC.RTC_HEARTBEAT = omniORB.EnumItem("RTC_HEARTBEAT", 5)
_0_RTC.EC_HEARTBEAT = omniORB.EnumItem("EC_HEARTBEAT", 6)
_0_RTC.FSM_PROFILE = omniORB.EnumItem("FSM_PROFILE", 7)
_0_RTC.FSM_STATUS = omniORB.EnumItem("FSM_STATUS", 8)
_0_RTC.FSM_STRUCTURE = omniORB.EnumItem("FSM_STRUCTURE", 9)
_0_RTC.USER_DEFINED = omniORB.EnumItem("USER_DEFINED", 10)
_0_RTC.STATUS_KIND_NUM = omniORB.EnumItem("STATUS_KIND_NUM", 11)
_0_RTC.StatusKind = omniORB.Enum("IDL:omg.org/RTC/StatusKind:1.0", (_0_RTC.COMPONENT_PROFILE, _0_RTC.RTC_STATUS, _0_RTC.EC_STATUS, _0_RTC.PORT_PROFILE, _0_RTC.CONFIGURATION, _0_RTC.RTC_HEARTBEAT, _0_RTC.EC_HEARTBEAT, _0_RTC.FSM_PROFILE, _0_RTC.FSM_STATUS, _0_RTC.FSM_STRUCTURE, _0_RTC.USER_DEFINED, _0_RTC.STATUS_KIND_NUM,))

_0_RTC._d_StatusKind  = (omniORB.tcInternal.tv_enum, _0_RTC.StatusKind._NP_RepositoryId, "StatusKind", _0_RTC.StatusKind._items)
_0_RTC._tc_StatusKind = omniORB.tcInternal.createTypeCode(_0_RTC._d_StatusKind)
omniORB.registerType(_0_RTC.StatusKind._NP_RepositoryId, _0_RTC._d_StatusKind, _0_RTC._tc_StatusKind)

# interface ComponentObserver
_0_RTC._d_ComponentObserver = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/ComponentObserver:1.0", "ComponentObserver")
omniORB.typeMapping["IDL:omg.org/RTC/ComponentObserver:1.0"] = _0_RTC._d_ComponentObserver
_0_RTC.ComponentObserver = omniORB.newEmptyClass()
class ComponentObserver (_0_SDOPackage.SDOService):
    _NP_RepositoryId = _0_RTC._d_ComponentObserver[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.ComponentObserver = ComponentObserver
_0_RTC._tc_ComponentObserver = omniORB.tcInternal.createTypeCode(_0_RTC._d_ComponentObserver)
omniORB.registerType(ComponentObserver._NP_RepositoryId, _0_RTC._d_ComponentObserver, _0_RTC._tc_ComponentObserver)

# ComponentObserver operations and attributes
ComponentObserver._d_update_status = ((omniORB.typeMapping["IDL:omg.org/RTC/StatusKind:1.0"], (omniORB.tcInternal.tv_string,0)), None, None)

# ComponentObserver object reference
class _objref_ComponentObserver (_0_SDOPackage._objref_SDOService):
    _NP_RepositoryId = ComponentObserver._NP_RepositoryId

    def __init__(self, obj):
        _0_SDOPackage._objref_SDOService.__init__(self, obj)

    def update_status(self, *args):
        return self._obj.invoke("update_status", _0_RTC.ComponentObserver._d_update_status, args)

omniORB.registerObjref(ComponentObserver._NP_RepositoryId, _objref_ComponentObserver)
_0_RTC._objref_ComponentObserver = _objref_ComponentObserver
del ComponentObserver, _objref_ComponentObserver

# ComponentObserver skeleton
__name__ = "rtctree.rtc.RTC__POA"
class ComponentObserver (_0_SDOPackage__POA.SDOService):
    _NP_RepositoryId = _0_RTC.ComponentObserver._NP_RepositoryId


    _omni_op_d = {"update_status": _0_RTC.ComponentObserver._d_update_status}
    _omni_op_d.update(_0_SDOPackage__POA.SDOService._omni_op_d)

ComponentObserver._omni_skeleton = ComponentObserver
_0_RTC__POA.ComponentObserver = ComponentObserver
omniORB.registerSkeleton(ComponentObserver._NP_RepositoryId, ComponentObserver)
del ComponentObserver
__name__ = "rtctree.rtc.RTC"

#
# End of module "RTC"
#
__name__ = "rtctree.rtc.ComponentObserver_idl"

_exported_modules = ( "rtctree.rtc.RTC", )

# The end.
